
Node_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080072e0  080072e0  000172e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800773c  0800773c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800773c  0800773c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800773c  0800773c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001e0  08007924  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08007924  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cee  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ace  00000000  00000000  00030ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00034b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a13c  00000000  00000000  00035b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142b2  00000000  00000000  0004fc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9ac  00000000  00000000  00063f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f28ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  000f290c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080072c8 	.word	0x080072c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080072c8 	.word	0x080072c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2uiz>:
 8000d44:	0042      	lsls	r2, r0, #1
 8000d46:	d20e      	bcs.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30b      	bcc.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d409      	bmi.n	8000d6c <__aeabi_f2uiz+0x28>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2uiz+0x32>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d102      	bne.n	8000d7c <__aeabi_f2uiz+0x38>
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	4770      	bx	lr
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <Delay_us>:
 */


#include "DHT.h"

void Delay_us(DHT_Name* DHT, uint16_t duration){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(DHT->timer, 0);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(DHT->timer) < duration){}
 8000d9a:	bf00      	nop
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3f8      	bcc.n	8000d9c <Delay_us+0x18>
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <SetPinIn>:

void SetPinIn(DHT_Name* DHT){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	889b      	ldrh	r3, [r3, #4]
 8000dd0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fb13 	bl	8002410 <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <SetPinOut>:

void SetPinOut(DHT_Name* DHT){
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f107 0208 	add.w	r2, r7, #8
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 faf3 	bl	8002410 <HAL_GPIO_Init>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <WritePin>:

static void WritePin(DHT_Name* DHT, uint8_t value){
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->DHT_port, DHT->DHT_pin, value);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	889b      	ldrh	r3, [r3, #4]
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f001 fc7c 	bl	8002746 <HAL_GPIO_WritePin>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <ReadPin>:

static uint8_t ReadPin(DHT_Name* DHT){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(DHT->DHT_port, DHT->DHT_pin);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f001 fc55 	bl	8002718 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <DHT_Init>:

//===========================HIGH LEVEL FUNCTION===========================//
void DHT_Init(DHT_Name* DHT, GPIO_TypeDef* DHT_port, uint16_t DHT_pin, TIM_HandleTypeDef* timer){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80fb      	strh	r3, [r7, #6]
	DHT->DHT_port = DHT_port;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	601a      	str	r2, [r3, #0]
	DHT->DHT_pin = DHT_pin;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	809a      	strh	r2, [r3, #4]
	DHT->timer = timer;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	609a      	str	r2, [r3, #8]

	DHT->humi = DHT->temp = 0;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

	SetPinOut(DHT);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f7ff ffa1 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 1);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff ffbd 	bl	8000e32 <WritePin>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <DHT_Read>:


void DHT_Read(DHT_Name* DHT){
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	uint16_t time_out = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	82fb      	strh	r3, [r7, #22]
	uint8_t data[5] = {0, 0, 0, 0, 0};
 8000ecc:	4a84      	ldr	r2, [pc, #528]	; (80010e0 <DHT_Read+0x220>)
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed6:	6018      	str	r0, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	7019      	strb	r1, [r3, #0]
	data[2] integral Temp
	data[3] decimal Temp
	data[4] SUM
*/

	DHT->humi = DHT->temp = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]

	SetPinOut(DHT);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff80 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 0);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff9c 	bl	8000e32 <WritePin>
	HAL_Delay(20);
 8000efa:	2014      	movs	r0, #20
 8000efc:	f001 f93a 	bl	8002174 <HAL_Delay>


	SetPinIn(DHT);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff58 	bl	8000db6 <SetPinIn>

	Delay_us(DHT, 40);
 8000f06:	2128      	movs	r1, #40	; 0x28
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff3b 	bl	8000d84 <Delay_us>

	if(!ReadPin(DHT)){
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa1 	bl	8000e56 <ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <DHT_Read+0x62>
		Delay_us(DHT, 80);
 8000f1a:	2150      	movs	r1, #80	; 0x50
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff31 	bl	8000d84 <Delay_us>
	}

	for(time_out = 0; (time_out < 100) && ReadPin(DHT); time_out++);
 8000f22:	2300      	movs	r3, #0
 8000f24:	82fb      	strh	r3, [r7, #22]
 8000f26:	e002      	b.n	8000f2e <DHT_Read+0x6e>
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	82fb      	strh	r3, [r7, #22]
 8000f2e:	8afb      	ldrh	r3, [r7, #22]
 8000f30:	2b63      	cmp	r3, #99	; 0x63
 8000f32:	d805      	bhi.n	8000f40 <DHT_Read+0x80>
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff8e 	bl	8000e56 <ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f3      	bne.n	8000f28 <DHT_Read+0x68>

//	start DHT successful => read
	for(uint8_t i = 0; i < 5; i++){
 8000f40:	2300      	movs	r3, #0
 8000f42:	757b      	strb	r3, [r7, #21]
 8000f44:	e060      	b.n	8001008 <DHT_Read+0x148>
		for(uint8_t j = 0; j < 8; j++){
 8000f46:	2300      	movs	r3, #0
 8000f48:	753b      	strb	r3, [r7, #20]
 8000f4a:	e057      	b.n	8000ffc <DHT_Read+0x13c>

			for(time_out = 0; (time_out < 100) && !ReadPin(DHT); time_out++);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	82fb      	strh	r3, [r7, #22]
 8000f50:	e002      	b.n	8000f58 <DHT_Read+0x98>
 8000f52:	8afb      	ldrh	r3, [r7, #22]
 8000f54:	3301      	adds	r3, #1
 8000f56:	82fb      	strh	r3, [r7, #22]
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	2b63      	cmp	r3, #99	; 0x63
 8000f5c:	d805      	bhi.n	8000f6a <DHT_Read+0xaa>
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff79 	bl	8000e56 <ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f3      	beq.n	8000f52 <DHT_Read+0x92>

			Delay_us(DHT, 40);
 8000f6a:	2128      	movs	r1, #40	; 0x28
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff09 	bl	8000d84 <Delay_us>

			if(!ReadPin(DHT)) data[i] &= (~(1<<(7-j)));
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff6f 	bl	8000e56 <ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d117      	bne.n	8000fae <DHT_Read+0xee>
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	3318      	adds	r3, #24
 8000f82:	443b      	add	r3, r7
 8000f84:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f88:	b25a      	sxtb	r2, r3
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	f1c3 0307 	rsb	r3, r3, #7
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	b25a      	sxtb	r2, r3
 8000fa0:	7d7b      	ldrb	r3, [r7, #21]
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	443b      	add	r3, r7
 8000fa8:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000fac:	e014      	b.n	8000fd8 <DHT_Read+0x118>
			else data[i] |= (1 << (7-j));
 8000fae:	7d7b      	ldrb	r3, [r7, #21]
 8000fb0:	3318      	adds	r3, #24
 8000fb2:	443b      	add	r3, r7
 8000fb4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	7d3b      	ldrb	r3, [r7, #20]
 8000fbc:	f1c3 0307 	rsb	r3, r3, #7
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	7d7b      	ldrb	r3, [r7, #21]
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	3318      	adds	r3, #24
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f803 2c10 	strb.w	r2, [r3, #-16]


			for(time_out = 0; (time_out < 100) && ReadPin(DHT); time_out++);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	82fb      	strh	r3, [r7, #22]
 8000fdc:	e002      	b.n	8000fe4 <DHT_Read+0x124>
 8000fde:	8afb      	ldrh	r3, [r7, #22]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	82fb      	strh	r3, [r7, #22]
 8000fe4:	8afb      	ldrh	r3, [r7, #22]
 8000fe6:	2b63      	cmp	r3, #99	; 0x63
 8000fe8:	d805      	bhi.n	8000ff6 <DHT_Read+0x136>
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff33 	bl	8000e56 <ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f3      	bne.n	8000fde <DHT_Read+0x11e>
		for(uint8_t j = 0; j < 8; j++){
 8000ff6:	7d3b      	ldrb	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	753b      	strb	r3, [r7, #20]
 8000ffc:	7d3b      	ldrb	r3, [r7, #20]
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	d9a4      	bls.n	8000f4c <DHT_Read+0x8c>
	for(uint8_t i = 0; i < 5; i++){
 8001002:	7d7b      	ldrb	r3, [r7, #21]
 8001004:	3301      	adds	r3, #1
 8001006:	757b      	strb	r3, [r7, #21]
 8001008:	7d7b      	ldrb	r3, [r7, #21]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d99b      	bls.n	8000f46 <DHT_Read+0x86>
		}
	}

	if(data[4] != (data[0] + data[1] + data[2] + data[3]))
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	7a3b      	ldrb	r3, [r7, #8]
 8001014:	4619      	mov	r1, r3
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	440b      	add	r3, r1
 800101a:	7ab9      	ldrb	r1, [r7, #10]
 800101c:	440b      	add	r3, r1
 800101e:	7af9      	ldrb	r1, [r7, #11]
 8001020:	440b      	add	r3, r1
 8001022:	429a      	cmp	r2, r3
 8001024:	d157      	bne.n	80010d6 <DHT_Read+0x216>
		return;

	humi = (float)(data[0] * 1.0 + data[1] / 10.0);
 8001026:	7a3b      	ldrb	r3, [r7, #8]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f9eb 	bl	8000404 <__aeabi_i2d>
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	7a7b      	ldrb	r3, [r7, #9]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f9e5 	bl	8000404 <__aeabi_i2d>
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <DHT_Read+0x224>)
 8001040:	f7ff fb74 	bl	800072c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff f88e 	bl	800016c <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd16 	bl	8000a88 <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fe70 	bl	8000d44 <__aeabi_f2uiz>
 8001064:	4603      	mov	r3, r0
 8001066:	827b      	strh	r3, [r7, #18]
	temp = (float)(data[2] * 1.0 + data[3] / 10.0);
 8001068:	7abb      	ldrb	r3, [r7, #10]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f9ca 	bl	8000404 <__aeabi_i2d>
 8001070:	4604      	mov	r4, r0
 8001072:	460d      	mov	r5, r1
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f9c4 	bl	8000404 <__aeabi_i2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <DHT_Read+0x224>)
 8001082:	f7ff fb53 	bl	800072c <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff f86d 	bl	800016c <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fcf5 	bl	8000a88 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe4f 	bl	8000d44 <__aeabi_f2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	823b      	strh	r3, [r7, #16]

	DHT->humi = humi;
 80010aa:	8a7b      	ldrh	r3, [r7, #18]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fdf1 	bl	8000c94 <__aeabi_ui2f>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	611a      	str	r2, [r3, #16]
	DHT->temp = temp;
 80010b8:	8a3b      	ldrh	r3, [r7, #16]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdea 	bl	8000c94 <__aeabi_ui2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60da      	str	r2, [r3, #12]

	SetPinOut(DHT);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fe93 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 1);
 80010cc:	2101      	movs	r1, #1
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff feaf 	bl	8000e32 <WritePin>
 80010d4:	e000      	b.n	80010d8 <DHT_Read+0x218>
		return;
 80010d6:	bf00      	nop
}
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bdb0      	pop	{r4, r5, r7, pc}
 80010de:	bf00      	nop
 80010e0:	080072e0 	.word	0x080072e0
 80010e4:	40240000 	.word	0x40240000

080010e8 <DHT_GetTemp>:

float DHT_GetTemp(DHT_Name* DHT){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
//	return 30.4;
//	return random()%100 + random()%10 / 10.0;
	return DHT->temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <DHT_GetHumi>:

float DHT_GetHumi(DHT_Name* DHT){
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
//	return 50.4;
//	return random()%100 + random()%10 / 10.0;
	return DHT->humi;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <ConvertToJsonString>:

uint8_t mode;
char json_str[200];


uint8_t ConvertToJsonString(void){
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af06      	add	r7, sp, #24
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
										"\"GAS\":%u,\"SMOKE\":%u}#",
										NODE_ID, _data.temp, _data.humid,
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <ConvertToJsonString+0x4c>)
 800111c:	685b      	ldr	r3, [r3, #4]
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f982 	bl	8000428 <__aeabi_f2d>
 8001124:	4604      	mov	r4, r0
 8001126:	460d      	mov	r5, r1
										NODE_ID, _data.temp, _data.humid,
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <ConvertToJsonString+0x4c>)
 800112a:	689b      	ldr	r3, [r3, #8]
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f97b 	bl	8000428 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
										_data.gas, _data.smoke);
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <ConvertToJsonString+0x4c>)
 8001138:	8989      	ldrh	r1, [r1, #12]
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800113a:	4608      	mov	r0, r1
										_data.gas, _data.smoke);
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <ConvertToJsonString+0x4c>)
 800113e:	89c9      	ldrh	r1, [r1, #14]
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 8001140:	9105      	str	r1, [sp, #20]
 8001142:	9004      	str	r0, [sp, #16]
 8001144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001148:	e9cd 4500 	strd	r4, r5, [sp]
 800114c:	2200      	movs	r2, #0
 800114e:	4905      	ldr	r1, [pc, #20]	; (8001164 <ConvertToJsonString+0x50>)
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <ConvertToJsonString+0x54>)
 8001152:	f003 ff33 	bl	8004fbc <siprintf>
 8001156:	4603      	mov	r3, r0
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	200002c8 	.word	0x200002c8
 8001164:	080072e8 	.word	0x080072e8
 8001168:	20000200 	.word	0x20000200

0800116c <FSM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void FSM_Init(void){
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	mode = INIT;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <FSM_Init+0x14>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200001fc 	.word	0x200001fc

08001184 <FSM_SystemControl>:
void FSM_SystemControl(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	switch(mode){
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <FSM_SystemControl+0xac>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d016      	beq.n	80011be <FSM_SystemControl+0x3a>
 8001190:	2b02      	cmp	r3, #2
 8001192:	dc46      	bgt.n	8001222 <FSM_SystemControl+0x9e>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <FSM_SystemControl+0x1a>
 8001198:	2b01      	cmp	r3, #1
 800119a:	d007      	beq.n	80011ac <FSM_SystemControl+0x28>
 800119c:	e041      	b.n	8001222 <FSM_SystemControl+0x9e>
	case INIT:

		_time_read_data = TIME_READ_DATA;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <FSM_SystemControl+0xb0>)
 80011a0:	2205      	movs	r2, #5
 80011a2:	801a      	strh	r2, [r3, #0]

		mode = SYS_WAKEUP;
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <FSM_SystemControl+0xac>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	701a      	strb	r2, [r3, #0]
		break;
 80011aa:	e03e      	b.n	800122a <FSM_SystemControl+0xa6>
	case SYS_SLEEP:

		CLCD_PrintStringBuffer(0, 0, "SLEEP ");
 80011ac:	4a22      	ldr	r2, [pc, #136]	; (8001238 <FSM_SystemControl+0xb4>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 f9cd 	bl	8001550 <CLCD_PrintStringBuffer>



		mode = SYS_WAKEUP;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <FSM_SystemControl+0xac>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	701a      	strb	r2, [r3, #0]
		break;
 80011bc:	e035      	b.n	800122a <FSM_SystemControl+0xa6>
	case SYS_WAKEUP:

		CLCD_PrintStringBuffer(0, 0, "WAKEUP");
 80011be:	4a1f      	ldr	r2, [pc, #124]	; (800123c <FSM_SystemControl+0xb8>)
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f9c4 	bl	8001550 <CLCD_PrintStringBuffer>
		if(_time_read_data == 0){
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <FSM_SystemControl+0xb0>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d124      	bne.n	800121a <FSM_SystemControl+0x96>
			_time_read_data = TIME_READ_DATA;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <FSM_SystemControl+0xb0>)
 80011d2:	2205      	movs	r2, #5
 80011d4:	801a      	strh	r2, [r3, #0]

			DHT_Read(&_dht);
 80011d6:	481a      	ldr	r0, [pc, #104]	; (8001240 <FSM_SystemControl+0xbc>)
 80011d8:	f7ff fe72 	bl	8000ec0 <DHT_Read>

			_data.temp = DHT_GetTemp(&_dht);
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <FSM_SystemControl+0xbc>)
 80011de:	f7ff ff83 	bl	80010e8 <DHT_GetTemp>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <FSM_SystemControl+0xc0>)
 80011e6:	6053      	str	r3, [r2, #4]
			_data.humid = DHT_GetHumi(&_dht);
 80011e8:	4815      	ldr	r0, [pc, #84]	; (8001240 <FSM_SystemControl+0xbc>)
 80011ea:	f7ff ff88 	bl	80010fe <DHT_GetHumi>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <FSM_SystemControl+0xc0>)
 80011f2:	6093      	str	r3, [r2, #8]

			_data.gas = IN_GetValue_Gas();
 80011f4:	f000 f82a 	bl	800124c <IN_GetValue_Gas>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <FSM_SystemControl+0xc0>)
 80011fe:	819a      	strh	r2, [r3, #12]
			_data.smoke = IN_GetValue_Smoke();
 8001200:	f000 f82e 	bl	8001260 <IN_GetValue_Smoke>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <FSM_SystemControl+0xc0>)
 800120a:	81da      	strh	r2, [r3, #14]
			ZB_SendMsg(json_str, ConvertToJsonString());
 800120c:	f7ff ff82 	bl	8001114 <ConvertToJsonString>
 8001210:	4603      	mov	r3, r0
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <FSM_SystemControl+0xc4>)
 8001216:	f000 ff05 	bl	8002024 <ZB_SendMsg>
		}


		mode = SYS_SLEEP;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <FSM_SystemControl+0xac>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
		break;
 8001220:	e003      	b.n	800122a <FSM_SystemControl+0xa6>
	default:
		mode = INIT;
 8001222:	4b03      	ldr	r3, [pc, #12]	; (8001230 <FSM_SystemControl+0xac>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
	}
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001fc 	.word	0x200001fc
 8001234:	200002ec 	.word	0x200002ec
 8001238:	08007328 	.word	0x08007328
 800123c:	08007330 	.word	0x08007330
 8001240:	200002d8 	.word	0x200002d8
 8001244:	200002c8 	.word	0x200002c8
 8001248:	20000200 	.word	0x20000200

0800124c <IN_GetValue_Gas>:

//	HAL_ADC_Start_DMA(hadc, (uint32_t*) ADC_value, 2);
//}


uint16_t IN_GetValue_Gas(void){
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	return ADC_value[1];
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <IN_GetValue_Gas+0x10>)
 8001252:	885b      	ldrh	r3, [r3, #2]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	200002f0 	.word	0x200002f0

08001260 <IN_GetValue_Smoke>:

uint16_t IN_GetValue_Smoke(void){
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	return ADC_value[0];
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <IN_GetValue_Smoke+0x10>)
 8001266:	881b      	ldrh	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	200002f0 	.word	0x200002f0

08001274 <Delay>:

CLCD_I2C_Name LCD;

uint8_t currentCol, currentRow;

static void Delay(uint16_t time){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 ff77 	bl	8002174 <HAL_Delay>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <WriteI2C>:


static void WriteI2C(uint8_t data, uint8_t mode){
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af02      	add	r7, sp, #8
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f023 030f 	bic.w	r3, r3, #15
 80012a6:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <WriteI2C+0x90>)
 80012b0:	7adb      	ldrb	r3, [r3, #11]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d107      	bne.n	80012dc <WriteI2C+0x4c>
		dataH |= LCD_RS;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 80012d4:	7bbb      	ldrb	r3, [r7, #14]
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <WriteI2C+0x90>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <WriteI2C+0x90>)
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	b29b      	uxth	r3, r3
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b299      	uxth	r1, r3
 8001306:	f107 0208 	add.w	r2, r7, #8
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2304      	movs	r3, #4
 8001312:	f001 fb8d 	bl	8002a30 <HAL_I2C_Master_Transmit>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200002f8 	.word	0x200002f8

08001324 <CLCD_Init>:



//===========================HIGH LEVEL FUNCTION===========================//
void CLCD_Init(I2C_HandleTypeDef* I2C, uint8_t address, uint8_t row, uint8_t col){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4603      	mov	r3, r0
 8001334:	70fb      	strb	r3, [r7, #3]
 8001336:	460b      	mov	r3, r1
 8001338:	70bb      	strb	r3, [r7, #2]
 800133a:	4613      	mov	r3, r2
 800133c:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	LCD.I2C = I2C;
 800133e:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <CLCD_Init+0x144>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]
	LCD.ADDRESS = address;
 8001344:	4a48      	ldr	r2, [pc, #288]	; (8001468 <CLCD_Init+0x144>)
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	7113      	strb	r3, [r2, #4]
	LCD.COL = col;
 800134a:	4a47      	ldr	r2, [pc, #284]	; (8001468 <CLCD_Init+0x144>)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	7153      	strb	r3, [r2, #5]
	LCD.ROW = row;
 8001350:	4a45      	ldr	r2, [pc, #276]	; (8001468 <CLCD_Init+0x144>)
 8001352:	78bb      	ldrb	r3, [r7, #2]
 8001354:	7193      	strb	r3, [r2, #6]

	LCD.FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <CLCD_Init+0x144>)
 8001358:	2228      	movs	r2, #40	; 0x28
 800135a:	721a      	strb	r2, [r3, #8]
	LCD.ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <CLCD_Init+0x144>)
 800135e:	2206      	movs	r2, #6
 8001360:	71da      	strb	r2, [r3, #7]
	LCD.DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <CLCD_Init+0x144>)
 8001364:	220c      	movs	r2, #12
 8001366:	725a      	strb	r2, [r3, #9]
	LCD.CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <CLCD_Init+0x144>)
 800136a:	2214      	movs	r2, #20
 800136c:	729a      	strb	r2, [r3, #10]
	LCD.BACKLIGHT = LCD_BACKLIGHT;
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <CLCD_Init+0x144>)
 8001370:	2208      	movs	r2, #8
 8001372:	72da      	strb	r2, [r3, #11]

	Delay(50);
 8001374:	2032      	movs	r0, #50	; 0x32
 8001376:	f7ff ff7d 	bl	8001274 <Delay>

	if(Lcd_buffer != NULL) free(Lcd_buffer);
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <CLCD_Init+0x148>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <CLCD_Init+0x68>
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <CLCD_Init+0x148>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f003 f8bc 	bl	8004504 <free>
	Lcd_buffer = (uint8_t*)malloc(row * col * 8);
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	787a      	ldrb	r2, [r7, #1]
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4618      	mov	r0, r3
 8001398:	f003 f8ac 	bl	80044f4 <malloc>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <CLCD_Init+0x148>)
 80013a2:	601a      	str	r2, [r3, #0]

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e008      	b.n	80013bc <CLCD_Init+0x98>
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <CLCD_Init+0x148>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	4413      	add	r3, r2
 80013b2:	2220      	movs	r2, #32
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <CLCD_Init+0x144>)
 80013c0:	799b      	ldrb	r3, [r3, #6]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <CLCD_Init+0x144>)
 80013c6:	795b      	ldrb	r3, [r3, #5]
 80013c8:	fb01 f303 	mul.w	r3, r1, r3
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbec      	blt.n	80013aa <CLCD_Init+0x86>

	WriteI2C(0x33, LCD_COMMAND);
 80013d0:	2100      	movs	r1, #0
 80013d2:	2033      	movs	r0, #51	; 0x33
 80013d4:	f7ff ff5c 	bl	8001290 <WriteI2C>
//	Delay(5);
	WriteI2C(0x33, LCD_COMMAND);
 80013d8:	2100      	movs	r1, #0
 80013da:	2033      	movs	r0, #51	; 0x33
 80013dc:	f7ff ff58 	bl	8001290 <WriteI2C>
	Delay(5);
 80013e0:	2005      	movs	r0, #5
 80013e2:	f7ff ff47 	bl	8001274 <Delay>
	WriteI2C(0x32, LCD_COMMAND);
 80013e6:	2100      	movs	r1, #0
 80013e8:	2032      	movs	r0, #50	; 0x32
 80013ea:	f7ff ff51 	bl	8001290 <WriteI2C>
	Delay(5);
 80013ee:	2005      	movs	r0, #5
 80013f0:	f7ff ff40 	bl	8001274 <Delay>
	WriteI2C(0x20, LCD_COMMAND);
 80013f4:	2100      	movs	r1, #0
 80013f6:	2020      	movs	r0, #32
 80013f8:	f7ff ff4a 	bl	8001290 <WriteI2C>
	Delay(5);
 80013fc:	2005      	movs	r0, #5
 80013fe:	f7ff ff39 	bl	8001274 <Delay>

//	config lcd
	WriteI2C(LCD.ENTRYMODE, LCD_COMMAND);
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <CLCD_Init+0x144>)
 8001404:	79db      	ldrb	r3, [r3, #7]
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff41 	bl	8001290 <WriteI2C>
	Delay(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff ff30 	bl	8001274 <Delay>
	WriteI2C(LCD.DISPLAYCTRL, LCD_COMMAND);
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <CLCD_Init+0x144>)
 8001416:	7a5b      	ldrb	r3, [r3, #9]
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff38 	bl	8001290 <WriteI2C>
	Delay(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff ff27 	bl	8001274 <Delay>
	WriteI2C(LCD.CURSORSHIFT, LCD_COMMAND);
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <CLCD_Init+0x144>)
 8001428:	7a9b      	ldrb	r3, [r3, #10]
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff2f 	bl	8001290 <WriteI2C>
	Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff ff1e 	bl	8001274 <Delay>
	WriteI2C(LCD.FUNCTIONSET, LCD_COMMAND);
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <CLCD_Init+0x144>)
 800143a:	7a1b      	ldrb	r3, [r3, #8]
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff26 	bl	8001290 <WriteI2C>
	Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff ff15 	bl	8001274 <Delay>

	WriteI2C(LCD_CLEARDISPLAY, LCD_COMMAND);
 800144a:	2100      	movs	r1, #0
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff ff1f 	bl	8001290 <WriteI2C>
	Delay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff ff0e 	bl	8001274 <Delay>

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
 8001458:	2100      	movs	r1, #0
 800145a:	2002      	movs	r0, #2
 800145c:	f7ff ff18 	bl	8001290 <WriteI2C>
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002f8 	.word	0x200002f8
 800146c:	200002f4 	.word	0x200002f4

08001470 <SetCursor>:

void SetCursor(uint8_t row, uint8_t col){
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <SetCursor+0x8c>)
 8001486:	799a      	ldrb	r2, [r3, #6]
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	fbb3 f1f2 	udiv	r1, r3, r2
 800148e:	fb01 f202 	mul.w	r2, r1, r2
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <SetCursor+0x8c>)
 8001498:	795a      	ldrb	r2, [r3, #5]
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	fbb3 f1f2 	udiv	r1, r3, r2
 80014a0:	fb01 f202 	mul.w	r2, r1, r2
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	71bb      	strb	r3, [r7, #6]

	switch(row){
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d819      	bhi.n	80014e2 <SetCursor+0x72>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <SetCursor+0x44>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014cb 	.word	0x080014cb
 80014bc:	080014d3 	.word	0x080014d3
 80014c0:	080014db 	.word	0x080014db
	case 0:
		address_dram = 0x00 + col;
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	73fb      	strb	r3, [r7, #15]
		break;
 80014c8:	e00b      	b.n	80014e2 <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	3340      	adds	r3, #64	; 0x40
 80014ce:	73fb      	strb	r3, [r7, #15]
		break;
 80014d0:	e007      	b.n	80014e2 <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	3314      	adds	r3, #20
 80014d6:	73fb      	strb	r3, [r7, #15]
		break;
 80014d8:	e003      	b.n	80014e2 <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	3354      	adds	r3, #84	; 0x54
 80014de:	73fb      	strb	r3, [r7, #15]
		break;
 80014e0:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fecf 	bl	8001290 <WriteI2C>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200002f8 	.word	0x200002f8

08001500 <UpdateCharBuffer>:
void CLCD_BackLight(uint8_t is_on){
	LCD.BACKLIGHT = is_on ? LCD_BACKLIGHT : LCD_NOBACKLIGHT;
}


void UpdateCharBuffer(uint8_t c){
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <UpdateCharBuffer+0x40>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <UpdateCharBuffer+0x44>)
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	4611      	mov	r1, r2
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <UpdateCharBuffer+0x48>)
 8001516:	7952      	ldrb	r2, [r2, #5]
 8001518:	fb01 f202 	mul.w	r2, r1, r2
 800151c:	490b      	ldr	r1, [pc, #44]	; (800154c <UpdateCharBuffer+0x4c>)
 800151e:	7809      	ldrb	r1, [r1, #0]
 8001520:	440a      	add	r2, r1
 8001522:	4413      	add	r3, r2
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	701a      	strb	r2, [r3, #0]
	currentCol++;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <UpdateCharBuffer+0x4c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <UpdateCharBuffer+0x4c>)
 8001532:	701a      	strb	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200002f4 	.word	0x200002f4
 8001544:	20000305 	.word	0x20000305
 8001548:	200002f8 	.word	0x200002f8
 800154c:	20000304 	.word	0x20000304

08001550 <CLCD_PrintStringBuffer>:
	currentRow = row % LCD.ROW;
	currentCol = col % LCD.COL;
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
}

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	603a      	str	r2, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	460b      	mov	r3, r1
 800155e:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <CLCD_PrintStringBuffer+0x60>)
 8001562:	799a      	ldrb	r2, [r3, #6]
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	fbb3 f1f2 	udiv	r1, r3, r2
 800156a:	fb01 f202 	mul.w	r2, r1, r2
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <CLCD_PrintStringBuffer+0x64>)
 8001574:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <CLCD_PrintStringBuffer+0x60>)
 8001578:	795a      	ldrb	r2, [r3, #5]
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001580:	fb01 f202 	mul.w	r2, r1, r2
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <CLCD_PrintStringBuffer+0x68>)
 800158a:	701a      	strb	r2, [r3, #0]
	while(*str){
 800158c:	e006      	b.n	800159c <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	603a      	str	r2, [r7, #0]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ffb2 	bl	8001500 <UpdateCharBuffer>
	while(*str){
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f4      	bne.n	800158e <CLCD_PrintStringBuffer+0x3e>
	}
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002f8 	.word	0x200002f8
 80015b4:	20000305 	.word	0x20000305
 80015b8:	20000304 	.word	0x20000304

080015bc <CLCD_PrintNumBuffer>:

void CLCD_PrintNumBuffer(uint8_t row, uint8_t col, int16_t num){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	460b      	mov	r3, r1
 80015c8:	71bb      	strb	r3, [r7, #6]
 80015ca:	4613      	mov	r3, r2
 80015cc:	80bb      	strh	r3, [r7, #4]
    char flag_num = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
    unsigned char i;
    unsigned long power_of_10 = 1000000000;
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <CLCD_PrintNumBuffer+0xd8>)
 80015d4:	60bb      	str	r3, [r7, #8]
    currentRow = row % 2;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <CLCD_PrintNumBuffer+0xdc>)
 80015e0:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <CLCD_PrintNumBuffer+0xe0>)
 80015ec:	701a      	strb	r2, [r3, #0]

    if(num < 0) {
 80015ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da07      	bge.n	8001606 <CLCD_PrintNumBuffer+0x4a>
        num *= -1;
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	425b      	negs	r3, r3
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	80bb      	strh	r3, [r7, #4]
        UpdateCharBuffer('-');
 80015fe:	202d      	movs	r0, #45	; 0x2d
 8001600:	f7ff ff7e 	bl	8001500 <UpdateCharBuffer>
 8001604:	e011      	b.n	800162a <CLCD_PrintNumBuffer+0x6e>
    }
    else if(num == 0){
 8001606:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <CLCD_PrintNumBuffer+0x60>
    	UpdateCharBuffer('0');
 800160e:	2030      	movs	r0, #48	; 0x30
 8001610:	f7ff ff76 	bl	8001500 <UpdateCharBuffer>
    	UpdateCharBuffer('0');
 8001614:	2030      	movs	r0, #48	; 0x30
 8001616:	f7ff ff73 	bl	8001500 <UpdateCharBuffer>
//        UpdateCharBuffer(' ');
//        UpdateCharBuffer(' ');
        return;
 800161a:	e038      	b.n	800168e <CLCD_PrintNumBuffer+0xd2>
    }

    else if(num < 10){
 800161c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001620:	2b09      	cmp	r3, #9
 8001622:	dc02      	bgt.n	800162a <CLCD_PrintNumBuffer+0x6e>
        UpdateCharBuffer('0');
 8001624:	2030      	movs	r0, #48	; 0x30
 8001626:	f7ff ff6b 	bl	8001500 <UpdateCharBuffer>
//        UpdateCharBuffer(num + '0');
    }

    for(i = 10; i > 0; i--){
 800162a:	230a      	movs	r3, #10
 800162c:	73bb      	strb	r3, [r7, #14]
 800162e:	e02b      	b.n	8001688 <CLCD_PrintNumBuffer+0xcc>
        if( (num / power_of_10) != 0){
 8001630:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	d80d      	bhi.n	8001656 <CLCD_PrintNumBuffer+0x9a>
            flag_num = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
            UpdateCharBuffer(num / power_of_10 + '0');
 800163e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff56 	bl	8001500 <UpdateCharBuffer>
 8001654:	e005      	b.n	8001662 <CLCD_PrintNumBuffer+0xa6>
        }
        else{
            if(flag_num != 0) UpdateCharBuffer('0');
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <CLCD_PrintNumBuffer+0xa6>
 800165c:	2030      	movs	r0, #48	; 0x30
 800165e:	f7ff ff4f 	bl	8001500 <UpdateCharBuffer>
        }
        num %= power_of_10;
 8001662:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	fbb3 f2f2 	udiv	r2, r3, r2
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	fb01 f202 	mul.w	r2, r1, r2
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	80bb      	strh	r3, [r7, #4]
        power_of_10 /= 10;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <CLCD_PrintNumBuffer+0xe4>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	08db      	lsrs	r3, r3, #3
 8001680:	60bb      	str	r3, [r7, #8]
    for(i = 10; i > 0; i--){
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	3b01      	subs	r3, #1
 8001686:	73bb      	strb	r3, [r7, #14]
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1d0      	bne.n	8001630 <CLCD_PrintNumBuffer+0x74>
    }

//    UpdateCharBuffer(' ');
//    UpdateCharBuffer(' ');
}
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	3b9aca00 	.word	0x3b9aca00
 8001698:	20000305 	.word	0x20000305
 800169c:	20000304 	.word	0x20000304
 80016a0:	cccccccd 	.word	0xcccccccd

080016a4 <CLCD_DisplayScreen>:
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
}

void CLCD_DisplayScreen(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e021      	b.n	80016f4 <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fedb 	bl	8001470 <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	71bb      	strb	r3, [r7, #6]
 80016be:	e011      	b.n	80016e4 <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <CLCD_DisplayScreen+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	4911      	ldr	r1, [pc, #68]	; (800170c <CLCD_DisplayScreen+0x68>)
 80016c8:	7949      	ldrb	r1, [r1, #5]
 80016ca:	fb02 f101 	mul.w	r1, r2, r1
 80016ce:	79ba      	ldrb	r2, [r7, #6]
 80016d0:	440a      	add	r2, r1
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2101      	movs	r1, #1
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fdd9 	bl	8001290 <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	3301      	adds	r3, #1
 80016e2:	71bb      	strb	r3, [r7, #6]
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <CLCD_DisplayScreen+0x68>)
 80016e6:	795b      	ldrb	r3, [r3, #5]
 80016e8:	79ba      	ldrb	r2, [r7, #6]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d3e8      	bcc.n	80016c0 <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	3301      	adds	r3, #1
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <CLCD_DisplayScreen+0x68>)
 80016f6:	799b      	ldrb	r3, [r3, #6]
 80016f8:	79fa      	ldrb	r2, [r7, #7]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d3d8      	bcc.n	80016b0 <CLCD_DisplayScreen+0xc>
		}
	}
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002f4 	.word	0x200002f4
 800170c:	200002f8 	.word	0x200002f8

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001714:	f000 fccc 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001718:	f000 f85e 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f000 f994 	bl	8001a48 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001720:	f000 f8cc 	bl	80018bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001724:	f000 f918 	bl	8001958 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001728:	f000 f89a 	bl	8001860 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800172c:	f000 f962 	bl	80019f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 8001730:	4821      	ldr	r0, [pc, #132]	; (80017b8 <main+0xa8>)
 8001732:	f002 f953 	bl	80039dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8001736:	4821      	ldr	r0, [pc, #132]	; (80017bc <main+0xac>)
 8001738:	f002 f906 	bl	8003948 <HAL_TIM_Base_Start>

  TM_Init(&htim2, 1000);
 800173c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001740:	481d      	ldr	r0, [pc, #116]	; (80017b8 <main+0xa8>)
 8001742:	f000 fc15 	bl	8001f70 <TM_Init>
  TM_SetTime_ms(1000);
 8001746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800174a:	f000 fc39 	bl	8001fc0 <TM_SetTime_ms>

//  IN_Init(&hadc1);


  DHT_Init(&_dht, DHT_GPIO_Port, DHT_Pin, &htim3);
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <main+0xac>)
 8001750:	2208      	movs	r2, #8
 8001752:	491b      	ldr	r1, [pc, #108]	; (80017c0 <main+0xb0>)
 8001754:	481b      	ldr	r0, [pc, #108]	; (80017c4 <main+0xb4>)
 8001756:	f7ff fb8f 	bl	8000e78 <DHT_Init>

  ZB_Init(&huart1);
 800175a:	481b      	ldr	r0, [pc, #108]	; (80017c8 <main+0xb8>)
 800175c:	f000 fc54 	bl	8002008 <ZB_Init>

  CLCD_Init(&hi2c1, 0x27, 2, 16);
 8001760:	2310      	movs	r3, #16
 8001762:	2202      	movs	r2, #2
 8001764:	2127      	movs	r1, #39	; 0x27
 8001766:	4819      	ldr	r0, [pc, #100]	; (80017cc <main+0xbc>)
 8001768:	f7ff fddc 	bl	8001324 <CLCD_Init>

  FSM_Init();
 800176c:	f7ff fcfe 	bl	800116c <FSM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  if(TM_IsFlag()){
		HAL_SuspendTick();
 8001770:	f000 fd24 	bl	80021bc <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001774:	2101      	movs	r1, #1
 8001776:	2000      	movs	r0, #0
 8001778:	f001 fc60 	bl	800303c <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 800177c:	f000 fd2c 	bl	80021d8 <HAL_ResumeTick>

		  if(_time_read_data >= 1) _time_read_data -= 1;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <main+0xc0>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <main+0x84>
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <main+0xc0>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <main+0xc0>)
 8001792:	801a      	strh	r2, [r3, #0]

		  FSM_SystemControl();
 8001794:	f7ff fcf6 	bl	8001184 <FSM_SystemControl>

		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <main+0xc4>)
 800179e:	f000 ffea 	bl	8002776 <HAL_GPIO_TogglePin>


		  CLCD_PrintNumBuffer(1, 0, _time_read_data);
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <main+0xc0>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	2100      	movs	r1, #0
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff ff05 	bl	80015bc <CLCD_PrintNumBuffer>
		  CLCD_DisplayScreen();
 80017b2:	f7ff ff77 	bl	80016a4 <CLCD_DisplayScreen>
		HAL_SuspendTick();
 80017b6:	e7db      	b.n	8001770 <main+0x60>
 80017b8:	2000035c 	.word	0x2000035c
 80017bc:	200003a4 	.word	0x200003a4
 80017c0:	40010800 	.word	0x40010800
 80017c4:	200002d8 	.word	0x200002d8
 80017c8:	200003ec 	.word	0x200003ec
 80017cc:	20000308 	.word	0x20000308
 80017d0:	200002ec 	.word	0x200002ec
 80017d4:	40011000 	.word	0x40011000

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b090      	sub	sp, #64	; 0x40
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	2228      	movs	r2, #40	; 0x28
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 fe94 	bl	8004514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180c:	2302      	movs	r3, #2
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001816:	2300      	movs	r3, #0
 8001818:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fc28 	bl	8003074 <HAL_RCC_OscConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800182a:	f000 f979 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182e:	230f      	movs	r3, #15
 8001830:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001832:	2302      	movs	r3, #2
 8001834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f001 fe95 	bl	8003578 <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001854:	f000 f964 	bl	8001b20 <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3740      	adds	r7, #64	; 0x40
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_I2C1_Init+0x50>)
 8001866:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <MX_I2C1_Init+0x54>)
 8001868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_I2C1_Init+0x50>)
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_I2C1_Init+0x58>)
 800186e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_I2C1_Init+0x50>)
 800187e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_I2C1_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_I2C1_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_I2C1_Init+0x50>)
 800189e:	f000 ff83 	bl	80027a8 <HAL_I2C_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a8:	f000 f93a 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000308 	.word	0x20000308
 80018b4:	40005400 	.word	0x40005400
 80018b8:	000186a0 	.word	0x000186a0

080018bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <MX_TIM2_Init+0x98>)
 80018da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <MX_TIM2_Init+0x98>)
 80018e2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80018e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_TIM2_Init+0x98>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_TIM2_Init+0x98>)
 80018f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_TIM2_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_TIM2_Init+0x98>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <MX_TIM2_Init+0x98>)
 8001904:	f001 ffd0 	bl	80038a8 <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800190e:	f000 f907 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	4619      	mov	r1, r3
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <MX_TIM2_Init+0x98>)
 8001920:	f002 f9b6 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800192a:	f000 f8f9 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001936:	463b      	mov	r3, r7
 8001938:	4619      	mov	r1, r3
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <MX_TIM2_Init+0x98>)
 800193c:	f002 fb88 	bl	8004050 <HAL_TIMEx_MasterConfigSynchronization>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001946:	f000 f8eb 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000035c 	.word	0x2000035c

08001958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	463b      	mov	r3, r7
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <MX_TIM3_Init+0x94>)
 8001976:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <MX_TIM3_Init+0x98>)
 8001978:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <MX_TIM3_Init+0x94>)
 800197c:	220f      	movs	r2, #15
 800197e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_TIM3_Init+0x94>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <MX_TIM3_Init+0x94>)
 8001988:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800198c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_TIM3_Init+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_TIM3_Init+0x94>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <MX_TIM3_Init+0x94>)
 800199c:	f001 ff84 	bl	80038a8 <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019a6:	f000 f8bb 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	4619      	mov	r1, r3
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_TIM3_Init+0x94>)
 80019b8:	f002 f96a 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019c2:	f000 f8ad 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ce:	463b      	mov	r3, r7
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	; (80019ec <MX_TIM3_Init+0x94>)
 80019d4:	f002 fb3c 	bl	8004050 <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019de:	f000 f89f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200003a4 	.word	0x200003a4
 80019f0:	40000400 	.word	0x40000400

080019f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_USART1_UART_Init+0x50>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a2c:	f002 fb80 	bl	8004130 <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a36:	f000 f873 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200003ec 	.word	0x200003ec
 8001a44:	40013800 	.word	0x40013800

08001a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a2c      	ldr	r2, [pc, #176]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a62:	f043 0310 	orr.w	r3, r3, #16
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a7a:	f043 0320 	orr.w	r3, r3, #32
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <MX_GPIO_Init+0xcc>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac2:	4815      	ldr	r0, [pc, #84]	; (8001b18 <MX_GPIO_Init+0xd0>)
 8001ac4:	f000 fe3f 	bl	8002746 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2108      	movs	r1, #8
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_GPIO_Init+0xd4>)
 8001ace:	f000 fe3a 	bl	8002746 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480b      	ldr	r0, [pc, #44]	; (8001b18 <MX_GPIO_Init+0xd0>)
 8001aec:	f000 fc90 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8001af0:	2308      	movs	r3, #8
 8001af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4619      	mov	r1, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_GPIO_Init+0xd4>)
 8001b08:	f000 fc82 	bl	8002410 <HAL_GPIO_Init>

}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40011000 	.word	0x40011000
 8001b1c:	40010800 	.word	0x40010800

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_MspInit+0x5c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <HAL_MspInit+0x5c>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6193      	str	r3, [r2, #24]
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_MspInit+0x5c>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_MspInit+0x5c>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_MspInit+0x5c>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	61d3      	str	r3, [r2, #28]
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_MspInit+0x5c>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_MspInit+0x60>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_MspInit+0x60>)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000

08001b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <HAL_I2C_MspInit+0x70>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d123      	bne.n	8001bf8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <HAL_I2C_MspInit+0x78>)
 8001bdc:	f000 fc18 	bl	8002410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bea:	61d3      	str	r3, [r2, #28]
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40005400 	.word	0x40005400
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010c00 	.word	0x40010c00

08001c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d114      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_TIM_Base_MspInit+0x68>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_TIM_Base_MspInit+0x68>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_TIM_Base_MspInit+0x68>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	201c      	movs	r0, #28
 8001c3c:	f000 fbb1 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c40:	201c      	movs	r0, #28
 8001c42:	f000 fbca 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c46:	e010      	b.n	8001c6a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_TIM_Base_MspInit+0x6c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10b      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_TIM_Base_MspInit+0x68>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_TIM_Base_MspInit+0x68>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_TIM_Base_MspInit+0x68>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40000400 	.word	0x40000400

08001c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_UART_MspInit+0x8c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d131      	bne.n	8001d00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_UART_MspInit+0x90>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_UART_MspInit+0x90>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_UART_MspInit+0x90>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_UART_MspInit+0x90>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_UART_MspInit+0x90>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_UART_MspInit+0x90>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480b      	ldr	r0, [pc, #44]	; (8001d10 <HAL_UART_MspInit+0x94>)
 8001ce2:	f000 fb95 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_UART_MspInit+0x94>)
 8001cfc:	f000 fb88 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <NMI_Handler+0x4>

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5a:	f000 f9ef 	bl	800213c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <TIM2_IRQHandler+0x10>)
 8001d6a:	f001 fe89 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000035c 	.word	0x2000035c

08001d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return 1;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <_kill>:

int _kill(int pid, int sig)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d90:	f002 fb86 	bl	80044a0 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2216      	movs	r2, #22
 8001d98:	601a      	str	r2, [r3, #0]
  return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_exit>:

void _exit (int status)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dae:	f04f 31ff 	mov.w	r1, #4294967295
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffe7 	bl	8001d86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001db8:	e7fe      	b.n	8001db8 <_exit+0x12>

08001dba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e00a      	b.n	8001de2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	4601      	mov	r1, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	60ba      	str	r2, [r7, #8]
 8001dd8:	b2ca      	uxtb	r2, r1
 8001dda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3301      	adds	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dbf0      	blt.n	8001dcc <_read+0x12>
  }

  return len;
 8001dea:	687b      	ldr	r3, [r7, #4]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e009      	b.n	8001e1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	60ba      	str	r2, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dbf1      	blt.n	8001e06 <_write+0x12>
  }
  return len;
 8001e22:	687b      	ldr	r3, [r7, #4]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_close>:

int _close(int file)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e52:	605a      	str	r2, [r3, #4]
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <_isatty>:

int _isatty(int file)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f002 faf0 	bl	80044a0 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20005000 	.word	0x20005000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20000430 	.word	0x20000430
 8001ef4:	20000458 	.word	0x20000458

08001ef8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <RunSoftwareTimer>:

static uint8_t MUL_timer		= 1;
static uint8_t flag_timer		= 0;
static uint16_t counter_timer 	= 0;

void RunSoftwareTimer(void){
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	if(counter_timer > 0){
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <RunSoftwareTimer+0x38>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d011      	beq.n	8001f34 <RunSoftwareTimer+0x30>
		counter_timer--;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <RunSoftwareTimer+0x38>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <RunSoftwareTimer+0x38>)
 8001f1a:	801a      	strh	r2, [r3, #0]
		if(counter_timer == 0){
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <RunSoftwareTimer+0x38>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <RunSoftwareTimer+0x30>
			counter_timer = MUL_timer;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <RunSoftwareTimer+0x3c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <RunSoftwareTimer+0x38>)
 8001f2c:	801a      	strh	r2, [r3, #0]
			flag_timer = 1;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <RunSoftwareTimer+0x40>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	2000043a 	.word	0x2000043a
 8001f40:	20000006 	.word	0x20000006
 8001f44:	20000438 	.word	0x20000438

08001f48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stimer->Instance) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d101      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 8001f5e:	f7ff ffd1 	bl	8001f04 <RunSoftwareTimer>
	}
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000434 	.word	0x20000434

08001f70 <TM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void TM_Init(TIM_HandleTypeDef* htim, uint16_t cycles){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
	stimer = htim;
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <TM_Init+0x3c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
	counter_timer = MUL_timer;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <TM_Init+0x40>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <TM_Init+0x44>)
 8001f8a:	801a      	strh	r2, [r3, #0]
	TIME_CYCLE = cycles;
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <TM_Init+0x48>)
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	8013      	strh	r3, [r2, #0]

	flag_timer = 0;
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <TM_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(stimer);
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <TM_Init+0x3c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f001 fd1d 	bl	80039dc <HAL_TIM_Base_Start_IT>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000434 	.word	0x20000434
 8001fb0:	20000006 	.word	0x20000006
 8001fb4:	2000043a 	.word	0x2000043a
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	20000438 	.word	0x20000438

08001fc0 <TM_SetTime_ms>:

void TM_SetTime_ms(uint16_t duration){
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
	MUL_timer = duration / TIME_CYCLE;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <TM_SetTime_ms+0x38>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	88fa      	ldrh	r2, [r7, #6]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <TM_SetTime_ms+0x3c>)
 8001fda:	701a      	strb	r2, [r3, #0]
	counter_timer = MUL_timer;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <TM_SetTime_ms+0x3c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <TM_SetTime_ms+0x40>)
 8001fe4:	801a      	strh	r2, [r3, #0]
	flag_timer = 0;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <TM_SetTime_ms+0x44>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000004 	.word	0x20000004
 8001ffc:	20000006 	.word	0x20000006
 8002000:	2000043a 	.word	0x2000043a
 8002004:	20000438 	.word	0x20000438

08002008 <ZB_Init>:
	}

}

//==================HIGH LEVEL FUNCTION==================//
void ZB_Init(UART_HandleTypeDef* huart){
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	uart_zigbee = huart;
 8002010:	4a03      	ldr	r2, [pc, #12]	; (8002020 <ZB_Init+0x18>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]

}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	2000043c 	.word	0x2000043c

08002024 <ZB_SendMsg>:

void ZB_SendMsg(char* msg, uint8_t length){
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i = 0; i < length; i++){
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e00b      	b.n	800204e <ZB_SendMsg+0x2a>
		HAL_UART_Transmit(uart_zigbee, msg + i, 1, 100);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <ZB_SendMsg+0x3c>)
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	18d1      	adds	r1, r2, r3
 8002040:	2364      	movs	r3, #100	; 0x64
 8002042:	2201      	movs	r2, #1
 8002044:	f002 f8c1 	bl	80041ca <HAL_UART_Transmit>
	for(i = 0; i < length; i++){
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	3301      	adds	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	429a      	cmp	r2, r3
 8002054:	d3ef      	bcc.n	8002036 <ZB_SendMsg+0x12>
	}

//	HAL_UART_Transmit(uart_zigbee, (uint8_t*)msg, length, 2000);


}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2000043c 	.word	0x2000043c

08002064 <Reset_Handler>:
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <LoopFillZerobss+0x12>)
 8002066:	490d      	ldr	r1, [pc, #52]	; (800209c <LoopFillZerobss+0x16>)
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <LoopFillZerobss+0x1a>)
 800206a:	2300      	movs	r3, #0
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:
 800206e:	58d4      	ldr	r4, [r2, r3]
 8002070:	50c4      	str	r4, [r0, r3]
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:
 8002074:	18c4      	adds	r4, r0, r3
 8002076:	428c      	cmp	r4, r1
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <LoopFillZerobss+0x1e>)
 800207c:	4c0a      	ldr	r4, [pc, #40]	; (80020a8 <LoopFillZerobss+0x22>)
 800207e:	2300      	movs	r3, #0
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:
 8002086:	42a2      	cmp	r2, r4
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>
 800208a:	f7ff ff35 	bl	8001ef8 <SystemInit>
 800208e:	f002 fa0d 	bl	80044ac <__libc_init_array>
 8002092:	f7ff fb3d 	bl	8001710 <main>
 8002096:	4770      	bx	lr
 8002098:	20000000 	.word	0x20000000
 800209c:	200001e0 	.word	0x200001e0
 80020a0:	08007744 	.word	0x08007744
 80020a4:	200001e0 	.word	0x200001e0
 80020a8:	20000454 	.word	0x20000454

080020ac <ADC1_2_IRQHandler>:
 80020ac:	e7fe      	b.n	80020ac <ADC1_2_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_Init+0x28>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_Init+0x28>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 f963 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c6:	200f      	movs	r0, #15
 80020c8:	f000 f808 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020cc:	f7ff fd2e 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x54>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x58>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f97b 	bl	80023f6 <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00e      	b.n	8002128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d80a      	bhi.n	8002126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002110:	2200      	movs	r2, #0
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f000 f943 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <HAL_InitTick+0x5c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e000      	b.n	8002128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000000 	.word	0x20000000
 8002134:	2000000c 	.word	0x2000000c
 8002138:	20000008 	.word	0x20000008

0800213c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_IncTick+0x1c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_IncTick+0x20>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a03      	ldr	r2, [pc, #12]	; (800215c <HAL_IncTick+0x20>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	2000000c 	.word	0x2000000c
 800215c:	20000440 	.word	0x20000440

08002160 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <HAL_GetTick+0x10>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000440 	.word	0x20000440

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff fff0 	bl	8002160 <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d005      	beq.n	800219a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_Delay+0x44>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800219a:	bf00      	nop
 800219c:	f7ff ffe0 	bl	8002160 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d8f7      	bhi.n	800219c <HAL_Delay+0x28>
  {
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000000c 	.word	0x2000000c

080021bc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HAL_SuspendTick+0x18>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a03      	ldr	r2, [pc, #12]	; (80021d4 <HAL_SuspendTick+0x18>)
 80021c6:	f023 0302 	bic.w	r3, r3, #2
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_ResumeTick+0x18>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <HAL_ResumeTick+0x18>)
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4906      	ldr	r1, [pc, #24]	; (800228c <__NVIC_EnableIRQ+0x34>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff90 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff2d 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff42 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff35 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b08b      	sub	sp, #44	; 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	e169      	b.n	80026f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002424:	2201      	movs	r2, #1
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8158 	bne.w	80026f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4a9a      	ldr	r2, [pc, #616]	; (80026b0 <HAL_GPIO_Init+0x2a0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d05e      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 800244c:	4a98      	ldr	r2, [pc, #608]	; (80026b0 <HAL_GPIO_Init+0x2a0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d875      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002452:	4a98      	ldr	r2, [pc, #608]	; (80026b4 <HAL_GPIO_Init+0x2a4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d058      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002458:	4a96      	ldr	r2, [pc, #600]	; (80026b4 <HAL_GPIO_Init+0x2a4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d86f      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800245e:	4a96      	ldr	r2, [pc, #600]	; (80026b8 <HAL_GPIO_Init+0x2a8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d052      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002464:	4a94      	ldr	r2, [pc, #592]	; (80026b8 <HAL_GPIO_Init+0x2a8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d869      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800246a:	4a94      	ldr	r2, [pc, #592]	; (80026bc <HAL_GPIO_Init+0x2ac>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04c      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002470:	4a92      	ldr	r2, [pc, #584]	; (80026bc <HAL_GPIO_Init+0x2ac>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d863      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002476:	4a92      	ldr	r2, [pc, #584]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d046      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 800247c:	4a90      	ldr	r2, [pc, #576]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d85d      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002482:	2b12      	cmp	r3, #18
 8002484:	d82a      	bhi.n	80024dc <HAL_GPIO_Init+0xcc>
 8002486:	2b12      	cmp	r3, #18
 8002488:	d859      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <HAL_GPIO_Init+0x80>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	0800250b 	.word	0x0800250b
 8002494:	080024e5 	.word	0x080024e5
 8002498:	080024f7 	.word	0x080024f7
 800249c:	08002539 	.word	0x08002539
 80024a0:	0800253f 	.word	0x0800253f
 80024a4:	0800253f 	.word	0x0800253f
 80024a8:	0800253f 	.word	0x0800253f
 80024ac:	0800253f 	.word	0x0800253f
 80024b0:	0800253f 	.word	0x0800253f
 80024b4:	0800253f 	.word	0x0800253f
 80024b8:	0800253f 	.word	0x0800253f
 80024bc:	0800253f 	.word	0x0800253f
 80024c0:	0800253f 	.word	0x0800253f
 80024c4:	0800253f 	.word	0x0800253f
 80024c8:	0800253f 	.word	0x0800253f
 80024cc:	0800253f 	.word	0x0800253f
 80024d0:	0800253f 	.word	0x0800253f
 80024d4:	080024ed 	.word	0x080024ed
 80024d8:	08002501 	.word	0x08002501
 80024dc:	4a79      	ldr	r2, [pc, #484]	; (80026c4 <HAL_GPIO_Init+0x2b4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024e2:	e02c      	b.n	800253e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	623b      	str	r3, [r7, #32]
          break;
 80024ea:	e029      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	3304      	adds	r3, #4
 80024f2:	623b      	str	r3, [r7, #32]
          break;
 80024f4:	e024      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	3308      	adds	r3, #8
 80024fc:	623b      	str	r3, [r7, #32]
          break;
 80024fe:	e01f      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	330c      	adds	r3, #12
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e01a      	b.n	8002540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002512:	2304      	movs	r3, #4
 8002514:	623b      	str	r3, [r7, #32]
          break;
 8002516:	e013      	b.n	8002540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002520:	2308      	movs	r3, #8
 8002522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	611a      	str	r2, [r3, #16]
          break;
 800252a:	e009      	b.n	8002540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800252c:	2308      	movs	r3, #8
 800252e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	615a      	str	r2, [r3, #20]
          break;
 8002536:	e003      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
          break;
 800253c:	e000      	b.n	8002540 <HAL_GPIO_Init+0x130>
          break;
 800253e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2bff      	cmp	r3, #255	; 0xff
 8002544:	d801      	bhi.n	800254a <HAL_GPIO_Init+0x13a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	e001      	b.n	800254e <HAL_GPIO_Init+0x13e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2bff      	cmp	r3, #255	; 0xff
 8002554:	d802      	bhi.n	800255c <HAL_GPIO_Init+0x14c>
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	e002      	b.n	8002562 <HAL_GPIO_Init+0x152>
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	3b08      	subs	r3, #8
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	210f      	movs	r1, #15
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	6a39      	ldr	r1, [r7, #32]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80b1 	beq.w	80026f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <HAL_GPIO_Init+0x2b8>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a4c      	ldr	r2, [pc, #304]	; (80026c8 <HAL_GPIO_Init+0x2b8>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_GPIO_Init+0x2b8>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a8:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_GPIO_Init+0x2bc>)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a40      	ldr	r2, [pc, #256]	; (80026d0 <HAL_GPIO_Init+0x2c0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_GPIO_Init+0x1ec>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3f      	ldr	r2, [pc, #252]	; (80026d4 <HAL_GPIO_Init+0x2c4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00d      	beq.n	80025f8 <HAL_GPIO_Init+0x1e8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3e      	ldr	r2, [pc, #248]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <HAL_GPIO_Init+0x1e4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3d      	ldr	r2, [pc, #244]	; (80026dc <HAL_GPIO_Init+0x2cc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_GPIO_Init+0x1e0>
 80025ec:	2303      	movs	r3, #3
 80025ee:	e006      	b.n	80025fe <HAL_GPIO_Init+0x1ee>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e004      	b.n	80025fe <HAL_GPIO_Init+0x1ee>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_Init+0x1ee>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_GPIO_Init+0x1ee>
 80025fc:	2300      	movs	r3, #0
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	f002 0203 	and.w	r2, r2, #3
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	4093      	lsls	r3, r2
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800260e:	492f      	ldr	r1, [pc, #188]	; (80026cc <HAL_GPIO_Init+0x2bc>)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	492c      	ldr	r1, [pc, #176]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	43db      	mvns	r3, r3
 800263e:	4928      	ldr	r1, [pc, #160]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002640:	4013      	ands	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4922      	ldr	r1, [pc, #136]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	43db      	mvns	r3, r3
 8002666:	491e      	ldr	r1, [pc, #120]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002668:	4013      	ands	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4918      	ldr	r1, [pc, #96]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	608b      	str	r3, [r1, #8]
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	43db      	mvns	r3, r3
 800268e:	4914      	ldr	r1, [pc, #80]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002690:	4013      	ands	r3, r2
 8002692:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d021      	beq.n	80026e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
 80026ac:	e021      	b.n	80026f2 <HAL_GPIO_Init+0x2e2>
 80026ae:	bf00      	nop
 80026b0:	10320000 	.word	0x10320000
 80026b4:	10310000 	.word	0x10310000
 80026b8:	10220000 	.word	0x10220000
 80026bc:	10210000 	.word	0x10210000
 80026c0:	10120000 	.word	0x10120000
 80026c4:	10110000 	.word	0x10110000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40010800 	.word	0x40010800
 80026d4:	40010c00 	.word	0x40010c00
 80026d8:	40011000 	.word	0x40011000
 80026dc:	40011400 	.word	0x40011400
 80026e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	4909      	ldr	r1, [pc, #36]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	3301      	adds	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	f47f ae8e 	bne.w	8002424 <HAL_GPIO_Init+0x14>
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	372c      	adds	r7, #44	; 0x2c
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40010400 	.word	0x40010400

08002718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e001      	b.n	800273a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	807b      	strh	r3, [r7, #2]
 8002752:	4613      	mov	r3, r2
 8002754:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002756:	787b      	ldrb	r3, [r7, #1]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275c:	887a      	ldrh	r2, [r7, #2]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002762:	e003      	b.n	800276c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	041a      	lsls	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	611a      	str	r2, [r3, #16]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002788:	887a      	ldrh	r2, [r7, #2]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	041a      	lsls	r2, r3, #16
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43d9      	mvns	r1, r3
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	400b      	ands	r3, r1
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e12b      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff f9de 	bl	8001b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800280c:	f001 f806 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8002810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a81      	ldr	r2, [pc, #516]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d807      	bhi.n	800282c <HAL_I2C_Init+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <HAL_I2C_Init+0x278>)
 8002820:	4293      	cmp	r3, r2
 8002822:	bf94      	ite	ls
 8002824:	2301      	movls	r3, #1
 8002826:	2300      	movhi	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e006      	b.n	800283a <HAL_I2C_Init+0x92>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_I2C_Init+0x27c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0e7      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a78      	ldr	r2, [pc, #480]	; (8002a28 <HAL_I2C_Init+0x280>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d802      	bhi.n	800287c <HAL_I2C_Init+0xd4>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3301      	adds	r3, #1
 800287a:	e009      	b.n	8002890 <HAL_I2C_Init+0xe8>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	4a69      	ldr	r2, [pc, #420]	; (8002a2c <HAL_I2C_Init+0x284>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	3301      	adds	r3, #1
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	430b      	orrs	r3, r1
 8002896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	495c      	ldr	r1, [pc, #368]	; (8002a1c <HAL_I2C_Init+0x274>)
 80028ac:	428b      	cmp	r3, r1
 80028ae:	d819      	bhi.n	80028e4 <HAL_I2C_Init+0x13c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e59      	subs	r1, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028c4:	400b      	ands	r3, r1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_I2C_Init+0x138>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e59      	subs	r1, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028de:	e051      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e0:	2304      	movs	r3, #4
 80028e2:	e04f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <HAL_I2C_Init+0x168>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e012      	b.n	8002936 <HAL_I2C_Init+0x18e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x196>
 800293a:	2301      	movs	r3, #1
 800293c:	e022      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <HAL_I2C_Init+0x1bc>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e58      	subs	r0, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	fbb0 f3f3 	udiv	r3, r0, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	0099      	lsls	r1, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6809      	ldr	r1, [r1, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6911      	ldr	r1, [r2, #16]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	000186a0 	.word	0x000186a0
 8002a20:	001e847f 	.word	0x001e847f
 8002a24:	003d08ff 	.word	0x003d08ff
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	10624dd3 	.word	0x10624dd3

08002a30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff fb8c 	bl	8002160 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	f040 80e0 	bne.w	8002c18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2319      	movs	r3, #25
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4970      	ldr	r1, [pc, #448]	; (8002c24 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f964 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e0d3      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2C_Master_Transmit+0x50>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e0cc      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d007      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2221      	movs	r2, #33	; 0x21
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	893a      	ldrh	r2, [r7, #8]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f89c 	bl	8002c2c <I2C_MasterRequestWrite>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e08d      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b14:	e066      	b.n	8002be4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	6a39      	ldr	r1, [r7, #32]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f9de 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d107      	bne.n	8002b3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06b      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_I2C_Master_Transmit+0x188>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f9ce 	bl	8002f5e <I2C_WaitOnBTFFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e01a      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d194      	bne.n	8002b16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	00100002 	.word	0x00100002
 8002c28:	ffff0000 	.word	0xffff0000

08002c2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d006      	beq.n	8002c56 <I2C_MasterRequestWrite+0x2a>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d003      	beq.n	8002c56 <I2C_MasterRequestWrite+0x2a>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c54:	d108      	bne.n	8002c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e00b      	b.n	8002c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	2b12      	cmp	r3, #18
 8002c6e:	d107      	bne.n	8002c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f84f 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00d      	beq.n	8002cb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca6:	d103      	bne.n	8002cb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e035      	b.n	8002d20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cbc:	d108      	bne.n	8002cd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ccc:	611a      	str	r2, [r3, #16]
 8002cce:	e01b      	b.n	8002d08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cd0:	897b      	ldrh	r3, [r7, #10]
 8002cd2:	11db      	asrs	r3, r3, #7
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0306 	and.w	r3, r3, #6
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f063 030f 	orn	r3, r3, #15
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	490e      	ldr	r1, [pc, #56]	; (8002d28 <I2C_MasterRequestWrite+0xfc>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f875 	bl	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e010      	b.n	8002d20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <I2C_MasterRequestWrite+0x100>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f865 	bl	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	00010008 	.word	0x00010008
 8002d2c:	00010002 	.word	0x00010002

08002d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d40:	e025      	b.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d021      	beq.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7ff fa09 	bl	8002160 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d116      	bne.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e023      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10d      	bne.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4013      	ands	r3, r2
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	e00c      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d0b6      	beq.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dec:	e051      	b.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfc:	d123      	bne.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0204 	orr.w	r2, r3, #4
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e046      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d021      	beq.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7ff f987 	bl	8002160 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e020      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10c      	bne.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	e00b      	b.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d18d      	bne.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee8:	e02d      	b.n	8002f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f878 	bl	8002fe0 <I2C_IsAcknowledgeFailed>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e02d      	b.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d021      	beq.n	8002f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7ff f92d 	bl	8002160 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e007      	b.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d1ca      	bne.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f6a:	e02d      	b.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f837 	bl	8002fe0 <I2C_IsAcknowledgeFailed>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e02d      	b.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d021      	beq.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f84:	f7ff f8ec 	bl	8002160 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d302      	bcc.n	8002f9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e007      	b.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d1ca      	bne.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d11b      	bne.n	8003030 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003000:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_PWR_EnterSLEEPMode+0x34>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	4a08      	ldr	r2, [pc, #32]	; (8003070 <HAL_PWR_EnterSLEEPMode+0x34>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800305a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800305c:	e002      	b.n	8003064 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800305e:	bf40      	sev
    __WFE();
 8003060:	bf20      	wfe
    __WFE();
 8003062:	bf20      	wfe
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e272      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8087 	beq.w	80031a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003094:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b04      	cmp	r3, #4
 800309e:	d00c      	beq.n	80030ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030a0:	4b8f      	ldr	r3, [pc, #572]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d112      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5e>
 80030ac:	4b8c      	ldr	r3, [pc, #560]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ba:	4b89      	ldr	r3, [pc, #548]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d06c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x12c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d168      	bne.n	80031a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e24c      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x76>
 80030dc:	4b80      	ldr	r3, [pc, #512]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7f      	ldr	r2, [pc, #508]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e02e      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x98>
 80030f2:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a77      	ldr	r2, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0xbc>
 8003116:	4b72      	ldr	r3, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a71      	ldr	r2, [pc, #452]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6f      	ldr	r3, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6e      	ldr	r2, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 8003130:	4b6b      	ldr	r3, [pc, #428]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a6a      	ldr	r2, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b68      	ldr	r3, [pc, #416]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a67      	ldr	r2, [pc, #412]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7ff f806 	bl	8002160 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7ff f802 	bl	8002160 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e200      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b5d      	ldr	r3, [pc, #372]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xe4>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fff2 	bl	8002160 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe ffee 	bl	8002160 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1ec      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x10c>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ae:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ba:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x18c>
 80031c6:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x176>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c0      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4939      	ldr	r1, [pc, #228]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe ffa7 	bl	8002160 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe ffa3 	bl	8002160 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a1      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4927      	ldr	r1, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCC_OscConfig+0x270>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe ff86 	bl	8002160 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003258:	f7fe ff82 	bl	8002160 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e180      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d03a      	beq.n	80032f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d019      	beq.n	80032be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_RCC_OscConfig+0x274>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fe ff66 	bl	8002160 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fe ff62 	bl	8002160 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e160      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f000 fad8 	bl	800386c <RCC_Delay>
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RCC_OscConfig+0x274>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c4:	f7fe ff4c 	bl	8002160 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ca:	e00f      	b.n	80032ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fe ff48 	bl	8002160 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d908      	bls.n	80032ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e146      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	42420000 	.word	0x42420000
 80032e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	4b92      	ldr	r3, [pc, #584]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e9      	bne.n	80032cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a6 	beq.w	8003452 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b8b      	ldr	r3, [pc, #556]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4a87      	ldr	r2, [pc, #540]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	61d3      	str	r3, [r2, #28]
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b82      	ldr	r3, [pc, #520]	; (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7e      	ldr	r2, [pc, #504]	; (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fe ff09 	bl	8002160 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fe ff05 	bl	8002160 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	; 0x64
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e103      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b75      	ldr	r3, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x312>
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a6e      	ldr	r2, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	e02d      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x334>
 800338e:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6213      	str	r3, [r2, #32]
 800339a:	4b67      	ldr	r3, [pc, #412]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a66      	ldr	r2, [pc, #408]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	e01c      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x356>
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4a60      	ldr	r2, [pc, #384]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6213      	str	r3, [r2, #32]
 80033bc:	4b5e      	ldr	r3, [pc, #376]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4a5a      	ldr	r2, [pc, #360]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6213      	str	r3, [r2, #32]
 80033d6:	4b58      	ldr	r3, [pc, #352]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d015      	beq.n	8003416 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fe feb9 	bl	8002160 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe feb5 	bl	8002160 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0b1      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCC_OscConfig+0x37e>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fe fea3 	bl	8002160 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fe fe9f 	bl	8002160 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e09b      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4a3b      	ldr	r2, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8087 	beq.w	800356a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	4b36      	ldr	r3, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d061      	beq.n	800352c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d146      	bne.n	80034fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe fe73 	bl	8002160 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe fe6f 	bl	8002160 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e06d      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003490:	4b29      	ldr	r3, [pc, #164]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d108      	bne.n	80034b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4921      	ldr	r1, [pc, #132]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a19      	ldr	r1, [r3, #32]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	430b      	orrs	r3, r1
 80034ca:	491b      	ldr	r1, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe fe43 	bl	8002160 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe fe3f 	bl	8002160 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e03d      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x46a>
 80034fc:	e035      	b.n	800356a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fe2c 	bl	8002160 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fe fe28 	bl	8002160 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e026      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x498>
 800352a:	e01e      	b.n	800356a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e019      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
 8003540:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_OscConfig+0x500>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	429a      	cmp	r2, r3
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0d0      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b67      	ldr	r3, [pc, #412]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4965      	ldr	r1, [pc, #404]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d040      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d115      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e073      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06b      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4936      	ldr	r1, [pc, #216]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fe fd7a 	bl	8002160 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fe fd76 	bl	8002160 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e053      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d210      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4922      	ldr	r1, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1cc>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1d0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fcd8 	bl	80020dc <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40022000 	.word	0x40022000
 800373c:	40021000 	.word	0x40021000
 8003740:	08007348 	.word	0x08007348
 8003744:	20000000 	.word	0x20000000
 8003748:	20000008 	.word	0x20000008

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b490      	push	{r4, r7}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003754:	1d3c      	adds	r4, r7, #4
 8003756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800375c:	f240 2301 	movw	r3, #513	; 0x201
 8003760:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003776:	4b21      	ldr	r3, [pc, #132]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b04      	cmp	r3, #4
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x40>
 8003786:	2b08      	cmp	r3, #8
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x46>
 800378a:	e02b      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800378c:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb4>)
 800378e:	623b      	str	r3, [r7, #32]
      break;
 8003790:	e02b      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	0c9b      	lsrs	r3, r3, #18
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	3328      	adds	r3, #40	; 0x28
 800379c:	443b      	add	r3, r7
 800379e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d012      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0c5b      	lsrs	r3, r3, #17
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	3328      	adds	r3, #40	; 0x28
 80037ba:	443b      	add	r3, r7
 80037bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037c6:	fb03 f202 	mul.w	r2, r3, r2
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	e004      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d8:	fb02 f303 	mul.w	r3, r2, r3
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	623b      	str	r3, [r7, #32]
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037e6:	623b      	str	r3, [r7, #32]
      break;
 80037e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc90      	pop	{r4, r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	08007338 	.word	0x08007338
 80037fc:	40021000 	.word	0x40021000
 8003800:	007a1200 	.word	0x007a1200
 8003804:	003d0900 	.word	0x003d0900

08003808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b02      	ldr	r3, [pc, #8]	; (8003818 <HAL_RCC_GetHCLKFreq+0x10>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	20000000 	.word	0x20000000

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff2 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	08007358 	.word	0x08007358

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffde 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0adb      	lsrs	r3, r3, #11
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	08007358 	.word	0x08007358

0800386c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <RCC_Delay+0x34>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <RCC_Delay+0x38>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0a5b      	lsrs	r3, r3, #9
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003888:	bf00      	nop
  }
  while (Delay --);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1e5a      	subs	r2, r3, #1
 800388e:	60fa      	str	r2, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f9      	bne.n	8003888 <RCC_Delay+0x1c>
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	20000000 	.word	0x20000000
 80038a4:	10624dd3 	.word	0x10624dd3

080038a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e041      	b.n	800393e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe f99c 	bl	8001c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 faba 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d001      	beq.n	8003960 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e032      	b.n	80039c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_TIM_Base_Start+0x88>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <HAL_TIM_Base_Start+0x48>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d009      	beq.n	8003990 <HAL_TIM_Base_Start+0x48>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <HAL_TIM_Base_Start+0x8c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_TIM_Base_Start+0x48>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_TIM_Base_Start+0x90>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d111      	bne.n	80039b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d010      	beq.n	80039c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b2:	e007      	b.n	80039c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800

080039dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d001      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e03a      	b.n	8003a6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_TIM_Base_Start_IT+0x98>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x58>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d009      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x58>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x58>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <HAL_TIM_Base_Start_IT+0xa0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d111      	bne.n	8003a58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d010      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	e007      	b.n	8003a68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800

08003a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0202 	mvn.w	r2, #2
 8003aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9b1 	bl	8003e2a <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f9a4 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9b3 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0204 	mvn.w	r2, #4
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f987 	bl	8003e2a <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f97a 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f989 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0208 	mvn.w	r2, #8
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f95d 	bl	8003e2a <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f950 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f95f 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0210 	mvn.w	r2, #16
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2208      	movs	r2, #8
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f933 	bl	8003e2a <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f926 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f935 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0201 	mvn.w	r2, #1
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe f9a2 	bl	8001f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fa77 	bl	800411e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8f9 	bl	8003e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0220 	mvn.w	r2, #32
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa42 	bl	800410c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_ConfigClockSource+0x18>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0b3      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x180>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce0:	d03e      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0xd0>
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	f200 8087 	bhi.w	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cee:	f000 8085 	beq.w	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d87f      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003cf8:	2b70      	cmp	r3, #112	; 0x70
 8003cfa:	d01a      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0xa2>
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d87b      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d00:	2b60      	cmp	r3, #96	; 0x60
 8003d02:	d050      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x116>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d877      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d08:	2b50      	cmp	r3, #80	; 0x50
 8003d0a:	d03c      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0xf6>
 8003d0c:	2b50      	cmp	r3, #80	; 0x50
 8003d0e:	d873      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d058      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x136>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d86f      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d18:	2b30      	cmp	r3, #48	; 0x30
 8003d1a:	d064      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x156>
 8003d1c:	2b30      	cmp	r3, #48	; 0x30
 8003d1e:	d86b      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d060      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x156>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d867      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05c      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x156>
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d05a      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d30:	e062      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6899      	ldr	r1, [r3, #8]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f000 f966 	bl	8004012 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	609a      	str	r2, [r3, #8]
      break;
 8003d5e:	e04e      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6899      	ldr	r1, [r3, #8]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f000 f94f 	bl	8004012 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d82:	609a      	str	r2, [r3, #8]
      break;
 8003d84:	e03b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 f8c6 	bl	8003f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2150      	movs	r1, #80	; 0x50
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f91d 	bl	8003fde <TIM_ITRx_SetConfig>
      break;
 8003da4:	e02b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f000 f8e4 	bl	8003f80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2160      	movs	r1, #96	; 0x60
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f90d 	bl	8003fde <TIM_ITRx_SetConfig>
      break;
 8003dc4:	e01b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f000 f8a6 	bl	8003f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2140      	movs	r1, #64	; 0x40
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f8fd 	bl	8003fde <TIM_ITRx_SetConfig>
      break;
 8003de4:	e00b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f000 f8f4 	bl	8003fde <TIM_ITRx_SetConfig>
        break;
 8003df6:	e002      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <TIM_Base_SetConfig+0xb8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00b      	beq.n	8003e90 <TIM_Base_SetConfig+0x30>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x30>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <TIM_Base_SetConfig+0xbc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x30>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <TIM_Base_SetConfig+0xb8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a19      	ldr	r2, [pc, #100]	; (8003f1c <TIM_Base_SetConfig+0xbc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <TIM_Base_SetConfig+0xb8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d103      	bne.n	8003f08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800

08003f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0201 	bic.w	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 030a 	bic.w	r3, r3, #10
 8003f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f023 0210 	bic.w	r2, r3, #16
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003faa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	031b      	lsls	r3, r3, #12
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f043 0307 	orr.w	r3, r3, #7
 8004000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	609a      	str	r2, [r3, #8]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004012:	b480      	push	{r7}
 8004014:	b087      	sub	sp, #28
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	021a      	lsls	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	431a      	orrs	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4313      	orrs	r3, r2
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	609a      	str	r2, [r3, #8]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004064:	2302      	movs	r3, #2
 8004066:	e046      	b.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d009      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a10      	ldr	r2, [pc, #64]	; (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10c      	bne.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800

0800410c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e03f      	b.n	80041c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fd fd90 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f905 	bl	8004384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b08a      	sub	sp, #40	; 0x28
 80041ce:	af02      	add	r7, sp, #8
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d17c      	bne.n	80042e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_UART_Transmit+0x2c>
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e075      	b.n	80042e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_UART_Transmit+0x3e>
 8004204:	2302      	movs	r3, #2
 8004206:	e06e      	b.n	80042e6 <HAL_UART_Transmit+0x11c>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2221      	movs	r2, #33	; 0x21
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800421e:	f7fd ff9f 	bl	8002160 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	88fa      	ldrh	r2, [r7, #6]
 800422e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004238:	d108      	bne.n	800424c <HAL_UART_Transmit+0x82>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d104      	bne.n	800424c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	e003      	b.n	8004254 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800425c:	e02a      	b.n	80042b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f840 	bl	80042ee <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e036      	b.n	80042e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800428c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	3302      	adds	r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e007      	b.n	80042a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1cf      	bne.n	800425e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2140      	movs	r1, #64	; 0x40
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f810 	bl	80042ee <UART_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fe:	e02c      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d028      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <UART_WaitOnFlagUntilTimeout+0x30>
 800430e:	f7fd ff27 	bl	8002160 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	d21d      	bcs.n	800435a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800432c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0c3      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043be:	f023 030c 	bic.w	r3, r3, #12
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <UART_SetConfig+0x114>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d103      	bne.n	80043f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7ff fa2a 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	e002      	b.n	80043fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7ff fa12 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 80043f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009a      	lsls	r2, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <UART_SetConfig+0x118>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	0119      	lsls	r1, r3, #4
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009a      	lsls	r2, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <UART_SetConfig+0x118>)
 8004432:	fba3 0302 	umull	r0, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2064      	movs	r0, #100	; 0x64
 800443a:	fb00 f303 	mul.w	r3, r0, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	3332      	adds	r3, #50	; 0x32
 8004444:	4a15      	ldr	r2, [pc, #84]	; (800449c <UART_SetConfig+0x118>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004450:	4419      	add	r1, r3
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009a      	lsls	r2, r3, #2
 800445c:	441a      	add	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	fbb2 f2f3 	udiv	r2, r2, r3
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <UART_SetConfig+0x118>)
 800446a:	fba3 0302 	umull	r0, r3, r3, r2
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2064      	movs	r0, #100	; 0x64
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	3332      	adds	r3, #50	; 0x32
 800447c:	4a07      	ldr	r2, [pc, #28]	; (800449c <UART_SetConfig+0x118>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	f003 020f 	and.w	r2, r3, #15
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	440a      	add	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40013800 	.word	0x40013800
 800449c:	51eb851f 	.word	0x51eb851f

080044a0 <__errno>:
 80044a0:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <__errno+0x8>)
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000010 	.word	0x20000010

080044ac <__libc_init_array>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	2600      	movs	r6, #0
 80044b0:	4d0c      	ldr	r5, [pc, #48]	; (80044e4 <__libc_init_array+0x38>)
 80044b2:	4c0d      	ldr	r4, [pc, #52]	; (80044e8 <__libc_init_array+0x3c>)
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	42a6      	cmp	r6, r4
 80044ba:	d109      	bne.n	80044d0 <__libc_init_array+0x24>
 80044bc:	f002 ff04 	bl	80072c8 <_init>
 80044c0:	2600      	movs	r6, #0
 80044c2:	4d0a      	ldr	r5, [pc, #40]	; (80044ec <__libc_init_array+0x40>)
 80044c4:	4c0a      	ldr	r4, [pc, #40]	; (80044f0 <__libc_init_array+0x44>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	42a6      	cmp	r6, r4
 80044cc:	d105      	bne.n	80044da <__libc_init_array+0x2e>
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d4:	4798      	blx	r3
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7ee      	b.n	80044b8 <__libc_init_array+0xc>
 80044da:	f855 3b04 	ldr.w	r3, [r5], #4
 80044de:	4798      	blx	r3
 80044e0:	3601      	adds	r6, #1
 80044e2:	e7f2      	b.n	80044ca <__libc_init_array+0x1e>
 80044e4:	0800773c 	.word	0x0800773c
 80044e8:	0800773c 	.word	0x0800773c
 80044ec:	0800773c 	.word	0x0800773c
 80044f0:	08007740 	.word	0x08007740

080044f4 <malloc>:
 80044f4:	4b02      	ldr	r3, [pc, #8]	; (8004500 <malloc+0xc>)
 80044f6:	4601      	mov	r1, r0
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f000 b87b 	b.w	80045f4 <_malloc_r>
 80044fe:	bf00      	nop
 8004500:	20000010 	.word	0x20000010

08004504 <free>:
 8004504:	4b02      	ldr	r3, [pc, #8]	; (8004510 <free+0xc>)
 8004506:	4601      	mov	r1, r0
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	f000 b80b 	b.w	8004524 <_free_r>
 800450e:	bf00      	nop
 8004510:	20000010 	.word	0x20000010

08004514 <memset>:
 8004514:	4603      	mov	r3, r0
 8004516:	4402      	add	r2, r0
 8004518:	4293      	cmp	r3, r2
 800451a:	d100      	bne.n	800451e <memset+0xa>
 800451c:	4770      	bx	lr
 800451e:	f803 1b01 	strb.w	r1, [r3], #1
 8004522:	e7f9      	b.n	8004518 <memset+0x4>

08004524 <_free_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4605      	mov	r5, r0
 8004528:	2900      	cmp	r1, #0
 800452a:	d040      	beq.n	80045ae <_free_r+0x8a>
 800452c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004530:	1f0c      	subs	r4, r1, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfb8      	it	lt
 8004536:	18e4      	addlt	r4, r4, r3
 8004538:	f001 fbfc 	bl	8005d34 <__malloc_lock>
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <_free_r+0x8c>)
 800453e:	6813      	ldr	r3, [r2, #0]
 8004540:	b933      	cbnz	r3, 8004550 <_free_r+0x2c>
 8004542:	6063      	str	r3, [r4, #4]
 8004544:	6014      	str	r4, [r2, #0]
 8004546:	4628      	mov	r0, r5
 8004548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800454c:	f001 bbf8 	b.w	8005d40 <__malloc_unlock>
 8004550:	42a3      	cmp	r3, r4
 8004552:	d908      	bls.n	8004566 <_free_r+0x42>
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	1821      	adds	r1, r4, r0
 8004558:	428b      	cmp	r3, r1
 800455a:	bf01      	itttt	eq
 800455c:	6819      	ldreq	r1, [r3, #0]
 800455e:	685b      	ldreq	r3, [r3, #4]
 8004560:	1809      	addeq	r1, r1, r0
 8004562:	6021      	streq	r1, [r4, #0]
 8004564:	e7ed      	b.n	8004542 <_free_r+0x1e>
 8004566:	461a      	mov	r2, r3
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	b10b      	cbz	r3, 8004570 <_free_r+0x4c>
 800456c:	42a3      	cmp	r3, r4
 800456e:	d9fa      	bls.n	8004566 <_free_r+0x42>
 8004570:	6811      	ldr	r1, [r2, #0]
 8004572:	1850      	adds	r0, r2, r1
 8004574:	42a0      	cmp	r0, r4
 8004576:	d10b      	bne.n	8004590 <_free_r+0x6c>
 8004578:	6820      	ldr	r0, [r4, #0]
 800457a:	4401      	add	r1, r0
 800457c:	1850      	adds	r0, r2, r1
 800457e:	4283      	cmp	r3, r0
 8004580:	6011      	str	r1, [r2, #0]
 8004582:	d1e0      	bne.n	8004546 <_free_r+0x22>
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4401      	add	r1, r0
 800458a:	6011      	str	r1, [r2, #0]
 800458c:	6053      	str	r3, [r2, #4]
 800458e:	e7da      	b.n	8004546 <_free_r+0x22>
 8004590:	d902      	bls.n	8004598 <_free_r+0x74>
 8004592:	230c      	movs	r3, #12
 8004594:	602b      	str	r3, [r5, #0]
 8004596:	e7d6      	b.n	8004546 <_free_r+0x22>
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	1821      	adds	r1, r4, r0
 800459c:	428b      	cmp	r3, r1
 800459e:	bf01      	itttt	eq
 80045a0:	6819      	ldreq	r1, [r3, #0]
 80045a2:	685b      	ldreq	r3, [r3, #4]
 80045a4:	1809      	addeq	r1, r1, r0
 80045a6:	6021      	streq	r1, [r4, #0]
 80045a8:	6063      	str	r3, [r4, #4]
 80045aa:	6054      	str	r4, [r2, #4]
 80045ac:	e7cb      	b.n	8004546 <_free_r+0x22>
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	20000444 	.word	0x20000444

080045b4 <sbrk_aligned>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4e0e      	ldr	r6, [pc, #56]	; (80045f0 <sbrk_aligned+0x3c>)
 80045b8:	460c      	mov	r4, r1
 80045ba:	6831      	ldr	r1, [r6, #0]
 80045bc:	4605      	mov	r5, r0
 80045be:	b911      	cbnz	r1, 80045c6 <sbrk_aligned+0x12>
 80045c0:	f000 fcec 	bl	8004f9c <_sbrk_r>
 80045c4:	6030      	str	r0, [r6, #0]
 80045c6:	4621      	mov	r1, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	f000 fce7 	bl	8004f9c <_sbrk_r>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d00a      	beq.n	80045e8 <sbrk_aligned+0x34>
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d007      	beq.n	80045ec <sbrk_aligned+0x38>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 fcdc 	bl	8004f9c <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d101      	bne.n	80045ec <sbrk_aligned+0x38>
 80045e8:	f04f 34ff 	mov.w	r4, #4294967295
 80045ec:	4620      	mov	r0, r4
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	20000448 	.word	0x20000448

080045f4 <_malloc_r>:
 80045f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	1ccd      	adds	r5, r1, #3
 80045fa:	f025 0503 	bic.w	r5, r5, #3
 80045fe:	3508      	adds	r5, #8
 8004600:	2d0c      	cmp	r5, #12
 8004602:	bf38      	it	cc
 8004604:	250c      	movcc	r5, #12
 8004606:	2d00      	cmp	r5, #0
 8004608:	4607      	mov	r7, r0
 800460a:	db01      	blt.n	8004610 <_malloc_r+0x1c>
 800460c:	42a9      	cmp	r1, r5
 800460e:	d905      	bls.n	800461c <_malloc_r+0x28>
 8004610:	230c      	movs	r3, #12
 8004612:	2600      	movs	r6, #0
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4630      	mov	r0, r6
 8004618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800461c:	4e2e      	ldr	r6, [pc, #184]	; (80046d8 <_malloc_r+0xe4>)
 800461e:	f001 fb89 	bl	8005d34 <__malloc_lock>
 8004622:	6833      	ldr	r3, [r6, #0]
 8004624:	461c      	mov	r4, r3
 8004626:	bb34      	cbnz	r4, 8004676 <_malloc_r+0x82>
 8004628:	4629      	mov	r1, r5
 800462a:	4638      	mov	r0, r7
 800462c:	f7ff ffc2 	bl	80045b4 <sbrk_aligned>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	4604      	mov	r4, r0
 8004634:	d14d      	bne.n	80046d2 <_malloc_r+0xde>
 8004636:	6834      	ldr	r4, [r6, #0]
 8004638:	4626      	mov	r6, r4
 800463a:	2e00      	cmp	r6, #0
 800463c:	d140      	bne.n	80046c0 <_malloc_r+0xcc>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	4631      	mov	r1, r6
 8004642:	4638      	mov	r0, r7
 8004644:	eb04 0803 	add.w	r8, r4, r3
 8004648:	f000 fca8 	bl	8004f9c <_sbrk_r>
 800464c:	4580      	cmp	r8, r0
 800464e:	d13a      	bne.n	80046c6 <_malloc_r+0xd2>
 8004650:	6821      	ldr	r1, [r4, #0]
 8004652:	3503      	adds	r5, #3
 8004654:	1a6d      	subs	r5, r5, r1
 8004656:	f025 0503 	bic.w	r5, r5, #3
 800465a:	3508      	adds	r5, #8
 800465c:	2d0c      	cmp	r5, #12
 800465e:	bf38      	it	cc
 8004660:	250c      	movcc	r5, #12
 8004662:	4638      	mov	r0, r7
 8004664:	4629      	mov	r1, r5
 8004666:	f7ff ffa5 	bl	80045b4 <sbrk_aligned>
 800466a:	3001      	adds	r0, #1
 800466c:	d02b      	beq.n	80046c6 <_malloc_r+0xd2>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	442b      	add	r3, r5
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	e00e      	b.n	8004694 <_malloc_r+0xa0>
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	1b52      	subs	r2, r2, r5
 800467a:	d41e      	bmi.n	80046ba <_malloc_r+0xc6>
 800467c:	2a0b      	cmp	r2, #11
 800467e:	d916      	bls.n	80046ae <_malloc_r+0xba>
 8004680:	1961      	adds	r1, r4, r5
 8004682:	42a3      	cmp	r3, r4
 8004684:	6025      	str	r5, [r4, #0]
 8004686:	bf18      	it	ne
 8004688:	6059      	strne	r1, [r3, #4]
 800468a:	6863      	ldr	r3, [r4, #4]
 800468c:	bf08      	it	eq
 800468e:	6031      	streq	r1, [r6, #0]
 8004690:	5162      	str	r2, [r4, r5]
 8004692:	604b      	str	r3, [r1, #4]
 8004694:	4638      	mov	r0, r7
 8004696:	f104 060b 	add.w	r6, r4, #11
 800469a:	f001 fb51 	bl	8005d40 <__malloc_unlock>
 800469e:	f026 0607 	bic.w	r6, r6, #7
 80046a2:	1d23      	adds	r3, r4, #4
 80046a4:	1af2      	subs	r2, r6, r3
 80046a6:	d0b6      	beq.n	8004616 <_malloc_r+0x22>
 80046a8:	1b9b      	subs	r3, r3, r6
 80046aa:	50a3      	str	r3, [r4, r2]
 80046ac:	e7b3      	b.n	8004616 <_malloc_r+0x22>
 80046ae:	6862      	ldr	r2, [r4, #4]
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	bf0c      	ite	eq
 80046b4:	6032      	streq	r2, [r6, #0]
 80046b6:	605a      	strne	r2, [r3, #4]
 80046b8:	e7ec      	b.n	8004694 <_malloc_r+0xa0>
 80046ba:	4623      	mov	r3, r4
 80046bc:	6864      	ldr	r4, [r4, #4]
 80046be:	e7b2      	b.n	8004626 <_malloc_r+0x32>
 80046c0:	4634      	mov	r4, r6
 80046c2:	6876      	ldr	r6, [r6, #4]
 80046c4:	e7b9      	b.n	800463a <_malloc_r+0x46>
 80046c6:	230c      	movs	r3, #12
 80046c8:	4638      	mov	r0, r7
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	f001 fb38 	bl	8005d40 <__malloc_unlock>
 80046d0:	e7a1      	b.n	8004616 <_malloc_r+0x22>
 80046d2:	6025      	str	r5, [r4, #0]
 80046d4:	e7de      	b.n	8004694 <_malloc_r+0xa0>
 80046d6:	bf00      	nop
 80046d8:	20000444 	.word	0x20000444

080046dc <__cvt>:
 80046dc:	2b00      	cmp	r3, #0
 80046de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e2:	461f      	mov	r7, r3
 80046e4:	bfbb      	ittet	lt
 80046e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	461f      	movlt	r7, r3
 80046ec:	2300      	movge	r3, #0
 80046ee:	232d      	movlt	r3, #45	; 0x2d
 80046f0:	b088      	sub	sp, #32
 80046f2:	4614      	mov	r4, r2
 80046f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046f8:	7013      	strb	r3, [r2, #0]
 80046fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004700:	f023 0820 	bic.w	r8, r3, #32
 8004704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004708:	d005      	beq.n	8004716 <__cvt+0x3a>
 800470a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800470e:	d100      	bne.n	8004712 <__cvt+0x36>
 8004710:	3501      	adds	r5, #1
 8004712:	2302      	movs	r3, #2
 8004714:	e000      	b.n	8004718 <__cvt+0x3c>
 8004716:	2303      	movs	r3, #3
 8004718:	aa07      	add	r2, sp, #28
 800471a:	9204      	str	r2, [sp, #16]
 800471c:	aa06      	add	r2, sp, #24
 800471e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004722:	e9cd 3500 	strd	r3, r5, [sp]
 8004726:	4622      	mov	r2, r4
 8004728:	463b      	mov	r3, r7
 800472a:	f000 fcf5 	bl	8005118 <_dtoa_r>
 800472e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004732:	4606      	mov	r6, r0
 8004734:	d102      	bne.n	800473c <__cvt+0x60>
 8004736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004738:	07db      	lsls	r3, r3, #31
 800473a:	d522      	bpl.n	8004782 <__cvt+0xa6>
 800473c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004740:	eb06 0905 	add.w	r9, r6, r5
 8004744:	d110      	bne.n	8004768 <__cvt+0x8c>
 8004746:	7833      	ldrb	r3, [r6, #0]
 8004748:	2b30      	cmp	r3, #48	; 0x30
 800474a:	d10a      	bne.n	8004762 <__cvt+0x86>
 800474c:	2200      	movs	r2, #0
 800474e:	2300      	movs	r3, #0
 8004750:	4620      	mov	r0, r4
 8004752:	4639      	mov	r1, r7
 8004754:	f7fc f928 	bl	80009a8 <__aeabi_dcmpeq>
 8004758:	b918      	cbnz	r0, 8004762 <__cvt+0x86>
 800475a:	f1c5 0501 	rsb	r5, r5, #1
 800475e:	f8ca 5000 	str.w	r5, [sl]
 8004762:	f8da 3000 	ldr.w	r3, [sl]
 8004766:	4499      	add	r9, r3
 8004768:	2200      	movs	r2, #0
 800476a:	2300      	movs	r3, #0
 800476c:	4620      	mov	r0, r4
 800476e:	4639      	mov	r1, r7
 8004770:	f7fc f91a 	bl	80009a8 <__aeabi_dcmpeq>
 8004774:	b108      	cbz	r0, 800477a <__cvt+0x9e>
 8004776:	f8cd 901c 	str.w	r9, [sp, #28]
 800477a:	2230      	movs	r2, #48	; 0x30
 800477c:	9b07      	ldr	r3, [sp, #28]
 800477e:	454b      	cmp	r3, r9
 8004780:	d307      	bcc.n	8004792 <__cvt+0xb6>
 8004782:	4630      	mov	r0, r6
 8004784:	9b07      	ldr	r3, [sp, #28]
 8004786:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004788:	1b9b      	subs	r3, r3, r6
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	b008      	add	sp, #32
 800478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	9107      	str	r1, [sp, #28]
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e7f0      	b.n	800477c <__cvt+0xa0>

0800479a <__exponent>:
 800479a:	4603      	mov	r3, r0
 800479c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800479e:	2900      	cmp	r1, #0
 80047a0:	f803 2b02 	strb.w	r2, [r3], #2
 80047a4:	bfb6      	itet	lt
 80047a6:	222d      	movlt	r2, #45	; 0x2d
 80047a8:	222b      	movge	r2, #43	; 0x2b
 80047aa:	4249      	neglt	r1, r1
 80047ac:	2909      	cmp	r1, #9
 80047ae:	7042      	strb	r2, [r0, #1]
 80047b0:	dd2b      	ble.n	800480a <__exponent+0x70>
 80047b2:	f10d 0407 	add.w	r4, sp, #7
 80047b6:	46a4      	mov	ip, r4
 80047b8:	270a      	movs	r7, #10
 80047ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80047be:	460a      	mov	r2, r1
 80047c0:	46a6      	mov	lr, r4
 80047c2:	fb07 1516 	mls	r5, r7, r6, r1
 80047c6:	2a63      	cmp	r2, #99	; 0x63
 80047c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80047cc:	4631      	mov	r1, r6
 80047ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80047d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047d6:	dcf0      	bgt.n	80047ba <__exponent+0x20>
 80047d8:	3130      	adds	r1, #48	; 0x30
 80047da:	f1ae 0502 	sub.w	r5, lr, #2
 80047de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047e2:	4629      	mov	r1, r5
 80047e4:	1c44      	adds	r4, r0, #1
 80047e6:	4561      	cmp	r1, ip
 80047e8:	d30a      	bcc.n	8004800 <__exponent+0x66>
 80047ea:	f10d 0209 	add.w	r2, sp, #9
 80047ee:	eba2 020e 	sub.w	r2, r2, lr
 80047f2:	4565      	cmp	r5, ip
 80047f4:	bf88      	it	hi
 80047f6:	2200      	movhi	r2, #0
 80047f8:	4413      	add	r3, r2
 80047fa:	1a18      	subs	r0, r3, r0
 80047fc:	b003      	add	sp, #12
 80047fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004800:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004804:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004808:	e7ed      	b.n	80047e6 <__exponent+0x4c>
 800480a:	2330      	movs	r3, #48	; 0x30
 800480c:	3130      	adds	r1, #48	; 0x30
 800480e:	7083      	strb	r3, [r0, #2]
 8004810:	70c1      	strb	r1, [r0, #3]
 8004812:	1d03      	adds	r3, r0, #4
 8004814:	e7f1      	b.n	80047fa <__exponent+0x60>
	...

08004818 <_printf_float>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	b091      	sub	sp, #68	; 0x44
 800481e:	460c      	mov	r4, r1
 8004820:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004824:	4616      	mov	r6, r2
 8004826:	461f      	mov	r7, r3
 8004828:	4605      	mov	r5, r0
 800482a:	f001 fa63 	bl	8005cf4 <_localeconv_r>
 800482e:	6803      	ldr	r3, [r0, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	9309      	str	r3, [sp, #36]	; 0x24
 8004834:	f7fb fc8c 	bl	8000150 <strlen>
 8004838:	2300      	movs	r3, #0
 800483a:	930e      	str	r3, [sp, #56]	; 0x38
 800483c:	f8d8 3000 	ldr.w	r3, [r8]
 8004840:	900a      	str	r0, [sp, #40]	; 0x28
 8004842:	3307      	adds	r3, #7
 8004844:	f023 0307 	bic.w	r3, r3, #7
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004850:	f8d4 b000 	ldr.w	fp, [r4]
 8004854:	f8c8 2000 	str.w	r2, [r8]
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004860:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004864:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004868:	930b      	str	r3, [sp, #44]	; 0x2c
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	4640      	mov	r0, r8
 8004870:	4b9c      	ldr	r3, [pc, #624]	; (8004ae4 <_printf_float+0x2cc>)
 8004872:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004874:	f7fc f8ca 	bl	8000a0c <__aeabi_dcmpun>
 8004878:	bb70      	cbnz	r0, 80048d8 <_printf_float+0xc0>
 800487a:	f04f 32ff 	mov.w	r2, #4294967295
 800487e:	4640      	mov	r0, r8
 8004880:	4b98      	ldr	r3, [pc, #608]	; (8004ae4 <_printf_float+0x2cc>)
 8004882:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004884:	f7fc f8a4 	bl	80009d0 <__aeabi_dcmple>
 8004888:	bb30      	cbnz	r0, 80048d8 <_printf_float+0xc0>
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	4640      	mov	r0, r8
 8004890:	4651      	mov	r1, sl
 8004892:	f7fc f893 	bl	80009bc <__aeabi_dcmplt>
 8004896:	b110      	cbz	r0, 800489e <_printf_float+0x86>
 8004898:	232d      	movs	r3, #45	; 0x2d
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489e:	4b92      	ldr	r3, [pc, #584]	; (8004ae8 <_printf_float+0x2d0>)
 80048a0:	4892      	ldr	r0, [pc, #584]	; (8004aec <_printf_float+0x2d4>)
 80048a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80048a6:	bf94      	ite	ls
 80048a8:	4698      	movls	r8, r3
 80048aa:	4680      	movhi	r8, r0
 80048ac:	2303      	movs	r3, #3
 80048ae:	f04f 0a00 	mov.w	sl, #0
 80048b2:	6123      	str	r3, [r4, #16]
 80048b4:	f02b 0304 	bic.w	r3, fp, #4
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	4633      	mov	r3, r6
 80048bc:	4621      	mov	r1, r4
 80048be:	4628      	mov	r0, r5
 80048c0:	9700      	str	r7, [sp, #0]
 80048c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80048c4:	f000 f9d4 	bl	8004c70 <_printf_common>
 80048c8:	3001      	adds	r0, #1
 80048ca:	f040 8090 	bne.w	80049ee <_printf_float+0x1d6>
 80048ce:	f04f 30ff 	mov.w	r0, #4294967295
 80048d2:	b011      	add	sp, #68	; 0x44
 80048d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d8:	4642      	mov	r2, r8
 80048da:	4653      	mov	r3, sl
 80048dc:	4640      	mov	r0, r8
 80048de:	4651      	mov	r1, sl
 80048e0:	f7fc f894 	bl	8000a0c <__aeabi_dcmpun>
 80048e4:	b148      	cbz	r0, 80048fa <_printf_float+0xe2>
 80048e6:	f1ba 0f00 	cmp.w	sl, #0
 80048ea:	bfb8      	it	lt
 80048ec:	232d      	movlt	r3, #45	; 0x2d
 80048ee:	4880      	ldr	r0, [pc, #512]	; (8004af0 <_printf_float+0x2d8>)
 80048f0:	bfb8      	it	lt
 80048f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048f6:	4b7f      	ldr	r3, [pc, #508]	; (8004af4 <_printf_float+0x2dc>)
 80048f8:	e7d3      	b.n	80048a2 <_printf_float+0x8a>
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	d142      	bne.n	800498a <_printf_float+0x172>
 8004904:	2306      	movs	r3, #6
 8004906:	6063      	str	r3, [r4, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	9206      	str	r2, [sp, #24]
 800490c:	aa0e      	add	r2, sp, #56	; 0x38
 800490e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004912:	aa0d      	add	r2, sp, #52	; 0x34
 8004914:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004918:	9203      	str	r2, [sp, #12]
 800491a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800491e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004922:	6023      	str	r3, [r4, #0]
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	4642      	mov	r2, r8
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	4628      	mov	r0, r5
 800492c:	4653      	mov	r3, sl
 800492e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004930:	f7ff fed4 	bl	80046dc <__cvt>
 8004934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004936:	4680      	mov	r8, r0
 8004938:	2947      	cmp	r1, #71	; 0x47
 800493a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800493c:	d108      	bne.n	8004950 <_printf_float+0x138>
 800493e:	1cc8      	adds	r0, r1, #3
 8004940:	db02      	blt.n	8004948 <_printf_float+0x130>
 8004942:	6863      	ldr	r3, [r4, #4]
 8004944:	4299      	cmp	r1, r3
 8004946:	dd40      	ble.n	80049ca <_printf_float+0x1b2>
 8004948:	f1a9 0902 	sub.w	r9, r9, #2
 800494c:	fa5f f989 	uxtb.w	r9, r9
 8004950:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004954:	d81f      	bhi.n	8004996 <_printf_float+0x17e>
 8004956:	464a      	mov	r2, r9
 8004958:	3901      	subs	r1, #1
 800495a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800495e:	910d      	str	r1, [sp, #52]	; 0x34
 8004960:	f7ff ff1b 	bl	800479a <__exponent>
 8004964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004966:	4682      	mov	sl, r0
 8004968:	1813      	adds	r3, r2, r0
 800496a:	2a01      	cmp	r2, #1
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	dc02      	bgt.n	8004976 <_printf_float+0x15e>
 8004970:	6822      	ldr	r2, [r4, #0]
 8004972:	07d2      	lsls	r2, r2, #31
 8004974:	d501      	bpl.n	800497a <_printf_float+0x162>
 8004976:	3301      	adds	r3, #1
 8004978:	6123      	str	r3, [r4, #16]
 800497a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800497e:	2b00      	cmp	r3, #0
 8004980:	d09b      	beq.n	80048ba <_printf_float+0xa2>
 8004982:	232d      	movs	r3, #45	; 0x2d
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004988:	e797      	b.n	80048ba <_printf_float+0xa2>
 800498a:	2947      	cmp	r1, #71	; 0x47
 800498c:	d1bc      	bne.n	8004908 <_printf_float+0xf0>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1ba      	bne.n	8004908 <_printf_float+0xf0>
 8004992:	2301      	movs	r3, #1
 8004994:	e7b7      	b.n	8004906 <_printf_float+0xee>
 8004996:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800499a:	d118      	bne.n	80049ce <_printf_float+0x1b6>
 800499c:	2900      	cmp	r1, #0
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	dd0b      	ble.n	80049ba <_printf_float+0x1a2>
 80049a2:	6121      	str	r1, [r4, #16]
 80049a4:	b913      	cbnz	r3, 80049ac <_printf_float+0x194>
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	07d0      	lsls	r0, r2, #31
 80049aa:	d502      	bpl.n	80049b2 <_printf_float+0x19a>
 80049ac:	3301      	adds	r3, #1
 80049ae:	440b      	add	r3, r1
 80049b0:	6123      	str	r3, [r4, #16]
 80049b2:	f04f 0a00 	mov.w	sl, #0
 80049b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80049b8:	e7df      	b.n	800497a <_printf_float+0x162>
 80049ba:	b913      	cbnz	r3, 80049c2 <_printf_float+0x1aa>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	07d2      	lsls	r2, r2, #31
 80049c0:	d501      	bpl.n	80049c6 <_printf_float+0x1ae>
 80049c2:	3302      	adds	r3, #2
 80049c4:	e7f4      	b.n	80049b0 <_printf_float+0x198>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e7f2      	b.n	80049b0 <_printf_float+0x198>
 80049ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049d0:	4299      	cmp	r1, r3
 80049d2:	db05      	blt.n	80049e0 <_printf_float+0x1c8>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	6121      	str	r1, [r4, #16]
 80049d8:	07d8      	lsls	r0, r3, #31
 80049da:	d5ea      	bpl.n	80049b2 <_printf_float+0x19a>
 80049dc:	1c4b      	adds	r3, r1, #1
 80049de:	e7e7      	b.n	80049b0 <_printf_float+0x198>
 80049e0:	2900      	cmp	r1, #0
 80049e2:	bfcc      	ite	gt
 80049e4:	2201      	movgt	r2, #1
 80049e6:	f1c1 0202 	rsble	r2, r1, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	e7e0      	b.n	80049b0 <_printf_float+0x198>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	055a      	lsls	r2, r3, #21
 80049f2:	d407      	bmi.n	8004a04 <_printf_float+0x1ec>
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	4642      	mov	r2, r8
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	d12b      	bne.n	8004a5a <_printf_float+0x242>
 8004a02:	e764      	b.n	80048ce <_printf_float+0xb6>
 8004a04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a08:	f240 80dd 	bls.w	8004bc6 <_printf_float+0x3ae>
 8004a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a10:	2200      	movs	r2, #0
 8004a12:	2300      	movs	r3, #0
 8004a14:	f7fb ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d033      	beq.n	8004a84 <_printf_float+0x26c>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	4a35      	ldr	r2, [pc, #212]	; (8004af8 <_printf_float+0x2e0>)
 8004a24:	47b8      	blx	r7
 8004a26:	3001      	adds	r0, #1
 8004a28:	f43f af51 	beq.w	80048ce <_printf_float+0xb6>
 8004a2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a30:	429a      	cmp	r2, r3
 8004a32:	db02      	blt.n	8004a3a <_printf_float+0x222>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	07d8      	lsls	r0, r3, #31
 8004a38:	d50f      	bpl.n	8004a5a <_printf_float+0x242>
 8004a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	f43f af42 	beq.w	80048ce <_printf_float+0xb6>
 8004a4a:	f04f 0800 	mov.w	r8, #0
 8004a4e:	f104 091a 	add.w	r9, r4, #26
 8004a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a54:	3b01      	subs	r3, #1
 8004a56:	4543      	cmp	r3, r8
 8004a58:	dc09      	bgt.n	8004a6e <_printf_float+0x256>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	079b      	lsls	r3, r3, #30
 8004a5e:	f100 8102 	bmi.w	8004c66 <_printf_float+0x44e>
 8004a62:	68e0      	ldr	r0, [r4, #12]
 8004a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a66:	4298      	cmp	r0, r3
 8004a68:	bfb8      	it	lt
 8004a6a:	4618      	movlt	r0, r3
 8004a6c:	e731      	b.n	80048d2 <_printf_float+0xba>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	464a      	mov	r2, r9
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f af28 	beq.w	80048ce <_printf_float+0xb6>
 8004a7e:	f108 0801 	add.w	r8, r8, #1
 8004a82:	e7e6      	b.n	8004a52 <_printf_float+0x23a>
 8004a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	dc38      	bgt.n	8004afc <_printf_float+0x2e4>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <_printf_float+0x2e0>)
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f af1a 	beq.w	80048ce <_printf_float+0xb6>
 8004a9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d102      	bne.n	8004aa8 <_printf_float+0x290>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	07d9      	lsls	r1, r3, #31
 8004aa6:	d5d8      	bpl.n	8004a5a <_printf_float+0x242>
 8004aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af0b 	beq.w	80048ce <_printf_float+0xb6>
 8004ab8:	f04f 0900 	mov.w	r9, #0
 8004abc:	f104 0a1a 	add.w	sl, r4, #26
 8004ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	454b      	cmp	r3, r9
 8004ac6:	dc01      	bgt.n	8004acc <_printf_float+0x2b4>
 8004ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aca:	e794      	b.n	80049f6 <_printf_float+0x1de>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4652      	mov	r2, sl
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b8      	blx	r7
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f43f aef9 	beq.w	80048ce <_printf_float+0xb6>
 8004adc:	f109 0901 	add.w	r9, r9, #1
 8004ae0:	e7ee      	b.n	8004ac0 <_printf_float+0x2a8>
 8004ae2:	bf00      	nop
 8004ae4:	7fefffff 	.word	0x7fefffff
 8004ae8:	08007364 	.word	0x08007364
 8004aec:	08007368 	.word	0x08007368
 8004af0:	08007370 	.word	0x08007370
 8004af4:	0800736c 	.word	0x0800736c
 8004af8:	08007374 	.word	0x08007374
 8004afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bfa8      	it	ge
 8004b04:	461a      	movge	r2, r3
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	4691      	mov	r9, r2
 8004b0a:	dc37      	bgt.n	8004b7c <_printf_float+0x364>
 8004b0c:	f04f 0b00 	mov.w	fp, #0
 8004b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b14:	f104 021a 	add.w	r2, r4, #26
 8004b18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b1c:	ebaa 0309 	sub.w	r3, sl, r9
 8004b20:	455b      	cmp	r3, fp
 8004b22:	dc33      	bgt.n	8004b8c <_printf_float+0x374>
 8004b24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	db3b      	blt.n	8004ba4 <_printf_float+0x38c>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	07da      	lsls	r2, r3, #31
 8004b30:	d438      	bmi.n	8004ba4 <_printf_float+0x38c>
 8004b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b36:	eba3 020a 	sub.w	r2, r3, sl
 8004b3a:	eba3 0901 	sub.w	r9, r3, r1
 8004b3e:	4591      	cmp	r9, r2
 8004b40:	bfa8      	it	ge
 8004b42:	4691      	movge	r9, r2
 8004b44:	f1b9 0f00 	cmp.w	r9, #0
 8004b48:	dc34      	bgt.n	8004bb4 <_printf_float+0x39c>
 8004b4a:	f04f 0800 	mov.w	r8, #0
 8004b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b52:	f104 0a1a 	add.w	sl, r4, #26
 8004b56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	eba3 0309 	sub.w	r3, r3, r9
 8004b60:	4543      	cmp	r3, r8
 8004b62:	f77f af7a 	ble.w	8004a5a <_printf_float+0x242>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4652      	mov	r2, sl
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f aeac 	beq.w	80048ce <_printf_float+0xb6>
 8004b76:	f108 0801 	add.w	r8, r8, #1
 8004b7a:	e7ec      	b.n	8004b56 <_printf_float+0x33e>
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4642      	mov	r2, r8
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	d1c0      	bne.n	8004b0c <_printf_float+0x2f4>
 8004b8a:	e6a0      	b.n	80048ce <_printf_float+0xb6>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b94:	47b8      	blx	r7
 8004b96:	3001      	adds	r0, #1
 8004b98:	f43f ae99 	beq.w	80048ce <_printf_float+0xb6>
 8004b9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b9e:	f10b 0b01 	add.w	fp, fp, #1
 8004ba2:	e7b9      	b.n	8004b18 <_printf_float+0x300>
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d1bf      	bne.n	8004b32 <_printf_float+0x31a>
 8004bb2:	e68c      	b.n	80048ce <_printf_float+0xb6>
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	eb08 020a 	add.w	r2, r8, sl
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d1c2      	bne.n	8004b4a <_printf_float+0x332>
 8004bc4:	e683      	b.n	80048ce <_printf_float+0xb6>
 8004bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc8:	2a01      	cmp	r2, #1
 8004bca:	dc01      	bgt.n	8004bd0 <_printf_float+0x3b8>
 8004bcc:	07db      	lsls	r3, r3, #31
 8004bce:	d537      	bpl.n	8004c40 <_printf_float+0x428>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f ae77 	beq.w	80048ce <_printf_float+0xb6>
 8004be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004be4:	4631      	mov	r1, r6
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	f43f ae6f 	beq.w	80048ce <_printf_float+0xb6>
 8004bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f7fb fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8004bfc:	b9d8      	cbnz	r0, 8004c36 <_printf_float+0x41e>
 8004bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c00:	f108 0201 	add.w	r2, r8, #1
 8004c04:	3b01      	subs	r3, #1
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d10e      	bne.n	8004c2e <_printf_float+0x416>
 8004c10:	e65d      	b.n	80048ce <_printf_float+0xb6>
 8004c12:	2301      	movs	r3, #1
 8004c14:	464a      	mov	r2, r9
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	f43f ae56 	beq.w	80048ce <_printf_float+0xb6>
 8004c22:	f108 0801 	add.w	r8, r8, #1
 8004c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	4543      	cmp	r3, r8
 8004c2c:	dcf1      	bgt.n	8004c12 <_printf_float+0x3fa>
 8004c2e:	4653      	mov	r3, sl
 8004c30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c34:	e6e0      	b.n	80049f8 <_printf_float+0x1e0>
 8004c36:	f04f 0800 	mov.w	r8, #0
 8004c3a:	f104 091a 	add.w	r9, r4, #26
 8004c3e:	e7f2      	b.n	8004c26 <_printf_float+0x40e>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4642      	mov	r2, r8
 8004c44:	e7df      	b.n	8004c06 <_printf_float+0x3ee>
 8004c46:	2301      	movs	r3, #1
 8004c48:	464a      	mov	r2, r9
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b8      	blx	r7
 8004c50:	3001      	adds	r0, #1
 8004c52:	f43f ae3c 	beq.w	80048ce <_printf_float+0xb6>
 8004c56:	f108 0801 	add.w	r8, r8, #1
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c5e:	1a5b      	subs	r3, r3, r1
 8004c60:	4543      	cmp	r3, r8
 8004c62:	dcf0      	bgt.n	8004c46 <_printf_float+0x42e>
 8004c64:	e6fd      	b.n	8004a62 <_printf_float+0x24a>
 8004c66:	f04f 0800 	mov.w	r8, #0
 8004c6a:	f104 0919 	add.w	r9, r4, #25
 8004c6e:	e7f4      	b.n	8004c5a <_printf_float+0x442>

08004c70 <_printf_common>:
 8004c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	4616      	mov	r6, r2
 8004c76:	4699      	mov	r9, r3
 8004c78:	688a      	ldr	r2, [r1, #8]
 8004c7a:	690b      	ldr	r3, [r1, #16]
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bfb8      	it	lt
 8004c82:	4613      	movlt	r3, r2
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c90:	b10a      	cbz	r2, 8004c96 <_printf_common+0x26>
 8004c92:	3301      	adds	r3, #1
 8004c94:	6033      	str	r3, [r6, #0]
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	0699      	lsls	r1, r3, #26
 8004c9a:	bf42      	ittt	mi
 8004c9c:	6833      	ldrmi	r3, [r6, #0]
 8004c9e:	3302      	addmi	r3, #2
 8004ca0:	6033      	strmi	r3, [r6, #0]
 8004ca2:	6825      	ldr	r5, [r4, #0]
 8004ca4:	f015 0506 	ands.w	r5, r5, #6
 8004ca8:	d106      	bne.n	8004cb8 <_printf_common+0x48>
 8004caa:	f104 0a19 	add.w	sl, r4, #25
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	6832      	ldr	r2, [r6, #0]
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dc28      	bgt.n	8004d0a <_printf_common+0x9a>
 8004cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cbc:	1e13      	subs	r3, r2, #0
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	bf18      	it	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	0692      	lsls	r2, r2, #26
 8004cc6:	d42d      	bmi.n	8004d24 <_printf_common+0xb4>
 8004cc8:	4649      	mov	r1, r9
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cd0:	47c0      	blx	r8
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d020      	beq.n	8004d18 <_printf_common+0xa8>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	68e5      	ldr	r5, [r4, #12]
 8004cda:	f003 0306 	and.w	r3, r3, #6
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf18      	it	ne
 8004ce2:	2500      	movne	r5, #0
 8004ce4:	6832      	ldr	r2, [r6, #0]
 8004ce6:	f04f 0600 	mov.w	r6, #0
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	bf08      	it	eq
 8004cee:	1aad      	subeq	r5, r5, r2
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	bf08      	it	eq
 8004cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bfc4      	itt	gt
 8004cfc:	1a9b      	subgt	r3, r3, r2
 8004cfe:	18ed      	addgt	r5, r5, r3
 8004d00:	341a      	adds	r4, #26
 8004d02:	42b5      	cmp	r5, r6
 8004d04:	d11a      	bne.n	8004d3c <_printf_common+0xcc>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e008      	b.n	8004d1c <_printf_common+0xac>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4638      	mov	r0, r7
 8004d12:	47c0      	blx	r8
 8004d14:	3001      	adds	r0, #1
 8004d16:	d103      	bne.n	8004d20 <_printf_common+0xb0>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d20:	3501      	adds	r5, #1
 8004d22:	e7c4      	b.n	8004cae <_printf_common+0x3e>
 8004d24:	2030      	movs	r0, #48	; 0x30
 8004d26:	18e1      	adds	r1, r4, r3
 8004d28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d32:	4422      	add	r2, r4
 8004d34:	3302      	adds	r3, #2
 8004d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d3a:	e7c5      	b.n	8004cc8 <_printf_common+0x58>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4622      	mov	r2, r4
 8004d40:	4649      	mov	r1, r9
 8004d42:	4638      	mov	r0, r7
 8004d44:	47c0      	blx	r8
 8004d46:	3001      	adds	r0, #1
 8004d48:	d0e6      	beq.n	8004d18 <_printf_common+0xa8>
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7d9      	b.n	8004d02 <_printf_common+0x92>
	...

08004d50 <_printf_i>:
 8004d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	7e0f      	ldrb	r7, [r1, #24]
 8004d56:	4691      	mov	r9, r2
 8004d58:	2f78      	cmp	r7, #120	; 0x78
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	469a      	mov	sl, r3
 8004d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d66:	d807      	bhi.n	8004d78 <_printf_i+0x28>
 8004d68:	2f62      	cmp	r7, #98	; 0x62
 8004d6a:	d80a      	bhi.n	8004d82 <_printf_i+0x32>
 8004d6c:	2f00      	cmp	r7, #0
 8004d6e:	f000 80d9 	beq.w	8004f24 <_printf_i+0x1d4>
 8004d72:	2f58      	cmp	r7, #88	; 0x58
 8004d74:	f000 80a4 	beq.w	8004ec0 <_printf_i+0x170>
 8004d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d80:	e03a      	b.n	8004df8 <_printf_i+0xa8>
 8004d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d86:	2b15      	cmp	r3, #21
 8004d88:	d8f6      	bhi.n	8004d78 <_printf_i+0x28>
 8004d8a:	a101      	add	r1, pc, #4	; (adr r1, 8004d90 <_printf_i+0x40>)
 8004d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004d79 	.word	0x08004d79
 8004d9c:	08004d79 	.word	0x08004d79
 8004da0:	08004d79 	.word	0x08004d79
 8004da4:	08004d79 	.word	0x08004d79
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004d79 	.word	0x08004d79
 8004db0:	08004d79 	.word	0x08004d79
 8004db4:	08004d79 	.word	0x08004d79
 8004db8:	08004d79 	.word	0x08004d79
 8004dbc:	08004f0b 	.word	0x08004f0b
 8004dc0:	08004e2d 	.word	0x08004e2d
 8004dc4:	08004eed 	.word	0x08004eed
 8004dc8:	08004d79 	.word	0x08004d79
 8004dcc:	08004d79 	.word	0x08004d79
 8004dd0:	08004f2d 	.word	0x08004f2d
 8004dd4:	08004d79 	.word	0x08004d79
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004d79 	.word	0x08004d79
 8004de0:	08004d79 	.word	0x08004d79
 8004de4:	08004ef5 	.word	0x08004ef5
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	602a      	str	r2, [r5, #0]
 8004df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0a4      	b.n	8004f46 <_printf_i+0x1f6>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	6829      	ldr	r1, [r5, #0]
 8004e00:	0606      	lsls	r6, r0, #24
 8004e02:	f101 0304 	add.w	r3, r1, #4
 8004e06:	d50a      	bpl.n	8004e1e <_printf_i+0xce>
 8004e08:	680e      	ldr	r6, [r1, #0]
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	2e00      	cmp	r6, #0
 8004e0e:	da03      	bge.n	8004e18 <_printf_i+0xc8>
 8004e10:	232d      	movs	r3, #45	; 0x2d
 8004e12:	4276      	negs	r6, r6
 8004e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e18:	230a      	movs	r3, #10
 8004e1a:	485e      	ldr	r0, [pc, #376]	; (8004f94 <_printf_i+0x244>)
 8004e1c:	e019      	b.n	8004e52 <_printf_i+0x102>
 8004e1e:	680e      	ldr	r6, [r1, #0]
 8004e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	bf18      	it	ne
 8004e28:	b236      	sxthne	r6, r6
 8004e2a:	e7ef      	b.n	8004e0c <_printf_i+0xbc>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	1d19      	adds	r1, r3, #4
 8004e32:	6029      	str	r1, [r5, #0]
 8004e34:	0601      	lsls	r1, r0, #24
 8004e36:	d501      	bpl.n	8004e3c <_printf_i+0xec>
 8004e38:	681e      	ldr	r6, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <_printf_i+0xf2>
 8004e3c:	0646      	lsls	r6, r0, #25
 8004e3e:	d5fb      	bpl.n	8004e38 <_printf_i+0xe8>
 8004e40:	881e      	ldrh	r6, [r3, #0]
 8004e42:	2f6f      	cmp	r7, #111	; 0x6f
 8004e44:	bf0c      	ite	eq
 8004e46:	2308      	moveq	r3, #8
 8004e48:	230a      	movne	r3, #10
 8004e4a:	4852      	ldr	r0, [pc, #328]	; (8004f94 <_printf_i+0x244>)
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e52:	6865      	ldr	r5, [r4, #4]
 8004e54:	2d00      	cmp	r5, #0
 8004e56:	bfa8      	it	ge
 8004e58:	6821      	ldrge	r1, [r4, #0]
 8004e5a:	60a5      	str	r5, [r4, #8]
 8004e5c:	bfa4      	itt	ge
 8004e5e:	f021 0104 	bicge.w	r1, r1, #4
 8004e62:	6021      	strge	r1, [r4, #0]
 8004e64:	b90e      	cbnz	r6, 8004e6a <_printf_i+0x11a>
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	d04d      	beq.n	8004f06 <_printf_i+0x1b6>
 8004e6a:	4615      	mov	r5, r2
 8004e6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e70:	fb03 6711 	mls	r7, r3, r1, r6
 8004e74:	5dc7      	ldrb	r7, [r0, r7]
 8004e76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e7a:	4637      	mov	r7, r6
 8004e7c:	42bb      	cmp	r3, r7
 8004e7e:	460e      	mov	r6, r1
 8004e80:	d9f4      	bls.n	8004e6c <_printf_i+0x11c>
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d10b      	bne.n	8004e9e <_printf_i+0x14e>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	07de      	lsls	r6, r3, #31
 8004e8a:	d508      	bpl.n	8004e9e <_printf_i+0x14e>
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	6861      	ldr	r1, [r4, #4]
 8004e90:	4299      	cmp	r1, r3
 8004e92:	bfde      	ittt	le
 8004e94:	2330      	movle	r3, #48	; 0x30
 8004e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e9e:	1b52      	subs	r2, r2, r5
 8004ea0:	6122      	str	r2, [r4, #16]
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	f8cd a000 	str.w	sl, [sp]
 8004eac:	aa03      	add	r2, sp, #12
 8004eae:	f7ff fedf 	bl	8004c70 <_printf_common>
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d14c      	bne.n	8004f50 <_printf_i+0x200>
 8004eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eba:	b004      	add	sp, #16
 8004ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec0:	4834      	ldr	r0, [pc, #208]	; (8004f94 <_printf_i+0x244>)
 8004ec2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ec6:	6829      	ldr	r1, [r5, #0]
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ece:	6029      	str	r1, [r5, #0]
 8004ed0:	061d      	lsls	r5, r3, #24
 8004ed2:	d514      	bpl.n	8004efe <_printf_i+0x1ae>
 8004ed4:	07df      	lsls	r7, r3, #31
 8004ed6:	bf44      	itt	mi
 8004ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8004edc:	6023      	strmi	r3, [r4, #0]
 8004ede:	b91e      	cbnz	r6, 8004ee8 <_printf_i+0x198>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	f023 0320 	bic.w	r3, r3, #32
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	2310      	movs	r3, #16
 8004eea:	e7af      	b.n	8004e4c <_printf_i+0xfc>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	f043 0320 	orr.w	r3, r3, #32
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	2378      	movs	r3, #120	; 0x78
 8004ef6:	4828      	ldr	r0, [pc, #160]	; (8004f98 <_printf_i+0x248>)
 8004ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004efc:	e7e3      	b.n	8004ec6 <_printf_i+0x176>
 8004efe:	0659      	lsls	r1, r3, #25
 8004f00:	bf48      	it	mi
 8004f02:	b2b6      	uxthmi	r6, r6
 8004f04:	e7e6      	b.n	8004ed4 <_printf_i+0x184>
 8004f06:	4615      	mov	r5, r2
 8004f08:	e7bb      	b.n	8004e82 <_printf_i+0x132>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	6826      	ldr	r6, [r4, #0]
 8004f0e:	1d18      	adds	r0, r3, #4
 8004f10:	6961      	ldr	r1, [r4, #20]
 8004f12:	6028      	str	r0, [r5, #0]
 8004f14:	0635      	lsls	r5, r6, #24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	d501      	bpl.n	8004f1e <_printf_i+0x1ce>
 8004f1a:	6019      	str	r1, [r3, #0]
 8004f1c:	e002      	b.n	8004f24 <_printf_i+0x1d4>
 8004f1e:	0670      	lsls	r0, r6, #25
 8004f20:	d5fb      	bpl.n	8004f1a <_printf_i+0x1ca>
 8004f22:	8019      	strh	r1, [r3, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	4615      	mov	r5, r2
 8004f28:	6123      	str	r3, [r4, #16]
 8004f2a:	e7ba      	b.n	8004ea2 <_printf_i+0x152>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	1d1a      	adds	r2, r3, #4
 8004f32:	602a      	str	r2, [r5, #0]
 8004f34:	681d      	ldr	r5, [r3, #0]
 8004f36:	6862      	ldr	r2, [r4, #4]
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 fedf 	bl	8005cfc <memchr>
 8004f3e:	b108      	cbz	r0, 8004f44 <_printf_i+0x1f4>
 8004f40:	1b40      	subs	r0, r0, r5
 8004f42:	6060      	str	r0, [r4, #4]
 8004f44:	6863      	ldr	r3, [r4, #4]
 8004f46:	6123      	str	r3, [r4, #16]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f4e:	e7a8      	b.n	8004ea2 <_printf_i+0x152>
 8004f50:	462a      	mov	r2, r5
 8004f52:	4649      	mov	r1, r9
 8004f54:	4640      	mov	r0, r8
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	47d0      	blx	sl
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d0ab      	beq.n	8004eb6 <_printf_i+0x166>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	079b      	lsls	r3, r3, #30
 8004f62:	d413      	bmi.n	8004f8c <_printf_i+0x23c>
 8004f64:	68e0      	ldr	r0, [r4, #12]
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	4298      	cmp	r0, r3
 8004f6a:	bfb8      	it	lt
 8004f6c:	4618      	movlt	r0, r3
 8004f6e:	e7a4      	b.n	8004eba <_printf_i+0x16a>
 8004f70:	2301      	movs	r3, #1
 8004f72:	4632      	mov	r2, r6
 8004f74:	4649      	mov	r1, r9
 8004f76:	4640      	mov	r0, r8
 8004f78:	47d0      	blx	sl
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d09b      	beq.n	8004eb6 <_printf_i+0x166>
 8004f7e:	3501      	adds	r5, #1
 8004f80:	68e3      	ldr	r3, [r4, #12]
 8004f82:	9903      	ldr	r1, [sp, #12]
 8004f84:	1a5b      	subs	r3, r3, r1
 8004f86:	42ab      	cmp	r3, r5
 8004f88:	dcf2      	bgt.n	8004f70 <_printf_i+0x220>
 8004f8a:	e7eb      	b.n	8004f64 <_printf_i+0x214>
 8004f8c:	2500      	movs	r5, #0
 8004f8e:	f104 0619 	add.w	r6, r4, #25
 8004f92:	e7f5      	b.n	8004f80 <_printf_i+0x230>
 8004f94:	08007376 	.word	0x08007376
 8004f98:	08007387 	.word	0x08007387

08004f9c <_sbrk_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	4d05      	ldr	r5, [pc, #20]	; (8004fb8 <_sbrk_r+0x1c>)
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	f7fc ff70 	bl	8001e8c <_sbrk>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_sbrk_r+0x1a>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_sbrk_r+0x1a>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	2000044c 	.word	0x2000044c

08004fbc <siprintf>:
 8004fbc:	b40e      	push	{r1, r2, r3}
 8004fbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fc2:	b500      	push	{lr}
 8004fc4:	b09c      	sub	sp, #112	; 0x70
 8004fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fc8:	9002      	str	r0, [sp, #8]
 8004fca:	9006      	str	r0, [sp, #24]
 8004fcc:	9107      	str	r1, [sp, #28]
 8004fce:	9104      	str	r1, [sp, #16]
 8004fd0:	4808      	ldr	r0, [pc, #32]	; (8004ff4 <siprintf+0x38>)
 8004fd2:	4909      	ldr	r1, [pc, #36]	; (8004ff8 <siprintf+0x3c>)
 8004fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fd8:	9105      	str	r1, [sp, #20]
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	a902      	add	r1, sp, #8
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	f001 faa6 	bl	8006530 <_svfiprintf_r>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	9b02      	ldr	r3, [sp, #8]
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	b01c      	add	sp, #112	; 0x70
 8004fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff0:	b003      	add	sp, #12
 8004ff2:	4770      	bx	lr
 8004ff4:	20000010 	.word	0x20000010
 8004ff8:	ffff0208 	.word	0xffff0208

08004ffc <quorem>:
 8004ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	6903      	ldr	r3, [r0, #16]
 8005002:	690c      	ldr	r4, [r1, #16]
 8005004:	4607      	mov	r7, r0
 8005006:	42a3      	cmp	r3, r4
 8005008:	f2c0 8082 	blt.w	8005110 <quorem+0x114>
 800500c:	3c01      	subs	r4, #1
 800500e:	f100 0514 	add.w	r5, r0, #20
 8005012:	f101 0814 	add.w	r8, r1, #20
 8005016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005024:	3301      	adds	r3, #1
 8005026:	429a      	cmp	r2, r3
 8005028:	fbb2 f6f3 	udiv	r6, r2, r3
 800502c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005034:	d331      	bcc.n	800509a <quorem+0x9e>
 8005036:	f04f 0e00 	mov.w	lr, #0
 800503a:	4640      	mov	r0, r8
 800503c:	46ac      	mov	ip, r5
 800503e:	46f2      	mov	sl, lr
 8005040:	f850 2b04 	ldr.w	r2, [r0], #4
 8005044:	b293      	uxth	r3, r2
 8005046:	fb06 e303 	mla	r3, r6, r3, lr
 800504a:	0c12      	lsrs	r2, r2, #16
 800504c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005050:	b29b      	uxth	r3, r3
 8005052:	fb06 e202 	mla	r2, r6, r2, lr
 8005056:	ebaa 0303 	sub.w	r3, sl, r3
 800505a:	f8dc a000 	ldr.w	sl, [ip]
 800505e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005062:	fa1f fa8a 	uxth.w	sl, sl
 8005066:	4453      	add	r3, sl
 8005068:	f8dc a000 	ldr.w	sl, [ip]
 800506c:	b292      	uxth	r2, r2
 800506e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005072:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800507c:	4581      	cmp	r9, r0
 800507e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005082:	f84c 3b04 	str.w	r3, [ip], #4
 8005086:	d2db      	bcs.n	8005040 <quorem+0x44>
 8005088:	f855 300b 	ldr.w	r3, [r5, fp]
 800508c:	b92b      	cbnz	r3, 800509a <quorem+0x9e>
 800508e:	9b01      	ldr	r3, [sp, #4]
 8005090:	3b04      	subs	r3, #4
 8005092:	429d      	cmp	r5, r3
 8005094:	461a      	mov	r2, r3
 8005096:	d32f      	bcc.n	80050f8 <quorem+0xfc>
 8005098:	613c      	str	r4, [r7, #16]
 800509a:	4638      	mov	r0, r7
 800509c:	f001 f8d4 	bl	8006248 <__mcmp>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	db25      	blt.n	80050f0 <quorem+0xf4>
 80050a4:	4628      	mov	r0, r5
 80050a6:	f04f 0c00 	mov.w	ip, #0
 80050aa:	3601      	adds	r6, #1
 80050ac:	f858 1b04 	ldr.w	r1, [r8], #4
 80050b0:	f8d0 e000 	ldr.w	lr, [r0]
 80050b4:	b28b      	uxth	r3, r1
 80050b6:	ebac 0303 	sub.w	r3, ip, r3
 80050ba:	fa1f f28e 	uxth.w	r2, lr
 80050be:	4413      	add	r3, r2
 80050c0:	0c0a      	lsrs	r2, r1, #16
 80050c2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80050c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050d0:	45c1      	cmp	r9, r8
 80050d2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050d6:	f840 3b04 	str.w	r3, [r0], #4
 80050da:	d2e7      	bcs.n	80050ac <quorem+0xb0>
 80050dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050e4:	b922      	cbnz	r2, 80050f0 <quorem+0xf4>
 80050e6:	3b04      	subs	r3, #4
 80050e8:	429d      	cmp	r5, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	d30a      	bcc.n	8005104 <quorem+0x108>
 80050ee:	613c      	str	r4, [r7, #16]
 80050f0:	4630      	mov	r0, r6
 80050f2:	b003      	add	sp, #12
 80050f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	3b04      	subs	r3, #4
 80050fc:	2a00      	cmp	r2, #0
 80050fe:	d1cb      	bne.n	8005098 <quorem+0x9c>
 8005100:	3c01      	subs	r4, #1
 8005102:	e7c6      	b.n	8005092 <quorem+0x96>
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	3b04      	subs	r3, #4
 8005108:	2a00      	cmp	r2, #0
 800510a:	d1f0      	bne.n	80050ee <quorem+0xf2>
 800510c:	3c01      	subs	r4, #1
 800510e:	e7eb      	b.n	80050e8 <quorem+0xec>
 8005110:	2000      	movs	r0, #0
 8005112:	e7ee      	b.n	80050f2 <quorem+0xf6>
 8005114:	0000      	movs	r0, r0
	...

08005118 <_dtoa_r>:
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	4616      	mov	r6, r2
 800511e:	461f      	mov	r7, r3
 8005120:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005122:	b099      	sub	sp, #100	; 0x64
 8005124:	4605      	mov	r5, r0
 8005126:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800512a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800512e:	b974      	cbnz	r4, 800514e <_dtoa_r+0x36>
 8005130:	2010      	movs	r0, #16
 8005132:	f7ff f9df 	bl	80044f4 <malloc>
 8005136:	4602      	mov	r2, r0
 8005138:	6268      	str	r0, [r5, #36]	; 0x24
 800513a:	b920      	cbnz	r0, 8005146 <_dtoa_r+0x2e>
 800513c:	21ea      	movs	r1, #234	; 0xea
 800513e:	4ba8      	ldr	r3, [pc, #672]	; (80053e0 <_dtoa_r+0x2c8>)
 8005140:	48a8      	ldr	r0, [pc, #672]	; (80053e4 <_dtoa_r+0x2cc>)
 8005142:	f001 faf5 	bl	8006730 <__assert_func>
 8005146:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800514a:	6004      	str	r4, [r0, #0]
 800514c:	60c4      	str	r4, [r0, #12]
 800514e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005150:	6819      	ldr	r1, [r3, #0]
 8005152:	b151      	cbz	r1, 800516a <_dtoa_r+0x52>
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	2301      	movs	r3, #1
 8005158:	4093      	lsls	r3, r2
 800515a:	604a      	str	r2, [r1, #4]
 800515c:	608b      	str	r3, [r1, #8]
 800515e:	4628      	mov	r0, r5
 8005160:	f000 fe34 	bl	8005dcc <_Bfree>
 8005164:	2200      	movs	r2, #0
 8005166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	1e3b      	subs	r3, r7, #0
 800516c:	bfaf      	iteee	ge
 800516e:	2300      	movge	r3, #0
 8005170:	2201      	movlt	r2, #1
 8005172:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005176:	9305      	strlt	r3, [sp, #20]
 8005178:	bfa8      	it	ge
 800517a:	f8c8 3000 	strge.w	r3, [r8]
 800517e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005182:	4b99      	ldr	r3, [pc, #612]	; (80053e8 <_dtoa_r+0x2d0>)
 8005184:	bfb8      	it	lt
 8005186:	f8c8 2000 	strlt.w	r2, [r8]
 800518a:	ea33 0309 	bics.w	r3, r3, r9
 800518e:	d119      	bne.n	80051c4 <_dtoa_r+0xac>
 8005190:	f242 730f 	movw	r3, #9999	; 0x270f
 8005194:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800519c:	4333      	orrs	r3, r6
 800519e:	f000 857f 	beq.w	8005ca0 <_dtoa_r+0xb88>
 80051a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051a4:	b953      	cbnz	r3, 80051bc <_dtoa_r+0xa4>
 80051a6:	4b91      	ldr	r3, [pc, #580]	; (80053ec <_dtoa_r+0x2d4>)
 80051a8:	e022      	b.n	80051f0 <_dtoa_r+0xd8>
 80051aa:	4b91      	ldr	r3, [pc, #580]	; (80053f0 <_dtoa_r+0x2d8>)
 80051ac:	9303      	str	r3, [sp, #12]
 80051ae:	3308      	adds	r3, #8
 80051b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	9803      	ldr	r0, [sp, #12]
 80051b6:	b019      	add	sp, #100	; 0x64
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051bc:	4b8b      	ldr	r3, [pc, #556]	; (80053ec <_dtoa_r+0x2d4>)
 80051be:	9303      	str	r3, [sp, #12]
 80051c0:	3303      	adds	r3, #3
 80051c2:	e7f5      	b.n	80051b0 <_dtoa_r+0x98>
 80051c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80051cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051d0:	2200      	movs	r2, #0
 80051d2:	2300      	movs	r3, #0
 80051d4:	f7fb fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80051d8:	4680      	mov	r8, r0
 80051da:	b158      	cbz	r0, 80051f4 <_dtoa_r+0xdc>
 80051dc:	2301      	movs	r3, #1
 80051de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8558 	beq.w	8005c9a <_dtoa_r+0xb82>
 80051ea:	4882      	ldr	r0, [pc, #520]	; (80053f4 <_dtoa_r+0x2dc>)
 80051ec:	6018      	str	r0, [r3, #0]
 80051ee:	1e43      	subs	r3, r0, #1
 80051f0:	9303      	str	r3, [sp, #12]
 80051f2:	e7df      	b.n	80051b4 <_dtoa_r+0x9c>
 80051f4:	ab16      	add	r3, sp, #88	; 0x58
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	ab17      	add	r3, sp, #92	; 0x5c
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	4628      	mov	r0, r5
 80051fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005202:	f001 f8c9 	bl	8006398 <__d2b>
 8005206:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800520a:	4683      	mov	fp, r0
 800520c:	2c00      	cmp	r4, #0
 800520e:	d07f      	beq.n	8005310 <_dtoa_r+0x1f8>
 8005210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005216:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800521a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800521e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005222:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005226:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800522a:	2200      	movs	r2, #0
 800522c:	4b72      	ldr	r3, [pc, #456]	; (80053f8 <_dtoa_r+0x2e0>)
 800522e:	f7fa ff9b 	bl	8000168 <__aeabi_dsub>
 8005232:	a365      	add	r3, pc, #404	; (adr r3, 80053c8 <_dtoa_r+0x2b0>)
 8005234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005238:	f7fb f94e 	bl	80004d8 <__aeabi_dmul>
 800523c:	a364      	add	r3, pc, #400	; (adr r3, 80053d0 <_dtoa_r+0x2b8>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f7fa ff93 	bl	800016c <__adddf3>
 8005246:	4606      	mov	r6, r0
 8005248:	4620      	mov	r0, r4
 800524a:	460f      	mov	r7, r1
 800524c:	f7fb f8da 	bl	8000404 <__aeabi_i2d>
 8005250:	a361      	add	r3, pc, #388	; (adr r3, 80053d8 <_dtoa_r+0x2c0>)
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f7fb f93f 	bl	80004d8 <__aeabi_dmul>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4630      	mov	r0, r6
 8005260:	4639      	mov	r1, r7
 8005262:	f7fa ff83 	bl	800016c <__adddf3>
 8005266:	4606      	mov	r6, r0
 8005268:	460f      	mov	r7, r1
 800526a:	f7fb fbe5 	bl	8000a38 <__aeabi_d2iz>
 800526e:	2200      	movs	r2, #0
 8005270:	4682      	mov	sl, r0
 8005272:	2300      	movs	r3, #0
 8005274:	4630      	mov	r0, r6
 8005276:	4639      	mov	r1, r7
 8005278:	f7fb fba0 	bl	80009bc <__aeabi_dcmplt>
 800527c:	b148      	cbz	r0, 8005292 <_dtoa_r+0x17a>
 800527e:	4650      	mov	r0, sl
 8005280:	f7fb f8c0 	bl	8000404 <__aeabi_i2d>
 8005284:	4632      	mov	r2, r6
 8005286:	463b      	mov	r3, r7
 8005288:	f7fb fb8e 	bl	80009a8 <__aeabi_dcmpeq>
 800528c:	b908      	cbnz	r0, 8005292 <_dtoa_r+0x17a>
 800528e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005292:	f1ba 0f16 	cmp.w	sl, #22
 8005296:	d858      	bhi.n	800534a <_dtoa_r+0x232>
 8005298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800529c:	4b57      	ldr	r3, [pc, #348]	; (80053fc <_dtoa_r+0x2e4>)
 800529e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f7fb fb89 	bl	80009bc <__aeabi_dcmplt>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d04f      	beq.n	800534e <_dtoa_r+0x236>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80052b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052b8:	1b1c      	subs	r4, r3, r4
 80052ba:	1e63      	subs	r3, r4, #1
 80052bc:	9309      	str	r3, [sp, #36]	; 0x24
 80052be:	bf49      	itett	mi
 80052c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80052c4:	2300      	movpl	r3, #0
 80052c6:	9306      	strmi	r3, [sp, #24]
 80052c8:	2300      	movmi	r3, #0
 80052ca:	bf54      	ite	pl
 80052cc:	9306      	strpl	r3, [sp, #24]
 80052ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80052d0:	f1ba 0f00 	cmp.w	sl, #0
 80052d4:	db3d      	blt.n	8005352 <_dtoa_r+0x23a>
 80052d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80052dc:	4453      	add	r3, sl
 80052de:	9309      	str	r3, [sp, #36]	; 0x24
 80052e0:	2300      	movs	r3, #0
 80052e2:	930a      	str	r3, [sp, #40]	; 0x28
 80052e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	f200 808c 	bhi.w	8005404 <_dtoa_r+0x2ec>
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	bfc4      	itt	gt
 80052f0:	3b04      	subgt	r3, #4
 80052f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80052f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052f6:	bfc8      	it	gt
 80052f8:	2400      	movgt	r4, #0
 80052fa:	f1a3 0302 	sub.w	r3, r3, #2
 80052fe:	bfd8      	it	le
 8005300:	2401      	movle	r4, #1
 8005302:	2b03      	cmp	r3, #3
 8005304:	f200 808a 	bhi.w	800541c <_dtoa_r+0x304>
 8005308:	e8df f003 	tbb	[pc, r3]
 800530c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005310:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005314:	441c      	add	r4, r3
 8005316:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800531a:	2b20      	cmp	r3, #32
 800531c:	bfc3      	ittte	gt
 800531e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005322:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005326:	fa09 f303 	lslgt.w	r3, r9, r3
 800532a:	f1c3 0320 	rsble	r3, r3, #32
 800532e:	bfc6      	itte	gt
 8005330:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005334:	4318      	orrgt	r0, r3
 8005336:	fa06 f003 	lslle.w	r0, r6, r3
 800533a:	f7fb f853 	bl	80003e4 <__aeabi_ui2d>
 800533e:	2301      	movs	r3, #1
 8005340:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005344:	3c01      	subs	r4, #1
 8005346:	9313      	str	r3, [sp, #76]	; 0x4c
 8005348:	e76f      	b.n	800522a <_dtoa_r+0x112>
 800534a:	2301      	movs	r3, #1
 800534c:	e7b2      	b.n	80052b4 <_dtoa_r+0x19c>
 800534e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005350:	e7b1      	b.n	80052b6 <_dtoa_r+0x19e>
 8005352:	9b06      	ldr	r3, [sp, #24]
 8005354:	eba3 030a 	sub.w	r3, r3, sl
 8005358:	9306      	str	r3, [sp, #24]
 800535a:	f1ca 0300 	rsb	r3, sl, #0
 800535e:	930a      	str	r3, [sp, #40]	; 0x28
 8005360:	2300      	movs	r3, #0
 8005362:	930e      	str	r3, [sp, #56]	; 0x38
 8005364:	e7be      	b.n	80052e4 <_dtoa_r+0x1cc>
 8005366:	2300      	movs	r3, #0
 8005368:	930b      	str	r3, [sp, #44]	; 0x2c
 800536a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800536c:	2b00      	cmp	r3, #0
 800536e:	dc58      	bgt.n	8005422 <_dtoa_r+0x30a>
 8005370:	f04f 0901 	mov.w	r9, #1
 8005374:	464b      	mov	r3, r9
 8005376:	f8cd 9020 	str.w	r9, [sp, #32]
 800537a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800537e:	2200      	movs	r2, #0
 8005380:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005382:	6042      	str	r2, [r0, #4]
 8005384:	2204      	movs	r2, #4
 8005386:	f102 0614 	add.w	r6, r2, #20
 800538a:	429e      	cmp	r6, r3
 800538c:	6841      	ldr	r1, [r0, #4]
 800538e:	d94e      	bls.n	800542e <_dtoa_r+0x316>
 8005390:	4628      	mov	r0, r5
 8005392:	f000 fcdb 	bl	8005d4c <_Balloc>
 8005396:	9003      	str	r0, [sp, #12]
 8005398:	2800      	cmp	r0, #0
 800539a:	d14c      	bne.n	8005436 <_dtoa_r+0x31e>
 800539c:	4602      	mov	r2, r0
 800539e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053a2:	4b17      	ldr	r3, [pc, #92]	; (8005400 <_dtoa_r+0x2e8>)
 80053a4:	e6cc      	b.n	8005140 <_dtoa_r+0x28>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e7de      	b.n	8005368 <_dtoa_r+0x250>
 80053aa:	2300      	movs	r3, #0
 80053ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053b0:	eb0a 0903 	add.w	r9, sl, r3
 80053b4:	f109 0301 	add.w	r3, r9, #1
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	9308      	str	r3, [sp, #32]
 80053bc:	bfb8      	it	lt
 80053be:	2301      	movlt	r3, #1
 80053c0:	e7dd      	b.n	800537e <_dtoa_r+0x266>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e7f2      	b.n	80053ac <_dtoa_r+0x294>
 80053c6:	bf00      	nop
 80053c8:	636f4361 	.word	0x636f4361
 80053cc:	3fd287a7 	.word	0x3fd287a7
 80053d0:	8b60c8b3 	.word	0x8b60c8b3
 80053d4:	3fc68a28 	.word	0x3fc68a28
 80053d8:	509f79fb 	.word	0x509f79fb
 80053dc:	3fd34413 	.word	0x3fd34413
 80053e0:	080073a5 	.word	0x080073a5
 80053e4:	080073bc 	.word	0x080073bc
 80053e8:	7ff00000 	.word	0x7ff00000
 80053ec:	080073a1 	.word	0x080073a1
 80053f0:	08007398 	.word	0x08007398
 80053f4:	08007375 	.word	0x08007375
 80053f8:	3ff80000 	.word	0x3ff80000
 80053fc:	080074b0 	.word	0x080074b0
 8005400:	08007417 	.word	0x08007417
 8005404:	2401      	movs	r4, #1
 8005406:	2300      	movs	r3, #0
 8005408:	940b      	str	r4, [sp, #44]	; 0x2c
 800540a:	9322      	str	r3, [sp, #136]	; 0x88
 800540c:	f04f 39ff 	mov.w	r9, #4294967295
 8005410:	2200      	movs	r2, #0
 8005412:	2312      	movs	r3, #18
 8005414:	f8cd 9020 	str.w	r9, [sp, #32]
 8005418:	9223      	str	r2, [sp, #140]	; 0x8c
 800541a:	e7b0      	b.n	800537e <_dtoa_r+0x266>
 800541c:	2301      	movs	r3, #1
 800541e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005420:	e7f4      	b.n	800540c <_dtoa_r+0x2f4>
 8005422:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005426:	464b      	mov	r3, r9
 8005428:	f8cd 9020 	str.w	r9, [sp, #32]
 800542c:	e7a7      	b.n	800537e <_dtoa_r+0x266>
 800542e:	3101      	adds	r1, #1
 8005430:	6041      	str	r1, [r0, #4]
 8005432:	0052      	lsls	r2, r2, #1
 8005434:	e7a7      	b.n	8005386 <_dtoa_r+0x26e>
 8005436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005438:	9a03      	ldr	r2, [sp, #12]
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	9b08      	ldr	r3, [sp, #32]
 800543e:	2b0e      	cmp	r3, #14
 8005440:	f200 80a8 	bhi.w	8005594 <_dtoa_r+0x47c>
 8005444:	2c00      	cmp	r4, #0
 8005446:	f000 80a5 	beq.w	8005594 <_dtoa_r+0x47c>
 800544a:	f1ba 0f00 	cmp.w	sl, #0
 800544e:	dd34      	ble.n	80054ba <_dtoa_r+0x3a2>
 8005450:	4a9a      	ldr	r2, [pc, #616]	; (80056bc <_dtoa_r+0x5a4>)
 8005452:	f00a 030f 	and.w	r3, sl, #15
 8005456:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800545a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800545e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005462:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005466:	ea4f 142a 	mov.w	r4, sl, asr #4
 800546a:	d016      	beq.n	800549a <_dtoa_r+0x382>
 800546c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005470:	4b93      	ldr	r3, [pc, #588]	; (80056c0 <_dtoa_r+0x5a8>)
 8005472:	2703      	movs	r7, #3
 8005474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005478:	f7fb f958 	bl	800072c <__aeabi_ddiv>
 800547c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005480:	f004 040f 	and.w	r4, r4, #15
 8005484:	4e8e      	ldr	r6, [pc, #568]	; (80056c0 <_dtoa_r+0x5a8>)
 8005486:	b954      	cbnz	r4, 800549e <_dtoa_r+0x386>
 8005488:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800548c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005490:	f7fb f94c 	bl	800072c <__aeabi_ddiv>
 8005494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005498:	e029      	b.n	80054ee <_dtoa_r+0x3d6>
 800549a:	2702      	movs	r7, #2
 800549c:	e7f2      	b.n	8005484 <_dtoa_r+0x36c>
 800549e:	07e1      	lsls	r1, r4, #31
 80054a0:	d508      	bpl.n	80054b4 <_dtoa_r+0x39c>
 80054a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054aa:	f7fb f815 	bl	80004d8 <__aeabi_dmul>
 80054ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054b2:	3701      	adds	r7, #1
 80054b4:	1064      	asrs	r4, r4, #1
 80054b6:	3608      	adds	r6, #8
 80054b8:	e7e5      	b.n	8005486 <_dtoa_r+0x36e>
 80054ba:	f000 80a5 	beq.w	8005608 <_dtoa_r+0x4f0>
 80054be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054c2:	f1ca 0400 	rsb	r4, sl, #0
 80054c6:	4b7d      	ldr	r3, [pc, #500]	; (80056bc <_dtoa_r+0x5a4>)
 80054c8:	f004 020f 	and.w	r2, r4, #15
 80054cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f7fb f800 	bl	80004d8 <__aeabi_dmul>
 80054d8:	2702      	movs	r7, #2
 80054da:	2300      	movs	r3, #0
 80054dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054e0:	4e77      	ldr	r6, [pc, #476]	; (80056c0 <_dtoa_r+0x5a8>)
 80054e2:	1124      	asrs	r4, r4, #4
 80054e4:	2c00      	cmp	r4, #0
 80054e6:	f040 8084 	bne.w	80055f2 <_dtoa_r+0x4da>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1d2      	bne.n	8005494 <_dtoa_r+0x37c>
 80054ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 808b 	beq.w	800560c <_dtoa_r+0x4f4>
 80054f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005502:	2200      	movs	r2, #0
 8005504:	4b6f      	ldr	r3, [pc, #444]	; (80056c4 <_dtoa_r+0x5ac>)
 8005506:	f7fb fa59 	bl	80009bc <__aeabi_dcmplt>
 800550a:	2800      	cmp	r0, #0
 800550c:	d07e      	beq.n	800560c <_dtoa_r+0x4f4>
 800550e:	9b08      	ldr	r3, [sp, #32]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d07b      	beq.n	800560c <_dtoa_r+0x4f4>
 8005514:	f1b9 0f00 	cmp.w	r9, #0
 8005518:	dd38      	ble.n	800558c <_dtoa_r+0x474>
 800551a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800551e:	2200      	movs	r2, #0
 8005520:	4b69      	ldr	r3, [pc, #420]	; (80056c8 <_dtoa_r+0x5b0>)
 8005522:	f7fa ffd9 	bl	80004d8 <__aeabi_dmul>
 8005526:	464c      	mov	r4, r9
 8005528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800552c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005530:	3701      	adds	r7, #1
 8005532:	4638      	mov	r0, r7
 8005534:	f7fa ff66 	bl	8000404 <__aeabi_i2d>
 8005538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800553c:	f7fa ffcc 	bl	80004d8 <__aeabi_dmul>
 8005540:	2200      	movs	r2, #0
 8005542:	4b62      	ldr	r3, [pc, #392]	; (80056cc <_dtoa_r+0x5b4>)
 8005544:	f7fa fe12 	bl	800016c <__adddf3>
 8005548:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800554c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005550:	9611      	str	r6, [sp, #68]	; 0x44
 8005552:	2c00      	cmp	r4, #0
 8005554:	d15d      	bne.n	8005612 <_dtoa_r+0x4fa>
 8005556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800555a:	2200      	movs	r2, #0
 800555c:	4b5c      	ldr	r3, [pc, #368]	; (80056d0 <_dtoa_r+0x5b8>)
 800555e:	f7fa fe03 	bl	8000168 <__aeabi_dsub>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800556a:	4633      	mov	r3, r6
 800556c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800556e:	f7fb fa43 	bl	80009f8 <__aeabi_dcmpgt>
 8005572:	2800      	cmp	r0, #0
 8005574:	f040 829c 	bne.w	8005ab0 <_dtoa_r+0x998>
 8005578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800557c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800557e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005582:	f7fb fa1b 	bl	80009bc <__aeabi_dcmplt>
 8005586:	2800      	cmp	r0, #0
 8005588:	f040 8290 	bne.w	8005aac <_dtoa_r+0x994>
 800558c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005590:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005596:	2b00      	cmp	r3, #0
 8005598:	f2c0 8152 	blt.w	8005840 <_dtoa_r+0x728>
 800559c:	f1ba 0f0e 	cmp.w	sl, #14
 80055a0:	f300 814e 	bgt.w	8005840 <_dtoa_r+0x728>
 80055a4:	4b45      	ldr	r3, [pc, #276]	; (80056bc <_dtoa_r+0x5a4>)
 80055a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f280 80db 	bge.w	8005770 <_dtoa_r+0x658>
 80055ba:	9b08      	ldr	r3, [sp, #32]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f300 80d7 	bgt.w	8005770 <_dtoa_r+0x658>
 80055c2:	f040 8272 	bne.w	8005aaa <_dtoa_r+0x992>
 80055c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b40      	ldr	r3, [pc, #256]	; (80056d0 <_dtoa_r+0x5b8>)
 80055ce:	f7fa ff83 	bl	80004d8 <__aeabi_dmul>
 80055d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d6:	f7fb fa05 	bl	80009e4 <__aeabi_dcmpge>
 80055da:	9c08      	ldr	r4, [sp, #32]
 80055dc:	4626      	mov	r6, r4
 80055de:	2800      	cmp	r0, #0
 80055e0:	f040 8248 	bne.w	8005a74 <_dtoa_r+0x95c>
 80055e4:	2331      	movs	r3, #49	; 0x31
 80055e6:	9f03      	ldr	r7, [sp, #12]
 80055e8:	f10a 0a01 	add.w	sl, sl, #1
 80055ec:	f807 3b01 	strb.w	r3, [r7], #1
 80055f0:	e244      	b.n	8005a7c <_dtoa_r+0x964>
 80055f2:	07e2      	lsls	r2, r4, #31
 80055f4:	d505      	bpl.n	8005602 <_dtoa_r+0x4ea>
 80055f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055fa:	f7fa ff6d 	bl	80004d8 <__aeabi_dmul>
 80055fe:	2301      	movs	r3, #1
 8005600:	3701      	adds	r7, #1
 8005602:	1064      	asrs	r4, r4, #1
 8005604:	3608      	adds	r6, #8
 8005606:	e76d      	b.n	80054e4 <_dtoa_r+0x3cc>
 8005608:	2702      	movs	r7, #2
 800560a:	e770      	b.n	80054ee <_dtoa_r+0x3d6>
 800560c:	46d0      	mov	r8, sl
 800560e:	9c08      	ldr	r4, [sp, #32]
 8005610:	e78f      	b.n	8005532 <_dtoa_r+0x41a>
 8005612:	9903      	ldr	r1, [sp, #12]
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <_dtoa_r+0x5a4>)
 8005616:	4421      	add	r1, r4
 8005618:	9112      	str	r1, [sp, #72]	; 0x48
 800561a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800561c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005620:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005624:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005628:	2900      	cmp	r1, #0
 800562a:	d055      	beq.n	80056d8 <_dtoa_r+0x5c0>
 800562c:	2000      	movs	r0, #0
 800562e:	4929      	ldr	r1, [pc, #164]	; (80056d4 <_dtoa_r+0x5bc>)
 8005630:	f7fb f87c 	bl	800072c <__aeabi_ddiv>
 8005634:	463b      	mov	r3, r7
 8005636:	4632      	mov	r2, r6
 8005638:	f7fa fd96 	bl	8000168 <__aeabi_dsub>
 800563c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005640:	9f03      	ldr	r7, [sp, #12]
 8005642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005646:	f7fb f9f7 	bl	8000a38 <__aeabi_d2iz>
 800564a:	4604      	mov	r4, r0
 800564c:	f7fa feda 	bl	8000404 <__aeabi_i2d>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005658:	f7fa fd86 	bl	8000168 <__aeabi_dsub>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	3430      	adds	r4, #48	; 0x30
 8005662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800566a:	f807 4b01 	strb.w	r4, [r7], #1
 800566e:	f7fb f9a5 	bl	80009bc <__aeabi_dcmplt>
 8005672:	2800      	cmp	r0, #0
 8005674:	d174      	bne.n	8005760 <_dtoa_r+0x648>
 8005676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567a:	2000      	movs	r0, #0
 800567c:	4911      	ldr	r1, [pc, #68]	; (80056c4 <_dtoa_r+0x5ac>)
 800567e:	f7fa fd73 	bl	8000168 <__aeabi_dsub>
 8005682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005686:	f7fb f999 	bl	80009bc <__aeabi_dcmplt>
 800568a:	2800      	cmp	r0, #0
 800568c:	f040 80b7 	bne.w	80057fe <_dtoa_r+0x6e6>
 8005690:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005692:	429f      	cmp	r7, r3
 8005694:	f43f af7a 	beq.w	800558c <_dtoa_r+0x474>
 8005698:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800569c:	2200      	movs	r2, #0
 800569e:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <_dtoa_r+0x5b0>)
 80056a0:	f7fa ff1a 	bl	80004d8 <__aeabi_dmul>
 80056a4:	2200      	movs	r2, #0
 80056a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <_dtoa_r+0x5b0>)
 80056b0:	f7fa ff12 	bl	80004d8 <__aeabi_dmul>
 80056b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056b8:	e7c3      	b.n	8005642 <_dtoa_r+0x52a>
 80056ba:	bf00      	nop
 80056bc:	080074b0 	.word	0x080074b0
 80056c0:	08007488 	.word	0x08007488
 80056c4:	3ff00000 	.word	0x3ff00000
 80056c8:	40240000 	.word	0x40240000
 80056cc:	401c0000 	.word	0x401c0000
 80056d0:	40140000 	.word	0x40140000
 80056d4:	3fe00000 	.word	0x3fe00000
 80056d8:	4630      	mov	r0, r6
 80056da:	4639      	mov	r1, r7
 80056dc:	f7fa fefc 	bl	80004d8 <__aeabi_dmul>
 80056e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056e6:	9c03      	ldr	r4, [sp, #12]
 80056e8:	9314      	str	r3, [sp, #80]	; 0x50
 80056ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ee:	f7fb f9a3 	bl	8000a38 <__aeabi_d2iz>
 80056f2:	9015      	str	r0, [sp, #84]	; 0x54
 80056f4:	f7fa fe86 	bl	8000404 <__aeabi_i2d>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005700:	f7fa fd32 	bl	8000168 <__aeabi_dsub>
 8005704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005706:	4606      	mov	r6, r0
 8005708:	3330      	adds	r3, #48	; 0x30
 800570a:	f804 3b01 	strb.w	r3, [r4], #1
 800570e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005710:	460f      	mov	r7, r1
 8005712:	429c      	cmp	r4, r3
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	d124      	bne.n	8005764 <_dtoa_r+0x64c>
 800571a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800571e:	4bb0      	ldr	r3, [pc, #704]	; (80059e0 <_dtoa_r+0x8c8>)
 8005720:	f7fa fd24 	bl	800016c <__adddf3>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f7fb f964 	bl	80009f8 <__aeabi_dcmpgt>
 8005730:	2800      	cmp	r0, #0
 8005732:	d163      	bne.n	80057fc <_dtoa_r+0x6e4>
 8005734:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005738:	2000      	movs	r0, #0
 800573a:	49a9      	ldr	r1, [pc, #676]	; (80059e0 <_dtoa_r+0x8c8>)
 800573c:	f7fa fd14 	bl	8000168 <__aeabi_dsub>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4630      	mov	r0, r6
 8005746:	4639      	mov	r1, r7
 8005748:	f7fb f938 	bl	80009bc <__aeabi_dcmplt>
 800574c:	2800      	cmp	r0, #0
 800574e:	f43f af1d 	beq.w	800558c <_dtoa_r+0x474>
 8005752:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005754:	1e7b      	subs	r3, r7, #1
 8005756:	9314      	str	r3, [sp, #80]	; 0x50
 8005758:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800575c:	2b30      	cmp	r3, #48	; 0x30
 800575e:	d0f8      	beq.n	8005752 <_dtoa_r+0x63a>
 8005760:	46c2      	mov	sl, r8
 8005762:	e03b      	b.n	80057dc <_dtoa_r+0x6c4>
 8005764:	4b9f      	ldr	r3, [pc, #636]	; (80059e4 <_dtoa_r+0x8cc>)
 8005766:	f7fa feb7 	bl	80004d8 <__aeabi_dmul>
 800576a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800576e:	e7bc      	b.n	80056ea <_dtoa_r+0x5d2>
 8005770:	9f03      	ldr	r7, [sp, #12]
 8005772:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005776:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800577a:	4640      	mov	r0, r8
 800577c:	4649      	mov	r1, r9
 800577e:	f7fa ffd5 	bl	800072c <__aeabi_ddiv>
 8005782:	f7fb f959 	bl	8000a38 <__aeabi_d2iz>
 8005786:	4604      	mov	r4, r0
 8005788:	f7fa fe3c 	bl	8000404 <__aeabi_i2d>
 800578c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005790:	f7fa fea2 	bl	80004d8 <__aeabi_dmul>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4640      	mov	r0, r8
 800579a:	4649      	mov	r1, r9
 800579c:	f7fa fce4 	bl	8000168 <__aeabi_dsub>
 80057a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80057a4:	f807 6b01 	strb.w	r6, [r7], #1
 80057a8:	9e03      	ldr	r6, [sp, #12]
 80057aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80057ae:	1bbe      	subs	r6, r7, r6
 80057b0:	45b4      	cmp	ip, r6
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	d136      	bne.n	8005826 <_dtoa_r+0x70e>
 80057b8:	f7fa fcd8 	bl	800016c <__adddf3>
 80057bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057c0:	4680      	mov	r8, r0
 80057c2:	4689      	mov	r9, r1
 80057c4:	f7fb f918 	bl	80009f8 <__aeabi_dcmpgt>
 80057c8:	bb58      	cbnz	r0, 8005822 <_dtoa_r+0x70a>
 80057ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057ce:	4640      	mov	r0, r8
 80057d0:	4649      	mov	r1, r9
 80057d2:	f7fb f8e9 	bl	80009a8 <__aeabi_dcmpeq>
 80057d6:	b108      	cbz	r0, 80057dc <_dtoa_r+0x6c4>
 80057d8:	07e1      	lsls	r1, r4, #31
 80057da:	d422      	bmi.n	8005822 <_dtoa_r+0x70a>
 80057dc:	4628      	mov	r0, r5
 80057de:	4659      	mov	r1, fp
 80057e0:	f000 faf4 	bl	8005dcc <_Bfree>
 80057e4:	2300      	movs	r3, #0
 80057e6:	703b      	strb	r3, [r7, #0]
 80057e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80057ea:	f10a 0001 	add.w	r0, sl, #1
 80057ee:	6018      	str	r0, [r3, #0]
 80057f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f43f acde 	beq.w	80051b4 <_dtoa_r+0x9c>
 80057f8:	601f      	str	r7, [r3, #0]
 80057fa:	e4db      	b.n	80051b4 <_dtoa_r+0x9c>
 80057fc:	4627      	mov	r7, r4
 80057fe:	463b      	mov	r3, r7
 8005800:	461f      	mov	r7, r3
 8005802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005806:	2a39      	cmp	r2, #57	; 0x39
 8005808:	d107      	bne.n	800581a <_dtoa_r+0x702>
 800580a:	9a03      	ldr	r2, [sp, #12]
 800580c:	429a      	cmp	r2, r3
 800580e:	d1f7      	bne.n	8005800 <_dtoa_r+0x6e8>
 8005810:	2230      	movs	r2, #48	; 0x30
 8005812:	9903      	ldr	r1, [sp, #12]
 8005814:	f108 0801 	add.w	r8, r8, #1
 8005818:	700a      	strb	r2, [r1, #0]
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	3201      	adds	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e79e      	b.n	8005760 <_dtoa_r+0x648>
 8005822:	46d0      	mov	r8, sl
 8005824:	e7eb      	b.n	80057fe <_dtoa_r+0x6e6>
 8005826:	2200      	movs	r2, #0
 8005828:	4b6e      	ldr	r3, [pc, #440]	; (80059e4 <_dtoa_r+0x8cc>)
 800582a:	f7fa fe55 	bl	80004d8 <__aeabi_dmul>
 800582e:	2200      	movs	r2, #0
 8005830:	2300      	movs	r3, #0
 8005832:	4680      	mov	r8, r0
 8005834:	4689      	mov	r9, r1
 8005836:	f7fb f8b7 	bl	80009a8 <__aeabi_dcmpeq>
 800583a:	2800      	cmp	r0, #0
 800583c:	d09b      	beq.n	8005776 <_dtoa_r+0x65e>
 800583e:	e7cd      	b.n	80057dc <_dtoa_r+0x6c4>
 8005840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005842:	2a00      	cmp	r2, #0
 8005844:	f000 80d0 	beq.w	80059e8 <_dtoa_r+0x8d0>
 8005848:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800584a:	2a01      	cmp	r2, #1
 800584c:	f300 80ae 	bgt.w	80059ac <_dtoa_r+0x894>
 8005850:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005852:	2a00      	cmp	r2, #0
 8005854:	f000 80a6 	beq.w	80059a4 <_dtoa_r+0x88c>
 8005858:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800585c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800585e:	9f06      	ldr	r7, [sp, #24]
 8005860:	9a06      	ldr	r2, [sp, #24]
 8005862:	2101      	movs	r1, #1
 8005864:	441a      	add	r2, r3
 8005866:	9206      	str	r2, [sp, #24]
 8005868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800586a:	4628      	mov	r0, r5
 800586c:	441a      	add	r2, r3
 800586e:	9209      	str	r2, [sp, #36]	; 0x24
 8005870:	f000 fb62 	bl	8005f38 <__i2b>
 8005874:	4606      	mov	r6, r0
 8005876:	2f00      	cmp	r7, #0
 8005878:	dd0c      	ble.n	8005894 <_dtoa_r+0x77c>
 800587a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	dd09      	ble.n	8005894 <_dtoa_r+0x77c>
 8005880:	42bb      	cmp	r3, r7
 8005882:	bfa8      	it	ge
 8005884:	463b      	movge	r3, r7
 8005886:	9a06      	ldr	r2, [sp, #24]
 8005888:	1aff      	subs	r7, r7, r3
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	9206      	str	r2, [sp, #24]
 800588e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	9309      	str	r3, [sp, #36]	; 0x24
 8005894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005896:	b1f3      	cbz	r3, 80058d6 <_dtoa_r+0x7be>
 8005898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a8 	beq.w	80059f0 <_dtoa_r+0x8d8>
 80058a0:	2c00      	cmp	r4, #0
 80058a2:	dd10      	ble.n	80058c6 <_dtoa_r+0x7ae>
 80058a4:	4631      	mov	r1, r6
 80058a6:	4622      	mov	r2, r4
 80058a8:	4628      	mov	r0, r5
 80058aa:	f000 fc03 	bl	80060b4 <__pow5mult>
 80058ae:	465a      	mov	r2, fp
 80058b0:	4601      	mov	r1, r0
 80058b2:	4606      	mov	r6, r0
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 fb55 	bl	8005f64 <__multiply>
 80058ba:	4680      	mov	r8, r0
 80058bc:	4659      	mov	r1, fp
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 fa84 	bl	8005dcc <_Bfree>
 80058c4:	46c3      	mov	fp, r8
 80058c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c8:	1b1a      	subs	r2, r3, r4
 80058ca:	d004      	beq.n	80058d6 <_dtoa_r+0x7be>
 80058cc:	4659      	mov	r1, fp
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fbf0 	bl	80060b4 <__pow5mult>
 80058d4:	4683      	mov	fp, r0
 80058d6:	2101      	movs	r1, #1
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 fb2d 	bl	8005f38 <__i2b>
 80058de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058e0:	4604      	mov	r4, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f340 8086 	ble.w	80059f4 <_dtoa_r+0x8dc>
 80058e8:	461a      	mov	r2, r3
 80058ea:	4601      	mov	r1, r0
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 fbe1 	bl	80060b4 <__pow5mult>
 80058f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058f4:	4604      	mov	r4, r0
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	dd7f      	ble.n	80059fa <_dtoa_r+0x8e2>
 80058fa:	f04f 0800 	mov.w	r8, #0
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005904:	6918      	ldr	r0, [r3, #16]
 8005906:	f000 fac9 	bl	8005e9c <__hi0bits>
 800590a:	f1c0 0020 	rsb	r0, r0, #32
 800590e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005910:	4418      	add	r0, r3
 8005912:	f010 001f 	ands.w	r0, r0, #31
 8005916:	f000 8092 	beq.w	8005a3e <_dtoa_r+0x926>
 800591a:	f1c0 0320 	rsb	r3, r0, #32
 800591e:	2b04      	cmp	r3, #4
 8005920:	f340 808a 	ble.w	8005a38 <_dtoa_r+0x920>
 8005924:	f1c0 001c 	rsb	r0, r0, #28
 8005928:	9b06      	ldr	r3, [sp, #24]
 800592a:	4407      	add	r7, r0
 800592c:	4403      	add	r3, r0
 800592e:	9306      	str	r3, [sp, #24]
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	4403      	add	r3, r0
 8005934:	9309      	str	r3, [sp, #36]	; 0x24
 8005936:	9b06      	ldr	r3, [sp, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	dd05      	ble.n	8005948 <_dtoa_r+0x830>
 800593c:	4659      	mov	r1, fp
 800593e:	461a      	mov	r2, r3
 8005940:	4628      	mov	r0, r5
 8005942:	f000 fc11 	bl	8006168 <__lshift>
 8005946:	4683      	mov	fp, r0
 8005948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594a:	2b00      	cmp	r3, #0
 800594c:	dd05      	ble.n	800595a <_dtoa_r+0x842>
 800594e:	4621      	mov	r1, r4
 8005950:	461a      	mov	r2, r3
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fc08 	bl	8006168 <__lshift>
 8005958:	4604      	mov	r4, r0
 800595a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d070      	beq.n	8005a42 <_dtoa_r+0x92a>
 8005960:	4621      	mov	r1, r4
 8005962:	4658      	mov	r0, fp
 8005964:	f000 fc70 	bl	8006248 <__mcmp>
 8005968:	2800      	cmp	r0, #0
 800596a:	da6a      	bge.n	8005a42 <_dtoa_r+0x92a>
 800596c:	2300      	movs	r3, #0
 800596e:	4659      	mov	r1, fp
 8005970:	220a      	movs	r2, #10
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fa4c 	bl	8005e10 <__multadd>
 8005978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800597a:	4683      	mov	fp, r0
 800597c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8194 	beq.w	8005cae <_dtoa_r+0xb96>
 8005986:	4631      	mov	r1, r6
 8005988:	2300      	movs	r3, #0
 800598a:	220a      	movs	r2, #10
 800598c:	4628      	mov	r0, r5
 800598e:	f000 fa3f 	bl	8005e10 <__multadd>
 8005992:	f1b9 0f00 	cmp.w	r9, #0
 8005996:	4606      	mov	r6, r0
 8005998:	f300 8093 	bgt.w	8005ac2 <_dtoa_r+0x9aa>
 800599c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800599e:	2b02      	cmp	r3, #2
 80059a0:	dc57      	bgt.n	8005a52 <_dtoa_r+0x93a>
 80059a2:	e08e      	b.n	8005ac2 <_dtoa_r+0x9aa>
 80059a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059aa:	e757      	b.n	800585c <_dtoa_r+0x744>
 80059ac:	9b08      	ldr	r3, [sp, #32]
 80059ae:	1e5c      	subs	r4, r3, #1
 80059b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b2:	42a3      	cmp	r3, r4
 80059b4:	bfb7      	itett	lt
 80059b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80059b8:	1b1c      	subge	r4, r3, r4
 80059ba:	1ae2      	sublt	r2, r4, r3
 80059bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80059be:	bfbe      	ittt	lt
 80059c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80059c2:	189b      	addlt	r3, r3, r2
 80059c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80059c6:	9b08      	ldr	r3, [sp, #32]
 80059c8:	bfb8      	it	lt
 80059ca:	2400      	movlt	r4, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bfbb      	ittet	lt
 80059d0:	9b06      	ldrlt	r3, [sp, #24]
 80059d2:	9a08      	ldrlt	r2, [sp, #32]
 80059d4:	9f06      	ldrge	r7, [sp, #24]
 80059d6:	1a9f      	sublt	r7, r3, r2
 80059d8:	bfac      	ite	ge
 80059da:	9b08      	ldrge	r3, [sp, #32]
 80059dc:	2300      	movlt	r3, #0
 80059de:	e73f      	b.n	8005860 <_dtoa_r+0x748>
 80059e0:	3fe00000 	.word	0x3fe00000
 80059e4:	40240000 	.word	0x40240000
 80059e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059ea:	9f06      	ldr	r7, [sp, #24]
 80059ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80059ee:	e742      	b.n	8005876 <_dtoa_r+0x75e>
 80059f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f2:	e76b      	b.n	80058cc <_dtoa_r+0x7b4>
 80059f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	dc19      	bgt.n	8005a2e <_dtoa_r+0x916>
 80059fa:	9b04      	ldr	r3, [sp, #16]
 80059fc:	b9bb      	cbnz	r3, 8005a2e <_dtoa_r+0x916>
 80059fe:	9b05      	ldr	r3, [sp, #20]
 8005a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a04:	b99b      	cbnz	r3, 8005a2e <_dtoa_r+0x916>
 8005a06:	9b05      	ldr	r3, [sp, #20]
 8005a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a0c:	0d1b      	lsrs	r3, r3, #20
 8005a0e:	051b      	lsls	r3, r3, #20
 8005a10:	b183      	cbz	r3, 8005a34 <_dtoa_r+0x91c>
 8005a12:	f04f 0801 	mov.w	r8, #1
 8005a16:	9b06      	ldr	r3, [sp, #24]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	9306      	str	r3, [sp, #24]
 8005a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1e:	3301      	adds	r3, #1
 8005a20:	9309      	str	r3, [sp, #36]	; 0x24
 8005a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f47f af6a 	bne.w	80058fe <_dtoa_r+0x7e6>
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	e76f      	b.n	800590e <_dtoa_r+0x7f6>
 8005a2e:	f04f 0800 	mov.w	r8, #0
 8005a32:	e7f6      	b.n	8005a22 <_dtoa_r+0x90a>
 8005a34:	4698      	mov	r8, r3
 8005a36:	e7f4      	b.n	8005a22 <_dtoa_r+0x90a>
 8005a38:	f43f af7d 	beq.w	8005936 <_dtoa_r+0x81e>
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	301c      	adds	r0, #28
 8005a40:	e772      	b.n	8005928 <_dtoa_r+0x810>
 8005a42:	9b08      	ldr	r3, [sp, #32]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc36      	bgt.n	8005ab6 <_dtoa_r+0x99e>
 8005a48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	dd33      	ble.n	8005ab6 <_dtoa_r+0x99e>
 8005a4e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a52:	f1b9 0f00 	cmp.w	r9, #0
 8005a56:	d10d      	bne.n	8005a74 <_dtoa_r+0x95c>
 8005a58:	4621      	mov	r1, r4
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	2205      	movs	r2, #5
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 f9d6 	bl	8005e10 <__multadd>
 8005a64:	4601      	mov	r1, r0
 8005a66:	4604      	mov	r4, r0
 8005a68:	4658      	mov	r0, fp
 8005a6a:	f000 fbed 	bl	8006248 <__mcmp>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f73f adb8 	bgt.w	80055e4 <_dtoa_r+0x4cc>
 8005a74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a76:	9f03      	ldr	r7, [sp, #12]
 8005a78:	ea6f 0a03 	mvn.w	sl, r3
 8005a7c:	f04f 0800 	mov.w	r8, #0
 8005a80:	4621      	mov	r1, r4
 8005a82:	4628      	mov	r0, r5
 8005a84:	f000 f9a2 	bl	8005dcc <_Bfree>
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	f43f aea7 	beq.w	80057dc <_dtoa_r+0x6c4>
 8005a8e:	f1b8 0f00 	cmp.w	r8, #0
 8005a92:	d005      	beq.n	8005aa0 <_dtoa_r+0x988>
 8005a94:	45b0      	cmp	r8, r6
 8005a96:	d003      	beq.n	8005aa0 <_dtoa_r+0x988>
 8005a98:	4641      	mov	r1, r8
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 f996 	bl	8005dcc <_Bfree>
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 f992 	bl	8005dcc <_Bfree>
 8005aa8:	e698      	b.n	80057dc <_dtoa_r+0x6c4>
 8005aaa:	2400      	movs	r4, #0
 8005aac:	4626      	mov	r6, r4
 8005aae:	e7e1      	b.n	8005a74 <_dtoa_r+0x95c>
 8005ab0:	46c2      	mov	sl, r8
 8005ab2:	4626      	mov	r6, r4
 8005ab4:	e596      	b.n	80055e4 <_dtoa_r+0x4cc>
 8005ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80fd 	beq.w	8005cbc <_dtoa_r+0xba4>
 8005ac2:	2f00      	cmp	r7, #0
 8005ac4:	dd05      	ble.n	8005ad2 <_dtoa_r+0x9ba>
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	463a      	mov	r2, r7
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 fb4c 	bl	8006168 <__lshift>
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	f1b8 0f00 	cmp.w	r8, #0
 8005ad6:	d05c      	beq.n	8005b92 <_dtoa_r+0xa7a>
 8005ad8:	4628      	mov	r0, r5
 8005ada:	6871      	ldr	r1, [r6, #4]
 8005adc:	f000 f936 	bl	8005d4c <_Balloc>
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	b928      	cbnz	r0, 8005af0 <_dtoa_r+0x9d8>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005aea:	4b7f      	ldr	r3, [pc, #508]	; (8005ce8 <_dtoa_r+0xbd0>)
 8005aec:	f7ff bb28 	b.w	8005140 <_dtoa_r+0x28>
 8005af0:	6932      	ldr	r2, [r6, #16]
 8005af2:	f106 010c 	add.w	r1, r6, #12
 8005af6:	3202      	adds	r2, #2
 8005af8:	0092      	lsls	r2, r2, #2
 8005afa:	300c      	adds	r0, #12
 8005afc:	f000 f90c 	bl	8005d18 <memcpy>
 8005b00:	2201      	movs	r2, #1
 8005b02:	4639      	mov	r1, r7
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 fb2f 	bl	8006168 <__lshift>
 8005b0a:	46b0      	mov	r8, r6
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	9b03      	ldr	r3, [sp, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	9308      	str	r3, [sp, #32]
 8005b14:	9b03      	ldr	r3, [sp, #12]
 8005b16:	444b      	add	r3, r9
 8005b18:	930a      	str	r3, [sp, #40]	; 0x28
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	9309      	str	r3, [sp, #36]	; 0x24
 8005b22:	9b08      	ldr	r3, [sp, #32]
 8005b24:	4621      	mov	r1, r4
 8005b26:	3b01      	subs	r3, #1
 8005b28:	4658      	mov	r0, fp
 8005b2a:	9304      	str	r3, [sp, #16]
 8005b2c:	f7ff fa66 	bl	8004ffc <quorem>
 8005b30:	4603      	mov	r3, r0
 8005b32:	4641      	mov	r1, r8
 8005b34:	3330      	adds	r3, #48	; 0x30
 8005b36:	9006      	str	r0, [sp, #24]
 8005b38:	4658      	mov	r0, fp
 8005b3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b3c:	f000 fb84 	bl	8006248 <__mcmp>
 8005b40:	4632      	mov	r2, r6
 8005b42:	4681      	mov	r9, r0
 8005b44:	4621      	mov	r1, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 fb9a 	bl	8006280 <__mdiff>
 8005b4c:	68c2      	ldr	r2, [r0, #12]
 8005b4e:	4607      	mov	r7, r0
 8005b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b52:	bb02      	cbnz	r2, 8005b96 <_dtoa_r+0xa7e>
 8005b54:	4601      	mov	r1, r0
 8005b56:	4658      	mov	r0, fp
 8005b58:	f000 fb76 	bl	8006248 <__mcmp>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b60:	4639      	mov	r1, r7
 8005b62:	4628      	mov	r0, r5
 8005b64:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005b68:	f000 f930 	bl	8005dcc <_Bfree>
 8005b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b70:	9f08      	ldr	r7, [sp, #32]
 8005b72:	ea43 0102 	orr.w	r1, r3, r2
 8005b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b7c:	d10d      	bne.n	8005b9a <_dtoa_r+0xa82>
 8005b7e:	2b39      	cmp	r3, #57	; 0x39
 8005b80:	d029      	beq.n	8005bd6 <_dtoa_r+0xabe>
 8005b82:	f1b9 0f00 	cmp.w	r9, #0
 8005b86:	dd01      	ble.n	8005b8c <_dtoa_r+0xa74>
 8005b88:	9b06      	ldr	r3, [sp, #24]
 8005b8a:	3331      	adds	r3, #49	; 0x31
 8005b8c:	9a04      	ldr	r2, [sp, #16]
 8005b8e:	7013      	strb	r3, [r2, #0]
 8005b90:	e776      	b.n	8005a80 <_dtoa_r+0x968>
 8005b92:	4630      	mov	r0, r6
 8005b94:	e7b9      	b.n	8005b0a <_dtoa_r+0x9f2>
 8005b96:	2201      	movs	r2, #1
 8005b98:	e7e2      	b.n	8005b60 <_dtoa_r+0xa48>
 8005b9a:	f1b9 0f00 	cmp.w	r9, #0
 8005b9e:	db06      	blt.n	8005bae <_dtoa_r+0xa96>
 8005ba0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005ba2:	ea41 0909 	orr.w	r9, r1, r9
 8005ba6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ba8:	ea59 0101 	orrs.w	r1, r9, r1
 8005bac:	d120      	bne.n	8005bf0 <_dtoa_r+0xad8>
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	ddec      	ble.n	8005b8c <_dtoa_r+0xa74>
 8005bb2:	4659      	mov	r1, fp
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	9308      	str	r3, [sp, #32]
 8005bba:	f000 fad5 	bl	8006168 <__lshift>
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	4683      	mov	fp, r0
 8005bc2:	f000 fb41 	bl	8006248 <__mcmp>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	9b08      	ldr	r3, [sp, #32]
 8005bca:	dc02      	bgt.n	8005bd2 <_dtoa_r+0xaba>
 8005bcc:	d1de      	bne.n	8005b8c <_dtoa_r+0xa74>
 8005bce:	07da      	lsls	r2, r3, #31
 8005bd0:	d5dc      	bpl.n	8005b8c <_dtoa_r+0xa74>
 8005bd2:	2b39      	cmp	r3, #57	; 0x39
 8005bd4:	d1d8      	bne.n	8005b88 <_dtoa_r+0xa70>
 8005bd6:	2339      	movs	r3, #57	; 0x39
 8005bd8:	9a04      	ldr	r2, [sp, #16]
 8005bda:	7013      	strb	r3, [r2, #0]
 8005bdc:	463b      	mov	r3, r7
 8005bde:	461f      	mov	r7, r3
 8005be0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	2a39      	cmp	r2, #57	; 0x39
 8005be8:	d050      	beq.n	8005c8c <_dtoa_r+0xb74>
 8005bea:	3201      	adds	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e747      	b.n	8005a80 <_dtoa_r+0x968>
 8005bf0:	2a00      	cmp	r2, #0
 8005bf2:	dd03      	ble.n	8005bfc <_dtoa_r+0xae4>
 8005bf4:	2b39      	cmp	r3, #57	; 0x39
 8005bf6:	d0ee      	beq.n	8005bd6 <_dtoa_r+0xabe>
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	e7c7      	b.n	8005b8c <_dtoa_r+0xa74>
 8005bfc:	9a08      	ldr	r2, [sp, #32]
 8005bfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c00:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c04:	428a      	cmp	r2, r1
 8005c06:	d02a      	beq.n	8005c5e <_dtoa_r+0xb46>
 8005c08:	4659      	mov	r1, fp
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	220a      	movs	r2, #10
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f8fe 	bl	8005e10 <__multadd>
 8005c14:	45b0      	cmp	r8, r6
 8005c16:	4683      	mov	fp, r0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	f04f 020a 	mov.w	r2, #10
 8005c20:	4641      	mov	r1, r8
 8005c22:	4628      	mov	r0, r5
 8005c24:	d107      	bne.n	8005c36 <_dtoa_r+0xb1e>
 8005c26:	f000 f8f3 	bl	8005e10 <__multadd>
 8005c2a:	4680      	mov	r8, r0
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	9b08      	ldr	r3, [sp, #32]
 8005c30:	3301      	adds	r3, #1
 8005c32:	9308      	str	r3, [sp, #32]
 8005c34:	e775      	b.n	8005b22 <_dtoa_r+0xa0a>
 8005c36:	f000 f8eb 	bl	8005e10 <__multadd>
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	2300      	movs	r3, #0
 8005c40:	220a      	movs	r2, #10
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 f8e4 	bl	8005e10 <__multadd>
 8005c48:	4606      	mov	r6, r0
 8005c4a:	e7f0      	b.n	8005c2e <_dtoa_r+0xb16>
 8005c4c:	f1b9 0f00 	cmp.w	r9, #0
 8005c50:	bfcc      	ite	gt
 8005c52:	464f      	movgt	r7, r9
 8005c54:	2701      	movle	r7, #1
 8005c56:	f04f 0800 	mov.w	r8, #0
 8005c5a:	9a03      	ldr	r2, [sp, #12]
 8005c5c:	4417      	add	r7, r2
 8005c5e:	4659      	mov	r1, fp
 8005c60:	2201      	movs	r2, #1
 8005c62:	4628      	mov	r0, r5
 8005c64:	9308      	str	r3, [sp, #32]
 8005c66:	f000 fa7f 	bl	8006168 <__lshift>
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4683      	mov	fp, r0
 8005c6e:	f000 faeb 	bl	8006248 <__mcmp>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	dcb2      	bgt.n	8005bdc <_dtoa_r+0xac4>
 8005c76:	d102      	bne.n	8005c7e <_dtoa_r+0xb66>
 8005c78:	9b08      	ldr	r3, [sp, #32]
 8005c7a:	07db      	lsls	r3, r3, #31
 8005c7c:	d4ae      	bmi.n	8005bdc <_dtoa_r+0xac4>
 8005c7e:	463b      	mov	r3, r7
 8005c80:	461f      	mov	r7, r3
 8005c82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c86:	2a30      	cmp	r2, #48	; 0x30
 8005c88:	d0fa      	beq.n	8005c80 <_dtoa_r+0xb68>
 8005c8a:	e6f9      	b.n	8005a80 <_dtoa_r+0x968>
 8005c8c:	9a03      	ldr	r2, [sp, #12]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d1a5      	bne.n	8005bde <_dtoa_r+0xac6>
 8005c92:	2331      	movs	r3, #49	; 0x31
 8005c94:	f10a 0a01 	add.w	sl, sl, #1
 8005c98:	e779      	b.n	8005b8e <_dtoa_r+0xa76>
 8005c9a:	4b14      	ldr	r3, [pc, #80]	; (8005cec <_dtoa_r+0xbd4>)
 8005c9c:	f7ff baa8 	b.w	80051f0 <_dtoa_r+0xd8>
 8005ca0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f47f aa81 	bne.w	80051aa <_dtoa_r+0x92>
 8005ca8:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <_dtoa_r+0xbd8>)
 8005caa:	f7ff baa1 	b.w	80051f0 <_dtoa_r+0xd8>
 8005cae:	f1b9 0f00 	cmp.w	r9, #0
 8005cb2:	dc03      	bgt.n	8005cbc <_dtoa_r+0xba4>
 8005cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	f73f aecb 	bgt.w	8005a52 <_dtoa_r+0x93a>
 8005cbc:	9f03      	ldr	r7, [sp, #12]
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4658      	mov	r0, fp
 8005cc2:	f7ff f99b 	bl	8004ffc <quorem>
 8005cc6:	9a03      	ldr	r2, [sp, #12]
 8005cc8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ccc:	f807 3b01 	strb.w	r3, [r7], #1
 8005cd0:	1aba      	subs	r2, r7, r2
 8005cd2:	4591      	cmp	r9, r2
 8005cd4:	ddba      	ble.n	8005c4c <_dtoa_r+0xb34>
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	2300      	movs	r3, #0
 8005cda:	220a      	movs	r2, #10
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 f897 	bl	8005e10 <__multadd>
 8005ce2:	4683      	mov	fp, r0
 8005ce4:	e7eb      	b.n	8005cbe <_dtoa_r+0xba6>
 8005ce6:	bf00      	nop
 8005ce8:	08007417 	.word	0x08007417
 8005cec:	08007374 	.word	0x08007374
 8005cf0:	08007398 	.word	0x08007398

08005cf4 <_localeconv_r>:
 8005cf4:	4800      	ldr	r0, [pc, #0]	; (8005cf8 <_localeconv_r+0x4>)
 8005cf6:	4770      	bx	lr
 8005cf8:	20000164 	.word	0x20000164

08005cfc <memchr>:
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	b510      	push	{r4, lr}
 8005d00:	b2c9      	uxtb	r1, r1
 8005d02:	4402      	add	r2, r0
 8005d04:	4293      	cmp	r3, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	d101      	bne.n	8005d0e <memchr+0x12>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e003      	b.n	8005d16 <memchr+0x1a>
 8005d0e:	7804      	ldrb	r4, [r0, #0]
 8005d10:	3301      	adds	r3, #1
 8005d12:	428c      	cmp	r4, r1
 8005d14:	d1f6      	bne.n	8005d04 <memchr+0x8>
 8005d16:	bd10      	pop	{r4, pc}

08005d18 <memcpy>:
 8005d18:	440a      	add	r2, r1
 8005d1a:	4291      	cmp	r1, r2
 8005d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d20:	d100      	bne.n	8005d24 <memcpy+0xc>
 8005d22:	4770      	bx	lr
 8005d24:	b510      	push	{r4, lr}
 8005d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2a:	4291      	cmp	r1, r2
 8005d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d30:	d1f9      	bne.n	8005d26 <memcpy+0xe>
 8005d32:	bd10      	pop	{r4, pc}

08005d34 <__malloc_lock>:
 8005d34:	4801      	ldr	r0, [pc, #4]	; (8005d3c <__malloc_lock+0x8>)
 8005d36:	f000 bd2c 	b.w	8006792 <__retarget_lock_acquire_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	20000450 	.word	0x20000450

08005d40 <__malloc_unlock>:
 8005d40:	4801      	ldr	r0, [pc, #4]	; (8005d48 <__malloc_unlock+0x8>)
 8005d42:	f000 bd27 	b.w	8006794 <__retarget_lock_release_recursive>
 8005d46:	bf00      	nop
 8005d48:	20000450 	.word	0x20000450

08005d4c <_Balloc>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d50:	4604      	mov	r4, r0
 8005d52:	460d      	mov	r5, r1
 8005d54:	b976      	cbnz	r6, 8005d74 <_Balloc+0x28>
 8005d56:	2010      	movs	r0, #16
 8005d58:	f7fe fbcc 	bl	80044f4 <malloc>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	6260      	str	r0, [r4, #36]	; 0x24
 8005d60:	b920      	cbnz	r0, 8005d6c <_Balloc+0x20>
 8005d62:	2166      	movs	r1, #102	; 0x66
 8005d64:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <_Balloc+0x78>)
 8005d66:	4818      	ldr	r0, [pc, #96]	; (8005dc8 <_Balloc+0x7c>)
 8005d68:	f000 fce2 	bl	8006730 <__assert_func>
 8005d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d70:	6006      	str	r6, [r0, #0]
 8005d72:	60c6      	str	r6, [r0, #12]
 8005d74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d76:	68f3      	ldr	r3, [r6, #12]
 8005d78:	b183      	cbz	r3, 8005d9c <_Balloc+0x50>
 8005d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d82:	b9b8      	cbnz	r0, 8005db4 <_Balloc+0x68>
 8005d84:	2101      	movs	r1, #1
 8005d86:	fa01 f605 	lsl.w	r6, r1, r5
 8005d8a:	1d72      	adds	r2, r6, #5
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	0092      	lsls	r2, r2, #2
 8005d90:	f000 fb5e 	bl	8006450 <_calloc_r>
 8005d94:	b160      	cbz	r0, 8005db0 <_Balloc+0x64>
 8005d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d9a:	e00e      	b.n	8005dba <_Balloc+0x6e>
 8005d9c:	2221      	movs	r2, #33	; 0x21
 8005d9e:	2104      	movs	r1, #4
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fb55 	bl	8006450 <_calloc_r>
 8005da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da8:	60f0      	str	r0, [r6, #12]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e4      	bne.n	8005d7a <_Balloc+0x2e>
 8005db0:	2000      	movs	r0, #0
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	6802      	ldr	r2, [r0, #0]
 8005db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dc0:	e7f7      	b.n	8005db2 <_Balloc+0x66>
 8005dc2:	bf00      	nop
 8005dc4:	080073a5 	.word	0x080073a5
 8005dc8:	08007428 	.word	0x08007428

08005dcc <_Bfree>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	b976      	cbnz	r6, 8005df4 <_Bfree+0x28>
 8005dd6:	2010      	movs	r0, #16
 8005dd8:	f7fe fb8c 	bl	80044f4 <malloc>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6268      	str	r0, [r5, #36]	; 0x24
 8005de0:	b920      	cbnz	r0, 8005dec <_Bfree+0x20>
 8005de2:	218a      	movs	r1, #138	; 0x8a
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <_Bfree+0x3c>)
 8005de6:	4809      	ldr	r0, [pc, #36]	; (8005e0c <_Bfree+0x40>)
 8005de8:	f000 fca2 	bl	8006730 <__assert_func>
 8005dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005df0:	6006      	str	r6, [r0, #0]
 8005df2:	60c6      	str	r6, [r0, #12]
 8005df4:	b13c      	cbz	r4, 8005e06 <_Bfree+0x3a>
 8005df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005df8:	6862      	ldr	r2, [r4, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e00:	6021      	str	r1, [r4, #0]
 8005e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	080073a5 	.word	0x080073a5
 8005e0c:	08007428 	.word	0x08007428

08005e10 <__multadd>:
 8005e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e14:	4607      	mov	r7, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	461e      	mov	r6, r3
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	690d      	ldr	r5, [r1, #16]
 8005e1e:	f101 0c14 	add.w	ip, r1, #20
 8005e22:	f8dc 3000 	ldr.w	r3, [ip]
 8005e26:	3001      	adds	r0, #1
 8005e28:	b299      	uxth	r1, r3
 8005e2a:	fb02 6101 	mla	r1, r2, r1, r6
 8005e2e:	0c1e      	lsrs	r6, r3, #16
 8005e30:	0c0b      	lsrs	r3, r1, #16
 8005e32:	fb02 3306 	mla	r3, r2, r6, r3
 8005e36:	b289      	uxth	r1, r1
 8005e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e3c:	4285      	cmp	r5, r0
 8005e3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e42:	f84c 1b04 	str.w	r1, [ip], #4
 8005e46:	dcec      	bgt.n	8005e22 <__multadd+0x12>
 8005e48:	b30e      	cbz	r6, 8005e8e <__multadd+0x7e>
 8005e4a:	68a3      	ldr	r3, [r4, #8]
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	dc19      	bgt.n	8005e84 <__multadd+0x74>
 8005e50:	6861      	ldr	r1, [r4, #4]
 8005e52:	4638      	mov	r0, r7
 8005e54:	3101      	adds	r1, #1
 8005e56:	f7ff ff79 	bl	8005d4c <_Balloc>
 8005e5a:	4680      	mov	r8, r0
 8005e5c:	b928      	cbnz	r0, 8005e6a <__multadd+0x5a>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	21b5      	movs	r1, #181	; 0xb5
 8005e62:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <__multadd+0x84>)
 8005e64:	480c      	ldr	r0, [pc, #48]	; (8005e98 <__multadd+0x88>)
 8005e66:	f000 fc63 	bl	8006730 <__assert_func>
 8005e6a:	6922      	ldr	r2, [r4, #16]
 8005e6c:	f104 010c 	add.w	r1, r4, #12
 8005e70:	3202      	adds	r2, #2
 8005e72:	0092      	lsls	r2, r2, #2
 8005e74:	300c      	adds	r0, #12
 8005e76:	f7ff ff4f 	bl	8005d18 <memcpy>
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f7ff ffa5 	bl	8005dcc <_Bfree>
 8005e82:	4644      	mov	r4, r8
 8005e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e88:	3501      	adds	r5, #1
 8005e8a:	615e      	str	r6, [r3, #20]
 8005e8c:	6125      	str	r5, [r4, #16]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e94:	08007417 	.word	0x08007417
 8005e98:	08007428 	.word	0x08007428

08005e9c <__hi0bits>:
 8005e9c:	0c02      	lsrs	r2, r0, #16
 8005e9e:	0412      	lsls	r2, r2, #16
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	b9ca      	cbnz	r2, 8005ed8 <__hi0bits+0x3c>
 8005ea4:	0403      	lsls	r3, r0, #16
 8005ea6:	2010      	movs	r0, #16
 8005ea8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005eac:	bf04      	itt	eq
 8005eae:	021b      	lsleq	r3, r3, #8
 8005eb0:	3008      	addeq	r0, #8
 8005eb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005eb6:	bf04      	itt	eq
 8005eb8:	011b      	lsleq	r3, r3, #4
 8005eba:	3004      	addeq	r0, #4
 8005ebc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ec0:	bf04      	itt	eq
 8005ec2:	009b      	lsleq	r3, r3, #2
 8005ec4:	3002      	addeq	r0, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	db05      	blt.n	8005ed6 <__hi0bits+0x3a>
 8005eca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ece:	f100 0001 	add.w	r0, r0, #1
 8005ed2:	bf08      	it	eq
 8005ed4:	2020      	moveq	r0, #32
 8005ed6:	4770      	bx	lr
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e7e5      	b.n	8005ea8 <__hi0bits+0xc>

08005edc <__lo0bits>:
 8005edc:	6803      	ldr	r3, [r0, #0]
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f013 0007 	ands.w	r0, r3, #7
 8005ee4:	d00b      	beq.n	8005efe <__lo0bits+0x22>
 8005ee6:	07d9      	lsls	r1, r3, #31
 8005ee8:	d421      	bmi.n	8005f2e <__lo0bits+0x52>
 8005eea:	0798      	lsls	r0, r3, #30
 8005eec:	bf49      	itett	mi
 8005eee:	085b      	lsrmi	r3, r3, #1
 8005ef0:	089b      	lsrpl	r3, r3, #2
 8005ef2:	2001      	movmi	r0, #1
 8005ef4:	6013      	strmi	r3, [r2, #0]
 8005ef6:	bf5c      	itt	pl
 8005ef8:	2002      	movpl	r0, #2
 8005efa:	6013      	strpl	r3, [r2, #0]
 8005efc:	4770      	bx	lr
 8005efe:	b299      	uxth	r1, r3
 8005f00:	b909      	cbnz	r1, 8005f06 <__lo0bits+0x2a>
 8005f02:	2010      	movs	r0, #16
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	b2d9      	uxtb	r1, r3
 8005f08:	b909      	cbnz	r1, 8005f0e <__lo0bits+0x32>
 8005f0a:	3008      	adds	r0, #8
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	0719      	lsls	r1, r3, #28
 8005f10:	bf04      	itt	eq
 8005f12:	091b      	lsreq	r3, r3, #4
 8005f14:	3004      	addeq	r0, #4
 8005f16:	0799      	lsls	r1, r3, #30
 8005f18:	bf04      	itt	eq
 8005f1a:	089b      	lsreq	r3, r3, #2
 8005f1c:	3002      	addeq	r0, #2
 8005f1e:	07d9      	lsls	r1, r3, #31
 8005f20:	d403      	bmi.n	8005f2a <__lo0bits+0x4e>
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	f100 0001 	add.w	r0, r0, #1
 8005f28:	d003      	beq.n	8005f32 <__lo0bits+0x56>
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	4770      	bx	lr
 8005f2e:	2000      	movs	r0, #0
 8005f30:	4770      	bx	lr
 8005f32:	2020      	movs	r0, #32
 8005f34:	4770      	bx	lr
	...

08005f38 <__i2b>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	f7ff ff05 	bl	8005d4c <_Balloc>
 8005f42:	4602      	mov	r2, r0
 8005f44:	b928      	cbnz	r0, 8005f52 <__i2b+0x1a>
 8005f46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f4a:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <__i2b+0x24>)
 8005f4c:	4804      	ldr	r0, [pc, #16]	; (8005f60 <__i2b+0x28>)
 8005f4e:	f000 fbef 	bl	8006730 <__assert_func>
 8005f52:	2301      	movs	r3, #1
 8005f54:	6144      	str	r4, [r0, #20]
 8005f56:	6103      	str	r3, [r0, #16]
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	bf00      	nop
 8005f5c:	08007417 	.word	0x08007417
 8005f60:	08007428 	.word	0x08007428

08005f64 <__multiply>:
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	4691      	mov	r9, r2
 8005f6a:	690a      	ldr	r2, [r1, #16]
 8005f6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f70:	460c      	mov	r4, r1
 8005f72:	429a      	cmp	r2, r3
 8005f74:	bfbe      	ittt	lt
 8005f76:	460b      	movlt	r3, r1
 8005f78:	464c      	movlt	r4, r9
 8005f7a:	4699      	movlt	r9, r3
 8005f7c:	6927      	ldr	r7, [r4, #16]
 8005f7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f82:	68a3      	ldr	r3, [r4, #8]
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	eb07 060a 	add.w	r6, r7, sl
 8005f8a:	42b3      	cmp	r3, r6
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	bfb8      	it	lt
 8005f90:	3101      	addlt	r1, #1
 8005f92:	f7ff fedb 	bl	8005d4c <_Balloc>
 8005f96:	b930      	cbnz	r0, 8005fa6 <__multiply+0x42>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	f240 115d 	movw	r1, #349	; 0x15d
 8005f9e:	4b43      	ldr	r3, [pc, #268]	; (80060ac <__multiply+0x148>)
 8005fa0:	4843      	ldr	r0, [pc, #268]	; (80060b0 <__multiply+0x14c>)
 8005fa2:	f000 fbc5 	bl	8006730 <__assert_func>
 8005fa6:	f100 0514 	add.w	r5, r0, #20
 8005faa:	462b      	mov	r3, r5
 8005fac:	2200      	movs	r2, #0
 8005fae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fb2:	4543      	cmp	r3, r8
 8005fb4:	d321      	bcc.n	8005ffa <__multiply+0x96>
 8005fb6:	f104 0314 	add.w	r3, r4, #20
 8005fba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005fbe:	f109 0314 	add.w	r3, r9, #20
 8005fc2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005fc6:	9202      	str	r2, [sp, #8]
 8005fc8:	1b3a      	subs	r2, r7, r4
 8005fca:	3a15      	subs	r2, #21
 8005fcc:	f022 0203 	bic.w	r2, r2, #3
 8005fd0:	3204      	adds	r2, #4
 8005fd2:	f104 0115 	add.w	r1, r4, #21
 8005fd6:	428f      	cmp	r7, r1
 8005fd8:	bf38      	it	cc
 8005fda:	2204      	movcc	r2, #4
 8005fdc:	9201      	str	r2, [sp, #4]
 8005fde:	9a02      	ldr	r2, [sp, #8]
 8005fe0:	9303      	str	r3, [sp, #12]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d80c      	bhi.n	8006000 <__multiply+0x9c>
 8005fe6:	2e00      	cmp	r6, #0
 8005fe8:	dd03      	ble.n	8005ff2 <__multiply+0x8e>
 8005fea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d059      	beq.n	80060a6 <__multiply+0x142>
 8005ff2:	6106      	str	r6, [r0, #16]
 8005ff4:	b005      	add	sp, #20
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	f843 2b04 	str.w	r2, [r3], #4
 8005ffe:	e7d8      	b.n	8005fb2 <__multiply+0x4e>
 8006000:	f8b3 a000 	ldrh.w	sl, [r3]
 8006004:	f1ba 0f00 	cmp.w	sl, #0
 8006008:	d023      	beq.n	8006052 <__multiply+0xee>
 800600a:	46a9      	mov	r9, r5
 800600c:	f04f 0c00 	mov.w	ip, #0
 8006010:	f104 0e14 	add.w	lr, r4, #20
 8006014:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006018:	f8d9 1000 	ldr.w	r1, [r9]
 800601c:	fa1f fb82 	uxth.w	fp, r2
 8006020:	b289      	uxth	r1, r1
 8006022:	fb0a 110b 	mla	r1, sl, fp, r1
 8006026:	4461      	add	r1, ip
 8006028:	f8d9 c000 	ldr.w	ip, [r9]
 800602c:	0c12      	lsrs	r2, r2, #16
 800602e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006032:	fb0a c202 	mla	r2, sl, r2, ip
 8006036:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800603a:	b289      	uxth	r1, r1
 800603c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006040:	4577      	cmp	r7, lr
 8006042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006046:	f849 1b04 	str.w	r1, [r9], #4
 800604a:	d8e3      	bhi.n	8006014 <__multiply+0xb0>
 800604c:	9a01      	ldr	r2, [sp, #4]
 800604e:	f845 c002 	str.w	ip, [r5, r2]
 8006052:	9a03      	ldr	r2, [sp, #12]
 8006054:	3304      	adds	r3, #4
 8006056:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800605a:	f1b9 0f00 	cmp.w	r9, #0
 800605e:	d020      	beq.n	80060a2 <__multiply+0x13e>
 8006060:	46ae      	mov	lr, r5
 8006062:	f04f 0a00 	mov.w	sl, #0
 8006066:	6829      	ldr	r1, [r5, #0]
 8006068:	f104 0c14 	add.w	ip, r4, #20
 800606c:	f8bc b000 	ldrh.w	fp, [ip]
 8006070:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006074:	b289      	uxth	r1, r1
 8006076:	fb09 220b 	mla	r2, r9, fp, r2
 800607a:	4492      	add	sl, r2
 800607c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006080:	f84e 1b04 	str.w	r1, [lr], #4
 8006084:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006088:	f8be 1000 	ldrh.w	r1, [lr]
 800608c:	0c12      	lsrs	r2, r2, #16
 800608e:	fb09 1102 	mla	r1, r9, r2, r1
 8006092:	4567      	cmp	r7, ip
 8006094:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006098:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800609c:	d8e6      	bhi.n	800606c <__multiply+0x108>
 800609e:	9a01      	ldr	r2, [sp, #4]
 80060a0:	50a9      	str	r1, [r5, r2]
 80060a2:	3504      	adds	r5, #4
 80060a4:	e79b      	b.n	8005fde <__multiply+0x7a>
 80060a6:	3e01      	subs	r6, #1
 80060a8:	e79d      	b.n	8005fe6 <__multiply+0x82>
 80060aa:	bf00      	nop
 80060ac:	08007417 	.word	0x08007417
 80060b0:	08007428 	.word	0x08007428

080060b4 <__pow5mult>:
 80060b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b8:	4615      	mov	r5, r2
 80060ba:	f012 0203 	ands.w	r2, r2, #3
 80060be:	4606      	mov	r6, r0
 80060c0:	460f      	mov	r7, r1
 80060c2:	d007      	beq.n	80060d4 <__pow5mult+0x20>
 80060c4:	4c25      	ldr	r4, [pc, #148]	; (800615c <__pow5mult+0xa8>)
 80060c6:	3a01      	subs	r2, #1
 80060c8:	2300      	movs	r3, #0
 80060ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ce:	f7ff fe9f 	bl	8005e10 <__multadd>
 80060d2:	4607      	mov	r7, r0
 80060d4:	10ad      	asrs	r5, r5, #2
 80060d6:	d03d      	beq.n	8006154 <__pow5mult+0xa0>
 80060d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060da:	b97c      	cbnz	r4, 80060fc <__pow5mult+0x48>
 80060dc:	2010      	movs	r0, #16
 80060de:	f7fe fa09 	bl	80044f4 <malloc>
 80060e2:	4602      	mov	r2, r0
 80060e4:	6270      	str	r0, [r6, #36]	; 0x24
 80060e6:	b928      	cbnz	r0, 80060f4 <__pow5mult+0x40>
 80060e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060ec:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <__pow5mult+0xac>)
 80060ee:	481d      	ldr	r0, [pc, #116]	; (8006164 <__pow5mult+0xb0>)
 80060f0:	f000 fb1e 	bl	8006730 <__assert_func>
 80060f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060f8:	6004      	str	r4, [r0, #0]
 80060fa:	60c4      	str	r4, [r0, #12]
 80060fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006104:	b94c      	cbnz	r4, 800611a <__pow5mult+0x66>
 8006106:	f240 2171 	movw	r1, #625	; 0x271
 800610a:	4630      	mov	r0, r6
 800610c:	f7ff ff14 	bl	8005f38 <__i2b>
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	f8c8 0008 	str.w	r0, [r8, #8]
 8006118:	6003      	str	r3, [r0, #0]
 800611a:	f04f 0900 	mov.w	r9, #0
 800611e:	07eb      	lsls	r3, r5, #31
 8006120:	d50a      	bpl.n	8006138 <__pow5mult+0x84>
 8006122:	4639      	mov	r1, r7
 8006124:	4622      	mov	r2, r4
 8006126:	4630      	mov	r0, r6
 8006128:	f7ff ff1c 	bl	8005f64 <__multiply>
 800612c:	4680      	mov	r8, r0
 800612e:	4639      	mov	r1, r7
 8006130:	4630      	mov	r0, r6
 8006132:	f7ff fe4b 	bl	8005dcc <_Bfree>
 8006136:	4647      	mov	r7, r8
 8006138:	106d      	asrs	r5, r5, #1
 800613a:	d00b      	beq.n	8006154 <__pow5mult+0xa0>
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	b938      	cbnz	r0, 8006150 <__pow5mult+0x9c>
 8006140:	4622      	mov	r2, r4
 8006142:	4621      	mov	r1, r4
 8006144:	4630      	mov	r0, r6
 8006146:	f7ff ff0d 	bl	8005f64 <__multiply>
 800614a:	6020      	str	r0, [r4, #0]
 800614c:	f8c0 9000 	str.w	r9, [r0]
 8006150:	4604      	mov	r4, r0
 8006152:	e7e4      	b.n	800611e <__pow5mult+0x6a>
 8006154:	4638      	mov	r0, r7
 8006156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615a:	bf00      	nop
 800615c:	08007578 	.word	0x08007578
 8006160:	080073a5 	.word	0x080073a5
 8006164:	08007428 	.word	0x08007428

08006168 <__lshift>:
 8006168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800616c:	460c      	mov	r4, r1
 800616e:	4607      	mov	r7, r0
 8006170:	4691      	mov	r9, r2
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	6849      	ldr	r1, [r1, #4]
 8006176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006180:	f108 0601 	add.w	r6, r8, #1
 8006184:	42b3      	cmp	r3, r6
 8006186:	db0b      	blt.n	80061a0 <__lshift+0x38>
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff fddf 	bl	8005d4c <_Balloc>
 800618e:	4605      	mov	r5, r0
 8006190:	b948      	cbnz	r0, 80061a6 <__lshift+0x3e>
 8006192:	4602      	mov	r2, r0
 8006194:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006198:	4b29      	ldr	r3, [pc, #164]	; (8006240 <__lshift+0xd8>)
 800619a:	482a      	ldr	r0, [pc, #168]	; (8006244 <__lshift+0xdc>)
 800619c:	f000 fac8 	bl	8006730 <__assert_func>
 80061a0:	3101      	adds	r1, #1
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	e7ee      	b.n	8006184 <__lshift+0x1c>
 80061a6:	2300      	movs	r3, #0
 80061a8:	f100 0114 	add.w	r1, r0, #20
 80061ac:	f100 0210 	add.w	r2, r0, #16
 80061b0:	4618      	mov	r0, r3
 80061b2:	4553      	cmp	r3, sl
 80061b4:	db37      	blt.n	8006226 <__lshift+0xbe>
 80061b6:	6920      	ldr	r0, [r4, #16]
 80061b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061bc:	f104 0314 	add.w	r3, r4, #20
 80061c0:	f019 091f 	ands.w	r9, r9, #31
 80061c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80061cc:	d02f      	beq.n	800622e <__lshift+0xc6>
 80061ce:	468a      	mov	sl, r1
 80061d0:	f04f 0c00 	mov.w	ip, #0
 80061d4:	f1c9 0e20 	rsb	lr, r9, #32
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	fa02 f209 	lsl.w	r2, r2, r9
 80061de:	ea42 020c 	orr.w	r2, r2, ip
 80061e2:	f84a 2b04 	str.w	r2, [sl], #4
 80061e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ea:	4298      	cmp	r0, r3
 80061ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80061f0:	d8f2      	bhi.n	80061d8 <__lshift+0x70>
 80061f2:	1b03      	subs	r3, r0, r4
 80061f4:	3b15      	subs	r3, #21
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	3304      	adds	r3, #4
 80061fc:	f104 0215 	add.w	r2, r4, #21
 8006200:	4290      	cmp	r0, r2
 8006202:	bf38      	it	cc
 8006204:	2304      	movcc	r3, #4
 8006206:	f841 c003 	str.w	ip, [r1, r3]
 800620a:	f1bc 0f00 	cmp.w	ip, #0
 800620e:	d001      	beq.n	8006214 <__lshift+0xac>
 8006210:	f108 0602 	add.w	r6, r8, #2
 8006214:	3e01      	subs	r6, #1
 8006216:	4638      	mov	r0, r7
 8006218:	4621      	mov	r1, r4
 800621a:	612e      	str	r6, [r5, #16]
 800621c:	f7ff fdd6 	bl	8005dcc <_Bfree>
 8006220:	4628      	mov	r0, r5
 8006222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006226:	f842 0f04 	str.w	r0, [r2, #4]!
 800622a:	3301      	adds	r3, #1
 800622c:	e7c1      	b.n	80061b2 <__lshift+0x4a>
 800622e:	3904      	subs	r1, #4
 8006230:	f853 2b04 	ldr.w	r2, [r3], #4
 8006234:	4298      	cmp	r0, r3
 8006236:	f841 2f04 	str.w	r2, [r1, #4]!
 800623a:	d8f9      	bhi.n	8006230 <__lshift+0xc8>
 800623c:	e7ea      	b.n	8006214 <__lshift+0xac>
 800623e:	bf00      	nop
 8006240:	08007417 	.word	0x08007417
 8006244:	08007428 	.word	0x08007428

08006248 <__mcmp>:
 8006248:	4603      	mov	r3, r0
 800624a:	690a      	ldr	r2, [r1, #16]
 800624c:	6900      	ldr	r0, [r0, #16]
 800624e:	b530      	push	{r4, r5, lr}
 8006250:	1a80      	subs	r0, r0, r2
 8006252:	d10d      	bne.n	8006270 <__mcmp+0x28>
 8006254:	3314      	adds	r3, #20
 8006256:	3114      	adds	r1, #20
 8006258:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800625c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006268:	4295      	cmp	r5, r2
 800626a:	d002      	beq.n	8006272 <__mcmp+0x2a>
 800626c:	d304      	bcc.n	8006278 <__mcmp+0x30>
 800626e:	2001      	movs	r0, #1
 8006270:	bd30      	pop	{r4, r5, pc}
 8006272:	42a3      	cmp	r3, r4
 8006274:	d3f4      	bcc.n	8006260 <__mcmp+0x18>
 8006276:	e7fb      	b.n	8006270 <__mcmp+0x28>
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	e7f8      	b.n	8006270 <__mcmp+0x28>
	...

08006280 <__mdiff>:
 8006280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	460d      	mov	r5, r1
 8006286:	4607      	mov	r7, r0
 8006288:	4611      	mov	r1, r2
 800628a:	4628      	mov	r0, r5
 800628c:	4614      	mov	r4, r2
 800628e:	f7ff ffdb 	bl	8006248 <__mcmp>
 8006292:	1e06      	subs	r6, r0, #0
 8006294:	d111      	bne.n	80062ba <__mdiff+0x3a>
 8006296:	4631      	mov	r1, r6
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff fd57 	bl	8005d4c <_Balloc>
 800629e:	4602      	mov	r2, r0
 80062a0:	b928      	cbnz	r0, 80062ae <__mdiff+0x2e>
 80062a2:	f240 2132 	movw	r1, #562	; 0x232
 80062a6:	4b3a      	ldr	r3, [pc, #232]	; (8006390 <__mdiff+0x110>)
 80062a8:	483a      	ldr	r0, [pc, #232]	; (8006394 <__mdiff+0x114>)
 80062aa:	f000 fa41 	bl	8006730 <__assert_func>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80062b4:	4610      	mov	r0, r2
 80062b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ba:	bfa4      	itt	ge
 80062bc:	4623      	movge	r3, r4
 80062be:	462c      	movge	r4, r5
 80062c0:	4638      	mov	r0, r7
 80062c2:	6861      	ldr	r1, [r4, #4]
 80062c4:	bfa6      	itte	ge
 80062c6:	461d      	movge	r5, r3
 80062c8:	2600      	movge	r6, #0
 80062ca:	2601      	movlt	r6, #1
 80062cc:	f7ff fd3e 	bl	8005d4c <_Balloc>
 80062d0:	4602      	mov	r2, r0
 80062d2:	b918      	cbnz	r0, 80062dc <__mdiff+0x5c>
 80062d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062d8:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <__mdiff+0x110>)
 80062da:	e7e5      	b.n	80062a8 <__mdiff+0x28>
 80062dc:	f102 0814 	add.w	r8, r2, #20
 80062e0:	46c2      	mov	sl, r8
 80062e2:	f04f 0c00 	mov.w	ip, #0
 80062e6:	6927      	ldr	r7, [r4, #16]
 80062e8:	60c6      	str	r6, [r0, #12]
 80062ea:	692e      	ldr	r6, [r5, #16]
 80062ec:	f104 0014 	add.w	r0, r4, #20
 80062f0:	f105 0914 	add.w	r9, r5, #20
 80062f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80062f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062fc:	3410      	adds	r4, #16
 80062fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006302:	f859 3b04 	ldr.w	r3, [r9], #4
 8006306:	fa1f f18b 	uxth.w	r1, fp
 800630a:	448c      	add	ip, r1
 800630c:	b299      	uxth	r1, r3
 800630e:	0c1b      	lsrs	r3, r3, #16
 8006310:	ebac 0101 	sub.w	r1, ip, r1
 8006314:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006318:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800631c:	b289      	uxth	r1, r1
 800631e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006322:	454e      	cmp	r6, r9
 8006324:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006328:	f84a 3b04 	str.w	r3, [sl], #4
 800632c:	d8e7      	bhi.n	80062fe <__mdiff+0x7e>
 800632e:	1b73      	subs	r3, r6, r5
 8006330:	3b15      	subs	r3, #21
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	3515      	adds	r5, #21
 8006338:	3304      	adds	r3, #4
 800633a:	42ae      	cmp	r6, r5
 800633c:	bf38      	it	cc
 800633e:	2304      	movcc	r3, #4
 8006340:	4418      	add	r0, r3
 8006342:	4443      	add	r3, r8
 8006344:	461e      	mov	r6, r3
 8006346:	4605      	mov	r5, r0
 8006348:	4575      	cmp	r5, lr
 800634a:	d30e      	bcc.n	800636a <__mdiff+0xea>
 800634c:	f10e 0103 	add.w	r1, lr, #3
 8006350:	1a09      	subs	r1, r1, r0
 8006352:	f021 0103 	bic.w	r1, r1, #3
 8006356:	3803      	subs	r0, #3
 8006358:	4586      	cmp	lr, r0
 800635a:	bf38      	it	cc
 800635c:	2100      	movcc	r1, #0
 800635e:	4419      	add	r1, r3
 8006360:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006364:	b18b      	cbz	r3, 800638a <__mdiff+0x10a>
 8006366:	6117      	str	r7, [r2, #16]
 8006368:	e7a4      	b.n	80062b4 <__mdiff+0x34>
 800636a:	f855 8b04 	ldr.w	r8, [r5], #4
 800636e:	fa1f f188 	uxth.w	r1, r8
 8006372:	4461      	add	r1, ip
 8006374:	140c      	asrs	r4, r1, #16
 8006376:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800637a:	b289      	uxth	r1, r1
 800637c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006380:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006384:	f846 1b04 	str.w	r1, [r6], #4
 8006388:	e7de      	b.n	8006348 <__mdiff+0xc8>
 800638a:	3f01      	subs	r7, #1
 800638c:	e7e8      	b.n	8006360 <__mdiff+0xe0>
 800638e:	bf00      	nop
 8006390:	08007417 	.word	0x08007417
 8006394:	08007428 	.word	0x08007428

08006398 <__d2b>:
 8006398:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800639c:	2101      	movs	r1, #1
 800639e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80063a2:	4690      	mov	r8, r2
 80063a4:	461d      	mov	r5, r3
 80063a6:	f7ff fcd1 	bl	8005d4c <_Balloc>
 80063aa:	4604      	mov	r4, r0
 80063ac:	b930      	cbnz	r0, 80063bc <__d2b+0x24>
 80063ae:	4602      	mov	r2, r0
 80063b0:	f240 310a 	movw	r1, #778	; 0x30a
 80063b4:	4b24      	ldr	r3, [pc, #144]	; (8006448 <__d2b+0xb0>)
 80063b6:	4825      	ldr	r0, [pc, #148]	; (800644c <__d2b+0xb4>)
 80063b8:	f000 f9ba 	bl	8006730 <__assert_func>
 80063bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80063c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80063c4:	bb2d      	cbnz	r5, 8006412 <__d2b+0x7a>
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	f1b8 0300 	subs.w	r3, r8, #0
 80063cc:	d026      	beq.n	800641c <__d2b+0x84>
 80063ce:	4668      	mov	r0, sp
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	f7ff fd83 	bl	8005edc <__lo0bits>
 80063d6:	9900      	ldr	r1, [sp, #0]
 80063d8:	b1f0      	cbz	r0, 8006418 <__d2b+0x80>
 80063da:	9a01      	ldr	r2, [sp, #4]
 80063dc:	f1c0 0320 	rsb	r3, r0, #32
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	430b      	orrs	r3, r1
 80063e6:	40c2      	lsrs	r2, r0
 80063e8:	6163      	str	r3, [r4, #20]
 80063ea:	9201      	str	r2, [sp, #4]
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bf14      	ite	ne
 80063f2:	2102      	movne	r1, #2
 80063f4:	2101      	moveq	r1, #1
 80063f6:	61a3      	str	r3, [r4, #24]
 80063f8:	6121      	str	r1, [r4, #16]
 80063fa:	b1c5      	cbz	r5, 800642e <__d2b+0x96>
 80063fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006400:	4405      	add	r5, r0
 8006402:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006406:	603d      	str	r5, [r7, #0]
 8006408:	6030      	str	r0, [r6, #0]
 800640a:	4620      	mov	r0, r4
 800640c:	b002      	add	sp, #8
 800640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006416:	e7d6      	b.n	80063c6 <__d2b+0x2e>
 8006418:	6161      	str	r1, [r4, #20]
 800641a:	e7e7      	b.n	80063ec <__d2b+0x54>
 800641c:	a801      	add	r0, sp, #4
 800641e:	f7ff fd5d 	bl	8005edc <__lo0bits>
 8006422:	2101      	movs	r1, #1
 8006424:	9b01      	ldr	r3, [sp, #4]
 8006426:	6121      	str	r1, [r4, #16]
 8006428:	6163      	str	r3, [r4, #20]
 800642a:	3020      	adds	r0, #32
 800642c:	e7e5      	b.n	80063fa <__d2b+0x62>
 800642e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006432:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006436:	6038      	str	r0, [r7, #0]
 8006438:	6918      	ldr	r0, [r3, #16]
 800643a:	f7ff fd2f 	bl	8005e9c <__hi0bits>
 800643e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006442:	6031      	str	r1, [r6, #0]
 8006444:	e7e1      	b.n	800640a <__d2b+0x72>
 8006446:	bf00      	nop
 8006448:	08007417 	.word	0x08007417
 800644c:	08007428 	.word	0x08007428

08006450 <_calloc_r>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	fba1 5402 	umull	r5, r4, r1, r2
 8006456:	b934      	cbnz	r4, 8006466 <_calloc_r+0x16>
 8006458:	4629      	mov	r1, r5
 800645a:	f7fe f8cb 	bl	80045f4 <_malloc_r>
 800645e:	4606      	mov	r6, r0
 8006460:	b928      	cbnz	r0, 800646e <_calloc_r+0x1e>
 8006462:	4630      	mov	r0, r6
 8006464:	bd70      	pop	{r4, r5, r6, pc}
 8006466:	220c      	movs	r2, #12
 8006468:	2600      	movs	r6, #0
 800646a:	6002      	str	r2, [r0, #0]
 800646c:	e7f9      	b.n	8006462 <_calloc_r+0x12>
 800646e:	462a      	mov	r2, r5
 8006470:	4621      	mov	r1, r4
 8006472:	f7fe f84f 	bl	8004514 <memset>
 8006476:	e7f4      	b.n	8006462 <_calloc_r+0x12>

08006478 <__ssputs_r>:
 8006478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	688e      	ldr	r6, [r1, #8]
 800647e:	4682      	mov	sl, r0
 8006480:	429e      	cmp	r6, r3
 8006482:	460c      	mov	r4, r1
 8006484:	4690      	mov	r8, r2
 8006486:	461f      	mov	r7, r3
 8006488:	d838      	bhi.n	80064fc <__ssputs_r+0x84>
 800648a:	898a      	ldrh	r2, [r1, #12]
 800648c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006490:	d032      	beq.n	80064f8 <__ssputs_r+0x80>
 8006492:	6825      	ldr	r5, [r4, #0]
 8006494:	6909      	ldr	r1, [r1, #16]
 8006496:	3301      	adds	r3, #1
 8006498:	eba5 0901 	sub.w	r9, r5, r1
 800649c:	6965      	ldr	r5, [r4, #20]
 800649e:	444b      	add	r3, r9
 80064a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064a8:	106d      	asrs	r5, r5, #1
 80064aa:	429d      	cmp	r5, r3
 80064ac:	bf38      	it	cc
 80064ae:	461d      	movcc	r5, r3
 80064b0:	0553      	lsls	r3, r2, #21
 80064b2:	d531      	bpl.n	8006518 <__ssputs_r+0xa0>
 80064b4:	4629      	mov	r1, r5
 80064b6:	f7fe f89d 	bl	80045f4 <_malloc_r>
 80064ba:	4606      	mov	r6, r0
 80064bc:	b950      	cbnz	r0, 80064d4 <__ssputs_r+0x5c>
 80064be:	230c      	movs	r3, #12
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	f8ca 3000 	str.w	r3, [sl]
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d4:	464a      	mov	r2, r9
 80064d6:	6921      	ldr	r1, [r4, #16]
 80064d8:	f7ff fc1e 	bl	8005d18 <memcpy>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	6126      	str	r6, [r4, #16]
 80064ea:	444e      	add	r6, r9
 80064ec:	6026      	str	r6, [r4, #0]
 80064ee:	463e      	mov	r6, r7
 80064f0:	6165      	str	r5, [r4, #20]
 80064f2:	eba5 0509 	sub.w	r5, r5, r9
 80064f6:	60a5      	str	r5, [r4, #8]
 80064f8:	42be      	cmp	r6, r7
 80064fa:	d900      	bls.n	80064fe <__ssputs_r+0x86>
 80064fc:	463e      	mov	r6, r7
 80064fe:	4632      	mov	r2, r6
 8006500:	4641      	mov	r1, r8
 8006502:	6820      	ldr	r0, [r4, #0]
 8006504:	f000 f959 	bl	80067ba <memmove>
 8006508:	68a3      	ldr	r3, [r4, #8]
 800650a:	2000      	movs	r0, #0
 800650c:	1b9b      	subs	r3, r3, r6
 800650e:	60a3      	str	r3, [r4, #8]
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	4433      	add	r3, r6
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	e7db      	b.n	80064d0 <__ssputs_r+0x58>
 8006518:	462a      	mov	r2, r5
 800651a:	f000 f968 	bl	80067ee <_realloc_r>
 800651e:	4606      	mov	r6, r0
 8006520:	2800      	cmp	r0, #0
 8006522:	d1e1      	bne.n	80064e8 <__ssputs_r+0x70>
 8006524:	4650      	mov	r0, sl
 8006526:	6921      	ldr	r1, [r4, #16]
 8006528:	f7fd fffc 	bl	8004524 <_free_r>
 800652c:	e7c7      	b.n	80064be <__ssputs_r+0x46>
	...

08006530 <_svfiprintf_r>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	4698      	mov	r8, r3
 8006536:	898b      	ldrh	r3, [r1, #12]
 8006538:	4607      	mov	r7, r0
 800653a:	061b      	lsls	r3, r3, #24
 800653c:	460d      	mov	r5, r1
 800653e:	4614      	mov	r4, r2
 8006540:	b09d      	sub	sp, #116	; 0x74
 8006542:	d50e      	bpl.n	8006562 <_svfiprintf_r+0x32>
 8006544:	690b      	ldr	r3, [r1, #16]
 8006546:	b963      	cbnz	r3, 8006562 <_svfiprintf_r+0x32>
 8006548:	2140      	movs	r1, #64	; 0x40
 800654a:	f7fe f853 	bl	80045f4 <_malloc_r>
 800654e:	6028      	str	r0, [r5, #0]
 8006550:	6128      	str	r0, [r5, #16]
 8006552:	b920      	cbnz	r0, 800655e <_svfiprintf_r+0x2e>
 8006554:	230c      	movs	r3, #12
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	e0d1      	b.n	8006702 <_svfiprintf_r+0x1d2>
 800655e:	2340      	movs	r3, #64	; 0x40
 8006560:	616b      	str	r3, [r5, #20]
 8006562:	2300      	movs	r3, #0
 8006564:	9309      	str	r3, [sp, #36]	; 0x24
 8006566:	2320      	movs	r3, #32
 8006568:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800656c:	2330      	movs	r3, #48	; 0x30
 800656e:	f04f 0901 	mov.w	r9, #1
 8006572:	f8cd 800c 	str.w	r8, [sp, #12]
 8006576:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800671c <_svfiprintf_r+0x1ec>
 800657a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800657e:	4623      	mov	r3, r4
 8006580:	469a      	mov	sl, r3
 8006582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006586:	b10a      	cbz	r2, 800658c <_svfiprintf_r+0x5c>
 8006588:	2a25      	cmp	r2, #37	; 0x25
 800658a:	d1f9      	bne.n	8006580 <_svfiprintf_r+0x50>
 800658c:	ebba 0b04 	subs.w	fp, sl, r4
 8006590:	d00b      	beq.n	80065aa <_svfiprintf_r+0x7a>
 8006592:	465b      	mov	r3, fp
 8006594:	4622      	mov	r2, r4
 8006596:	4629      	mov	r1, r5
 8006598:	4638      	mov	r0, r7
 800659a:	f7ff ff6d 	bl	8006478 <__ssputs_r>
 800659e:	3001      	adds	r0, #1
 80065a0:	f000 80aa 	beq.w	80066f8 <_svfiprintf_r+0x1c8>
 80065a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a6:	445a      	add	r2, fp
 80065a8:	9209      	str	r2, [sp, #36]	; 0x24
 80065aa:	f89a 3000 	ldrb.w	r3, [sl]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80a2 	beq.w	80066f8 <_svfiprintf_r+0x1c8>
 80065b4:	2300      	movs	r3, #0
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065be:	f10a 0a01 	add.w	sl, sl, #1
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	9307      	str	r3, [sp, #28]
 80065c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ca:	931a      	str	r3, [sp, #104]	; 0x68
 80065cc:	4654      	mov	r4, sl
 80065ce:	2205      	movs	r2, #5
 80065d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d4:	4851      	ldr	r0, [pc, #324]	; (800671c <_svfiprintf_r+0x1ec>)
 80065d6:	f7ff fb91 	bl	8005cfc <memchr>
 80065da:	9a04      	ldr	r2, [sp, #16]
 80065dc:	b9d8      	cbnz	r0, 8006616 <_svfiprintf_r+0xe6>
 80065de:	06d0      	lsls	r0, r2, #27
 80065e0:	bf44      	itt	mi
 80065e2:	2320      	movmi	r3, #32
 80065e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065e8:	0711      	lsls	r1, r2, #28
 80065ea:	bf44      	itt	mi
 80065ec:	232b      	movmi	r3, #43	; 0x2b
 80065ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f2:	f89a 3000 	ldrb.w	r3, [sl]
 80065f6:	2b2a      	cmp	r3, #42	; 0x2a
 80065f8:	d015      	beq.n	8006626 <_svfiprintf_r+0xf6>
 80065fa:	4654      	mov	r4, sl
 80065fc:	2000      	movs	r0, #0
 80065fe:	f04f 0c0a 	mov.w	ip, #10
 8006602:	9a07      	ldr	r2, [sp, #28]
 8006604:	4621      	mov	r1, r4
 8006606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660a:	3b30      	subs	r3, #48	; 0x30
 800660c:	2b09      	cmp	r3, #9
 800660e:	d94e      	bls.n	80066ae <_svfiprintf_r+0x17e>
 8006610:	b1b0      	cbz	r0, 8006640 <_svfiprintf_r+0x110>
 8006612:	9207      	str	r2, [sp, #28]
 8006614:	e014      	b.n	8006640 <_svfiprintf_r+0x110>
 8006616:	eba0 0308 	sub.w	r3, r0, r8
 800661a:	fa09 f303 	lsl.w	r3, r9, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	46a2      	mov	sl, r4
 8006622:	9304      	str	r3, [sp, #16]
 8006624:	e7d2      	b.n	80065cc <_svfiprintf_r+0x9c>
 8006626:	9b03      	ldr	r3, [sp, #12]
 8006628:	1d19      	adds	r1, r3, #4
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	9103      	str	r1, [sp, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	bfbb      	ittet	lt
 8006632:	425b      	neglt	r3, r3
 8006634:	f042 0202 	orrlt.w	r2, r2, #2
 8006638:	9307      	strge	r3, [sp, #28]
 800663a:	9307      	strlt	r3, [sp, #28]
 800663c:	bfb8      	it	lt
 800663e:	9204      	strlt	r2, [sp, #16]
 8006640:	7823      	ldrb	r3, [r4, #0]
 8006642:	2b2e      	cmp	r3, #46	; 0x2e
 8006644:	d10c      	bne.n	8006660 <_svfiprintf_r+0x130>
 8006646:	7863      	ldrb	r3, [r4, #1]
 8006648:	2b2a      	cmp	r3, #42	; 0x2a
 800664a:	d135      	bne.n	80066b8 <_svfiprintf_r+0x188>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	3402      	adds	r4, #2
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	9203      	str	r2, [sp, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	bfb8      	it	lt
 800665a:	f04f 33ff 	movlt.w	r3, #4294967295
 800665e:	9305      	str	r3, [sp, #20]
 8006660:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006720 <_svfiprintf_r+0x1f0>
 8006664:	2203      	movs	r2, #3
 8006666:	4650      	mov	r0, sl
 8006668:	7821      	ldrb	r1, [r4, #0]
 800666a:	f7ff fb47 	bl	8005cfc <memchr>
 800666e:	b140      	cbz	r0, 8006682 <_svfiprintf_r+0x152>
 8006670:	2340      	movs	r3, #64	; 0x40
 8006672:	eba0 000a 	sub.w	r0, r0, sl
 8006676:	fa03 f000 	lsl.w	r0, r3, r0
 800667a:	9b04      	ldr	r3, [sp, #16]
 800667c:	3401      	adds	r4, #1
 800667e:	4303      	orrs	r3, r0
 8006680:	9304      	str	r3, [sp, #16]
 8006682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006686:	2206      	movs	r2, #6
 8006688:	4826      	ldr	r0, [pc, #152]	; (8006724 <_svfiprintf_r+0x1f4>)
 800668a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800668e:	f7ff fb35 	bl	8005cfc <memchr>
 8006692:	2800      	cmp	r0, #0
 8006694:	d038      	beq.n	8006708 <_svfiprintf_r+0x1d8>
 8006696:	4b24      	ldr	r3, [pc, #144]	; (8006728 <_svfiprintf_r+0x1f8>)
 8006698:	bb1b      	cbnz	r3, 80066e2 <_svfiprintf_r+0x1b2>
 800669a:	9b03      	ldr	r3, [sp, #12]
 800669c:	3307      	adds	r3, #7
 800669e:	f023 0307 	bic.w	r3, r3, #7
 80066a2:	3308      	adds	r3, #8
 80066a4:	9303      	str	r3, [sp, #12]
 80066a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a8:	4433      	add	r3, r6
 80066aa:	9309      	str	r3, [sp, #36]	; 0x24
 80066ac:	e767      	b.n	800657e <_svfiprintf_r+0x4e>
 80066ae:	460c      	mov	r4, r1
 80066b0:	2001      	movs	r0, #1
 80066b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066b6:	e7a5      	b.n	8006604 <_svfiprintf_r+0xd4>
 80066b8:	2300      	movs	r3, #0
 80066ba:	f04f 0c0a 	mov.w	ip, #10
 80066be:	4619      	mov	r1, r3
 80066c0:	3401      	adds	r4, #1
 80066c2:	9305      	str	r3, [sp, #20]
 80066c4:	4620      	mov	r0, r4
 80066c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ca:	3a30      	subs	r2, #48	; 0x30
 80066cc:	2a09      	cmp	r2, #9
 80066ce:	d903      	bls.n	80066d8 <_svfiprintf_r+0x1a8>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0c5      	beq.n	8006660 <_svfiprintf_r+0x130>
 80066d4:	9105      	str	r1, [sp, #20]
 80066d6:	e7c3      	b.n	8006660 <_svfiprintf_r+0x130>
 80066d8:	4604      	mov	r4, r0
 80066da:	2301      	movs	r3, #1
 80066dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80066e0:	e7f0      	b.n	80066c4 <_svfiprintf_r+0x194>
 80066e2:	ab03      	add	r3, sp, #12
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	462a      	mov	r2, r5
 80066e8:	4638      	mov	r0, r7
 80066ea:	4b10      	ldr	r3, [pc, #64]	; (800672c <_svfiprintf_r+0x1fc>)
 80066ec:	a904      	add	r1, sp, #16
 80066ee:	f7fe f893 	bl	8004818 <_printf_float>
 80066f2:	1c42      	adds	r2, r0, #1
 80066f4:	4606      	mov	r6, r0
 80066f6:	d1d6      	bne.n	80066a6 <_svfiprintf_r+0x176>
 80066f8:	89ab      	ldrh	r3, [r5, #12]
 80066fa:	065b      	lsls	r3, r3, #25
 80066fc:	f53f af2c 	bmi.w	8006558 <_svfiprintf_r+0x28>
 8006700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006702:	b01d      	add	sp, #116	; 0x74
 8006704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006708:	ab03      	add	r3, sp, #12
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	462a      	mov	r2, r5
 800670e:	4638      	mov	r0, r7
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <_svfiprintf_r+0x1fc>)
 8006712:	a904      	add	r1, sp, #16
 8006714:	f7fe fb1c 	bl	8004d50 <_printf_i>
 8006718:	e7eb      	b.n	80066f2 <_svfiprintf_r+0x1c2>
 800671a:	bf00      	nop
 800671c:	08007584 	.word	0x08007584
 8006720:	0800758a 	.word	0x0800758a
 8006724:	0800758e 	.word	0x0800758e
 8006728:	08004819 	.word	0x08004819
 800672c:	08006479 	.word	0x08006479

08006730 <__assert_func>:
 8006730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006732:	4614      	mov	r4, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <__assert_func+0x2c>)
 8006738:	4605      	mov	r5, r0
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68d8      	ldr	r0, [r3, #12]
 800673e:	b14c      	cbz	r4, 8006754 <__assert_func+0x24>
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <__assert_func+0x30>)
 8006742:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006746:	9100      	str	r1, [sp, #0]
 8006748:	462b      	mov	r3, r5
 800674a:	4906      	ldr	r1, [pc, #24]	; (8006764 <__assert_func+0x34>)
 800674c:	f000 f80e 	bl	800676c <fiprintf>
 8006750:	f000 faa2 	bl	8006c98 <abort>
 8006754:	4b04      	ldr	r3, [pc, #16]	; (8006768 <__assert_func+0x38>)
 8006756:	461c      	mov	r4, r3
 8006758:	e7f3      	b.n	8006742 <__assert_func+0x12>
 800675a:	bf00      	nop
 800675c:	20000010 	.word	0x20000010
 8006760:	08007595 	.word	0x08007595
 8006764:	080075a2 	.word	0x080075a2
 8006768:	080075d0 	.word	0x080075d0

0800676c <fiprintf>:
 800676c:	b40e      	push	{r1, r2, r3}
 800676e:	b503      	push	{r0, r1, lr}
 8006770:	4601      	mov	r1, r0
 8006772:	ab03      	add	r3, sp, #12
 8006774:	4805      	ldr	r0, [pc, #20]	; (800678c <fiprintf+0x20>)
 8006776:	f853 2b04 	ldr.w	r2, [r3], #4
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	f000 f88d 	bl	800689c <_vfiprintf_r>
 8006782:	b002      	add	sp, #8
 8006784:	f85d eb04 	ldr.w	lr, [sp], #4
 8006788:	b003      	add	sp, #12
 800678a:	4770      	bx	lr
 800678c:	20000010 	.word	0x20000010

08006790 <__retarget_lock_init_recursive>:
 8006790:	4770      	bx	lr

08006792 <__retarget_lock_acquire_recursive>:
 8006792:	4770      	bx	lr

08006794 <__retarget_lock_release_recursive>:
 8006794:	4770      	bx	lr

08006796 <__ascii_mbtowc>:
 8006796:	b082      	sub	sp, #8
 8006798:	b901      	cbnz	r1, 800679c <__ascii_mbtowc+0x6>
 800679a:	a901      	add	r1, sp, #4
 800679c:	b142      	cbz	r2, 80067b0 <__ascii_mbtowc+0x1a>
 800679e:	b14b      	cbz	r3, 80067b4 <__ascii_mbtowc+0x1e>
 80067a0:	7813      	ldrb	r3, [r2, #0]
 80067a2:	600b      	str	r3, [r1, #0]
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	1e10      	subs	r0, r2, #0
 80067a8:	bf18      	it	ne
 80067aa:	2001      	movne	r0, #1
 80067ac:	b002      	add	sp, #8
 80067ae:	4770      	bx	lr
 80067b0:	4610      	mov	r0, r2
 80067b2:	e7fb      	b.n	80067ac <__ascii_mbtowc+0x16>
 80067b4:	f06f 0001 	mvn.w	r0, #1
 80067b8:	e7f8      	b.n	80067ac <__ascii_mbtowc+0x16>

080067ba <memmove>:
 80067ba:	4288      	cmp	r0, r1
 80067bc:	b510      	push	{r4, lr}
 80067be:	eb01 0402 	add.w	r4, r1, r2
 80067c2:	d902      	bls.n	80067ca <memmove+0x10>
 80067c4:	4284      	cmp	r4, r0
 80067c6:	4623      	mov	r3, r4
 80067c8:	d807      	bhi.n	80067da <memmove+0x20>
 80067ca:	1e43      	subs	r3, r0, #1
 80067cc:	42a1      	cmp	r1, r4
 80067ce:	d008      	beq.n	80067e2 <memmove+0x28>
 80067d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067d8:	e7f8      	b.n	80067cc <memmove+0x12>
 80067da:	4601      	mov	r1, r0
 80067dc:	4402      	add	r2, r0
 80067de:	428a      	cmp	r2, r1
 80067e0:	d100      	bne.n	80067e4 <memmove+0x2a>
 80067e2:	bd10      	pop	{r4, pc}
 80067e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067ec:	e7f7      	b.n	80067de <memmove+0x24>

080067ee <_realloc_r>:
 80067ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f2:	4680      	mov	r8, r0
 80067f4:	4614      	mov	r4, r2
 80067f6:	460e      	mov	r6, r1
 80067f8:	b921      	cbnz	r1, 8006804 <_realloc_r+0x16>
 80067fa:	4611      	mov	r1, r2
 80067fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006800:	f7fd bef8 	b.w	80045f4 <_malloc_r>
 8006804:	b92a      	cbnz	r2, 8006812 <_realloc_r+0x24>
 8006806:	f7fd fe8d 	bl	8004524 <_free_r>
 800680a:	4625      	mov	r5, r4
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006812:	f000 fc61 	bl	80070d8 <_malloc_usable_size_r>
 8006816:	4284      	cmp	r4, r0
 8006818:	4607      	mov	r7, r0
 800681a:	d802      	bhi.n	8006822 <_realloc_r+0x34>
 800681c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006820:	d812      	bhi.n	8006848 <_realloc_r+0x5a>
 8006822:	4621      	mov	r1, r4
 8006824:	4640      	mov	r0, r8
 8006826:	f7fd fee5 	bl	80045f4 <_malloc_r>
 800682a:	4605      	mov	r5, r0
 800682c:	2800      	cmp	r0, #0
 800682e:	d0ed      	beq.n	800680c <_realloc_r+0x1e>
 8006830:	42bc      	cmp	r4, r7
 8006832:	4622      	mov	r2, r4
 8006834:	4631      	mov	r1, r6
 8006836:	bf28      	it	cs
 8006838:	463a      	movcs	r2, r7
 800683a:	f7ff fa6d 	bl	8005d18 <memcpy>
 800683e:	4631      	mov	r1, r6
 8006840:	4640      	mov	r0, r8
 8006842:	f7fd fe6f 	bl	8004524 <_free_r>
 8006846:	e7e1      	b.n	800680c <_realloc_r+0x1e>
 8006848:	4635      	mov	r5, r6
 800684a:	e7df      	b.n	800680c <_realloc_r+0x1e>

0800684c <__sfputc_r>:
 800684c:	6893      	ldr	r3, [r2, #8]
 800684e:	b410      	push	{r4}
 8006850:	3b01      	subs	r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	6093      	str	r3, [r2, #8]
 8006856:	da07      	bge.n	8006868 <__sfputc_r+0x1c>
 8006858:	6994      	ldr	r4, [r2, #24]
 800685a:	42a3      	cmp	r3, r4
 800685c:	db01      	blt.n	8006862 <__sfputc_r+0x16>
 800685e:	290a      	cmp	r1, #10
 8006860:	d102      	bne.n	8006868 <__sfputc_r+0x1c>
 8006862:	bc10      	pop	{r4}
 8006864:	f000 b94a 	b.w	8006afc <__swbuf_r>
 8006868:	6813      	ldr	r3, [r2, #0]
 800686a:	1c58      	adds	r0, r3, #1
 800686c:	6010      	str	r0, [r2, #0]
 800686e:	7019      	strb	r1, [r3, #0]
 8006870:	4608      	mov	r0, r1
 8006872:	bc10      	pop	{r4}
 8006874:	4770      	bx	lr

08006876 <__sfputs_r>:
 8006876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006878:	4606      	mov	r6, r0
 800687a:	460f      	mov	r7, r1
 800687c:	4614      	mov	r4, r2
 800687e:	18d5      	adds	r5, r2, r3
 8006880:	42ac      	cmp	r4, r5
 8006882:	d101      	bne.n	8006888 <__sfputs_r+0x12>
 8006884:	2000      	movs	r0, #0
 8006886:	e007      	b.n	8006898 <__sfputs_r+0x22>
 8006888:	463a      	mov	r2, r7
 800688a:	4630      	mov	r0, r6
 800688c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006890:	f7ff ffdc 	bl	800684c <__sfputc_r>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d1f3      	bne.n	8006880 <__sfputs_r+0xa>
 8006898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800689c <_vfiprintf_r>:
 800689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	460d      	mov	r5, r1
 80068a2:	4614      	mov	r4, r2
 80068a4:	4698      	mov	r8, r3
 80068a6:	4606      	mov	r6, r0
 80068a8:	b09d      	sub	sp, #116	; 0x74
 80068aa:	b118      	cbz	r0, 80068b4 <_vfiprintf_r+0x18>
 80068ac:	6983      	ldr	r3, [r0, #24]
 80068ae:	b90b      	cbnz	r3, 80068b4 <_vfiprintf_r+0x18>
 80068b0:	f000 fb10 	bl	8006ed4 <__sinit>
 80068b4:	4b89      	ldr	r3, [pc, #548]	; (8006adc <_vfiprintf_r+0x240>)
 80068b6:	429d      	cmp	r5, r3
 80068b8:	d11b      	bne.n	80068f2 <_vfiprintf_r+0x56>
 80068ba:	6875      	ldr	r5, [r6, #4]
 80068bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068be:	07d9      	lsls	r1, r3, #31
 80068c0:	d405      	bmi.n	80068ce <_vfiprintf_r+0x32>
 80068c2:	89ab      	ldrh	r3, [r5, #12]
 80068c4:	059a      	lsls	r2, r3, #22
 80068c6:	d402      	bmi.n	80068ce <_vfiprintf_r+0x32>
 80068c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ca:	f7ff ff62 	bl	8006792 <__retarget_lock_acquire_recursive>
 80068ce:	89ab      	ldrh	r3, [r5, #12]
 80068d0:	071b      	lsls	r3, r3, #28
 80068d2:	d501      	bpl.n	80068d8 <_vfiprintf_r+0x3c>
 80068d4:	692b      	ldr	r3, [r5, #16]
 80068d6:	b9eb      	cbnz	r3, 8006914 <_vfiprintf_r+0x78>
 80068d8:	4629      	mov	r1, r5
 80068da:	4630      	mov	r0, r6
 80068dc:	f000 f96e 	bl	8006bbc <__swsetup_r>
 80068e0:	b1c0      	cbz	r0, 8006914 <_vfiprintf_r+0x78>
 80068e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068e4:	07dc      	lsls	r4, r3, #31
 80068e6:	d50e      	bpl.n	8006906 <_vfiprintf_r+0x6a>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	b01d      	add	sp, #116	; 0x74
 80068ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f2:	4b7b      	ldr	r3, [pc, #492]	; (8006ae0 <_vfiprintf_r+0x244>)
 80068f4:	429d      	cmp	r5, r3
 80068f6:	d101      	bne.n	80068fc <_vfiprintf_r+0x60>
 80068f8:	68b5      	ldr	r5, [r6, #8]
 80068fa:	e7df      	b.n	80068bc <_vfiprintf_r+0x20>
 80068fc:	4b79      	ldr	r3, [pc, #484]	; (8006ae4 <_vfiprintf_r+0x248>)
 80068fe:	429d      	cmp	r5, r3
 8006900:	bf08      	it	eq
 8006902:	68f5      	ldreq	r5, [r6, #12]
 8006904:	e7da      	b.n	80068bc <_vfiprintf_r+0x20>
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	0598      	lsls	r0, r3, #22
 800690a:	d4ed      	bmi.n	80068e8 <_vfiprintf_r+0x4c>
 800690c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800690e:	f7ff ff41 	bl	8006794 <__retarget_lock_release_recursive>
 8006912:	e7e9      	b.n	80068e8 <_vfiprintf_r+0x4c>
 8006914:	2300      	movs	r3, #0
 8006916:	9309      	str	r3, [sp, #36]	; 0x24
 8006918:	2320      	movs	r3, #32
 800691a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800691e:	2330      	movs	r3, #48	; 0x30
 8006920:	f04f 0901 	mov.w	r9, #1
 8006924:	f8cd 800c 	str.w	r8, [sp, #12]
 8006928:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ae8 <_vfiprintf_r+0x24c>
 800692c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006930:	4623      	mov	r3, r4
 8006932:	469a      	mov	sl, r3
 8006934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006938:	b10a      	cbz	r2, 800693e <_vfiprintf_r+0xa2>
 800693a:	2a25      	cmp	r2, #37	; 0x25
 800693c:	d1f9      	bne.n	8006932 <_vfiprintf_r+0x96>
 800693e:	ebba 0b04 	subs.w	fp, sl, r4
 8006942:	d00b      	beq.n	800695c <_vfiprintf_r+0xc0>
 8006944:	465b      	mov	r3, fp
 8006946:	4622      	mov	r2, r4
 8006948:	4629      	mov	r1, r5
 800694a:	4630      	mov	r0, r6
 800694c:	f7ff ff93 	bl	8006876 <__sfputs_r>
 8006950:	3001      	adds	r0, #1
 8006952:	f000 80aa 	beq.w	8006aaa <_vfiprintf_r+0x20e>
 8006956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006958:	445a      	add	r2, fp
 800695a:	9209      	str	r2, [sp, #36]	; 0x24
 800695c:	f89a 3000 	ldrb.w	r3, [sl]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80a2 	beq.w	8006aaa <_vfiprintf_r+0x20e>
 8006966:	2300      	movs	r3, #0
 8006968:	f04f 32ff 	mov.w	r2, #4294967295
 800696c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006970:	f10a 0a01 	add.w	sl, sl, #1
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800697c:	931a      	str	r3, [sp, #104]	; 0x68
 800697e:	4654      	mov	r4, sl
 8006980:	2205      	movs	r2, #5
 8006982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006986:	4858      	ldr	r0, [pc, #352]	; (8006ae8 <_vfiprintf_r+0x24c>)
 8006988:	f7ff f9b8 	bl	8005cfc <memchr>
 800698c:	9a04      	ldr	r2, [sp, #16]
 800698e:	b9d8      	cbnz	r0, 80069c8 <_vfiprintf_r+0x12c>
 8006990:	06d1      	lsls	r1, r2, #27
 8006992:	bf44      	itt	mi
 8006994:	2320      	movmi	r3, #32
 8006996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800699a:	0713      	lsls	r3, r2, #28
 800699c:	bf44      	itt	mi
 800699e:	232b      	movmi	r3, #43	; 0x2b
 80069a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a4:	f89a 3000 	ldrb.w	r3, [sl]
 80069a8:	2b2a      	cmp	r3, #42	; 0x2a
 80069aa:	d015      	beq.n	80069d8 <_vfiprintf_r+0x13c>
 80069ac:	4654      	mov	r4, sl
 80069ae:	2000      	movs	r0, #0
 80069b0:	f04f 0c0a 	mov.w	ip, #10
 80069b4:	9a07      	ldr	r2, [sp, #28]
 80069b6:	4621      	mov	r1, r4
 80069b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069bc:	3b30      	subs	r3, #48	; 0x30
 80069be:	2b09      	cmp	r3, #9
 80069c0:	d94e      	bls.n	8006a60 <_vfiprintf_r+0x1c4>
 80069c2:	b1b0      	cbz	r0, 80069f2 <_vfiprintf_r+0x156>
 80069c4:	9207      	str	r2, [sp, #28]
 80069c6:	e014      	b.n	80069f2 <_vfiprintf_r+0x156>
 80069c8:	eba0 0308 	sub.w	r3, r0, r8
 80069cc:	fa09 f303 	lsl.w	r3, r9, r3
 80069d0:	4313      	orrs	r3, r2
 80069d2:	46a2      	mov	sl, r4
 80069d4:	9304      	str	r3, [sp, #16]
 80069d6:	e7d2      	b.n	800697e <_vfiprintf_r+0xe2>
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	1d19      	adds	r1, r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	9103      	str	r1, [sp, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bfbb      	ittet	lt
 80069e4:	425b      	neglt	r3, r3
 80069e6:	f042 0202 	orrlt.w	r2, r2, #2
 80069ea:	9307      	strge	r3, [sp, #28]
 80069ec:	9307      	strlt	r3, [sp, #28]
 80069ee:	bfb8      	it	lt
 80069f0:	9204      	strlt	r2, [sp, #16]
 80069f2:	7823      	ldrb	r3, [r4, #0]
 80069f4:	2b2e      	cmp	r3, #46	; 0x2e
 80069f6:	d10c      	bne.n	8006a12 <_vfiprintf_r+0x176>
 80069f8:	7863      	ldrb	r3, [r4, #1]
 80069fa:	2b2a      	cmp	r3, #42	; 0x2a
 80069fc:	d135      	bne.n	8006a6a <_vfiprintf_r+0x1ce>
 80069fe:	9b03      	ldr	r3, [sp, #12]
 8006a00:	3402      	adds	r4, #2
 8006a02:	1d1a      	adds	r2, r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	9203      	str	r2, [sp, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bfb8      	it	lt
 8006a0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006aec <_vfiprintf_r+0x250>
 8006a16:	2203      	movs	r2, #3
 8006a18:	4650      	mov	r0, sl
 8006a1a:	7821      	ldrb	r1, [r4, #0]
 8006a1c:	f7ff f96e 	bl	8005cfc <memchr>
 8006a20:	b140      	cbz	r0, 8006a34 <_vfiprintf_r+0x198>
 8006a22:	2340      	movs	r3, #64	; 0x40
 8006a24:	eba0 000a 	sub.w	r0, r0, sl
 8006a28:	fa03 f000 	lsl.w	r0, r3, r0
 8006a2c:	9b04      	ldr	r3, [sp, #16]
 8006a2e:	3401      	adds	r4, #1
 8006a30:	4303      	orrs	r3, r0
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a38:	2206      	movs	r2, #6
 8006a3a:	482d      	ldr	r0, [pc, #180]	; (8006af0 <_vfiprintf_r+0x254>)
 8006a3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a40:	f7ff f95c 	bl	8005cfc <memchr>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d03f      	beq.n	8006ac8 <_vfiprintf_r+0x22c>
 8006a48:	4b2a      	ldr	r3, [pc, #168]	; (8006af4 <_vfiprintf_r+0x258>)
 8006a4a:	bb1b      	cbnz	r3, 8006a94 <_vfiprintf_r+0x1f8>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	3307      	adds	r3, #7
 8006a50:	f023 0307 	bic.w	r3, r3, #7
 8006a54:	3308      	adds	r3, #8
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5a:	443b      	add	r3, r7
 8006a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5e:	e767      	b.n	8006930 <_vfiprintf_r+0x94>
 8006a60:	460c      	mov	r4, r1
 8006a62:	2001      	movs	r0, #1
 8006a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a68:	e7a5      	b.n	80069b6 <_vfiprintf_r+0x11a>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f04f 0c0a 	mov.w	ip, #10
 8006a70:	4619      	mov	r1, r3
 8006a72:	3401      	adds	r4, #1
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	4620      	mov	r0, r4
 8006a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7c:	3a30      	subs	r2, #48	; 0x30
 8006a7e:	2a09      	cmp	r2, #9
 8006a80:	d903      	bls.n	8006a8a <_vfiprintf_r+0x1ee>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0c5      	beq.n	8006a12 <_vfiprintf_r+0x176>
 8006a86:	9105      	str	r1, [sp, #20]
 8006a88:	e7c3      	b.n	8006a12 <_vfiprintf_r+0x176>
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a92:	e7f0      	b.n	8006a76 <_vfiprintf_r+0x1da>
 8006a94:	ab03      	add	r3, sp, #12
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	462a      	mov	r2, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <_vfiprintf_r+0x25c>)
 8006a9e:	a904      	add	r1, sp, #16
 8006aa0:	f7fd feba 	bl	8004818 <_printf_float>
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	1c78      	adds	r0, r7, #1
 8006aa8:	d1d6      	bne.n	8006a58 <_vfiprintf_r+0x1bc>
 8006aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aac:	07d9      	lsls	r1, r3, #31
 8006aae:	d405      	bmi.n	8006abc <_vfiprintf_r+0x220>
 8006ab0:	89ab      	ldrh	r3, [r5, #12]
 8006ab2:	059a      	lsls	r2, r3, #22
 8006ab4:	d402      	bmi.n	8006abc <_vfiprintf_r+0x220>
 8006ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ab8:	f7ff fe6c 	bl	8006794 <__retarget_lock_release_recursive>
 8006abc:	89ab      	ldrh	r3, [r5, #12]
 8006abe:	065b      	lsls	r3, r3, #25
 8006ac0:	f53f af12 	bmi.w	80068e8 <_vfiprintf_r+0x4c>
 8006ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac6:	e711      	b.n	80068ec <_vfiprintf_r+0x50>
 8006ac8:	ab03      	add	r3, sp, #12
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	462a      	mov	r2, r5
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <_vfiprintf_r+0x25c>)
 8006ad2:	a904      	add	r1, sp, #16
 8006ad4:	f7fe f93c 	bl	8004d50 <_printf_i>
 8006ad8:	e7e4      	b.n	8006aa4 <_vfiprintf_r+0x208>
 8006ada:	bf00      	nop
 8006adc:	080076fc 	.word	0x080076fc
 8006ae0:	0800771c 	.word	0x0800771c
 8006ae4:	080076dc 	.word	0x080076dc
 8006ae8:	08007584 	.word	0x08007584
 8006aec:	0800758a 	.word	0x0800758a
 8006af0:	0800758e 	.word	0x0800758e
 8006af4:	08004819 	.word	0x08004819
 8006af8:	08006877 	.word	0x08006877

08006afc <__swbuf_r>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	460e      	mov	r6, r1
 8006b00:	4614      	mov	r4, r2
 8006b02:	4605      	mov	r5, r0
 8006b04:	b118      	cbz	r0, 8006b0e <__swbuf_r+0x12>
 8006b06:	6983      	ldr	r3, [r0, #24]
 8006b08:	b90b      	cbnz	r3, 8006b0e <__swbuf_r+0x12>
 8006b0a:	f000 f9e3 	bl	8006ed4 <__sinit>
 8006b0e:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <__swbuf_r+0x98>)
 8006b10:	429c      	cmp	r4, r3
 8006b12:	d12b      	bne.n	8006b6c <__swbuf_r+0x70>
 8006b14:	686c      	ldr	r4, [r5, #4]
 8006b16:	69a3      	ldr	r3, [r4, #24]
 8006b18:	60a3      	str	r3, [r4, #8]
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	071a      	lsls	r2, r3, #28
 8006b1e:	d52f      	bpl.n	8006b80 <__swbuf_r+0x84>
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	b36b      	cbz	r3, 8006b80 <__swbuf_r+0x84>
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	6820      	ldr	r0, [r4, #0]
 8006b28:	b2f6      	uxtb	r6, r6
 8006b2a:	1ac0      	subs	r0, r0, r3
 8006b2c:	6963      	ldr	r3, [r4, #20]
 8006b2e:	4637      	mov	r7, r6
 8006b30:	4283      	cmp	r3, r0
 8006b32:	dc04      	bgt.n	8006b3e <__swbuf_r+0x42>
 8006b34:	4621      	mov	r1, r4
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 f938 	bl	8006dac <_fflush_r>
 8006b3c:	bb30      	cbnz	r0, 8006b8c <__swbuf_r+0x90>
 8006b3e:	68a3      	ldr	r3, [r4, #8]
 8006b40:	3001      	adds	r0, #1
 8006b42:	3b01      	subs	r3, #1
 8006b44:	60a3      	str	r3, [r4, #8]
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	701e      	strb	r6, [r3, #0]
 8006b4e:	6963      	ldr	r3, [r4, #20]
 8006b50:	4283      	cmp	r3, r0
 8006b52:	d004      	beq.n	8006b5e <__swbuf_r+0x62>
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	07db      	lsls	r3, r3, #31
 8006b58:	d506      	bpl.n	8006b68 <__swbuf_r+0x6c>
 8006b5a:	2e0a      	cmp	r6, #10
 8006b5c:	d104      	bne.n	8006b68 <__swbuf_r+0x6c>
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4628      	mov	r0, r5
 8006b62:	f000 f923 	bl	8006dac <_fflush_r>
 8006b66:	b988      	cbnz	r0, 8006b8c <__swbuf_r+0x90>
 8006b68:	4638      	mov	r0, r7
 8006b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6c:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <__swbuf_r+0x9c>)
 8006b6e:	429c      	cmp	r4, r3
 8006b70:	d101      	bne.n	8006b76 <__swbuf_r+0x7a>
 8006b72:	68ac      	ldr	r4, [r5, #8]
 8006b74:	e7cf      	b.n	8006b16 <__swbuf_r+0x1a>
 8006b76:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <__swbuf_r+0xa0>)
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	bf08      	it	eq
 8006b7c:	68ec      	ldreq	r4, [r5, #12]
 8006b7e:	e7ca      	b.n	8006b16 <__swbuf_r+0x1a>
 8006b80:	4621      	mov	r1, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	f000 f81a 	bl	8006bbc <__swsetup_r>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d0cb      	beq.n	8006b24 <__swbuf_r+0x28>
 8006b8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b90:	e7ea      	b.n	8006b68 <__swbuf_r+0x6c>
 8006b92:	bf00      	nop
 8006b94:	080076fc 	.word	0x080076fc
 8006b98:	0800771c 	.word	0x0800771c
 8006b9c:	080076dc 	.word	0x080076dc

08006ba0 <__ascii_wctomb>:
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4608      	mov	r0, r1
 8006ba4:	b141      	cbz	r1, 8006bb8 <__ascii_wctomb+0x18>
 8006ba6:	2aff      	cmp	r2, #255	; 0xff
 8006ba8:	d904      	bls.n	8006bb4 <__ascii_wctomb+0x14>
 8006baa:	228a      	movs	r2, #138	; 0x8a
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	4770      	bx	lr
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	700a      	strb	r2, [r1, #0]
 8006bb8:	4770      	bx	lr
	...

08006bbc <__swsetup_r>:
 8006bbc:	4b32      	ldr	r3, [pc, #200]	; (8006c88 <__swsetup_r+0xcc>)
 8006bbe:	b570      	push	{r4, r5, r6, lr}
 8006bc0:	681d      	ldr	r5, [r3, #0]
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	b125      	cbz	r5, 8006bd2 <__swsetup_r+0x16>
 8006bc8:	69ab      	ldr	r3, [r5, #24]
 8006bca:	b913      	cbnz	r3, 8006bd2 <__swsetup_r+0x16>
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 f981 	bl	8006ed4 <__sinit>
 8006bd2:	4b2e      	ldr	r3, [pc, #184]	; (8006c8c <__swsetup_r+0xd0>)
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	d10f      	bne.n	8006bf8 <__swsetup_r+0x3c>
 8006bd8:	686c      	ldr	r4, [r5, #4]
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006be0:	0719      	lsls	r1, r3, #28
 8006be2:	d42c      	bmi.n	8006c3e <__swsetup_r+0x82>
 8006be4:	06dd      	lsls	r5, r3, #27
 8006be6:	d411      	bmi.n	8006c0c <__swsetup_r+0x50>
 8006be8:	2309      	movs	r3, #9
 8006bea:	6033      	str	r3, [r6, #0]
 8006bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	e03e      	b.n	8006c76 <__swsetup_r+0xba>
 8006bf8:	4b25      	ldr	r3, [pc, #148]	; (8006c90 <__swsetup_r+0xd4>)
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	d101      	bne.n	8006c02 <__swsetup_r+0x46>
 8006bfe:	68ac      	ldr	r4, [r5, #8]
 8006c00:	e7eb      	b.n	8006bda <__swsetup_r+0x1e>
 8006c02:	4b24      	ldr	r3, [pc, #144]	; (8006c94 <__swsetup_r+0xd8>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	bf08      	it	eq
 8006c08:	68ec      	ldreq	r4, [r5, #12]
 8006c0a:	e7e6      	b.n	8006bda <__swsetup_r+0x1e>
 8006c0c:	0758      	lsls	r0, r3, #29
 8006c0e:	d512      	bpl.n	8006c36 <__swsetup_r+0x7a>
 8006c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c12:	b141      	cbz	r1, 8006c26 <__swsetup_r+0x6a>
 8006c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	d002      	beq.n	8006c22 <__swsetup_r+0x66>
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7fd fc81 	bl	8004524 <_free_r>
 8006c22:	2300      	movs	r3, #0
 8006c24:	6363      	str	r3, [r4, #52]	; 0x34
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	f043 0308 	orr.w	r3, r3, #8
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	b94b      	cbnz	r3, 8006c56 <__swsetup_r+0x9a>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4c:	d003      	beq.n	8006c56 <__swsetup_r+0x9a>
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 fa01 	bl	8007058 <__smakebuf_r>
 8006c56:	89a0      	ldrh	r0, [r4, #12]
 8006c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c5c:	f010 0301 	ands.w	r3, r0, #1
 8006c60:	d00a      	beq.n	8006c78 <__swsetup_r+0xbc>
 8006c62:	2300      	movs	r3, #0
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	6963      	ldr	r3, [r4, #20]
 8006c68:	425b      	negs	r3, r3
 8006c6a:	61a3      	str	r3, [r4, #24]
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	b943      	cbnz	r3, 8006c82 <__swsetup_r+0xc6>
 8006c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c74:	d1ba      	bne.n	8006bec <__swsetup_r+0x30>
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	0781      	lsls	r1, r0, #30
 8006c7a:	bf58      	it	pl
 8006c7c:	6963      	ldrpl	r3, [r4, #20]
 8006c7e:	60a3      	str	r3, [r4, #8]
 8006c80:	e7f4      	b.n	8006c6c <__swsetup_r+0xb0>
 8006c82:	2000      	movs	r0, #0
 8006c84:	e7f7      	b.n	8006c76 <__swsetup_r+0xba>
 8006c86:	bf00      	nop
 8006c88:	20000010 	.word	0x20000010
 8006c8c:	080076fc 	.word	0x080076fc
 8006c90:	0800771c 	.word	0x0800771c
 8006c94:	080076dc 	.word	0x080076dc

08006c98 <abort>:
 8006c98:	2006      	movs	r0, #6
 8006c9a:	b508      	push	{r3, lr}
 8006c9c:	f000 fa4c 	bl	8007138 <raise>
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	f7fb f880 	bl	8001da6 <_exit>
	...

08006ca8 <__sflush_r>:
 8006ca8:	898a      	ldrh	r2, [r1, #12]
 8006caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cac:	4605      	mov	r5, r0
 8006cae:	0710      	lsls	r0, r2, #28
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	d457      	bmi.n	8006d64 <__sflush_r+0xbc>
 8006cb4:	684b      	ldr	r3, [r1, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dc04      	bgt.n	8006cc4 <__sflush_r+0x1c>
 8006cba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dc01      	bgt.n	8006cc4 <__sflush_r+0x1c>
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d0fa      	beq.n	8006cc0 <__sflush_r+0x18>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cd0:	682f      	ldr	r7, [r5, #0]
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	d032      	beq.n	8006d3c <__sflush_r+0x94>
 8006cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	075a      	lsls	r2, r3, #29
 8006cdc:	d505      	bpl.n	8006cea <__sflush_r+0x42>
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	1ac0      	subs	r0, r0, r3
 8006ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce4:	b10b      	cbz	r3, 8006cea <__sflush_r+0x42>
 8006ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce8:	1ac0      	subs	r0, r0, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	4602      	mov	r2, r0
 8006cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	6a21      	ldr	r1, [r4, #32]
 8006cf4:	47b0      	blx	r6
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	d106      	bne.n	8006d0a <__sflush_r+0x62>
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	291d      	cmp	r1, #29
 8006d00:	d82c      	bhi.n	8006d5c <__sflush_r+0xb4>
 8006d02:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <__sflush_r+0x100>)
 8006d04:	40ca      	lsrs	r2, r1
 8006d06:	07d6      	lsls	r6, r2, #31
 8006d08:	d528      	bpl.n	8006d5c <__sflush_r+0xb4>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	6062      	str	r2, [r4, #4]
 8006d0e:	6922      	ldr	r2, [r4, #16]
 8006d10:	04d9      	lsls	r1, r3, #19
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	d504      	bpl.n	8006d20 <__sflush_r+0x78>
 8006d16:	1c42      	adds	r2, r0, #1
 8006d18:	d101      	bne.n	8006d1e <__sflush_r+0x76>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	b903      	cbnz	r3, 8006d20 <__sflush_r+0x78>
 8006d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d22:	602f      	str	r7, [r5, #0]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d0cb      	beq.n	8006cc0 <__sflush_r+0x18>
 8006d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <__sflush_r+0x8e>
 8006d30:	4628      	mov	r0, r5
 8006d32:	f7fd fbf7 	bl	8004524 <_free_r>
 8006d36:	2000      	movs	r0, #0
 8006d38:	6360      	str	r0, [r4, #52]	; 0x34
 8006d3a:	e7c2      	b.n	8006cc2 <__sflush_r+0x1a>
 8006d3c:	6a21      	ldr	r1, [r4, #32]
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b0      	blx	r6
 8006d44:	1c41      	adds	r1, r0, #1
 8006d46:	d1c7      	bne.n	8006cd8 <__sflush_r+0x30>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c4      	beq.n	8006cd8 <__sflush_r+0x30>
 8006d4e:	2b1d      	cmp	r3, #29
 8006d50:	d001      	beq.n	8006d56 <__sflush_r+0xae>
 8006d52:	2b16      	cmp	r3, #22
 8006d54:	d101      	bne.n	8006d5a <__sflush_r+0xb2>
 8006d56:	602f      	str	r7, [r5, #0]
 8006d58:	e7b2      	b.n	8006cc0 <__sflush_r+0x18>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	e7ae      	b.n	8006cc2 <__sflush_r+0x1a>
 8006d64:	690f      	ldr	r7, [r1, #16]
 8006d66:	2f00      	cmp	r7, #0
 8006d68:	d0aa      	beq.n	8006cc0 <__sflush_r+0x18>
 8006d6a:	0793      	lsls	r3, r2, #30
 8006d6c:	bf18      	it	ne
 8006d6e:	2300      	movne	r3, #0
 8006d70:	680e      	ldr	r6, [r1, #0]
 8006d72:	bf08      	it	eq
 8006d74:	694b      	ldreq	r3, [r1, #20]
 8006d76:	1bf6      	subs	r6, r6, r7
 8006d78:	600f      	str	r7, [r1, #0]
 8006d7a:	608b      	str	r3, [r1, #8]
 8006d7c:	2e00      	cmp	r6, #0
 8006d7e:	dd9f      	ble.n	8006cc0 <__sflush_r+0x18>
 8006d80:	4633      	mov	r3, r6
 8006d82:	463a      	mov	r2, r7
 8006d84:	4628      	mov	r0, r5
 8006d86:	6a21      	ldr	r1, [r4, #32]
 8006d88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006d8c:	47e0      	blx	ip
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	dc06      	bgt.n	8006da0 <__sflush_r+0xf8>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	e790      	b.n	8006cc2 <__sflush_r+0x1a>
 8006da0:	4407      	add	r7, r0
 8006da2:	1a36      	subs	r6, r6, r0
 8006da4:	e7ea      	b.n	8006d7c <__sflush_r+0xd4>
 8006da6:	bf00      	nop
 8006da8:	20400001 	.word	0x20400001

08006dac <_fflush_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	4605      	mov	r5, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b913      	cbnz	r3, 8006dbc <_fflush_r+0x10>
 8006db6:	2500      	movs	r5, #0
 8006db8:	4628      	mov	r0, r5
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	b118      	cbz	r0, 8006dc6 <_fflush_r+0x1a>
 8006dbe:	6983      	ldr	r3, [r0, #24]
 8006dc0:	b90b      	cbnz	r3, 8006dc6 <_fflush_r+0x1a>
 8006dc2:	f000 f887 	bl	8006ed4 <__sinit>
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <_fflush_r+0x6c>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	d11b      	bne.n	8006e04 <_fflush_r+0x58>
 8006dcc:	686c      	ldr	r4, [r5, #4]
 8006dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0ef      	beq.n	8006db6 <_fflush_r+0xa>
 8006dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dd8:	07d0      	lsls	r0, r2, #31
 8006dda:	d404      	bmi.n	8006de6 <_fflush_r+0x3a>
 8006ddc:	0599      	lsls	r1, r3, #22
 8006dde:	d402      	bmi.n	8006de6 <_fflush_r+0x3a>
 8006de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de2:	f7ff fcd6 	bl	8006792 <__retarget_lock_acquire_recursive>
 8006de6:	4628      	mov	r0, r5
 8006de8:	4621      	mov	r1, r4
 8006dea:	f7ff ff5d 	bl	8006ca8 <__sflush_r>
 8006dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df0:	4605      	mov	r5, r0
 8006df2:	07da      	lsls	r2, r3, #31
 8006df4:	d4e0      	bmi.n	8006db8 <_fflush_r+0xc>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	059b      	lsls	r3, r3, #22
 8006dfa:	d4dd      	bmi.n	8006db8 <_fflush_r+0xc>
 8006dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfe:	f7ff fcc9 	bl	8006794 <__retarget_lock_release_recursive>
 8006e02:	e7d9      	b.n	8006db8 <_fflush_r+0xc>
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <_fflush_r+0x70>)
 8006e06:	429c      	cmp	r4, r3
 8006e08:	d101      	bne.n	8006e0e <_fflush_r+0x62>
 8006e0a:	68ac      	ldr	r4, [r5, #8]
 8006e0c:	e7df      	b.n	8006dce <_fflush_r+0x22>
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <_fflush_r+0x74>)
 8006e10:	429c      	cmp	r4, r3
 8006e12:	bf08      	it	eq
 8006e14:	68ec      	ldreq	r4, [r5, #12]
 8006e16:	e7da      	b.n	8006dce <_fflush_r+0x22>
 8006e18:	080076fc 	.word	0x080076fc
 8006e1c:	0800771c 	.word	0x0800771c
 8006e20:	080076dc 	.word	0x080076dc

08006e24 <std>:
 8006e24:	2300      	movs	r3, #0
 8006e26:	b510      	push	{r4, lr}
 8006e28:	4604      	mov	r4, r0
 8006e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e32:	6083      	str	r3, [r0, #8]
 8006e34:	8181      	strh	r1, [r0, #12]
 8006e36:	6643      	str	r3, [r0, #100]	; 0x64
 8006e38:	81c2      	strh	r2, [r0, #14]
 8006e3a:	6183      	str	r3, [r0, #24]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	2208      	movs	r2, #8
 8006e40:	305c      	adds	r0, #92	; 0x5c
 8006e42:	f7fd fb67 	bl	8004514 <memset>
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <std+0x38>)
 8006e48:	6224      	str	r4, [r4, #32]
 8006e4a:	6263      	str	r3, [r4, #36]	; 0x24
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <std+0x3c>)
 8006e4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e50:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <std+0x40>)
 8006e52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <std+0x44>)
 8006e56:	6323      	str	r3, [r4, #48]	; 0x30
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08007171 	.word	0x08007171
 8006e60:	08007193 	.word	0x08007193
 8006e64:	080071cb 	.word	0x080071cb
 8006e68:	080071ef 	.word	0x080071ef

08006e6c <_cleanup_r>:
 8006e6c:	4901      	ldr	r1, [pc, #4]	; (8006e74 <_cleanup_r+0x8>)
 8006e6e:	f000 b8af 	b.w	8006fd0 <_fwalk_reent>
 8006e72:	bf00      	nop
 8006e74:	08006dad 	.word	0x08006dad

08006e78 <__sfmoreglue>:
 8006e78:	2268      	movs	r2, #104	; 0x68
 8006e7a:	b570      	push	{r4, r5, r6, lr}
 8006e7c:	1e4d      	subs	r5, r1, #1
 8006e7e:	4355      	muls	r5, r2
 8006e80:	460e      	mov	r6, r1
 8006e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e86:	f7fd fbb5 	bl	80045f4 <_malloc_r>
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	b140      	cbz	r0, 8006ea0 <__sfmoreglue+0x28>
 8006e8e:	2100      	movs	r1, #0
 8006e90:	e9c0 1600 	strd	r1, r6, [r0]
 8006e94:	300c      	adds	r0, #12
 8006e96:	60a0      	str	r0, [r4, #8]
 8006e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e9c:	f7fd fb3a 	bl	8004514 <memset>
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}

08006ea4 <__sfp_lock_acquire>:
 8006ea4:	4801      	ldr	r0, [pc, #4]	; (8006eac <__sfp_lock_acquire+0x8>)
 8006ea6:	f7ff bc74 	b.w	8006792 <__retarget_lock_acquire_recursive>
 8006eaa:	bf00      	nop
 8006eac:	20000451 	.word	0x20000451

08006eb0 <__sfp_lock_release>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <__sfp_lock_release+0x8>)
 8006eb2:	f7ff bc6f 	b.w	8006794 <__retarget_lock_release_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	20000451 	.word	0x20000451

08006ebc <__sinit_lock_acquire>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__sinit_lock_acquire+0x8>)
 8006ebe:	f7ff bc68 	b.w	8006792 <__retarget_lock_acquire_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	20000452 	.word	0x20000452

08006ec8 <__sinit_lock_release>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__sinit_lock_release+0x8>)
 8006eca:	f7ff bc63 	b.w	8006794 <__retarget_lock_release_recursive>
 8006ece:	bf00      	nop
 8006ed0:	20000452 	.word	0x20000452

08006ed4 <__sinit>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	f7ff fff0 	bl	8006ebc <__sinit_lock_acquire>
 8006edc:	69a3      	ldr	r3, [r4, #24]
 8006ede:	b11b      	cbz	r3, 8006ee8 <__sinit+0x14>
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	f7ff bff0 	b.w	8006ec8 <__sinit_lock_release>
 8006ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006eec:	6523      	str	r3, [r4, #80]	; 0x50
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <__sinit+0x68>)
 8006ef0:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <__sinit+0x6c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	bf08      	it	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	4620      	mov	r0, r4
 8006efe:	bf08      	it	eq
 8006f00:	61a3      	streq	r3, [r4, #24]
 8006f02:	f000 f81f 	bl	8006f44 <__sfp>
 8006f06:	6060      	str	r0, [r4, #4]
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 f81b 	bl	8006f44 <__sfp>
 8006f0e:	60a0      	str	r0, [r4, #8]
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 f817 	bl	8006f44 <__sfp>
 8006f16:	2200      	movs	r2, #0
 8006f18:	2104      	movs	r1, #4
 8006f1a:	60e0      	str	r0, [r4, #12]
 8006f1c:	6860      	ldr	r0, [r4, #4]
 8006f1e:	f7ff ff81 	bl	8006e24 <std>
 8006f22:	2201      	movs	r2, #1
 8006f24:	2109      	movs	r1, #9
 8006f26:	68a0      	ldr	r0, [r4, #8]
 8006f28:	f7ff ff7c 	bl	8006e24 <std>
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	2112      	movs	r1, #18
 8006f30:	68e0      	ldr	r0, [r4, #12]
 8006f32:	f7ff ff77 	bl	8006e24 <std>
 8006f36:	2301      	movs	r3, #1
 8006f38:	61a3      	str	r3, [r4, #24]
 8006f3a:	e7d1      	b.n	8006ee0 <__sinit+0xc>
 8006f3c:	08007360 	.word	0x08007360
 8006f40:	08006e6d 	.word	0x08006e6d

08006f44 <__sfp>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	4607      	mov	r7, r0
 8006f48:	f7ff ffac 	bl	8006ea4 <__sfp_lock_acquire>
 8006f4c:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <__sfp+0x84>)
 8006f4e:	681e      	ldr	r6, [r3, #0]
 8006f50:	69b3      	ldr	r3, [r6, #24]
 8006f52:	b913      	cbnz	r3, 8006f5a <__sfp+0x16>
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7ff ffbd 	bl	8006ed4 <__sinit>
 8006f5a:	3648      	adds	r6, #72	; 0x48
 8006f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	d503      	bpl.n	8006f6c <__sfp+0x28>
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	b30b      	cbz	r3, 8006fac <__sfp+0x68>
 8006f68:	6836      	ldr	r6, [r6, #0]
 8006f6a:	e7f7      	b.n	8006f5c <__sfp+0x18>
 8006f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f70:	b9d5      	cbnz	r5, 8006fa8 <__sfp+0x64>
 8006f72:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <__sfp+0x88>)
 8006f74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f78:	60e3      	str	r3, [r4, #12]
 8006f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f7c:	f7ff fc08 	bl	8006790 <__retarget_lock_init_recursive>
 8006f80:	f7ff ff96 	bl	8006eb0 <__sfp_lock_release>
 8006f84:	2208      	movs	r2, #8
 8006f86:	4629      	mov	r1, r5
 8006f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f90:	6025      	str	r5, [r4, #0]
 8006f92:	61a5      	str	r5, [r4, #24]
 8006f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f98:	f7fd fabc 	bl	8004514 <memset>
 8006f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa8:	3468      	adds	r4, #104	; 0x68
 8006faa:	e7d9      	b.n	8006f60 <__sfp+0x1c>
 8006fac:	2104      	movs	r1, #4
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7ff ff62 	bl	8006e78 <__sfmoreglue>
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	6030      	str	r0, [r6, #0]
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d1d5      	bne.n	8006f68 <__sfp+0x24>
 8006fbc:	f7ff ff78 	bl	8006eb0 <__sfp_lock_release>
 8006fc0:	230c      	movs	r3, #12
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	e7ee      	b.n	8006fa4 <__sfp+0x60>
 8006fc6:	bf00      	nop
 8006fc8:	08007360 	.word	0x08007360
 8006fcc:	ffff0001 	.word	0xffff0001

08006fd0 <_fwalk_reent>:
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	4688      	mov	r8, r1
 8006fd8:	2700      	movs	r7, #0
 8006fda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8006fe6:	d505      	bpl.n	8006ff4 <_fwalk_reent+0x24>
 8006fe8:	6824      	ldr	r4, [r4, #0]
 8006fea:	2c00      	cmp	r4, #0
 8006fec:	d1f7      	bne.n	8006fde <_fwalk_reent+0xe>
 8006fee:	4638      	mov	r0, r7
 8006ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff4:	89ab      	ldrh	r3, [r5, #12]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d907      	bls.n	800700a <_fwalk_reent+0x3a>
 8006ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ffe:	3301      	adds	r3, #1
 8007000:	d003      	beq.n	800700a <_fwalk_reent+0x3a>
 8007002:	4629      	mov	r1, r5
 8007004:	4630      	mov	r0, r6
 8007006:	47c0      	blx	r8
 8007008:	4307      	orrs	r7, r0
 800700a:	3568      	adds	r5, #104	; 0x68
 800700c:	e7e9      	b.n	8006fe2 <_fwalk_reent+0x12>

0800700e <__swhatbuf_r>:
 800700e:	b570      	push	{r4, r5, r6, lr}
 8007010:	460e      	mov	r6, r1
 8007012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007016:	4614      	mov	r4, r2
 8007018:	2900      	cmp	r1, #0
 800701a:	461d      	mov	r5, r3
 800701c:	b096      	sub	sp, #88	; 0x58
 800701e:	da08      	bge.n	8007032 <__swhatbuf_r+0x24>
 8007020:	2200      	movs	r2, #0
 8007022:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007026:	602a      	str	r2, [r5, #0]
 8007028:	061a      	lsls	r2, r3, #24
 800702a:	d410      	bmi.n	800704e <__swhatbuf_r+0x40>
 800702c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007030:	e00e      	b.n	8007050 <__swhatbuf_r+0x42>
 8007032:	466a      	mov	r2, sp
 8007034:	f000 f902 	bl	800723c <_fstat_r>
 8007038:	2800      	cmp	r0, #0
 800703a:	dbf1      	blt.n	8007020 <__swhatbuf_r+0x12>
 800703c:	9a01      	ldr	r2, [sp, #4]
 800703e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007042:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007046:	425a      	negs	r2, r3
 8007048:	415a      	adcs	r2, r3
 800704a:	602a      	str	r2, [r5, #0]
 800704c:	e7ee      	b.n	800702c <__swhatbuf_r+0x1e>
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	2000      	movs	r0, #0
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	b016      	add	sp, #88	; 0x58
 8007056:	bd70      	pop	{r4, r5, r6, pc}

08007058 <__smakebuf_r>:
 8007058:	898b      	ldrh	r3, [r1, #12]
 800705a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800705c:	079d      	lsls	r5, r3, #30
 800705e:	4606      	mov	r6, r0
 8007060:	460c      	mov	r4, r1
 8007062:	d507      	bpl.n	8007074 <__smakebuf_r+0x1c>
 8007064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	2301      	movs	r3, #1
 800706e:	6163      	str	r3, [r4, #20]
 8007070:	b002      	add	sp, #8
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	466a      	mov	r2, sp
 8007076:	ab01      	add	r3, sp, #4
 8007078:	f7ff ffc9 	bl	800700e <__swhatbuf_r>
 800707c:	9900      	ldr	r1, [sp, #0]
 800707e:	4605      	mov	r5, r0
 8007080:	4630      	mov	r0, r6
 8007082:	f7fd fab7 	bl	80045f4 <_malloc_r>
 8007086:	b948      	cbnz	r0, 800709c <__smakebuf_r+0x44>
 8007088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708c:	059a      	lsls	r2, r3, #22
 800708e:	d4ef      	bmi.n	8007070 <__smakebuf_r+0x18>
 8007090:	f023 0303 	bic.w	r3, r3, #3
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	81a3      	strh	r3, [r4, #12]
 800709a:	e7e3      	b.n	8007064 <__smakebuf_r+0xc>
 800709c:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <__smakebuf_r+0x7c>)
 800709e:	62b3      	str	r3, [r6, #40]	; 0x28
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	6020      	str	r0, [r4, #0]
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	9b00      	ldr	r3, [sp, #0]
 80070ac:	6120      	str	r0, [r4, #16]
 80070ae:	6163      	str	r3, [r4, #20]
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	b15b      	cbz	r3, 80070cc <__smakebuf_r+0x74>
 80070b4:	4630      	mov	r0, r6
 80070b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ba:	f000 f8d1 	bl	8007260 <_isatty_r>
 80070be:	b128      	cbz	r0, 80070cc <__smakebuf_r+0x74>
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	f023 0303 	bic.w	r3, r3, #3
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	81a3      	strh	r3, [r4, #12]
 80070cc:	89a0      	ldrh	r0, [r4, #12]
 80070ce:	4305      	orrs	r5, r0
 80070d0:	81a5      	strh	r5, [r4, #12]
 80070d2:	e7cd      	b.n	8007070 <__smakebuf_r+0x18>
 80070d4:	08006e6d 	.word	0x08006e6d

080070d8 <_malloc_usable_size_r>:
 80070d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070dc:	1f18      	subs	r0, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bfbc      	itt	lt
 80070e2:	580b      	ldrlt	r3, [r1, r0]
 80070e4:	18c0      	addlt	r0, r0, r3
 80070e6:	4770      	bx	lr

080070e8 <_raise_r>:
 80070e8:	291f      	cmp	r1, #31
 80070ea:	b538      	push	{r3, r4, r5, lr}
 80070ec:	4604      	mov	r4, r0
 80070ee:	460d      	mov	r5, r1
 80070f0:	d904      	bls.n	80070fc <_raise_r+0x14>
 80070f2:	2316      	movs	r3, #22
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070fe:	b112      	cbz	r2, 8007106 <_raise_r+0x1e>
 8007100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007104:	b94b      	cbnz	r3, 800711a <_raise_r+0x32>
 8007106:	4620      	mov	r0, r4
 8007108:	f000 f830 	bl	800716c <_getpid_r>
 800710c:	462a      	mov	r2, r5
 800710e:	4601      	mov	r1, r0
 8007110:	4620      	mov	r0, r4
 8007112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007116:	f000 b817 	b.w	8007148 <_kill_r>
 800711a:	2b01      	cmp	r3, #1
 800711c:	d00a      	beq.n	8007134 <_raise_r+0x4c>
 800711e:	1c59      	adds	r1, r3, #1
 8007120:	d103      	bne.n	800712a <_raise_r+0x42>
 8007122:	2316      	movs	r3, #22
 8007124:	6003      	str	r3, [r0, #0]
 8007126:	2001      	movs	r0, #1
 8007128:	e7e7      	b.n	80070fa <_raise_r+0x12>
 800712a:	2400      	movs	r4, #0
 800712c:	4628      	mov	r0, r5
 800712e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007132:	4798      	blx	r3
 8007134:	2000      	movs	r0, #0
 8007136:	e7e0      	b.n	80070fa <_raise_r+0x12>

08007138 <raise>:
 8007138:	4b02      	ldr	r3, [pc, #8]	; (8007144 <raise+0xc>)
 800713a:	4601      	mov	r1, r0
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	f7ff bfd3 	b.w	80070e8 <_raise_r>
 8007142:	bf00      	nop
 8007144:	20000010 	.word	0x20000010

08007148 <_kill_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	2300      	movs	r3, #0
 800714c:	4d06      	ldr	r5, [pc, #24]	; (8007168 <_kill_r+0x20>)
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	f7fa fe16 	bl	8001d86 <_kill>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d102      	bne.n	8007164 <_kill_r+0x1c>
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	b103      	cbz	r3, 8007164 <_kill_r+0x1c>
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	bf00      	nop
 8007168:	2000044c 	.word	0x2000044c

0800716c <_getpid_r>:
 800716c:	f7fa be04 	b.w	8001d78 <_getpid>

08007170 <__sread>:
 8007170:	b510      	push	{r4, lr}
 8007172:	460c      	mov	r4, r1
 8007174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007178:	f000 f894 	bl	80072a4 <_read_r>
 800717c:	2800      	cmp	r0, #0
 800717e:	bfab      	itete	ge
 8007180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007182:	89a3      	ldrhlt	r3, [r4, #12]
 8007184:	181b      	addge	r3, r3, r0
 8007186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800718a:	bfac      	ite	ge
 800718c:	6563      	strge	r3, [r4, #84]	; 0x54
 800718e:	81a3      	strhlt	r3, [r4, #12]
 8007190:	bd10      	pop	{r4, pc}

08007192 <__swrite>:
 8007192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007196:	461f      	mov	r7, r3
 8007198:	898b      	ldrh	r3, [r1, #12]
 800719a:	4605      	mov	r5, r0
 800719c:	05db      	lsls	r3, r3, #23
 800719e:	460c      	mov	r4, r1
 80071a0:	4616      	mov	r6, r2
 80071a2:	d505      	bpl.n	80071b0 <__swrite+0x1e>
 80071a4:	2302      	movs	r3, #2
 80071a6:	2200      	movs	r2, #0
 80071a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ac:	f000 f868 	bl	8007280 <_lseek_r>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	4632      	mov	r2, r6
 80071b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	4628      	mov	r0, r5
 80071bc:	463b      	mov	r3, r7
 80071be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071c6:	f000 b817 	b.w	80071f8 <_write_r>

080071ca <__sseek>:
 80071ca:	b510      	push	{r4, lr}
 80071cc:	460c      	mov	r4, r1
 80071ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d2:	f000 f855 	bl	8007280 <_lseek_r>
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	bf15      	itete	ne
 80071dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80071de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071e6:	81a3      	strheq	r3, [r4, #12]
 80071e8:	bf18      	it	ne
 80071ea:	81a3      	strhne	r3, [r4, #12]
 80071ec:	bd10      	pop	{r4, pc}

080071ee <__sclose>:
 80071ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f2:	f000 b813 	b.w	800721c <_close_r>
	...

080071f8 <_write_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	2200      	movs	r2, #0
 8007202:	4d05      	ldr	r5, [pc, #20]	; (8007218 <_write_r+0x20>)
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7fa fdf4 	bl	8001df4 <_write>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_write_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_write_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	2000044c 	.word	0x2000044c

0800721c <_close_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	2300      	movs	r3, #0
 8007220:	4d05      	ldr	r5, [pc, #20]	; (8007238 <_close_r+0x1c>)
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	f7fa fe00 	bl	8001e2c <_close>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_close_r+0x1a>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_close_r+0x1a>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	2000044c 	.word	0x2000044c

0800723c <_fstat_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	2300      	movs	r3, #0
 8007240:	4d06      	ldr	r5, [pc, #24]	; (800725c <_fstat_r+0x20>)
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	f7fa fdfa 	bl	8001e42 <_fstat>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d102      	bne.n	8007258 <_fstat_r+0x1c>
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	b103      	cbz	r3, 8007258 <_fstat_r+0x1c>
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	bf00      	nop
 800725c:	2000044c 	.word	0x2000044c

08007260 <_isatty_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	2300      	movs	r3, #0
 8007264:	4d05      	ldr	r5, [pc, #20]	; (800727c <_isatty_r+0x1c>)
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f7fa fdf8 	bl	8001e60 <_isatty>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_isatty_r+0x1a>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_isatty_r+0x1a>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	2000044c 	.word	0x2000044c

08007280 <_lseek_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	4611      	mov	r1, r2
 8007288:	2200      	movs	r2, #0
 800728a:	4d05      	ldr	r5, [pc, #20]	; (80072a0 <_lseek_r+0x20>)
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7fa fdf0 	bl	8001e74 <_lseek>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_lseek_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_lseek_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	2000044c 	.word	0x2000044c

080072a4 <_read_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	2200      	movs	r2, #0
 80072ae:	4d05      	ldr	r5, [pc, #20]	; (80072c4 <_read_r+0x20>)
 80072b0:	602a      	str	r2, [r5, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f7fa fd81 	bl	8001dba <_read>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_read_r+0x1e>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_read_r+0x1e>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	2000044c 	.word	0x2000044c

080072c8 <_init>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	bf00      	nop
 80072cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ce:	bc08      	pop	{r3}
 80072d0:	469e      	mov	lr, r3
 80072d2:	4770      	bx	lr

080072d4 <_fini>:
 80072d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d6:	bf00      	nop
 80072d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072da:	bc08      	pop	{r3}
 80072dc:	469e      	mov	lr, r3
 80072de:	4770      	bx	lr
