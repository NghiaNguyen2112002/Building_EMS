
Node_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08007d58  08007d58  00017d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b4  080081b4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  080081b4  080081b4  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081b4  080081b4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080081bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001f0  080083ac  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  080083ac  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012967  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f63  00000000  00000000  00032b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00035ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00036d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac90  00000000  00000000  00037eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160a4  00000000  00000000  00052b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939b4  00000000  00000000  00068be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e78  00000000  00000000  000fc5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d40 	.word	0x08007d40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08007d40 	.word	0x08007d40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2uiz>:
 8000d44:	0042      	lsls	r2, r0, #1
 8000d46:	d20e      	bcs.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30b      	bcc.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d409      	bmi.n	8000d6c <__aeabi_f2uiz+0x28>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2uiz+0x32>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d102      	bne.n	8000d7c <__aeabi_f2uiz+0x38>
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	4770      	bx	lr
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <Delay_us>:
 */


#include "DHT.h"

void Delay_us(DHT_Name* DHT, uint16_t duration){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(DHT->timer, 0);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(DHT->timer) < duration){}
 8000d9a:	bf00      	nop
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3f8      	bcc.n	8000d9c <Delay_us+0x18>
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <SetPinIn>:

void SetPinIn(DHT_Name* DHT){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	889b      	ldrh	r3, [r3, #4]
 8000dd0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 ff99 	bl	8002d1c <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <SetPinOut>:

void SetPinOut(DHT_Name* DHT){
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f107 0208 	add.w	r2, r7, #8
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 ff79 	bl	8002d1c <HAL_GPIO_Init>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <WritePin>:

static void WritePin(DHT_Name* DHT, uint8_t value){
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->DHT_port, DHT->DHT_pin, value);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	889b      	ldrh	r3, [r3, #4]
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f002 f902 	bl	8003052 <HAL_GPIO_WritePin>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <ReadPin>:

static uint8_t ReadPin(DHT_Name* DHT){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(DHT->DHT_port, DHT->DHT_pin);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f002 f8db 	bl	8003024 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <DHT_Init>:

//===========================HIGH LEVEL FUNCTION===========================//
void DHT_Init(DHT_Name* DHT, GPIO_TypeDef* DHT_port, uint16_t DHT_pin, TIM_HandleTypeDef* timer){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80fb      	strh	r3, [r7, #6]
	DHT->DHT_port = DHT_port;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	601a      	str	r2, [r3, #0]
	DHT->DHT_pin = DHT_pin;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	809a      	strh	r2, [r3, #4]
	DHT->timer = timer;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	609a      	str	r2, [r3, #8]

	DHT->humi = DHT->temp = 0;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

	SetPinOut(DHT);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f7ff ffa1 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 1);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff ffbd 	bl	8000e32 <WritePin>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <DHT_Read>:


void DHT_Read(DHT_Name* DHT){
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	uint16_t time_out = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	82fb      	strh	r3, [r7, #22]
	uint8_t data[5] = {0, 0, 0, 0, 0};
 8000ecc:	4a84      	ldr	r2, [pc, #528]	; (80010e0 <DHT_Read+0x220>)
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed6:	6018      	str	r0, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	7019      	strb	r1, [r3, #0]
	data[2] integral Temp
	data[3] decimal Temp
	data[4] SUM
*/

	DHT->humi = DHT->temp = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]

	SetPinOut(DHT);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff80 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 0);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff9c 	bl	8000e32 <WritePin>
	HAL_Delay(20);
 8000efa:	2014      	movs	r0, #20
 8000efc:	f001 fa9a 	bl	8002434 <HAL_Delay>


	SetPinIn(DHT);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff58 	bl	8000db6 <SetPinIn>

	Delay_us(DHT, 40);
 8000f06:	2128      	movs	r1, #40	; 0x28
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff3b 	bl	8000d84 <Delay_us>

	if(!ReadPin(DHT)){
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa1 	bl	8000e56 <ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <DHT_Read+0x62>
		Delay_us(DHT, 80);
 8000f1a:	2150      	movs	r1, #80	; 0x50
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff31 	bl	8000d84 <Delay_us>
	}

	for(time_out = 0; (time_out < 100) && ReadPin(DHT); time_out++);
 8000f22:	2300      	movs	r3, #0
 8000f24:	82fb      	strh	r3, [r7, #22]
 8000f26:	e002      	b.n	8000f2e <DHT_Read+0x6e>
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	82fb      	strh	r3, [r7, #22]
 8000f2e:	8afb      	ldrh	r3, [r7, #22]
 8000f30:	2b63      	cmp	r3, #99	; 0x63
 8000f32:	d805      	bhi.n	8000f40 <DHT_Read+0x80>
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff8e 	bl	8000e56 <ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f3      	bne.n	8000f28 <DHT_Read+0x68>

//	start DHT successful => read
	for(uint8_t i = 0; i < 5; i++){
 8000f40:	2300      	movs	r3, #0
 8000f42:	757b      	strb	r3, [r7, #21]
 8000f44:	e060      	b.n	8001008 <DHT_Read+0x148>
		for(uint8_t j = 0; j < 8; j++){
 8000f46:	2300      	movs	r3, #0
 8000f48:	753b      	strb	r3, [r7, #20]
 8000f4a:	e057      	b.n	8000ffc <DHT_Read+0x13c>

			for(time_out = 0; (time_out < 100) && !ReadPin(DHT); time_out++);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	82fb      	strh	r3, [r7, #22]
 8000f50:	e002      	b.n	8000f58 <DHT_Read+0x98>
 8000f52:	8afb      	ldrh	r3, [r7, #22]
 8000f54:	3301      	adds	r3, #1
 8000f56:	82fb      	strh	r3, [r7, #22]
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	2b63      	cmp	r3, #99	; 0x63
 8000f5c:	d805      	bhi.n	8000f6a <DHT_Read+0xaa>
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff79 	bl	8000e56 <ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f3      	beq.n	8000f52 <DHT_Read+0x92>

			Delay_us(DHT, 40);
 8000f6a:	2128      	movs	r1, #40	; 0x28
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff09 	bl	8000d84 <Delay_us>

			if(!ReadPin(DHT)) data[i] &= (~(1<<(7-j)));
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff6f 	bl	8000e56 <ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d117      	bne.n	8000fae <DHT_Read+0xee>
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	3318      	adds	r3, #24
 8000f82:	443b      	add	r3, r7
 8000f84:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f88:	b25a      	sxtb	r2, r3
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	f1c3 0307 	rsb	r3, r3, #7
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	b25a      	sxtb	r2, r3
 8000fa0:	7d7b      	ldrb	r3, [r7, #21]
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	443b      	add	r3, r7
 8000fa8:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000fac:	e014      	b.n	8000fd8 <DHT_Read+0x118>
			else data[i] |= (1 << (7-j));
 8000fae:	7d7b      	ldrb	r3, [r7, #21]
 8000fb0:	3318      	adds	r3, #24
 8000fb2:	443b      	add	r3, r7
 8000fb4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	7d3b      	ldrb	r3, [r7, #20]
 8000fbc:	f1c3 0307 	rsb	r3, r3, #7
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	7d7b      	ldrb	r3, [r7, #21]
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	3318      	adds	r3, #24
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f803 2c10 	strb.w	r2, [r3, #-16]


			for(time_out = 0; (time_out < 100) && ReadPin(DHT); time_out++);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	82fb      	strh	r3, [r7, #22]
 8000fdc:	e002      	b.n	8000fe4 <DHT_Read+0x124>
 8000fde:	8afb      	ldrh	r3, [r7, #22]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	82fb      	strh	r3, [r7, #22]
 8000fe4:	8afb      	ldrh	r3, [r7, #22]
 8000fe6:	2b63      	cmp	r3, #99	; 0x63
 8000fe8:	d805      	bhi.n	8000ff6 <DHT_Read+0x136>
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff33 	bl	8000e56 <ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f3      	bne.n	8000fde <DHT_Read+0x11e>
		for(uint8_t j = 0; j < 8; j++){
 8000ff6:	7d3b      	ldrb	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	753b      	strb	r3, [r7, #20]
 8000ffc:	7d3b      	ldrb	r3, [r7, #20]
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	d9a4      	bls.n	8000f4c <DHT_Read+0x8c>
	for(uint8_t i = 0; i < 5; i++){
 8001002:	7d7b      	ldrb	r3, [r7, #21]
 8001004:	3301      	adds	r3, #1
 8001006:	757b      	strb	r3, [r7, #21]
 8001008:	7d7b      	ldrb	r3, [r7, #21]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d99b      	bls.n	8000f46 <DHT_Read+0x86>
		}
	}

	if(data[4] != (data[0] + data[1] + data[2] + data[3]))
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	7a3b      	ldrb	r3, [r7, #8]
 8001014:	4619      	mov	r1, r3
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	440b      	add	r3, r1
 800101a:	7ab9      	ldrb	r1, [r7, #10]
 800101c:	440b      	add	r3, r1
 800101e:	7af9      	ldrb	r1, [r7, #11]
 8001020:	440b      	add	r3, r1
 8001022:	429a      	cmp	r2, r3
 8001024:	d157      	bne.n	80010d6 <DHT_Read+0x216>
		return;

	humi = (float)(data[0] * 1.0 + data[1] / 10.0);
 8001026:	7a3b      	ldrb	r3, [r7, #8]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f9eb 	bl	8000404 <__aeabi_i2d>
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	7a7b      	ldrb	r3, [r7, #9]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f9e5 	bl	8000404 <__aeabi_i2d>
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <DHT_Read+0x224>)
 8001040:	f7ff fb74 	bl	800072c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff f88e 	bl	800016c <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd16 	bl	8000a88 <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fe70 	bl	8000d44 <__aeabi_f2uiz>
 8001064:	4603      	mov	r3, r0
 8001066:	827b      	strh	r3, [r7, #18]
	temp = (float)(data[2] * 1.0 + data[3] / 10.0);
 8001068:	7abb      	ldrb	r3, [r7, #10]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f9ca 	bl	8000404 <__aeabi_i2d>
 8001070:	4604      	mov	r4, r0
 8001072:	460d      	mov	r5, r1
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f9c4 	bl	8000404 <__aeabi_i2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <DHT_Read+0x224>)
 8001082:	f7ff fb53 	bl	800072c <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff f86d 	bl	800016c <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fcf5 	bl	8000a88 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe4f 	bl	8000d44 <__aeabi_f2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	823b      	strh	r3, [r7, #16]

	DHT->humi = humi;
 80010aa:	8a7b      	ldrh	r3, [r7, #18]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fdf1 	bl	8000c94 <__aeabi_ui2f>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	611a      	str	r2, [r3, #16]
	DHT->temp = temp;
 80010b8:	8a3b      	ldrh	r3, [r7, #16]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdea 	bl	8000c94 <__aeabi_ui2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60da      	str	r2, [r3, #12]

	SetPinOut(DHT);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fe93 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 1);
 80010cc:	2101      	movs	r1, #1
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff feaf 	bl	8000e32 <WritePin>
 80010d4:	e000      	b.n	80010d8 <DHT_Read+0x218>
		return;
 80010d6:	bf00      	nop
}
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bdb0      	pop	{r4, r5, r7, pc}
 80010de:	bf00      	nop
 80010e0:	08007d58 	.word	0x08007d58
 80010e4:	40240000 	.word	0x40240000

080010e8 <DHT_GetTemp>:

float DHT_GetTemp(DHT_Name* DHT){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
//	return 30.4;
//	return random()%100 + random()%10 / 10.0;
	return DHT->temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <DHT_GetHumi>:

float DHT_GetHumi(DHT_Name* DHT){
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
//	return 50.4;
//	return random()%100 + random()%10 / 10.0;
	return DHT->humi;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <ConvertToJsonString>:

uint8_t mode;
char json_str[200];


uint8_t ConvertToJsonString(void){
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af06      	add	r7, sp, #24
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
										"\"GAS\":%u,\"SMOKE\":%u}#",
										NODE_ID, _data.temp, _data.humid,
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <ConvertToJsonString+0x4c>)
 800111c:	685b      	ldr	r3, [r3, #4]
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f982 	bl	8000428 <__aeabi_f2d>
 8001124:	4604      	mov	r4, r0
 8001126:	460d      	mov	r5, r1
										NODE_ID, _data.temp, _data.humid,
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <ConvertToJsonString+0x4c>)
 800112a:	689b      	ldr	r3, [r3, #8]
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f97b 	bl	8000428 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
										_data.gas, _data.smoke);
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <ConvertToJsonString+0x4c>)
 8001138:	8989      	ldrh	r1, [r1, #12]
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800113a:	4608      	mov	r0, r1
										_data.gas, _data.smoke);
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <ConvertToJsonString+0x4c>)
 800113e:	89c9      	ldrh	r1, [r1, #14]
	return sprintf(json_str, "!wkp#!{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 8001140:	9105      	str	r1, [sp, #20]
 8001142:	9004      	str	r0, [sp, #16]
 8001144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001148:	e9cd 4500 	strd	r4, r5, [sp]
 800114c:	2201      	movs	r2, #1
 800114e:	4905      	ldr	r1, [pc, #20]	; (8001164 <ConvertToJsonString+0x50>)
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <ConvertToJsonString+0x54>)
 8001152:	f004 fc6f 	bl	8005a34 <siprintf>
 8001156:	4603      	mov	r3, r0
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	08007d60 	.word	0x08007d60
 8001168:	20000210 	.word	0x20000210

0800116c <FSM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void FSM_Init(void){
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	mode = INIT;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <FSM_Init+0x14>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000020c 	.word	0x2000020c

08001184 <FSM_SystemControl>:
void FSM_SystemControl(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	switch(mode){
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <FSM_SystemControl+0xc8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d00d      	beq.n	80011ac <FSM_SystemControl+0x28>
 8001190:	2b02      	cmp	r3, #2
 8001192:	dc55      	bgt.n	8001240 <FSM_SystemControl+0xbc>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <FSM_SystemControl+0x1a>
 8001198:	2b01      	cmp	r3, #1
 800119a:	d040      	beq.n	800121e <FSM_SystemControl+0x9a>
 800119c:	e050      	b.n	8001240 <FSM_SystemControl+0xbc>
	case INIT:

		_time_read_data = TIME_READ_DATA;
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <FSM_SystemControl+0xcc>)
 80011a0:	221e      	movs	r2, #30
 80011a2:	801a      	strh	r2, [r3, #0]

		mode = SYS_WAKEUP;
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <FSM_SystemControl+0xc8>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	701a      	strb	r2, [r3, #0]
		break;
 80011aa:	e04d      	b.n	8001248 <FSM_SystemControl+0xc4>
	case SYS_WAKEUP:

		CLCD_PrintStringBuffer(0, 0, "WAKEUP");
 80011ac:	4a29      	ldr	r2, [pc, #164]	; (8001254 <FSM_SystemControl+0xd0>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 fa19 	bl	80015e8 <CLCD_PrintStringBuffer>
		if(_time_read_data == 0){
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <FSM_SystemControl+0xcc>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d12b      	bne.n	8001216 <FSM_SystemControl+0x92>
			_time_read_data = TIME_READ_DATA;
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <FSM_SystemControl+0xcc>)
 80011c0:	221e      	movs	r2, #30
 80011c2:	801a      	strh	r2, [r3, #0]

			DHT_Read(&_dht);
 80011c4:	4824      	ldr	r0, [pc, #144]	; (8001258 <FSM_SystemControl+0xd4>)
 80011c6:	f7ff fe7b 	bl	8000ec0 <DHT_Read>

			_data.temp = DHT_GetTemp(&_dht);
 80011ca:	4823      	ldr	r0, [pc, #140]	; (8001258 <FSM_SystemControl+0xd4>)
 80011cc:	f7ff ff8c 	bl	80010e8 <DHT_GetTemp>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <FSM_SystemControl+0xd8>)
 80011d4:	6053      	str	r3, [r2, #4]
			_data.humid = DHT_GetHumi(&_dht);
 80011d6:	4820      	ldr	r0, [pc, #128]	; (8001258 <FSM_SystemControl+0xd4>)
 80011d8:	f7ff ff91 	bl	80010fe <DHT_GetHumi>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a1f      	ldr	r2, [pc, #124]	; (800125c <FSM_SystemControl+0xd8>)
 80011e0:	6093      	str	r3, [r2, #8]

			_data.gas = IN_GetValue_Gas();
 80011e2:	f000 f857 	bl	8001294 <IN_GetValue_Gas>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <FSM_SystemControl+0xd8>)
 80011ec:	819a      	strh	r2, [r3, #12]
			_data.smoke = IN_GetValue_Smoke();
 80011ee:	f000 f86f 	bl	80012d0 <IN_GetValue_Smoke>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <FSM_SystemControl+0xd8>)
 80011f8:	81da      	strh	r2, [r3, #14]

			ZB_SendMsg("wkp", 3);
 80011fa:	2103      	movs	r1, #3
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <FSM_SystemControl+0xdc>)
 80011fe:	f001 f871 	bl	80022e4 <ZB_SendMsg>
			HAL_Delay(100);
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	f001 f916 	bl	8002434 <HAL_Delay>
			ZB_SendMsg(json_str, ConvertToJsonString());
 8001208:	f7ff ff84 	bl	8001114 <ConvertToJsonString>
 800120c:	4603      	mov	r3, r0
 800120e:	4619      	mov	r1, r3
 8001210:	4814      	ldr	r0, [pc, #80]	; (8001264 <FSM_SystemControl+0xe0>)
 8001212:	f001 f867 	bl	80022e4 <ZB_SendMsg>
		}
		mode = SYS_SLEEP;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <FSM_SystemControl+0xc8>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
		break;
 800121c:	e014      	b.n	8001248 <FSM_SystemControl+0xc4>

	case SYS_SLEEP:

		CLCD_PrintStringBuffer(0, 0, "SLEEP ");
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <FSM_SystemControl+0xe4>)
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f9e0 	bl	80015e8 <CLCD_PrintStringBuffer>

		HAL_SuspendTick();
 8001228:	f001 f928 	bl	800247c <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800122c:	2101      	movs	r1, #1
 800122e:	2000      	movs	r0, #0
 8001230:	f002 fb8a 	bl	8003948 <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 8001234:	f001 f930 	bl	8002498 <HAL_ResumeTick>

		mode = SYS_WAKEUP;
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <FSM_SystemControl+0xc8>)
 800123a:	2202      	movs	r2, #2
 800123c:	701a      	strb	r2, [r3, #0]
		break;
 800123e:	e003      	b.n	8001248 <FSM_SystemControl+0xc4>
	default:
		mode = INIT;
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <FSM_SystemControl+0xc8>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
	}
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000020c 	.word	0x2000020c
 8001250:	200002ec 	.word	0x200002ec
 8001254:	08007da0 	.word	0x08007da0
 8001258:	200002d8 	.word	0x200002d8
 800125c:	20000000 	.word	0x20000000
 8001260:	08007da8 	.word	0x08007da8
 8001264:	20000210 	.word	0x20000210
 8001268:	08007dac 	.word	0x08007dac

0800126c <IN_Init>:
ADC_HandleTypeDef* adc1;
ADC_HandleTypeDef* adc2;


//===========================HIGH LEVEL FUNCTION===========================//
void IN_Init(ADC_HandleTypeDef* hadc_1, ADC_HandleTypeDef* hadc_2){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]

	adc1 = hadc_1;
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <IN_Init+0x20>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6013      	str	r3, [r2, #0]
	adc2 = hadc_2;
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <IN_Init+0x24>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	200002f0 	.word	0x200002f0
 8001290:	200002f4 	.word	0x200002f4

08001294 <IN_GetValue_Gas>:


uint16_t IN_GetValue_Gas(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	HAL_ADC_Start(adc1);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <IN_GetValue_Gas+0x34>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f001 f9e1 	bl	8002664 <HAL_ADC_Start>
	return HAL_ADC_GetValue(adc1) * 100 / 4095;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <IN_GetValue_Gas+0x34>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fa8a 	bl	80027c0 <HAL_ADC_GetValue>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2264      	movs	r2, #100	; 0x64
 80012b0:	fb03 f202 	mul.w	r2, r3, r2
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <IN_GetValue_Gas+0x38>)
 80012b6:	fba3 1302 	umull	r1, r3, r3, r2
 80012ba:	1ad2      	subs	r2, r2, r3
 80012bc:	0852      	lsrs	r2, r2, #1
 80012be:	4413      	add	r3, r2
 80012c0:	0adb      	lsrs	r3, r3, #11
 80012c2:	b29b      	uxth	r3, r3

}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200002f0 	.word	0x200002f0
 80012cc:	00100101 	.word	0x00100101

080012d0 <IN_GetValue_Smoke>:

uint16_t IN_GetValue_Smoke(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(adc2);
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <IN_GetValue_Smoke+0x34>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 f9c3 	bl	8002664 <HAL_ADC_Start>
	return HAL_ADC_GetValue(adc2) * 100 / 4095;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <IN_GetValue_Smoke+0x34>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 fa6c 	bl	80027c0 <HAL_ADC_GetValue>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2264      	movs	r2, #100	; 0x64
 80012ec:	fb03 f202 	mul.w	r2, r3, r2
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <IN_GetValue_Smoke+0x38>)
 80012f2:	fba3 1302 	umull	r1, r3, r3, r2
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	0852      	lsrs	r2, r2, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	0adb      	lsrs	r3, r3, #11
 80012fe:	b29b      	uxth	r3, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200002f4 	.word	0x200002f4
 8001308:	00100101 	.word	0x00100101

0800130c <Delay>:

CLCD_I2C_Name LCD;

uint8_t currentCol, currentRow;

static void Delay(uint16_t time){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4618      	mov	r0, r3
 800131a:	f001 f88b 	bl	8002434 <HAL_Delay>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <WriteI2C>:


static void WriteI2C(uint8_t data, uint8_t mode){
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f023 030f 	bic.w	r3, r3, #15
 800133e:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <WriteI2C+0x90>)
 8001348:	7adb      	ldrb	r3, [r3, #11]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <WriteI2C+0x4c>
		dataH |= LCD_RS;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	b2db      	uxtb	r3, r3
 800137c:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	b2db      	uxtb	r3, r3
 800138a:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <WriteI2C+0x90>)
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <WriteI2C+0x90>)
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	b29b      	uxth	r3, r3
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	b299      	uxth	r1, r3
 800139e:	f107 0208 	add.w	r2, r7, #8
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2304      	movs	r3, #4
 80013aa:	f001 ffc7 	bl	800333c <HAL_I2C_Master_Transmit>
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002fc 	.word	0x200002fc

080013bc <CLCD_Init>:



//===========================HIGH LEVEL FUNCTION===========================//
void CLCD_Init(I2C_HandleTypeDef* I2C, uint8_t address, uint8_t row, uint8_t col){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	70fb      	strb	r3, [r7, #3]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70bb      	strb	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	LCD.I2C = I2C;
 80013d6:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <CLCD_Init+0x144>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6013      	str	r3, [r2, #0]
	LCD.ADDRESS = address;
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <CLCD_Init+0x144>)
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	7113      	strb	r3, [r2, #4]
	LCD.COL = col;
 80013e2:	4a47      	ldr	r2, [pc, #284]	; (8001500 <CLCD_Init+0x144>)
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	7153      	strb	r3, [r2, #5]
	LCD.ROW = row;
 80013e8:	4a45      	ldr	r2, [pc, #276]	; (8001500 <CLCD_Init+0x144>)
 80013ea:	78bb      	ldrb	r3, [r7, #2]
 80013ec:	7193      	strb	r3, [r2, #6]

	LCD.FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <CLCD_Init+0x144>)
 80013f0:	2228      	movs	r2, #40	; 0x28
 80013f2:	721a      	strb	r2, [r3, #8]
	LCD.ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80013f4:	4b42      	ldr	r3, [pc, #264]	; (8001500 <CLCD_Init+0x144>)
 80013f6:	2206      	movs	r2, #6
 80013f8:	71da      	strb	r2, [r3, #7]
	LCD.DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <CLCD_Init+0x144>)
 80013fc:	220c      	movs	r2, #12
 80013fe:	725a      	strb	r2, [r3, #9]
	LCD.CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <CLCD_Init+0x144>)
 8001402:	2214      	movs	r2, #20
 8001404:	729a      	strb	r2, [r3, #10]
	LCD.BACKLIGHT = LCD_BACKLIGHT;
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <CLCD_Init+0x144>)
 8001408:	2208      	movs	r2, #8
 800140a:	72da      	strb	r2, [r3, #11]

	Delay(50);
 800140c:	2032      	movs	r0, #50	; 0x32
 800140e:	f7ff ff7d 	bl	800130c <Delay>

	if(Lcd_buffer != NULL) free(Lcd_buffer);
 8001412:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <CLCD_Init+0x148>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <CLCD_Init+0x68>
 800141a:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <CLCD_Init+0x148>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fdac 	bl	8004f7c <free>
	Lcd_buffer = (uint8_t*)malloc(row * col * 8);
 8001424:	78bb      	ldrb	r3, [r7, #2]
 8001426:	787a      	ldrb	r2, [r7, #1]
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fd9c 	bl	8004f6c <malloc>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <CLCD_Init+0x148>)
 800143a:	601a      	str	r2, [r3, #0]

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e008      	b.n	8001454 <CLCD_Init+0x98>
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <CLCD_Init+0x148>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4413      	add	r3, r2
 800144a:	2220      	movs	r2, #32
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	3301      	adds	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <CLCD_Init+0x144>)
 8001458:	799b      	ldrb	r3, [r3, #6]
 800145a:	4619      	mov	r1, r3
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <CLCD_Init+0x144>)
 800145e:	795b      	ldrb	r3, [r3, #5]
 8001460:	fb01 f303 	mul.w	r3, r1, r3
 8001464:	429a      	cmp	r2, r3
 8001466:	dbec      	blt.n	8001442 <CLCD_Init+0x86>

	WriteI2C(0x33, LCD_COMMAND);
 8001468:	2100      	movs	r1, #0
 800146a:	2033      	movs	r0, #51	; 0x33
 800146c:	f7ff ff5c 	bl	8001328 <WriteI2C>
//	Delay(5);
	WriteI2C(0x33, LCD_COMMAND);
 8001470:	2100      	movs	r1, #0
 8001472:	2033      	movs	r0, #51	; 0x33
 8001474:	f7ff ff58 	bl	8001328 <WriteI2C>
	Delay(5);
 8001478:	2005      	movs	r0, #5
 800147a:	f7ff ff47 	bl	800130c <Delay>
	WriteI2C(0x32, LCD_COMMAND);
 800147e:	2100      	movs	r1, #0
 8001480:	2032      	movs	r0, #50	; 0x32
 8001482:	f7ff ff51 	bl	8001328 <WriteI2C>
	Delay(5);
 8001486:	2005      	movs	r0, #5
 8001488:	f7ff ff40 	bl	800130c <Delay>
	WriteI2C(0x20, LCD_COMMAND);
 800148c:	2100      	movs	r1, #0
 800148e:	2020      	movs	r0, #32
 8001490:	f7ff ff4a 	bl	8001328 <WriteI2C>
	Delay(5);
 8001494:	2005      	movs	r0, #5
 8001496:	f7ff ff39 	bl	800130c <Delay>

//	config lcd
	WriteI2C(LCD.ENTRYMODE, LCD_COMMAND);
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <CLCD_Init+0x144>)
 800149c:	79db      	ldrb	r3, [r3, #7]
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff41 	bl	8001328 <WriteI2C>
	Delay(1);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff ff30 	bl	800130c <Delay>
	WriteI2C(LCD.DISPLAYCTRL, LCD_COMMAND);
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <CLCD_Init+0x144>)
 80014ae:	7a5b      	ldrb	r3, [r3, #9]
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff38 	bl	8001328 <WriteI2C>
	Delay(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff ff27 	bl	800130c <Delay>
	WriteI2C(LCD.CURSORSHIFT, LCD_COMMAND);
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <CLCD_Init+0x144>)
 80014c0:	7a9b      	ldrb	r3, [r3, #10]
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff2f 	bl	8001328 <WriteI2C>
	Delay(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f7ff ff1e 	bl	800130c <Delay>
	WriteI2C(LCD.FUNCTIONSET, LCD_COMMAND);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <CLCD_Init+0x144>)
 80014d2:	7a1b      	ldrb	r3, [r3, #8]
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff26 	bl	8001328 <WriteI2C>
	Delay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff ff15 	bl	800130c <Delay>

	WriteI2C(LCD_CLEARDISPLAY, LCD_COMMAND);
 80014e2:	2100      	movs	r1, #0
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff ff1f 	bl	8001328 <WriteI2C>
	Delay(1);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff ff0e 	bl	800130c <Delay>

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
 80014f0:	2100      	movs	r1, #0
 80014f2:	2002      	movs	r0, #2
 80014f4:	f7ff ff18 	bl	8001328 <WriteI2C>
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200002fc 	.word	0x200002fc
 8001504:	200002f8 	.word	0x200002f8

08001508 <SetCursor>:

void SetCursor(uint8_t row, uint8_t col){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <SetCursor+0x8c>)
 800151e:	799a      	ldrb	r2, [r3, #6]
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	fbb3 f1f2 	udiv	r1, r3, r2
 8001526:	fb01 f202 	mul.w	r2, r1, r2
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <SetCursor+0x8c>)
 8001530:	795a      	ldrb	r2, [r3, #5]
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	fbb3 f1f2 	udiv	r1, r3, r2
 8001538:	fb01 f202 	mul.w	r2, r1, r2
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]

	switch(row){
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d819      	bhi.n	800157a <SetCursor+0x72>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <SetCursor+0x44>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	0800155d 	.word	0x0800155d
 8001550:	08001563 	.word	0x08001563
 8001554:	0800156b 	.word	0x0800156b
 8001558:	08001573 	.word	0x08001573
	case 0:
		address_dram = 0x00 + col;
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	73fb      	strb	r3, [r7, #15]
		break;
 8001560:	e00b      	b.n	800157a <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 8001562:	79bb      	ldrb	r3, [r7, #6]
 8001564:	3340      	adds	r3, #64	; 0x40
 8001566:	73fb      	strb	r3, [r7, #15]
		break;
 8001568:	e007      	b.n	800157a <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 800156a:	79bb      	ldrb	r3, [r7, #6]
 800156c:	3314      	adds	r3, #20
 800156e:	73fb      	strb	r3, [r7, #15]
		break;
 8001570:	e003      	b.n	800157a <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	3354      	adds	r3, #84	; 0x54
 8001576:	73fb      	strb	r3, [r7, #15]
		break;
 8001578:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fecf 	bl	8001328 <WriteI2C>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002fc 	.word	0x200002fc

08001598 <UpdateCharBuffer>:
void CLCD_BackLight(uint8_t is_on){
	LCD.BACKLIGHT = is_on ? LCD_BACKLIGHT : LCD_NOBACKLIGHT;
}


void UpdateCharBuffer(uint8_t c){
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <UpdateCharBuffer+0x40>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <UpdateCharBuffer+0x44>)
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <UpdateCharBuffer+0x48>)
 80015ae:	7952      	ldrb	r2, [r2, #5]
 80015b0:	fb01 f202 	mul.w	r2, r1, r2
 80015b4:	490b      	ldr	r1, [pc, #44]	; (80015e4 <UpdateCharBuffer+0x4c>)
 80015b6:	7809      	ldrb	r1, [r1, #0]
 80015b8:	440a      	add	r2, r1
 80015ba:	4413      	add	r3, r2
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	701a      	strb	r2, [r3, #0]
	currentCol++;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <UpdateCharBuffer+0x4c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <UpdateCharBuffer+0x4c>)
 80015ca:	701a      	strb	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	200002f8 	.word	0x200002f8
 80015dc:	20000309 	.word	0x20000309
 80015e0:	200002fc 	.word	0x200002fc
 80015e4:	20000308 	.word	0x20000308

080015e8 <CLCD_PrintStringBuffer>:
	currentRow = row % LCD.ROW;
	currentCol = col % LCD.COL;
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
}

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	603a      	str	r2, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	460b      	mov	r3, r1
 80015f6:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <CLCD_PrintStringBuffer+0x60>)
 80015fa:	799a      	ldrb	r2, [r3, #6]
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8001602:	fb01 f202 	mul.w	r2, r1, r2
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <CLCD_PrintStringBuffer+0x64>)
 800160c:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <CLCD_PrintStringBuffer+0x60>)
 8001610:	795a      	ldrb	r2, [r3, #5]
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	fbb3 f1f2 	udiv	r1, r3, r2
 8001618:	fb01 f202 	mul.w	r2, r1, r2
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <CLCD_PrintStringBuffer+0x68>)
 8001622:	701a      	strb	r2, [r3, #0]
	while(*str){
 8001624:	e006      	b.n	8001634 <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	603a      	str	r2, [r7, #0]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffb2 	bl	8001598 <UpdateCharBuffer>
	while(*str){
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f4      	bne.n	8001626 <CLCD_PrintStringBuffer+0x3e>
	}
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002fc 	.word	0x200002fc
 800164c:	20000309 	.word	0x20000309
 8001650:	20000308 	.word	0x20000308

08001654 <CLCD_PrintNumBuffer>:

void CLCD_PrintNumBuffer(uint8_t row, uint8_t col, int16_t num){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	460b      	mov	r3, r1
 8001660:	71bb      	strb	r3, [r7, #6]
 8001662:	4613      	mov	r3, r2
 8001664:	80bb      	strh	r3, [r7, #4]
    char flag_num = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
    unsigned char i;
    unsigned long power_of_10 = 1000000000;
 800166a:	4b30      	ldr	r3, [pc, #192]	; (800172c <CLCD_PrintNumBuffer+0xd8>)
 800166c:	60bb      	str	r3, [r7, #8]
    currentRow = row % 2;
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <CLCD_PrintNumBuffer+0xdc>)
 8001678:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <CLCD_PrintNumBuffer+0xe0>)
 8001684:	701a      	strb	r2, [r3, #0]

    if(num < 0) {
 8001686:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	da07      	bge.n	800169e <CLCD_PrintNumBuffer+0x4a>
        num *= -1;
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	425b      	negs	r3, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	80bb      	strh	r3, [r7, #4]
        UpdateCharBuffer('-');
 8001696:	202d      	movs	r0, #45	; 0x2d
 8001698:	f7ff ff7e 	bl	8001598 <UpdateCharBuffer>
 800169c:	e011      	b.n	80016c2 <CLCD_PrintNumBuffer+0x6e>
    }
    else if(num == 0){
 800169e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <CLCD_PrintNumBuffer+0x60>
    	UpdateCharBuffer('0');
 80016a6:	2030      	movs	r0, #48	; 0x30
 80016a8:	f7ff ff76 	bl	8001598 <UpdateCharBuffer>
    	UpdateCharBuffer('0');
 80016ac:	2030      	movs	r0, #48	; 0x30
 80016ae:	f7ff ff73 	bl	8001598 <UpdateCharBuffer>
//        UpdateCharBuffer(' ');
//        UpdateCharBuffer(' ');
        return;
 80016b2:	e038      	b.n	8001726 <CLCD_PrintNumBuffer+0xd2>
    }

    else if(num < 10){
 80016b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	dc02      	bgt.n	80016c2 <CLCD_PrintNumBuffer+0x6e>
        UpdateCharBuffer('0');
 80016bc:	2030      	movs	r0, #48	; 0x30
 80016be:	f7ff ff6b 	bl	8001598 <UpdateCharBuffer>
//        UpdateCharBuffer(num + '0');
    }

    for(i = 10; i > 0; i--){
 80016c2:	230a      	movs	r3, #10
 80016c4:	73bb      	strb	r3, [r7, #14]
 80016c6:	e02b      	b.n	8001720 <CLCD_PrintNumBuffer+0xcc>
        if( (num / power_of_10) != 0){
 80016c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d80d      	bhi.n	80016ee <CLCD_PrintNumBuffer+0x9a>
            flag_num = 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
            UpdateCharBuffer(num / power_of_10 + '0');
 80016d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3330      	adds	r3, #48	; 0x30
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff56 	bl	8001598 <UpdateCharBuffer>
 80016ec:	e005      	b.n	80016fa <CLCD_PrintNumBuffer+0xa6>
        }
        else{
            if(flag_num != 0) UpdateCharBuffer('0');
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <CLCD_PrintNumBuffer+0xa6>
 80016f4:	2030      	movs	r0, #48	; 0x30
 80016f6:	f7ff ff4f 	bl	8001598 <UpdateCharBuffer>
        }
        num %= power_of_10;
 80016fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	fbb3 f2f2 	udiv	r2, r3, r2
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	fb01 f202 	mul.w	r2, r1, r2
 800170a:	1a9b      	subs	r3, r3, r2
 800170c:	80bb      	strh	r3, [r7, #4]
        power_of_10 /= 10;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4a09      	ldr	r2, [pc, #36]	; (8001738 <CLCD_PrintNumBuffer+0xe4>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	08db      	lsrs	r3, r3, #3
 8001718:	60bb      	str	r3, [r7, #8]
    for(i = 10; i > 0; i--){
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	3b01      	subs	r3, #1
 800171e:	73bb      	strb	r3, [r7, #14]
 8001720:	7bbb      	ldrb	r3, [r7, #14]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1d0      	bne.n	80016c8 <CLCD_PrintNumBuffer+0x74>
    }

//    UpdateCharBuffer(' ');
//    UpdateCharBuffer(' ');
}
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	3b9aca00 	.word	0x3b9aca00
 8001730:	20000309 	.word	0x20000309
 8001734:	20000308 	.word	0x20000308
 8001738:	cccccccd 	.word	0xcccccccd

0800173c <CLCD_DisplayScreen>:
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
}

void CLCD_DisplayScreen(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
 8001746:	e021      	b.n	800178c <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fedb 	bl	8001508 <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 8001752:	2300      	movs	r3, #0
 8001754:	71bb      	strb	r3, [r7, #6]
 8001756:	e011      	b.n	800177c <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <CLCD_DisplayScreen+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	4911      	ldr	r1, [pc, #68]	; (80017a4 <CLCD_DisplayScreen+0x68>)
 8001760:	7949      	ldrb	r1, [r1, #5]
 8001762:	fb02 f101 	mul.w	r1, r2, r1
 8001766:	79ba      	ldrb	r2, [r7, #6]
 8001768:	440a      	add	r2, r1
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fdd9 	bl	8001328 <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	3301      	adds	r3, #1
 800177a:	71bb      	strb	r3, [r7, #6]
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <CLCD_DisplayScreen+0x68>)
 800177e:	795b      	ldrb	r3, [r3, #5]
 8001780:	79ba      	ldrb	r2, [r7, #6]
 8001782:	429a      	cmp	r2, r3
 8001784:	d3e8      	bcc.n	8001758 <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3301      	adds	r3, #1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <CLCD_DisplayScreen+0x68>)
 800178e:	799b      	ldrb	r3, [r3, #6]
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	429a      	cmp	r2, r3
 8001794:	d3d8      	bcc.n	8001748 <CLCD_DisplayScreen+0xc>
		}
	}
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200002f8 	.word	0x200002f8
 80017a4:	200002fc 	.word	0x200002fc

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ac:	f000 fde0 	bl	8002370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b0:	f000 f868 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b4:	f000 fa30 	bl	8001c18 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017b8:	f000 f968 	bl	8001a8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80017bc:	f000 f9b4 	bl	8001b28 <MX_TIM3_Init>
  MX_I2C1_Init();
 80017c0:	f000 f936 	bl	8001a30 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017c4:	f000 f9fe 	bl	8001bc4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80017c8:	f000 f8b6 	bl	8001938 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017cc:	f000 f8f2 	bl	80019b4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80017d0:	4822      	ldr	r0, [pc, #136]	; (800185c <main+0xb4>)
 80017d2:	f002 fe3f 	bl	8004454 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80017d6:	4822      	ldr	r0, [pc, #136]	; (8001860 <main+0xb8>)
 80017d8:	f002 fdf2 	bl	80043c0 <HAL_TIM_Base_Start>

  TM_Init(&htim2, 1000);
 80017dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e0:	481e      	ldr	r0, [pc, #120]	; (800185c <main+0xb4>)
 80017e2:	f000 fd13 	bl	800220c <TM_Init>
  TM_SetTime_ms(1000);
 80017e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ea:	f000 fd37 	bl	800225c <TM_SetTime_ms>

  IN_Init(&hadc1, &hadc2);
 80017ee:	491d      	ldr	r1, [pc, #116]	; (8001864 <main+0xbc>)
 80017f0:	481d      	ldr	r0, [pc, #116]	; (8001868 <main+0xc0>)
 80017f2:	f7ff fd3b 	bl	800126c <IN_Init>

  DHT_Init(&_dht, DHT_GPIO_Port, DHT_Pin, &htim3);
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <main+0xb8>)
 80017f8:	2208      	movs	r2, #8
 80017fa:	491c      	ldr	r1, [pc, #112]	; (800186c <main+0xc4>)
 80017fc:	481c      	ldr	r0, [pc, #112]	; (8001870 <main+0xc8>)
 80017fe:	f7ff fb3b 	bl	8000e78 <DHT_Init>

  ZB_Init(&huart1);
 8001802:	481c      	ldr	r0, [pc, #112]	; (8001874 <main+0xcc>)
 8001804:	f000 fd60 	bl	80022c8 <ZB_Init>

  CLCD_Init(&hi2c1, 0x27, 2, 16);
 8001808:	2310      	movs	r3, #16
 800180a:	2202      	movs	r2, #2
 800180c:	2127      	movs	r1, #39	; 0x27
 800180e:	481a      	ldr	r0, [pc, #104]	; (8001878 <main+0xd0>)
 8001810:	f7ff fdd4 	bl	80013bc <CLCD_Init>

  FSM_Init();
 8001814:	f7ff fcaa 	bl	800116c <FSM_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(TM_IsFlag()){
 8001818:	f000 fd44 	bl	80022a4 <TM_IsFlag>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0fa      	beq.n	8001818 <main+0x70>

		  if(_time_read_data >= 1) _time_read_data -= 1;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <main+0xd4>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <main+0x8e>
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <main+0xd4>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <main+0xd4>)
 8001834:	801a      	strh	r2, [r3, #0]

		  FSM_SystemControl();
 8001836:	f7ff fca5 	bl	8001184 <FSM_SystemControl>

		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800183a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183e:	4810      	ldr	r0, [pc, #64]	; (8001880 <main+0xd8>)
 8001840:	f001 fc1f 	bl	8003082 <HAL_GPIO_TogglePin>


		  CLCD_PrintNumBuffer(1, 0, _time_read_data);
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <main+0xd4>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b21b      	sxth	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	2100      	movs	r1, #0
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff ff00 	bl	8001654 <CLCD_PrintNumBuffer>
		  CLCD_DisplayScreen();
 8001854:	f7ff ff72 	bl	800173c <CLCD_DisplayScreen>
	  if(TM_IsFlag()){
 8001858:	e7de      	b.n	8001818 <main+0x70>
 800185a:	bf00      	nop
 800185c:	200003c0 	.word	0x200003c0
 8001860:	20000408 	.word	0x20000408
 8001864:	2000033c 	.word	0x2000033c
 8001868:	2000030c 	.word	0x2000030c
 800186c:	40010800 	.word	0x40010800
 8001870:	200002d8 	.word	0x200002d8
 8001874:	20000450 	.word	0x20000450
 8001878:	2000036c 	.word	0x2000036c
 800187c:	200002ec 	.word	0x200002ec
 8001880:	40011000 	.word	0x40011000

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b094      	sub	sp, #80	; 0x50
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	2228      	movs	r2, #40	; 0x28
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fb7a 	bl	8004f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c2:	2301      	movs	r3, #1
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c6:	2302      	movs	r3, #2
 80018c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 f851 	bl	8003980 <HAL_RCC_OscConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80018e4:	f000 fa04 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e8:	230f      	movs	r3, #15
 80018ea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fabd 	bl	8003e84 <HAL_RCC_ClockConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001910:	f000 f9ee 	bl	8001cf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001914:	2302      	movs	r3, #2
 8001916:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4618      	mov	r0, r3
 8001920:	f002 fc48 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800192a:	f000 f9e1 	bl	8001cf0 <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3750      	adds	r7, #80	; 0x50
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <MX_ADC1_Init+0x74>)
 800194a:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <MX_ADC1_Init+0x78>)
 800194c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_ADC1_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <MX_ADC1_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_ADC1_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_ADC1_Init+0x74>)
 8001962:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_ADC1_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_ADC1_Init+0x74>)
 8001970:	2201      	movs	r2, #1
 8001972:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <MX_ADC1_Init+0x74>)
 8001976:	f000 fd9d 	bl	80024b4 <HAL_ADC_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001980:	f000 f9b6 	bl	8001cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001988:	2301      	movs	r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_ADC1_Init+0x74>)
 8001996:	f000 ff1f 	bl	80027d8 <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80019a0:	f000 f9a6 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000030c 	.word	0x2000030c
 80019b0:	40012400 	.word	0x40012400

080019b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_ADC2_Init+0x74>)
 80019c6:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <MX_ADC2_Init+0x78>)
 80019c8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_ADC2_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_ADC2_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_ADC2_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <MX_ADC2_Init+0x74>)
 80019de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <MX_ADC2_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_ADC2_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <MX_ADC2_Init+0x74>)
 80019f2:	f000 fd5f 	bl	80024b4 <HAL_ADC_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80019fc:	f000 f978 	bl	8001cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_ADC2_Init+0x74>)
 8001a12:	f000 fee1 	bl	80027d8 <HAL_ADC_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001a1c:	f000 f968 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000033c 	.word	0x2000033c
 8001a2c:	40012800 	.word	0x40012800

08001a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <MX_I2C1_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_I2C1_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a6e:	f001 fb21 	bl	80030b4 <HAL_I2C_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 f93a 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000036c 	.word	0x2000036c
 8001a84:	40005400 	.word	0x40005400
 8001a88:	000186a0 	.word	0x000186a0

08001a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001ab2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad2:	4814      	ldr	r0, [pc, #80]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001ad4:	f002 fc24 	bl	8004320 <HAL_TIM_Base_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ade:	f000 f907 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	4619      	mov	r1, r3
 8001aee:	480d      	ldr	r0, [pc, #52]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001af0:	f002 fe0a 	bl	8004708 <HAL_TIM_ConfigClockSource>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001afa:	f000 f8f9 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <MX_TIM2_Init+0x98>)
 8001b0c:	f002 ffdc 	bl	8004ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b16:	f000 f8eb 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200003c0 	.word	0x200003c0

08001b28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <MX_TIM3_Init+0x98>)
 8001b48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b6a:	4814      	ldr	r0, [pc, #80]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001b6c:	f002 fbd8 	bl	8004320 <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b76:	f000 f8bb 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001b88:	f002 fdbe 	bl	8004708 <HAL_TIM_ConfigClockSource>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b92:	f000 f8ad 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_TIM3_Init+0x94>)
 8001ba4:	f002 ff90 	bl	8004ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001bae:	f000 f89f 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000408 	.word	0x20000408
 8001bc0:	40000400 	.word	0x40000400

08001bc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <MX_USART1_UART_Init+0x50>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bfc:	f002 ffd4 	bl	8004ba8 <HAL_UART_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c06:	f000 f873 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000450 	.word	0x20000450
 8001c14:	40013800 	.word	0x40013800

08001c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a2c      	ldr	r2, [pc, #176]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c4a:	f043 0320 	orr.w	r3, r3, #32
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c7a:	f043 0308 	orr.w	r3, r3, #8
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c92:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <MX_GPIO_Init+0xd0>)
 8001c94:	f001 f9dd 	bl	8003052 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	4813      	ldr	r0, [pc, #76]	; (8001cec <MX_GPIO_Init+0xd4>)
 8001c9e:	f001 f9d8 	bl	8003052 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <MX_GPIO_Init+0xd0>)
 8001cbc:	f001 f82e 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_GPIO_Init+0xd4>)
 8001cd8:	f001 f820 	bl	8002d1c <HAL_GPIO_Init>

}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40010800 	.word	0x40010800

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <Error_Handler+0x8>
	...

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_MspInit+0x5c>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <HAL_MspInit+0x5c>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6193      	str	r3, [r2, #24]
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_MspInit+0x5c>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_MspInit+0x5c>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <HAL_MspInit+0x5c>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	61d3      	str	r3, [r2, #28]
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_MspInit+0x5c>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_MspInit+0x60>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_MspInit+0x60>)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010000 	.word	0x40010000

08001d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a28      	ldr	r2, [pc, #160]	; (8001e1c <HAL_ADC_MspInit+0xbc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d122      	bne.n	8001dc6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0318 	add.w	r3, r7, #24
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4819      	ldr	r0, [pc, #100]	; (8001e24 <HAL_ADC_MspInit+0xc4>)
 8001dc0:	f000 ffac 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001dc4:	e026      	b.n	8001e14 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_ADC_MspInit+0xc8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d121      	bne.n	8001e14 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_ADC_MspInit+0xc0>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e04:	2303      	movs	r3, #3
 8001e06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_ADC_MspInit+0xc4>)
 8001e10:	f000 ff84 	bl	8002d1c <HAL_GPIO_Init>
}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40012400 	.word	0x40012400
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40012800 	.word	0x40012800

08001e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <HAL_I2C_MspInit+0x70>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d123      	bne.n	8001e94 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_I2C_MspInit+0x74>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <HAL_I2C_MspInit+0x74>)
 8001e52:	f043 0308 	orr.w	r3, r3, #8
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_I2C_MspInit+0x74>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e64:	23c0      	movs	r3, #192	; 0xc0
 8001e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e68:	2312      	movs	r3, #18
 8001e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	4619      	mov	r1, r3
 8001e76:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <HAL_I2C_MspInit+0x78>)
 8001e78:	f000 ff50 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_I2C_MspInit+0x74>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_I2C_MspInit+0x74>)
 8001e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e86:	61d3      	str	r3, [r2, #28]
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_I2C_MspInit+0x74>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010c00 	.word	0x40010c00

08001ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d114      	bne.n	8001ee4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_TIM_Base_MspInit+0x68>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_TIM_Base_MspInit+0x68>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_TIM_Base_MspInit+0x68>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	201c      	movs	r0, #28
 8001ed8:	f000 fee9 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001edc:	201c      	movs	r0, #28
 8001ede:	f000 ff02 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ee2:	e010      	b.n	8001f06 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_TIM_Base_MspInit+0x6c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10b      	bne.n	8001f06 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_TIM_Base_MspInit+0x68>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_TIM_Base_MspInit+0x68>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	61d3      	str	r3, [r2, #28]
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_TIM_Base_MspInit+0x68>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40000400 	.word	0x40000400

08001f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_UART_MspInit+0x8c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d131      	bne.n	8001f9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_UART_MspInit+0x90>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <HAL_UART_MspInit+0x90>)
 8001f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_UART_MspInit+0x90>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_UART_MspInit+0x90>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_UART_MspInit+0x90>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_UART_MspInit+0x90>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <HAL_UART_MspInit+0x94>)
 8001f7e:	f000 fecd 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4619      	mov	r1, r3
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <HAL_UART_MspInit+0x94>)
 8001f98:	f000 fec0 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40013800 	.word	0x40013800
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010800 	.word	0x40010800

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <HardFault_Handler+0x4>

08001fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <MemManage_Handler+0x4>

08001fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff6:	f000 fa01 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <TIM2_IRQHandler+0x10>)
 8002006:	f002 fa77 	bl	80044f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200003c0 	.word	0x200003c0

08002014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return 1;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <_kill>:

int _kill(int pid, int sig)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800202c:	f002 ff74 	bl	8004f18 <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	2216      	movs	r2, #22
 8002034:	601a      	str	r2, [r3, #0]
  return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_exit>:

void _exit (int status)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800204a:	f04f 31ff 	mov.w	r1, #4294967295
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffe7 	bl	8002022 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002054:	e7fe      	b.n	8002054 <_exit+0x12>

08002056 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e00a      	b.n	800207e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002068:	f3af 8000 	nop.w
 800206c:	4601      	mov	r1, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	b2ca      	uxtb	r2, r1
 8002076:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	dbf0      	blt.n	8002068 <_read+0x12>
  }

  return len;
 8002086:	687b      	ldr	r3, [r7, #4]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e009      	b.n	80020b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dbf1      	blt.n	80020a2 <_write+0x12>
  }
  return len;
 80020be:	687b      	ldr	r3, [r7, #4]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_close>:

int _close(int file)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ee:	605a      	str	r2, [r3, #4]
  return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <_isatty>:

int _isatty(int file)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <_sbrk+0x5c>)
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <_sbrk+0x60>)
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <_sbrk+0x64>)
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <_sbrk+0x68>)
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	429a      	cmp	r2, r3
 8002156:	d207      	bcs.n	8002168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002158:	f002 fede 	bl	8004f18 <__errno>
 800215c:	4603      	mov	r3, r0
 800215e:	220c      	movs	r2, #12
 8002160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	e009      	b.n	800217c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <_sbrk+0x64>)
 8002178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217a:	68fb      	ldr	r3, [r7, #12]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20005000 	.word	0x20005000
 8002188:	00000400 	.word	0x00000400
 800218c:	20000494 	.word	0x20000494
 8002190:	200004b8 	.word	0x200004b8

08002194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <RunSoftwareTimer>:

static uint8_t MUL_timer		= 1;
static uint8_t flag_timer		= 0;
static uint16_t counter_timer 	= 0;

void RunSoftwareTimer(void){
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	if(counter_timer > 0){
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <RunSoftwareTimer+0x38>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d011      	beq.n	80021d0 <RunSoftwareTimer+0x30>
		counter_timer--;
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <RunSoftwareTimer+0x38>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <RunSoftwareTimer+0x38>)
 80021b6:	801a      	strh	r2, [r3, #0]
		if(counter_timer == 0){
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <RunSoftwareTimer+0x38>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <RunSoftwareTimer+0x30>
			counter_timer = MUL_timer;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <RunSoftwareTimer+0x3c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <RunSoftwareTimer+0x38>)
 80021c8:	801a      	strh	r2, [r3, #0]
			flag_timer = 1;
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <RunSoftwareTimer+0x40>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	2000049e 	.word	0x2000049e
 80021dc:	20000016 	.word	0x20000016
 80021e0:	2000049c 	.word	0x2000049c

080021e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stimer->Instance) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 80021fa:	f7ff ffd1 	bl	80021a0 <RunSoftwareTimer>
	}
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000498 	.word	0x20000498

0800220c <TM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void TM_Init(TIM_HandleTypeDef* htim, uint16_t cycles){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
	stimer = htim;
 8002218:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <TM_Init+0x3c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6013      	str	r3, [r2, #0]
	counter_timer = MUL_timer;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <TM_Init+0x40>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <TM_Init+0x44>)
 8002226:	801a      	strh	r2, [r3, #0]
	TIME_CYCLE = cycles;
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <TM_Init+0x48>)
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	8013      	strh	r3, [r2, #0]

	flag_timer = 0;
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <TM_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(stimer);
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <TM_Init+0x3c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f002 f90b 	bl	8004454 <HAL_TIM_Base_Start_IT>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000498 	.word	0x20000498
 800224c:	20000016 	.word	0x20000016
 8002250:	2000049e 	.word	0x2000049e
 8002254:	20000014 	.word	0x20000014
 8002258:	2000049c 	.word	0x2000049c

0800225c <TM_SetTime_ms>:

void TM_SetTime_ms(uint16_t duration){
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
	MUL_timer = duration / TIME_CYCLE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <TM_SetTime_ms+0x38>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <TM_SetTime_ms+0x3c>)
 8002276:	701a      	strb	r2, [r3, #0]
	counter_timer = MUL_timer;
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <TM_SetTime_ms+0x3c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b29a      	uxth	r2, r3
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <TM_SetTime_ms+0x40>)
 8002280:	801a      	strh	r2, [r3, #0]
	flag_timer = 0;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <TM_SetTime_ms+0x44>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000014 	.word	0x20000014
 8002298:	20000016 	.word	0x20000016
 800229c:	2000049e 	.word	0x2000049e
 80022a0:	2000049c 	.word	0x2000049c

080022a4 <TM_IsFlag>:

uint8_t TM_IsFlag(void){
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
	if(flag_timer) {
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <TM_IsFlag+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <TM_IsFlag+0x16>
		flag_timer = 0;
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <TM_IsFlag+0x20>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
		return 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <TM_IsFlag+0x18>
	}
	return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	2000049c 	.word	0x2000049c

080022c8 <ZB_Init>:
	}

}

//==================HIGH LEVEL FUNCTION==================//
void ZB_Init(UART_HandleTypeDef* huart){
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	uart_zigbee = huart;
 80022d0:	4a03      	ldr	r2, [pc, #12]	; (80022e0 <ZB_Init+0x18>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]

}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	200004a0 	.word	0x200004a0

080022e4 <ZB_SendMsg>:

void ZB_SendMsg(char* msg, uint8_t length){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i = 0; i < length; i++){
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e00b      	b.n	800230e <ZB_SendMsg+0x2a>
		HAL_UART_Transmit(uart_zigbee, msg + i, 1, 100);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <ZB_SendMsg+0x3c>)
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	18d1      	adds	r1, r2, r3
 8002300:	2364      	movs	r3, #100	; 0x64
 8002302:	2201      	movs	r2, #1
 8002304:	f002 fc9d 	bl	8004c42 <HAL_UART_Transmit>
	for(i = 0; i < length; i++){
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	3301      	adds	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	429a      	cmp	r2, r3
 8002314:	d3ef      	bcc.n	80022f6 <ZB_SendMsg+0x12>
	}

//	HAL_UART_Transmit(uart_zigbee, (uint8_t*)msg, length, 2000);


}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200004a0 	.word	0x200004a0

08002324 <Reset_Handler>:
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <LoopFillZerobss+0x12>)
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <LoopFillZerobss+0x16>)
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <LoopFillZerobss+0x1a>)
 800232a:	2300      	movs	r3, #0
 800232c:	e002      	b.n	8002334 <LoopCopyDataInit>

0800232e <CopyDataInit>:
 800232e:	58d4      	ldr	r4, [r2, r3]
 8002330:	50c4      	str	r4, [r0, r3]
 8002332:	3304      	adds	r3, #4

08002334 <LoopCopyDataInit>:
 8002334:	18c4      	adds	r4, r0, r3
 8002336:	428c      	cmp	r4, r1
 8002338:	d3f9      	bcc.n	800232e <CopyDataInit>
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <LoopFillZerobss+0x1e>)
 800233c:	4c0a      	ldr	r4, [pc, #40]	; (8002368 <LoopFillZerobss+0x22>)
 800233e:	2300      	movs	r3, #0
 8002340:	e001      	b.n	8002346 <LoopFillZerobss>

08002342 <FillZerobss>:
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	3204      	adds	r2, #4

08002346 <LoopFillZerobss>:
 8002346:	42a2      	cmp	r2, r4
 8002348:	d3fb      	bcc.n	8002342 <FillZerobss>
 800234a:	f7ff ff23 	bl	8002194 <SystemInit>
 800234e:	f002 fde9 	bl	8004f24 <__libc_init_array>
 8002352:	f7ff fa29 	bl	80017a8 <main>
 8002356:	4770      	bx	lr
 8002358:	20000000 	.word	0x20000000
 800235c:	200001f0 	.word	0x200001f0
 8002360:	080081bc 	.word	0x080081bc
 8002364:	200001f0 	.word	0x200001f0
 8002368:	200004b8 	.word	0x200004b8

0800236c <ADC1_2_IRQHandler>:
 800236c:	e7fe      	b.n	800236c <ADC1_2_IRQHandler>
	...

08002370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_Init+0x28>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_Init+0x28>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002380:	2003      	movs	r0, #3
 8002382:	f000 fc89 	bl	8002c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002386:	200f      	movs	r0, #15
 8002388:	f000 f808 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800238c:	f7ff fcb6 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40022000 	.word	0x40022000

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x54>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x58>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fca1 	bl	8002d02 <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00e      	b.n	80023e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d80a      	bhi.n	80023e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 fc69 	bl	8002cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_InitTick+0x5c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000010 	.word	0x20000010
 80023f4:	2000001c 	.word	0x2000001c
 80023f8:	20000018 	.word	0x20000018

080023fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_IncTick+0x1c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_IncTick+0x20>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <HAL_IncTick+0x20>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	2000001c 	.word	0x2000001c
 800241c:	200004a4 	.word	0x200004a4

08002420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <HAL_GetTick+0x10>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	200004a4 	.word	0x200004a4

08002434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff fff0 	bl	8002420 <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d005      	beq.n	800245a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_Delay+0x44>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245a:	bf00      	nop
 800245c:	f7ff ffe0 	bl	8002420 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d8f7      	bhi.n	800245c <HAL_Delay+0x28>
  {
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000001c 	.word	0x2000001c

0800247c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_SuspendTick+0x18>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a03      	ldr	r2, [pc, #12]	; (8002494 <HAL_SuspendTick+0x18>)
 8002486:	f023 0302 	bic.w	r3, r3, #2
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_ResumeTick+0x18>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a03      	ldr	r2, [pc, #12]	; (80024b0 <HAL_ResumeTick+0x18>)
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0be      	b.n	8002654 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fc34 	bl	8001d60 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fabf 	bl	8002a7c <ADC_ConversionStop_Disable>
 80024fe:	4603      	mov	r3, r0
 8002500:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 8099 	bne.w	8002642 <HAL_ADC_Init+0x18e>
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8095 	bne.w	8002642 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002520:	f023 0302 	bic.w	r3, r3, #2
 8002524:	f043 0202 	orr.w	r2, r3, #2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002534:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7b1b      	ldrb	r3, [r3, #12]
 800253a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800253c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	4313      	orrs	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254c:	d003      	beq.n	8002556 <HAL_ADC_Init+0xa2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d102      	bne.n	800255c <HAL_ADC_Init+0xa8>
 8002556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255a:	e000      	b.n	800255e <HAL_ADC_Init+0xaa>
 800255c:	2300      	movs	r3, #0
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7d1b      	ldrb	r3, [r3, #20]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d119      	bne.n	80025a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	3b01      	subs	r3, #1
 800257a:	035a      	lsls	r2, r3, #13
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	e00b      	b.n	80025a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_ADC_Init+0x1a8>)
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d0:	d003      	beq.n	80025da <HAL_ADC_Init+0x126>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d104      	bne.n	80025e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	3b01      	subs	r3, #1
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <HAL_ADC_Init+0x1ac>)
 8002600:	4013      	ands	r3, r2
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	d10b      	bne.n	8002620 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800261e:	e018      	b.n	8002652 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	f023 0312 	bic.w	r3, r3, #18
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002640:	e007      	b.n	8002652 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	ffe1f7fd 	.word	0xffe1f7fd
 8002660:	ff1f0efe 	.word	0xff1f0efe

08002664 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_ADC_Start+0x1a>
 800267a:	2302      	movs	r3, #2
 800267c:	e098      	b.n	80027b0 <HAL_ADC_Start+0x14c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f99e 	bl	80029c8 <ADC_Enable>
 800268c:	4603      	mov	r3, r0
 800268e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 8087 	bne.w	80027a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a41      	ldr	r2, [pc, #260]	; (80027b8 <HAL_ADC_Start+0x154>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d105      	bne.n	80026c2 <HAL_ADC_Start+0x5e>
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_ADC_Start+0x158>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d115      	bne.n	80026ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d026      	beq.n	800272a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ec:	e01d      	b.n	800272a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <HAL_ADC_Start+0x158>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_ADC_Start+0xaa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <HAL_ADC_Start+0x154>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10d      	bne.n	800272a <HAL_ADC_Start+0xc6>
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_ADC_Start+0x158>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002722:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f023 0206 	bic.w	r2, r3, #6
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
 8002742:	e002      	b.n	800274a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f06f 0202 	mvn.w	r2, #2
 800275a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002766:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800276a:	d113      	bne.n	8002794 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002770:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <HAL_ADC_Start+0x154>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d105      	bne.n	8002782 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_ADC_Start+0x158>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	e00c      	b.n	80027ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e003      	b.n	80027ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40012800 	.word	0x40012800
 80027bc:	40012400 	.word	0x40012400

080027c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x20>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0dc      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x1da>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d81c      	bhi.n	8002842 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	3b05      	subs	r3, #5
 800281a:	221f      	movs	r2, #31
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	4019      	ands	r1, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b05      	subs	r3, #5
 8002834:	fa00 f203 	lsl.w	r2, r0, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	635a      	str	r2, [r3, #52]	; 0x34
 8002840:	e03c      	b.n	80028bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d81c      	bhi.n	8002884 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b23      	subs	r3, #35	; 0x23
 800285c:	221f      	movs	r2, #31
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	4019      	ands	r1, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b23      	subs	r3, #35	; 0x23
 8002876:	fa00 f203 	lsl.w	r2, r0, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
 8002882:	e01b      	b.n	80028bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	3b41      	subs	r3, #65	; 0x41
 8002896:	221f      	movs	r2, #31
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	4019      	ands	r1, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3b41      	subs	r3, #65	; 0x41
 80028b0:	fa00 f203 	lsl.w	r2, r0, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b09      	cmp	r3, #9
 80028c2:	d91c      	bls.n	80028fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68d9      	ldr	r1, [r3, #12]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	3b1e      	subs	r3, #30
 80028d6:	2207      	movs	r2, #7
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6898      	ldr	r0, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	3b1e      	subs	r3, #30
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e019      	b.n	8002932 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6919      	ldr	r1, [r3, #16]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	2207      	movs	r2, #7
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	4019      	ands	r1, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6898      	ldr	r0, [r3, #8]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	fa00 f203 	lsl.w	r2, r0, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b10      	cmp	r3, #16
 8002938:	d003      	beq.n	8002942 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800293e:	2b11      	cmp	r3, #17
 8002940:	d132      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d125      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d126      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002968:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b10      	cmp	r3, #16
 8002970:	d11a      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	0c9a      	lsrs	r2, r3, #18
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002988:	e002      	b.n	8002990 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3b01      	subs	r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f9      	bne.n	800298a <HAL_ADC_ConfigChannel+0x1b2>
 8002996:	e007      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40012400 	.word	0x40012400
 80029c0:	20000010 	.word	0x20000010
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d040      	beq.n	8002a68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <ADC_Enable+0xac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <ADC_Enable+0xb0>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	0c9b      	lsrs	r3, r3, #18
 8002a02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a04:	e002      	b.n	8002a0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f9      	bne.n	8002a06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a12:	f7ff fd05 	bl	8002420 <HAL_GetTick>
 8002a16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a18:	e01f      	b.n	8002a5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a1a:	f7ff fd01 	bl	8002420 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d918      	bls.n	8002a5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d011      	beq.n	8002a5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e007      	b.n	8002a6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d1d8      	bne.n	8002a1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000010 	.word	0x20000010
 8002a78:	431bde83 	.word	0x431bde83

08002a7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d12e      	bne.n	8002af4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aa6:	f7ff fcbb 	bl	8002420 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aac:	e01b      	b.n	8002ae6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aae:	f7ff fcb7 	bl	8002420 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d914      	bls.n	8002ae6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10d      	bne.n	8002ae6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	f043 0210 	orr.w	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e007      	b.n	8002af6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d0dc      	beq.n	8002aae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <__NVIC_EnableIRQ+0x34>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	; (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c64:	d301      	bcc.n	8002c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00f      	b.n	8002c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <SysTick_Config+0x40>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c72:	210f      	movs	r1, #15
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	f7ff ff90 	bl	8002b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <SysTick_Config+0x40>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <SysTick_Config+0x40>)
 8002c84:	2207      	movs	r2, #7
 8002c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	e000e010 	.word	0xe000e010

08002c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff2d 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc0:	f7ff ff42 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7ff ff90 	bl	8002bf0 <NVIC_EncodePriority>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff5f 	bl	8002b9c <__NVIC_SetPriority>
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff35 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ffa2 	bl	8002c54 <SysTick_Config>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b08b      	sub	sp, #44	; 0x2c
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	e169      	b.n	8003004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d30:	2201      	movs	r2, #1
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 8158 	bne.w	8002ffe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a9a      	ldr	r2, [pc, #616]	; (8002fbc <HAL_GPIO_Init+0x2a0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d05e      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d58:	4a98      	ldr	r2, [pc, #608]	; (8002fbc <HAL_GPIO_Init+0x2a0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d875      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d5e:	4a98      	ldr	r2, [pc, #608]	; (8002fc0 <HAL_GPIO_Init+0x2a4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d058      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d64:	4a96      	ldr	r2, [pc, #600]	; (8002fc0 <HAL_GPIO_Init+0x2a4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d86f      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d6a:	4a96      	ldr	r2, [pc, #600]	; (8002fc4 <HAL_GPIO_Init+0x2a8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d052      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d70:	4a94      	ldr	r2, [pc, #592]	; (8002fc4 <HAL_GPIO_Init+0x2a8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d869      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d76:	4a94      	ldr	r2, [pc, #592]	; (8002fc8 <HAL_GPIO_Init+0x2ac>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04c      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d7c:	4a92      	ldr	r2, [pc, #584]	; (8002fc8 <HAL_GPIO_Init+0x2ac>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d863      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d82:	4a92      	ldr	r2, [pc, #584]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d046      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d88:	4a90      	ldr	r2, [pc, #576]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d85d      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d82a      	bhi.n	8002de8 <HAL_GPIO_Init+0xcc>
 8002d92:	2b12      	cmp	r3, #18
 8002d94:	d859      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_GPIO_Init+0x80>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002e17 	.word	0x08002e17
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002e03 	.word	0x08002e03
 8002da8:	08002e45 	.word	0x08002e45
 8002dac:	08002e4b 	.word	0x08002e4b
 8002db0:	08002e4b 	.word	0x08002e4b
 8002db4:	08002e4b 	.word	0x08002e4b
 8002db8:	08002e4b 	.word	0x08002e4b
 8002dbc:	08002e4b 	.word	0x08002e4b
 8002dc0:	08002e4b 	.word	0x08002e4b
 8002dc4:	08002e4b 	.word	0x08002e4b
 8002dc8:	08002e4b 	.word	0x08002e4b
 8002dcc:	08002e4b 	.word	0x08002e4b
 8002dd0:	08002e4b 	.word	0x08002e4b
 8002dd4:	08002e4b 	.word	0x08002e4b
 8002dd8:	08002e4b 	.word	0x08002e4b
 8002ddc:	08002e4b 	.word	0x08002e4b
 8002de0:	08002df9 	.word	0x08002df9
 8002de4:	08002e0d 	.word	0x08002e0d
 8002de8:	4a79      	ldr	r2, [pc, #484]	; (8002fd0 <HAL_GPIO_Init+0x2b4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dee:	e02c      	b.n	8002e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	623b      	str	r3, [r7, #32]
          break;
 8002df6:	e029      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	623b      	str	r3, [r7, #32]
          break;
 8002e00:	e024      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	3308      	adds	r3, #8
 8002e08:	623b      	str	r3, [r7, #32]
          break;
 8002e0a:	e01f      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	330c      	adds	r3, #12
 8002e12:	623b      	str	r3, [r7, #32]
          break;
 8002e14:	e01a      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e1e:	2304      	movs	r3, #4
 8002e20:	623b      	str	r3, [r7, #32]
          break;
 8002e22:	e013      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	611a      	str	r2, [r3, #16]
          break;
 8002e36:	e009      	b.n	8002e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e38:	2308      	movs	r3, #8
 8002e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	615a      	str	r2, [r3, #20]
          break;
 8002e42:	e003      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e44:	2300      	movs	r3, #0
 8002e46:	623b      	str	r3, [r7, #32]
          break;
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          break;
 8002e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2bff      	cmp	r3, #255	; 0xff
 8002e50:	d801      	bhi.n	8002e56 <HAL_GPIO_Init+0x13a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	e001      	b.n	8002e5a <HAL_GPIO_Init+0x13e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2bff      	cmp	r3, #255	; 0xff
 8002e60:	d802      	bhi.n	8002e68 <HAL_GPIO_Init+0x14c>
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	e002      	b.n	8002e6e <HAL_GPIO_Init+0x152>
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	3b08      	subs	r3, #8
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	210f      	movs	r1, #15
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	6a39      	ldr	r1, [r7, #32]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80b1 	beq.w	8002ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e9c:	4b4d      	ldr	r3, [pc, #308]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a4c      	ldr	r2, [pc, #304]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6193      	str	r3, [r2, #24]
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_GPIO_Init+0x2bc>)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a40      	ldr	r2, [pc, #256]	; (8002fdc <HAL_GPIO_Init+0x2c0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_GPIO_Init+0x1ec>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <HAL_GPIO_Init+0x2c4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00d      	beq.n	8002f04 <HAL_GPIO_Init+0x1e8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <HAL_GPIO_Init+0x2c8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <HAL_GPIO_Init+0x1e4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <HAL_GPIO_Init+0x1e0>
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e006      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002efc:	2304      	movs	r3, #4
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f1a:	492f      	ldr	r1, [pc, #188]	; (8002fd8 <HAL_GPIO_Init+0x2bc>)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d006      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	492c      	ldr	r1, [pc, #176]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	4928      	ldr	r1, [pc, #160]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4922      	ldr	r1, [pc, #136]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	491e      	ldr	r1, [pc, #120]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4918      	ldr	r1, [pc, #96]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	4914      	ldr	r1, [pc, #80]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d021      	beq.n	8002ff0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
 8002fb8:	e021      	b.n	8002ffe <HAL_GPIO_Init+0x2e2>
 8002fba:	bf00      	nop
 8002fbc:	10320000 	.word	0x10320000
 8002fc0:	10310000 	.word	0x10310000
 8002fc4:	10220000 	.word	0x10220000
 8002fc8:	10210000 	.word	0x10210000
 8002fcc:	10120000 	.word	0x10120000
 8002fd0:	10110000 	.word	0x10110000
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	40010c00 	.word	0x40010c00
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	40011400 	.word	0x40011400
 8002fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	4909      	ldr	r1, [pc, #36]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	3301      	adds	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	f47f ae8e 	bne.w	8002d30 <HAL_GPIO_Init+0x14>
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	372c      	adds	r7, #44	; 0x2c
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40010400 	.word	0x40010400

08003024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e001      	b.n	8003046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	807b      	strh	r3, [r7, #2]
 800305e:	4613      	mov	r3, r2
 8003060:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003062:	787b      	ldrb	r3, [r7, #1]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003068:	887a      	ldrh	r2, [r7, #2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800306e:	e003      	b.n	8003078 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	041a      	lsls	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	611a      	str	r2, [r3, #16]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003094:	887a      	ldrh	r2, [r7, #2]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4013      	ands	r3, r2
 800309a:	041a      	lsls	r2, r3, #16
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43d9      	mvns	r1, r3
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	400b      	ands	r3, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	611a      	str	r2, [r3, #16]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e12b      	b.n	800331e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe fea6 	bl	8001e2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003118:	f001 f806 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 800311c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a81      	ldr	r2, [pc, #516]	; (8003328 <HAL_I2C_Init+0x274>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d807      	bhi.n	8003138 <HAL_I2C_Init+0x84>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a80      	ldr	r2, [pc, #512]	; (800332c <HAL_I2C_Init+0x278>)
 800312c:	4293      	cmp	r3, r2
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e006      	b.n	8003146 <HAL_I2C_Init+0x92>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a7d      	ldr	r2, [pc, #500]	; (8003330 <HAL_I2C_Init+0x27c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	bf94      	ite	ls
 8003140:	2301      	movls	r3, #1
 8003142:	2300      	movhi	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0e7      	b.n	800331e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a78      	ldr	r2, [pc, #480]	; (8003334 <HAL_I2C_Init+0x280>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0c9b      	lsrs	r3, r3, #18
 8003158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a6a      	ldr	r2, [pc, #424]	; (8003328 <HAL_I2C_Init+0x274>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d802      	bhi.n	8003188 <HAL_I2C_Init+0xd4>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3301      	adds	r3, #1
 8003186:	e009      	b.n	800319c <HAL_I2C_Init+0xe8>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	4a69      	ldr	r2, [pc, #420]	; (8003338 <HAL_I2C_Init+0x284>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	3301      	adds	r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	495c      	ldr	r1, [pc, #368]	; (8003328 <HAL_I2C_Init+0x274>)
 80031b8:	428b      	cmp	r3, r1
 80031ba:	d819      	bhi.n	80031f0 <HAL_I2C_Init+0x13c>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e59      	subs	r1, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ca:	1c59      	adds	r1, r3, #1
 80031cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031d0:	400b      	ands	r3, r1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_I2C_Init+0x138>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1e59      	subs	r1, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ea:	e051      	b.n	8003290 <HAL_I2C_Init+0x1dc>
 80031ec:	2304      	movs	r3, #4
 80031ee:	e04f      	b.n	8003290 <HAL_I2C_Init+0x1dc>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <HAL_I2C_Init+0x168>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	e012      	b.n	8003242 <HAL_I2C_Init+0x18e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e58      	subs	r0, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	0099      	lsls	r1, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Init+0x196>
 8003246:	2301      	movs	r3, #1
 8003248:	e022      	b.n	8003290 <HAL_I2C_Init+0x1dc>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10e      	bne.n	8003270 <HAL_I2C_Init+0x1bc>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1e58      	subs	r0, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	440b      	add	r3, r1
 8003260:	fbb0 f3f3 	udiv	r3, r0, r3
 8003264:	3301      	adds	r3, #1
 8003266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326e:	e00f      	b.n	8003290 <HAL_I2C_Init+0x1dc>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1e58      	subs	r0, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	0099      	lsls	r1, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	fbb0 f3f3 	udiv	r3, r0, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	6809      	ldr	r1, [r1, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6911      	ldr	r1, [r2, #16]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68d2      	ldr	r2, [r2, #12]
 80032ca:	4311      	orrs	r1, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	000186a0 	.word	0x000186a0
 800332c:	001e847f 	.word	0x001e847f
 8003330:	003d08ff 	.word	0x003d08ff
 8003334:	431bde83 	.word	0x431bde83
 8003338:	10624dd3 	.word	0x10624dd3

0800333c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	461a      	mov	r2, r3
 8003348:	460b      	mov	r3, r1
 800334a:	817b      	strh	r3, [r7, #10]
 800334c:	4613      	mov	r3, r2
 800334e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7ff f866 	bl	8002420 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	f040 80e0 	bne.w	8003524 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2319      	movs	r3, #25
 800336a:	2201      	movs	r2, #1
 800336c:	4970      	ldr	r1, [pc, #448]	; (8003530 <HAL_I2C_Master_Transmit+0x1f4>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f964 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	e0d3      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_I2C_Master_Transmit+0x50>
 8003388:	2302      	movs	r3, #2
 800338a:	e0cc      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ea>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d007      	beq.n	80033b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2221      	movs	r2, #33	; 0x21
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2210      	movs	r2, #16
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	893a      	ldrh	r2, [r7, #8]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4a50      	ldr	r2, [pc, #320]	; (8003534 <HAL_I2C_Master_Transmit+0x1f8>)
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033f4:	8979      	ldrh	r1, [r7, #10]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	6a3a      	ldr	r2, [r7, #32]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f89c 	bl	8003538 <I2C_MasterRequestWrite>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e08d      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003420:	e066      	b.n	80034f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	6a39      	ldr	r1, [r7, #32]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f9de 	bl	80037e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b04      	cmp	r3, #4
 8003438:	d107      	bne.n	800344a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e06b      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	781a      	ldrb	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b04      	cmp	r3, #4
 800348a:	d11b      	bne.n	80034c4 <HAL_I2C_Master_Transmit+0x188>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d017      	beq.n	80034c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	6a39      	ldr	r1, [r7, #32]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f9ce 	bl	800386a <I2C_WaitOnBTFFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d107      	bne.n	80034ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e01a      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d194      	bne.n	8003422 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	00100002 	.word	0x00100002
 8003534:	ffff0000 	.word	0xffff0000

08003538 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	460b      	mov	r3, r1
 8003546:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d006      	beq.n	8003562 <I2C_MasterRequestWrite+0x2a>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d003      	beq.n	8003562 <I2C_MasterRequestWrite+0x2a>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003560:	d108      	bne.n	8003574 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e00b      	b.n	800358c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	2b12      	cmp	r3, #18
 800357a:	d107      	bne.n	800358c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800358a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f84f 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b2:	d103      	bne.n	80035bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e035      	b.n	800362c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c8:	d108      	bne.n	80035dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ca:	897b      	ldrh	r3, [r7, #10]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035d8:	611a      	str	r2, [r3, #16]
 80035da:	e01b      	b.n	8003614 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035dc:	897b      	ldrh	r3, [r7, #10]
 80035de:	11db      	asrs	r3, r3, #7
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f003 0306 	and.w	r3, r3, #6
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f063 030f 	orn	r3, r3, #15
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	490e      	ldr	r1, [pc, #56]	; (8003634 <I2C_MasterRequestWrite+0xfc>)
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f875 	bl	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e010      	b.n	800362c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4907      	ldr	r1, [pc, #28]	; (8003638 <I2C_MasterRequestWrite+0x100>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f865 	bl	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	00010008 	.word	0x00010008
 8003638:	00010002 	.word	0x00010002

0800363c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364c:	e025      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d021      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fe fee3 	bl	8002420 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d116      	bne.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e023      	b.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10d      	bne.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	e00c      	b.n	80036da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d0b6      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f8:	e051      	b.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003708:	d123      	bne.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e046      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d021      	beq.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe fe61 	bl	8002420 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e020      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10c      	bne.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e00b      	b.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d18d      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f4:	e02d      	b.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f878 	bl	80038ec <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e02d      	b.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d021      	beq.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fe07 	bl	8002420 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e007      	b.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d1ca      	bne.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003876:	e02d      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f837 	bl	80038ec <I2C_IsAcknowledgeFailed>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e02d      	b.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d021      	beq.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003890:	f7fe fdc6 	bl	8002420 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d302      	bcc.n	80038a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e007      	b.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d1ca      	bne.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003902:	d11b      	bne.n	800393c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800390c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f043 0204 	orr.w	r2, r3, #4
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_PWR_EnterSLEEPMode+0x34>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <HAL_PWR_EnterSLEEPMode+0x34>)
 800395a:	f023 0304 	bic.w	r3, r3, #4
 800395e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003966:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003968:	e002      	b.n	8003970 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800396a:	bf40      	sev
    __WFE();
 800396c:	bf20      	wfe
    __WFE();
 800396e:	bf20      	wfe
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e272      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8087 	beq.w	8003aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039a0:	4b92      	ldr	r3, [pc, #584]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d00c      	beq.n	80039c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039ac:	4b8f      	ldr	r3, [pc, #572]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d112      	bne.n	80039de <HAL_RCC_OscConfig+0x5e>
 80039b8:	4b8c      	ldr	r3, [pc, #560]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d10b      	bne.n	80039de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d06c      	beq.n	8003aac <HAL_RCC_OscConfig+0x12c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d168      	bne.n	8003aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e24c      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x76>
 80039e8:	4b80      	ldr	r3, [pc, #512]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a7f      	ldr	r2, [pc, #508]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	e02e      	b.n	8003a54 <HAL_RCC_OscConfig+0xd4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x98>
 80039fe:	4b7b      	ldr	r3, [pc, #492]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7a      	ldr	r2, [pc, #488]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b78      	ldr	r3, [pc, #480]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a77      	ldr	r2, [pc, #476]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e01d      	b.n	8003a54 <HAL_RCC_OscConfig+0xd4>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0xbc>
 8003a22:	4b72      	ldr	r3, [pc, #456]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a71      	ldr	r2, [pc, #452]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6e      	ldr	r2, [pc, #440]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCC_OscConfig+0xd4>
 8003a3c:	4b6b      	ldr	r3, [pc, #428]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6a      	ldr	r2, [pc, #424]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b68      	ldr	r3, [pc, #416]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a67      	ldr	r2, [pc, #412]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fce0 	bl	8002420 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe fcdc 	bl	8002420 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e200      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b5d      	ldr	r3, [pc, #372]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0xe4>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe fccc 	bl	8002420 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe fcc8 	bl	8002420 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1ec      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x10c>
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d063      	beq.n	8003b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aba:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ac6:	4b49      	ldr	r3, [pc, #292]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d11c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x18c>
 8003ad2:	4b46      	ldr	r3, [pc, #280]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	4b43      	ldr	r3, [pc, #268]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x176>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e1c0      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af6:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4939      	ldr	r1, [pc, #228]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0a:	e03a      	b.n	8003b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b14:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <HAL_RCC_OscConfig+0x270>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fc81 	bl	8002420 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe fc7d 	bl	8002420 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e1a1      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4927      	ldr	r1, [pc, #156]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <HAL_RCC_OscConfig+0x270>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fc60 	bl	8002420 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b64:	f7fe fc5c 	bl	8002420 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e180      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d03a      	beq.n	8003c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d019      	beq.n	8003bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b96:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fc40 	bl	8002420 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba4:	f7fe fc3c 	bl	8002420 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e160      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f000 fad8 	bl	8004178 <RCC_Delay>
 8003bc8:	e01c      	b.n	8003c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd0:	f7fe fc26 	bl	8002420 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd6:	e00f      	b.n	8003bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fe fc22 	bl	8002420 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d908      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e146      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	42420000 	.word	0x42420000
 8003bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	4b92      	ldr	r3, [pc, #584]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e9      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80a6 	beq.w	8003d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c16:	4b8b      	ldr	r3, [pc, #556]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10d      	bne.n	8003c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4a87      	ldr	r2, [pc, #540]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	61d3      	str	r3, [r2, #28]
 8003c2e:	4b85      	ldr	r3, [pc, #532]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	4b82      	ldr	r3, [pc, #520]	; (8003e48 <HAL_RCC_OscConfig+0x4c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d118      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4a:	4b7f      	ldr	r3, [pc, #508]	; (8003e48 <HAL_RCC_OscConfig+0x4c8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a7e      	ldr	r2, [pc, #504]	; (8003e48 <HAL_RCC_OscConfig+0x4c8>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fe fbe3 	bl	8002420 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fe fbdf 	bl	8002420 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b64      	cmp	r3, #100	; 0x64
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e103      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	4b75      	ldr	r3, [pc, #468]	; (8003e48 <HAL_RCC_OscConfig+0x4c8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x312>
 8003c84:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4a6e      	ldr	r2, [pc, #440]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6213      	str	r3, [r2, #32]
 8003c90:	e02d      	b.n	8003cee <HAL_RCC_OscConfig+0x36e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x334>
 8003c9a:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a69      	ldr	r2, [pc, #420]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6213      	str	r3, [r2, #32]
 8003ca6:	4b67      	ldr	r3, [pc, #412]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4a66      	ldr	r2, [pc, #408]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	6213      	str	r3, [r2, #32]
 8003cb2:	e01c      	b.n	8003cee <HAL_RCC_OscConfig+0x36e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	d10c      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x356>
 8003cbc:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a60      	ldr	r2, [pc, #384]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	6213      	str	r3, [r2, #32]
 8003cc8:	4b5e      	ldr	r3, [pc, #376]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4a5d      	ldr	r2, [pc, #372]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6213      	str	r3, [r2, #32]
 8003cd4:	e00b      	b.n	8003cee <HAL_RCC_OscConfig+0x36e>
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a5a      	ldr	r2, [pc, #360]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6213      	str	r3, [r2, #32]
 8003ce2:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a57      	ldr	r2, [pc, #348]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d015      	beq.n	8003d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf6:	f7fe fb93 	bl	8002420 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfe:	f7fe fb8f 	bl	8002420 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0b1      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ee      	beq.n	8003cfe <HAL_RCC_OscConfig+0x37e>
 8003d20:	e014      	b.n	8003d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d22:	f7fe fb7d 	bl	8002420 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fe fb79 	bl	8002420 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e09b      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d40:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ee      	bne.n	8003d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d105      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d52:	4b3c      	ldr	r3, [pc, #240]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8087 	beq.w	8003e76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d68:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d061      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d146      	bne.n	8003e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_RCC_OscConfig+0x4cc>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fe fb4d 	bl	8002420 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fe fb49 	bl	8002420 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e06d      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d108      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	4921      	ldr	r1, [pc, #132]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a19      	ldr	r1, [r3, #32]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	491b      	ldr	r1, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_OscConfig+0x4cc>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fe fb1d 	bl	8002420 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fe fb19 	bl	8002420 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e03d      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x46a>
 8003e08:	e035      	b.n	8003e76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCC_OscConfig+0x4cc>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe fb06 	bl	8002420 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fe fb02 	bl	8002420 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e026      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x498>
 8003e36:	e01e      	b.n	8003e76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e019      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_OscConfig+0x500>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000

08003e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0d0      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d910      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b67      	ldr	r3, [pc, #412]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 0207 	bic.w	r2, r3, #7
 8003eae:	4965      	ldr	r1, [pc, #404]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b8      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4a58      	ldr	r2, [pc, #352]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef8:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a52      	ldr	r2, [pc, #328]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4b50      	ldr	r3, [pc, #320]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	494d      	ldr	r1, [pc, #308]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d040      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d115      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07f      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b41      	ldr	r3, [pc, #260]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e073      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e06b      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b39      	ldr	r3, [pc, #228]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4936      	ldr	r1, [pc, #216]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f74:	f7fe fa54 	bl	8002420 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fe fa50 	bl	8002420 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e053      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d210      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	4922      	ldr	r1, [pc, #136]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e032      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4916      	ldr	r1, [pc, #88]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	490e      	ldr	r1, [pc, #56]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004012:	f000 f821 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8004016:	4602      	mov	r2, r0
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	490a      	ldr	r1, [pc, #40]	; (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	5ccb      	ldrb	r3, [r1, r3]
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x1cc>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1d0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe f9b2 	bl	800239c <HAL_InitTick>

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40022000 	.word	0x40022000
 8004048:	40021000 	.word	0x40021000
 800404c:	08007dc4 	.word	0x08007dc4
 8004050:	20000010 	.word	0x20000010
 8004054:	20000018 	.word	0x20000018

08004058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	b490      	push	{r4, r7}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800405e:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_RCC_GetSysClockFreq+0xac>)
 8004060:	1d3c      	adds	r4, r7, #4
 8004062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004068:	f240 2301 	movw	r3, #513	; 0x201
 800406c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004082:	4b21      	ldr	r3, [pc, #132]	; (8004108 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b04      	cmp	r3, #4
 8004090:	d002      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x40>
 8004092:	2b08      	cmp	r3, #8
 8004094:	d003      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0x46>
 8004096:	e02b      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004098:	4b1c      	ldr	r3, [pc, #112]	; (800410c <HAL_RCC_GetSysClockFreq+0xb4>)
 800409a:	623b      	str	r3, [r7, #32]
      break;
 800409c:	e02b      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	0c9b      	lsrs	r3, r3, #18
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	3328      	adds	r3, #40	; 0x28
 80040a8:	443b      	add	r3, r7
 80040aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d012      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0c5b      	lsrs	r3, r3, #17
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	3328      	adds	r3, #40	; 0x28
 80040c6:	443b      	add	r3, r7
 80040c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_RCC_GetSysClockFreq+0xb4>)
 80040d2:	fb03 f202 	mul.w	r2, r3, r2
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
 80040de:	e004      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e4:	fb02 f303 	mul.w	r3, r2, r3
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	623b      	str	r3, [r7, #32]
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCC_GetSysClockFreq+0xb4>)
 80040f2:	623b      	str	r3, [r7, #32]
      break;
 80040f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f6:	6a3b      	ldr	r3, [r7, #32]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc90      	pop	{r4, r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	08007db4 	.word	0x08007db4
 8004108:	40021000 	.word	0x40021000
 800410c:	007a1200 	.word	0x007a1200
 8004110:	003d0900 	.word	0x003d0900

08004114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b02      	ldr	r3, [pc, #8]	; (8004124 <HAL_RCC_GetHCLKFreq+0x10>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	20000010 	.word	0x20000010

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff2 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	08007dd4 	.word	0x08007dd4

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004154:	f7ff ffde 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	08007dd4 	.word	0x08007dd4

08004178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <RCC_Delay+0x34>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <RCC_Delay+0x38>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004194:	bf00      	nop
  }
  while (Delay --);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e5a      	subs	r2, r3, #1
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f9      	bne.n	8004194 <RCC_Delay+0x1c>
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000010 	.word	0x20000010
 80041b0:	10624dd3 	.word	0x10624dd3

080041b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d07d      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041d0:	2300      	movs	r3, #0
 80041d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d4:	4b4f      	ldr	r3, [pc, #316]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e0:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	4a4b      	ldr	r2, [pc, #300]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ea:	61d3      	str	r3, [r2, #28]
 80041ec:	4b49      	ldr	r3, [pc, #292]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b46      	ldr	r3, [pc, #280]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d118      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004208:	4b43      	ldr	r3, [pc, #268]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a42      	ldr	r2, [pc, #264]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004214:	f7fe f904 	bl	8002420 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	e008      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fe f900 	bl	8002420 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e06d      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004242:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02e      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	429a      	cmp	r2, r3
 8004256:	d027      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004258:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004260:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004262:	4b2e      	ldr	r3, [pc, #184]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004268:	4b2c      	ldr	r3, [pc, #176]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800426e:	4a29      	ldr	r2, [pc, #164]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d014      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fe f8cf 	bl	8002420 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fe f8cb 	bl	8002420 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e036      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ee      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4917      	ldr	r1, [pc, #92]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a13      	ldr	r2, [pc, #76]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	490b      	ldr	r1, [pc, #44]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	4904      	ldr	r1, [pc, #16]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
 800431c:	42420440 	.word	0x42420440

08004320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e041      	b.n	80043b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fdae 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f000 faba 	bl	80048d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d001      	beq.n	80043d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_TIM_Base_Start+0x88>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_TIM_Base_Start+0x48>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f2:	d009      	beq.n	8004408 <HAL_TIM_Base_Start+0x48>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <HAL_TIM_Base_Start+0x8c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_TIM_Base_Start+0x48>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_TIM_Base_Start+0x90>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d111      	bne.n	800442c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d010      	beq.n	800443c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442a:	e007      	b.n	800443c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800

08004454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e03a      	b.n	80044e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_TIM_Base_Start_IT+0x98>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x58>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d009      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x58>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x58>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d111      	bne.n	80044d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	d010      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	e007      	b.n	80044e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800

080044f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d122      	bne.n	8004554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d11b      	bne.n	8004554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0202 	mvn.w	r2, #2
 8004524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9b1 	bl	80048a2 <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9a4 	bl	8004890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9b3 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d122      	bne.n	80045a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d11b      	bne.n	80045a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0204 	mvn.w	r2, #4
 8004578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f987 	bl	80048a2 <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f97a 	bl	8004890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f989 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d122      	bne.n	80045fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d11b      	bne.n	80045fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0208 	mvn.w	r2, #8
 80045cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2204      	movs	r2, #4
 80045d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f95d 	bl	80048a2 <HAL_TIM_IC_CaptureCallback>
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f950 	bl	8004890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f95f 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b10      	cmp	r3, #16
 8004608:	d122      	bne.n	8004650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b10      	cmp	r3, #16
 8004616:	d11b      	bne.n	8004650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0210 	mvn.w	r2, #16
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2208      	movs	r2, #8
 8004626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f933 	bl	80048a2 <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f926 	bl	8004890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f935 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d10e      	bne.n	800467c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0201 	mvn.w	r2, #1
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd fdb4 	bl	80021e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa77 	bl	8004b96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8f9 	bl	80048c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d107      	bne.n	8004700 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0220 	mvn.w	r2, #32
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa42 	bl	8004b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_TIM_ConfigClockSource+0x18>
 800471c:	2302      	movs	r3, #2
 800471e:	e0b3      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x180>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800473e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004746:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004758:	d03e      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0xd0>
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	f200 8087 	bhi.w	8004870 <HAL_TIM_ConfigClockSource+0x168>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	f000 8085 	beq.w	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d87f      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x168>
 8004770:	2b70      	cmp	r3, #112	; 0x70
 8004772:	d01a      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0xa2>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d87b      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x168>
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d050      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x116>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d877      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x168>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d03c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0xf6>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d873      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x168>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d058      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x136>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d86f      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x168>
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d064      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x156>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d86b      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x168>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d060      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x156>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d867      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x168>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d05c      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x156>
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d05a      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047a8:	e062      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6899      	ldr	r1, [r3, #8]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f000 f966 	bl	8004a8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	609a      	str	r2, [r3, #8]
      break;
 80047d6:	e04e      	b.n	8004876 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6899      	ldr	r1, [r3, #8]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f000 f94f 	bl	8004a8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fa:	609a      	str	r2, [r3, #8]
      break;
 80047fc:	e03b      	b.n	8004876 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	461a      	mov	r2, r3
 800480c:	f000 f8c6 	bl	800499c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2150      	movs	r1, #80	; 0x50
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f91d 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 800481c:	e02b      	b.n	8004876 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	461a      	mov	r2, r3
 800482c:	f000 f8e4 	bl	80049f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2160      	movs	r1, #96	; 0x60
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f90d 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 800483c:	e01b      	b.n	8004876 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	461a      	mov	r2, r3
 800484c:	f000 f8a6 	bl	800499c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2140      	movs	r1, #64	; 0x40
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f8fd 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 800485c:	e00b      	b.n	8004876 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 f8f4 	bl	8004a56 <TIM_ITRx_SetConfig>
        break;
 800486e:	e002      	b.n	8004876 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004870:	bf00      	nop
 8004872:	e000      	b.n	8004876 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004874:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a29      	ldr	r2, [pc, #164]	; (8004990 <TIM_Base_SetConfig+0xb8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_Base_SetConfig+0x30>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f6:	d007      	beq.n	8004908 <TIM_Base_SetConfig+0x30>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a26      	ldr	r2, [pc, #152]	; (8004994 <TIM_Base_SetConfig+0xbc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_Base_SetConfig+0x30>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a25      	ldr	r2, [pc, #148]	; (8004998 <TIM_Base_SetConfig+0xc0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d108      	bne.n	800491a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <TIM_Base_SetConfig+0xb8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_Base_SetConfig+0x62>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d007      	beq.n	800493a <TIM_Base_SetConfig+0x62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <TIM_Base_SetConfig+0xbc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_Base_SetConfig+0x62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <TIM_Base_SetConfig+0xc0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d108      	bne.n	800494c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a07      	ldr	r2, [pc, #28]	; (8004990 <TIM_Base_SetConfig+0xb8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800

0800499c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f023 0201 	bic.w	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 030a 	bic.w	r3, r3, #10
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f023 0210 	bic.w	r2, r3, #16
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	031b      	lsls	r3, r3, #12
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f043 0307 	orr.w	r3, r3, #7
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b087      	sub	sp, #28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	021a      	lsls	r2, r3, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	609a      	str	r2, [r3, #8]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e046      	b.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2c:	d009      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a10      	ldr	r2, [pc, #64]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10c      	bne.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800

08004b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e03f      	b.n	8004c3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fd f9a2 	bl	8001f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2224      	movs	r2, #36	; 0x24
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f905 	bl	8004dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b08a      	sub	sp, #40	; 0x28
 8004c46:	af02      	add	r7, sp, #8
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d17c      	bne.n	8004d5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_UART_Transmit+0x2c>
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e075      	b.n	8004d5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_UART_Transmit+0x3e>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e06e      	b.n	8004d5e <HAL_UART_Transmit+0x11c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2221      	movs	r2, #33	; 0x21
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c96:	f7fd fbc3 	bl	8002420 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	88fa      	ldrh	r2, [r7, #6]
 8004ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	88fa      	ldrh	r2, [r7, #6]
 8004ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb0:	d108      	bne.n	8004cc4 <HAL_UART_Transmit+0x82>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d104      	bne.n	8004cc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	e003      	b.n	8004ccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cd4:	e02a      	b.n	8004d2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2180      	movs	r1, #128	; 0x80
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f840 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e036      	b.n	8004d5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10b      	bne.n	8004d0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	3302      	adds	r3, #2
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	e007      	b.n	8004d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1cf      	bne.n	8004cd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2140      	movs	r1, #64	; 0x40
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f810 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e006      	b.n	8004d5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e000      	b.n	8004d5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
  }
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d76:	e02c      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d028      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d86:	f7fd fb4b 	bl	8002420 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d21d      	bcs.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004da4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e00f      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	bf0c      	ite	eq
 8004de2:	2301      	moveq	r3, #1
 8004de4:	2300      	movne	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d0c3      	beq.n	8004d78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e36:	f023 030c 	bic.w	r3, r3, #12
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <UART_SetConfig+0x114>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7ff f974 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	e002      	b.n	8004e72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f7ff f95c 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8004e70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009a      	lsls	r2, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <UART_SetConfig+0x118>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	0119      	lsls	r1, r3, #4
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009a      	lsls	r2, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <UART_SetConfig+0x118>)
 8004eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2064      	movs	r0, #100	; 0x64
 8004eb2:	fb00 f303 	mul.w	r3, r0, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	3332      	adds	r3, #50	; 0x32
 8004ebc:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <UART_SetConfig+0x118>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec8:	4419      	add	r1, r3
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009a      	lsls	r2, r3, #2
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <UART_SetConfig+0x118>)
 8004ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	2064      	movs	r0, #100	; 0x64
 8004eea:	fb00 f303 	mul.w	r3, r0, r3
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	3332      	adds	r3, #50	; 0x32
 8004ef4:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <UART_SetConfig+0x118>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f003 020f 	and.w	r2, r3, #15
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	440a      	add	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40013800 	.word	0x40013800
 8004f14:	51eb851f 	.word	0x51eb851f

08004f18 <__errno>:
 8004f18:	4b01      	ldr	r3, [pc, #4]	; (8004f20 <__errno+0x8>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000020 	.word	0x20000020

08004f24 <__libc_init_array>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	2600      	movs	r6, #0
 8004f28:	4d0c      	ldr	r5, [pc, #48]	; (8004f5c <__libc_init_array+0x38>)
 8004f2a:	4c0d      	ldr	r4, [pc, #52]	; (8004f60 <__libc_init_array+0x3c>)
 8004f2c:	1b64      	subs	r4, r4, r5
 8004f2e:	10a4      	asrs	r4, r4, #2
 8004f30:	42a6      	cmp	r6, r4
 8004f32:	d109      	bne.n	8004f48 <__libc_init_array+0x24>
 8004f34:	f002 ff04 	bl	8007d40 <_init>
 8004f38:	2600      	movs	r6, #0
 8004f3a:	4d0a      	ldr	r5, [pc, #40]	; (8004f64 <__libc_init_array+0x40>)
 8004f3c:	4c0a      	ldr	r4, [pc, #40]	; (8004f68 <__libc_init_array+0x44>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	42a6      	cmp	r6, r4
 8004f44:	d105      	bne.n	8004f52 <__libc_init_array+0x2e>
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
 8004f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4c:	4798      	blx	r3
 8004f4e:	3601      	adds	r6, #1
 8004f50:	e7ee      	b.n	8004f30 <__libc_init_array+0xc>
 8004f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f56:	4798      	blx	r3
 8004f58:	3601      	adds	r6, #1
 8004f5a:	e7f2      	b.n	8004f42 <__libc_init_array+0x1e>
 8004f5c:	080081b4 	.word	0x080081b4
 8004f60:	080081b4 	.word	0x080081b4
 8004f64:	080081b4 	.word	0x080081b4
 8004f68:	080081b8 	.word	0x080081b8

08004f6c <malloc>:
 8004f6c:	4b02      	ldr	r3, [pc, #8]	; (8004f78 <malloc+0xc>)
 8004f6e:	4601      	mov	r1, r0
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	f000 b87b 	b.w	800506c <_malloc_r>
 8004f76:	bf00      	nop
 8004f78:	20000020 	.word	0x20000020

08004f7c <free>:
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <free+0xc>)
 8004f7e:	4601      	mov	r1, r0
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	f000 b80b 	b.w	8004f9c <_free_r>
 8004f86:	bf00      	nop
 8004f88:	20000020 	.word	0x20000020

08004f8c <memset>:
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	4402      	add	r2, r0
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d100      	bne.n	8004f96 <memset+0xa>
 8004f94:	4770      	bx	lr
 8004f96:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9a:	e7f9      	b.n	8004f90 <memset+0x4>

08004f9c <_free_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d040      	beq.n	8005026 <_free_r+0x8a>
 8004fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa8:	1f0c      	subs	r4, r1, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfb8      	it	lt
 8004fae:	18e4      	addlt	r4, r4, r3
 8004fb0:	f001 fbfc 	bl	80067ac <__malloc_lock>
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <_free_r+0x8c>)
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	b933      	cbnz	r3, 8004fc8 <_free_r+0x2c>
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	6014      	str	r4, [r2, #0]
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fc4:	f001 bbf8 	b.w	80067b8 <__malloc_unlock>
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	d908      	bls.n	8004fde <_free_r+0x42>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	1821      	adds	r1, r4, r0
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	bf01      	itttt	eq
 8004fd4:	6819      	ldreq	r1, [r3, #0]
 8004fd6:	685b      	ldreq	r3, [r3, #4]
 8004fd8:	1809      	addeq	r1, r1, r0
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	e7ed      	b.n	8004fba <_free_r+0x1e>
 8004fde:	461a      	mov	r2, r3
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b10b      	cbz	r3, 8004fe8 <_free_r+0x4c>
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d9fa      	bls.n	8004fde <_free_r+0x42>
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	1850      	adds	r0, r2, r1
 8004fec:	42a0      	cmp	r0, r4
 8004fee:	d10b      	bne.n	8005008 <_free_r+0x6c>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	4401      	add	r1, r0
 8004ff4:	1850      	adds	r0, r2, r1
 8004ff6:	4283      	cmp	r3, r0
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	d1e0      	bne.n	8004fbe <_free_r+0x22>
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4401      	add	r1, r0
 8005002:	6011      	str	r1, [r2, #0]
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	e7da      	b.n	8004fbe <_free_r+0x22>
 8005008:	d902      	bls.n	8005010 <_free_r+0x74>
 800500a:	230c      	movs	r3, #12
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	e7d6      	b.n	8004fbe <_free_r+0x22>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	1821      	adds	r1, r4, r0
 8005014:	428b      	cmp	r3, r1
 8005016:	bf01      	itttt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	1809      	addeq	r1, r1, r0
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	6054      	str	r4, [r2, #4]
 8005024:	e7cb      	b.n	8004fbe <_free_r+0x22>
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	200004a8 	.word	0x200004a8

0800502c <sbrk_aligned>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4e0e      	ldr	r6, [pc, #56]	; (8005068 <sbrk_aligned+0x3c>)
 8005030:	460c      	mov	r4, r1
 8005032:	6831      	ldr	r1, [r6, #0]
 8005034:	4605      	mov	r5, r0
 8005036:	b911      	cbnz	r1, 800503e <sbrk_aligned+0x12>
 8005038:	f000 fcec 	bl	8005a14 <_sbrk_r>
 800503c:	6030      	str	r0, [r6, #0]
 800503e:	4621      	mov	r1, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fce7 	bl	8005a14 <_sbrk_r>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d00a      	beq.n	8005060 <sbrk_aligned+0x34>
 800504a:	1cc4      	adds	r4, r0, #3
 800504c:	f024 0403 	bic.w	r4, r4, #3
 8005050:	42a0      	cmp	r0, r4
 8005052:	d007      	beq.n	8005064 <sbrk_aligned+0x38>
 8005054:	1a21      	subs	r1, r4, r0
 8005056:	4628      	mov	r0, r5
 8005058:	f000 fcdc 	bl	8005a14 <_sbrk_r>
 800505c:	3001      	adds	r0, #1
 800505e:	d101      	bne.n	8005064 <sbrk_aligned+0x38>
 8005060:	f04f 34ff 	mov.w	r4, #4294967295
 8005064:	4620      	mov	r0, r4
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	200004ac 	.word	0x200004ac

0800506c <_malloc_r>:
 800506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005070:	1ccd      	adds	r5, r1, #3
 8005072:	f025 0503 	bic.w	r5, r5, #3
 8005076:	3508      	adds	r5, #8
 8005078:	2d0c      	cmp	r5, #12
 800507a:	bf38      	it	cc
 800507c:	250c      	movcc	r5, #12
 800507e:	2d00      	cmp	r5, #0
 8005080:	4607      	mov	r7, r0
 8005082:	db01      	blt.n	8005088 <_malloc_r+0x1c>
 8005084:	42a9      	cmp	r1, r5
 8005086:	d905      	bls.n	8005094 <_malloc_r+0x28>
 8005088:	230c      	movs	r3, #12
 800508a:	2600      	movs	r6, #0
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4630      	mov	r0, r6
 8005090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005094:	4e2e      	ldr	r6, [pc, #184]	; (8005150 <_malloc_r+0xe4>)
 8005096:	f001 fb89 	bl	80067ac <__malloc_lock>
 800509a:	6833      	ldr	r3, [r6, #0]
 800509c:	461c      	mov	r4, r3
 800509e:	bb34      	cbnz	r4, 80050ee <_malloc_r+0x82>
 80050a0:	4629      	mov	r1, r5
 80050a2:	4638      	mov	r0, r7
 80050a4:	f7ff ffc2 	bl	800502c <sbrk_aligned>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	4604      	mov	r4, r0
 80050ac:	d14d      	bne.n	800514a <_malloc_r+0xde>
 80050ae:	6834      	ldr	r4, [r6, #0]
 80050b0:	4626      	mov	r6, r4
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	d140      	bne.n	8005138 <_malloc_r+0xcc>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	4631      	mov	r1, r6
 80050ba:	4638      	mov	r0, r7
 80050bc:	eb04 0803 	add.w	r8, r4, r3
 80050c0:	f000 fca8 	bl	8005a14 <_sbrk_r>
 80050c4:	4580      	cmp	r8, r0
 80050c6:	d13a      	bne.n	800513e <_malloc_r+0xd2>
 80050c8:	6821      	ldr	r1, [r4, #0]
 80050ca:	3503      	adds	r5, #3
 80050cc:	1a6d      	subs	r5, r5, r1
 80050ce:	f025 0503 	bic.w	r5, r5, #3
 80050d2:	3508      	adds	r5, #8
 80050d4:	2d0c      	cmp	r5, #12
 80050d6:	bf38      	it	cc
 80050d8:	250c      	movcc	r5, #12
 80050da:	4638      	mov	r0, r7
 80050dc:	4629      	mov	r1, r5
 80050de:	f7ff ffa5 	bl	800502c <sbrk_aligned>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d02b      	beq.n	800513e <_malloc_r+0xd2>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	442b      	add	r3, r5
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	e00e      	b.n	800510c <_malloc_r+0xa0>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	1b52      	subs	r2, r2, r5
 80050f2:	d41e      	bmi.n	8005132 <_malloc_r+0xc6>
 80050f4:	2a0b      	cmp	r2, #11
 80050f6:	d916      	bls.n	8005126 <_malloc_r+0xba>
 80050f8:	1961      	adds	r1, r4, r5
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	6025      	str	r5, [r4, #0]
 80050fe:	bf18      	it	ne
 8005100:	6059      	strne	r1, [r3, #4]
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	bf08      	it	eq
 8005106:	6031      	streq	r1, [r6, #0]
 8005108:	5162      	str	r2, [r4, r5]
 800510a:	604b      	str	r3, [r1, #4]
 800510c:	4638      	mov	r0, r7
 800510e:	f104 060b 	add.w	r6, r4, #11
 8005112:	f001 fb51 	bl	80067b8 <__malloc_unlock>
 8005116:	f026 0607 	bic.w	r6, r6, #7
 800511a:	1d23      	adds	r3, r4, #4
 800511c:	1af2      	subs	r2, r6, r3
 800511e:	d0b6      	beq.n	800508e <_malloc_r+0x22>
 8005120:	1b9b      	subs	r3, r3, r6
 8005122:	50a3      	str	r3, [r4, r2]
 8005124:	e7b3      	b.n	800508e <_malloc_r+0x22>
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	42a3      	cmp	r3, r4
 800512a:	bf0c      	ite	eq
 800512c:	6032      	streq	r2, [r6, #0]
 800512e:	605a      	strne	r2, [r3, #4]
 8005130:	e7ec      	b.n	800510c <_malloc_r+0xa0>
 8005132:	4623      	mov	r3, r4
 8005134:	6864      	ldr	r4, [r4, #4]
 8005136:	e7b2      	b.n	800509e <_malloc_r+0x32>
 8005138:	4634      	mov	r4, r6
 800513a:	6876      	ldr	r6, [r6, #4]
 800513c:	e7b9      	b.n	80050b2 <_malloc_r+0x46>
 800513e:	230c      	movs	r3, #12
 8005140:	4638      	mov	r0, r7
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	f001 fb38 	bl	80067b8 <__malloc_unlock>
 8005148:	e7a1      	b.n	800508e <_malloc_r+0x22>
 800514a:	6025      	str	r5, [r4, #0]
 800514c:	e7de      	b.n	800510c <_malloc_r+0xa0>
 800514e:	bf00      	nop
 8005150:	200004a8 	.word	0x200004a8

08005154 <__cvt>:
 8005154:	2b00      	cmp	r3, #0
 8005156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800515a:	461f      	mov	r7, r3
 800515c:	bfbb      	ittet	lt
 800515e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005162:	461f      	movlt	r7, r3
 8005164:	2300      	movge	r3, #0
 8005166:	232d      	movlt	r3, #45	; 0x2d
 8005168:	b088      	sub	sp, #32
 800516a:	4614      	mov	r4, r2
 800516c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800516e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005170:	7013      	strb	r3, [r2, #0]
 8005172:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005174:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005178:	f023 0820 	bic.w	r8, r3, #32
 800517c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005180:	d005      	beq.n	800518e <__cvt+0x3a>
 8005182:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005186:	d100      	bne.n	800518a <__cvt+0x36>
 8005188:	3501      	adds	r5, #1
 800518a:	2302      	movs	r3, #2
 800518c:	e000      	b.n	8005190 <__cvt+0x3c>
 800518e:	2303      	movs	r3, #3
 8005190:	aa07      	add	r2, sp, #28
 8005192:	9204      	str	r2, [sp, #16]
 8005194:	aa06      	add	r2, sp, #24
 8005196:	e9cd a202 	strd	sl, r2, [sp, #8]
 800519a:	e9cd 3500 	strd	r3, r5, [sp]
 800519e:	4622      	mov	r2, r4
 80051a0:	463b      	mov	r3, r7
 80051a2:	f000 fcf5 	bl	8005b90 <_dtoa_r>
 80051a6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051aa:	4606      	mov	r6, r0
 80051ac:	d102      	bne.n	80051b4 <__cvt+0x60>
 80051ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051b0:	07db      	lsls	r3, r3, #31
 80051b2:	d522      	bpl.n	80051fa <__cvt+0xa6>
 80051b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051b8:	eb06 0905 	add.w	r9, r6, r5
 80051bc:	d110      	bne.n	80051e0 <__cvt+0x8c>
 80051be:	7833      	ldrb	r3, [r6, #0]
 80051c0:	2b30      	cmp	r3, #48	; 0x30
 80051c2:	d10a      	bne.n	80051da <__cvt+0x86>
 80051c4:	2200      	movs	r2, #0
 80051c6:	2300      	movs	r3, #0
 80051c8:	4620      	mov	r0, r4
 80051ca:	4639      	mov	r1, r7
 80051cc:	f7fb fbec 	bl	80009a8 <__aeabi_dcmpeq>
 80051d0:	b918      	cbnz	r0, 80051da <__cvt+0x86>
 80051d2:	f1c5 0501 	rsb	r5, r5, #1
 80051d6:	f8ca 5000 	str.w	r5, [sl]
 80051da:	f8da 3000 	ldr.w	r3, [sl]
 80051de:	4499      	add	r9, r3
 80051e0:	2200      	movs	r2, #0
 80051e2:	2300      	movs	r3, #0
 80051e4:	4620      	mov	r0, r4
 80051e6:	4639      	mov	r1, r7
 80051e8:	f7fb fbde 	bl	80009a8 <__aeabi_dcmpeq>
 80051ec:	b108      	cbz	r0, 80051f2 <__cvt+0x9e>
 80051ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80051f2:	2230      	movs	r2, #48	; 0x30
 80051f4:	9b07      	ldr	r3, [sp, #28]
 80051f6:	454b      	cmp	r3, r9
 80051f8:	d307      	bcc.n	800520a <__cvt+0xb6>
 80051fa:	4630      	mov	r0, r6
 80051fc:	9b07      	ldr	r3, [sp, #28]
 80051fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005200:	1b9b      	subs	r3, r3, r6
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	b008      	add	sp, #32
 8005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520a:	1c59      	adds	r1, r3, #1
 800520c:	9107      	str	r1, [sp, #28]
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e7f0      	b.n	80051f4 <__cvt+0xa0>

08005212 <__exponent>:
 8005212:	4603      	mov	r3, r0
 8005214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005216:	2900      	cmp	r1, #0
 8005218:	f803 2b02 	strb.w	r2, [r3], #2
 800521c:	bfb6      	itet	lt
 800521e:	222d      	movlt	r2, #45	; 0x2d
 8005220:	222b      	movge	r2, #43	; 0x2b
 8005222:	4249      	neglt	r1, r1
 8005224:	2909      	cmp	r1, #9
 8005226:	7042      	strb	r2, [r0, #1]
 8005228:	dd2b      	ble.n	8005282 <__exponent+0x70>
 800522a:	f10d 0407 	add.w	r4, sp, #7
 800522e:	46a4      	mov	ip, r4
 8005230:	270a      	movs	r7, #10
 8005232:	fb91 f6f7 	sdiv	r6, r1, r7
 8005236:	460a      	mov	r2, r1
 8005238:	46a6      	mov	lr, r4
 800523a:	fb07 1516 	mls	r5, r7, r6, r1
 800523e:	2a63      	cmp	r2, #99	; 0x63
 8005240:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005244:	4631      	mov	r1, r6
 8005246:	f104 34ff 	add.w	r4, r4, #4294967295
 800524a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800524e:	dcf0      	bgt.n	8005232 <__exponent+0x20>
 8005250:	3130      	adds	r1, #48	; 0x30
 8005252:	f1ae 0502 	sub.w	r5, lr, #2
 8005256:	f804 1c01 	strb.w	r1, [r4, #-1]
 800525a:	4629      	mov	r1, r5
 800525c:	1c44      	adds	r4, r0, #1
 800525e:	4561      	cmp	r1, ip
 8005260:	d30a      	bcc.n	8005278 <__exponent+0x66>
 8005262:	f10d 0209 	add.w	r2, sp, #9
 8005266:	eba2 020e 	sub.w	r2, r2, lr
 800526a:	4565      	cmp	r5, ip
 800526c:	bf88      	it	hi
 800526e:	2200      	movhi	r2, #0
 8005270:	4413      	add	r3, r2
 8005272:	1a18      	subs	r0, r3, r0
 8005274:	b003      	add	sp, #12
 8005276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005278:	f811 2b01 	ldrb.w	r2, [r1], #1
 800527c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005280:	e7ed      	b.n	800525e <__exponent+0x4c>
 8005282:	2330      	movs	r3, #48	; 0x30
 8005284:	3130      	adds	r1, #48	; 0x30
 8005286:	7083      	strb	r3, [r0, #2]
 8005288:	70c1      	strb	r1, [r0, #3]
 800528a:	1d03      	adds	r3, r0, #4
 800528c:	e7f1      	b.n	8005272 <__exponent+0x60>
	...

08005290 <_printf_float>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	b091      	sub	sp, #68	; 0x44
 8005296:	460c      	mov	r4, r1
 8005298:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800529c:	4616      	mov	r6, r2
 800529e:	461f      	mov	r7, r3
 80052a0:	4605      	mov	r5, r0
 80052a2:	f001 fa63 	bl	800676c <_localeconv_r>
 80052a6:	6803      	ldr	r3, [r0, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	9309      	str	r3, [sp, #36]	; 0x24
 80052ac:	f7fa ff50 	bl	8000150 <strlen>
 80052b0:	2300      	movs	r3, #0
 80052b2:	930e      	str	r3, [sp, #56]	; 0x38
 80052b4:	f8d8 3000 	ldr.w	r3, [r8]
 80052b8:	900a      	str	r0, [sp, #40]	; 0x28
 80052ba:	3307      	adds	r3, #7
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	f103 0208 	add.w	r2, r3, #8
 80052c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80052c8:	f8d4 b000 	ldr.w	fp, [r4]
 80052cc:	f8c8 2000 	str.w	r2, [r8]
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052d8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80052dc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80052e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80052e2:	f04f 32ff 	mov.w	r2, #4294967295
 80052e6:	4640      	mov	r0, r8
 80052e8:	4b9c      	ldr	r3, [pc, #624]	; (800555c <_printf_float+0x2cc>)
 80052ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052ec:	f7fb fb8e 	bl	8000a0c <__aeabi_dcmpun>
 80052f0:	bb70      	cbnz	r0, 8005350 <_printf_float+0xc0>
 80052f2:	f04f 32ff 	mov.w	r2, #4294967295
 80052f6:	4640      	mov	r0, r8
 80052f8:	4b98      	ldr	r3, [pc, #608]	; (800555c <_printf_float+0x2cc>)
 80052fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052fc:	f7fb fb68 	bl	80009d0 <__aeabi_dcmple>
 8005300:	bb30      	cbnz	r0, 8005350 <_printf_float+0xc0>
 8005302:	2200      	movs	r2, #0
 8005304:	2300      	movs	r3, #0
 8005306:	4640      	mov	r0, r8
 8005308:	4651      	mov	r1, sl
 800530a:	f7fb fb57 	bl	80009bc <__aeabi_dcmplt>
 800530e:	b110      	cbz	r0, 8005316 <_printf_float+0x86>
 8005310:	232d      	movs	r3, #45	; 0x2d
 8005312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005316:	4b92      	ldr	r3, [pc, #584]	; (8005560 <_printf_float+0x2d0>)
 8005318:	4892      	ldr	r0, [pc, #584]	; (8005564 <_printf_float+0x2d4>)
 800531a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800531e:	bf94      	ite	ls
 8005320:	4698      	movls	r8, r3
 8005322:	4680      	movhi	r8, r0
 8005324:	2303      	movs	r3, #3
 8005326:	f04f 0a00 	mov.w	sl, #0
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	f02b 0304 	bic.w	r3, fp, #4
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	4633      	mov	r3, r6
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	9700      	str	r7, [sp, #0]
 800533a:	aa0f      	add	r2, sp, #60	; 0x3c
 800533c:	f000 f9d4 	bl	80056e8 <_printf_common>
 8005340:	3001      	adds	r0, #1
 8005342:	f040 8090 	bne.w	8005466 <_printf_float+0x1d6>
 8005346:	f04f 30ff 	mov.w	r0, #4294967295
 800534a:	b011      	add	sp, #68	; 0x44
 800534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005350:	4642      	mov	r2, r8
 8005352:	4653      	mov	r3, sl
 8005354:	4640      	mov	r0, r8
 8005356:	4651      	mov	r1, sl
 8005358:	f7fb fb58 	bl	8000a0c <__aeabi_dcmpun>
 800535c:	b148      	cbz	r0, 8005372 <_printf_float+0xe2>
 800535e:	f1ba 0f00 	cmp.w	sl, #0
 8005362:	bfb8      	it	lt
 8005364:	232d      	movlt	r3, #45	; 0x2d
 8005366:	4880      	ldr	r0, [pc, #512]	; (8005568 <_printf_float+0x2d8>)
 8005368:	bfb8      	it	lt
 800536a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800536e:	4b7f      	ldr	r3, [pc, #508]	; (800556c <_printf_float+0x2dc>)
 8005370:	e7d3      	b.n	800531a <_printf_float+0x8a>
 8005372:	6863      	ldr	r3, [r4, #4]
 8005374:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	d142      	bne.n	8005402 <_printf_float+0x172>
 800537c:	2306      	movs	r3, #6
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	9206      	str	r2, [sp, #24]
 8005384:	aa0e      	add	r2, sp, #56	; 0x38
 8005386:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800538a:	aa0d      	add	r2, sp, #52	; 0x34
 800538c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005390:	9203      	str	r2, [sp, #12]
 8005392:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005396:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	4642      	mov	r2, r8
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4628      	mov	r0, r5
 80053a4:	4653      	mov	r3, sl
 80053a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80053a8:	f7ff fed4 	bl	8005154 <__cvt>
 80053ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ae:	4680      	mov	r8, r0
 80053b0:	2947      	cmp	r1, #71	; 0x47
 80053b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053b4:	d108      	bne.n	80053c8 <_printf_float+0x138>
 80053b6:	1cc8      	adds	r0, r1, #3
 80053b8:	db02      	blt.n	80053c0 <_printf_float+0x130>
 80053ba:	6863      	ldr	r3, [r4, #4]
 80053bc:	4299      	cmp	r1, r3
 80053be:	dd40      	ble.n	8005442 <_printf_float+0x1b2>
 80053c0:	f1a9 0902 	sub.w	r9, r9, #2
 80053c4:	fa5f f989 	uxtb.w	r9, r9
 80053c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053cc:	d81f      	bhi.n	800540e <_printf_float+0x17e>
 80053ce:	464a      	mov	r2, r9
 80053d0:	3901      	subs	r1, #1
 80053d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053d6:	910d      	str	r1, [sp, #52]	; 0x34
 80053d8:	f7ff ff1b 	bl	8005212 <__exponent>
 80053dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053de:	4682      	mov	sl, r0
 80053e0:	1813      	adds	r3, r2, r0
 80053e2:	2a01      	cmp	r2, #1
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	dc02      	bgt.n	80053ee <_printf_float+0x15e>
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	07d2      	lsls	r2, r2, #31
 80053ec:	d501      	bpl.n	80053f2 <_printf_float+0x162>
 80053ee:	3301      	adds	r3, #1
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d09b      	beq.n	8005332 <_printf_float+0xa2>
 80053fa:	232d      	movs	r3, #45	; 0x2d
 80053fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005400:	e797      	b.n	8005332 <_printf_float+0xa2>
 8005402:	2947      	cmp	r1, #71	; 0x47
 8005404:	d1bc      	bne.n	8005380 <_printf_float+0xf0>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ba      	bne.n	8005380 <_printf_float+0xf0>
 800540a:	2301      	movs	r3, #1
 800540c:	e7b7      	b.n	800537e <_printf_float+0xee>
 800540e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005412:	d118      	bne.n	8005446 <_printf_float+0x1b6>
 8005414:	2900      	cmp	r1, #0
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	dd0b      	ble.n	8005432 <_printf_float+0x1a2>
 800541a:	6121      	str	r1, [r4, #16]
 800541c:	b913      	cbnz	r3, 8005424 <_printf_float+0x194>
 800541e:	6822      	ldr	r2, [r4, #0]
 8005420:	07d0      	lsls	r0, r2, #31
 8005422:	d502      	bpl.n	800542a <_printf_float+0x19a>
 8005424:	3301      	adds	r3, #1
 8005426:	440b      	add	r3, r1
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	f04f 0a00 	mov.w	sl, #0
 800542e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005430:	e7df      	b.n	80053f2 <_printf_float+0x162>
 8005432:	b913      	cbnz	r3, 800543a <_printf_float+0x1aa>
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	07d2      	lsls	r2, r2, #31
 8005438:	d501      	bpl.n	800543e <_printf_float+0x1ae>
 800543a:	3302      	adds	r3, #2
 800543c:	e7f4      	b.n	8005428 <_printf_float+0x198>
 800543e:	2301      	movs	r3, #1
 8005440:	e7f2      	b.n	8005428 <_printf_float+0x198>
 8005442:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005448:	4299      	cmp	r1, r3
 800544a:	db05      	blt.n	8005458 <_printf_float+0x1c8>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	6121      	str	r1, [r4, #16]
 8005450:	07d8      	lsls	r0, r3, #31
 8005452:	d5ea      	bpl.n	800542a <_printf_float+0x19a>
 8005454:	1c4b      	adds	r3, r1, #1
 8005456:	e7e7      	b.n	8005428 <_printf_float+0x198>
 8005458:	2900      	cmp	r1, #0
 800545a:	bfcc      	ite	gt
 800545c:	2201      	movgt	r2, #1
 800545e:	f1c1 0202 	rsble	r2, r1, #2
 8005462:	4413      	add	r3, r2
 8005464:	e7e0      	b.n	8005428 <_printf_float+0x198>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	055a      	lsls	r2, r3, #21
 800546a:	d407      	bmi.n	800547c <_printf_float+0x1ec>
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	4642      	mov	r2, r8
 8005470:	4631      	mov	r1, r6
 8005472:	4628      	mov	r0, r5
 8005474:	47b8      	blx	r7
 8005476:	3001      	adds	r0, #1
 8005478:	d12b      	bne.n	80054d2 <_printf_float+0x242>
 800547a:	e764      	b.n	8005346 <_printf_float+0xb6>
 800547c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005480:	f240 80dd 	bls.w	800563e <_printf_float+0x3ae>
 8005484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005488:	2200      	movs	r2, #0
 800548a:	2300      	movs	r3, #0
 800548c:	f7fb fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 8005490:	2800      	cmp	r0, #0
 8005492:	d033      	beq.n	80054fc <_printf_float+0x26c>
 8005494:	2301      	movs	r3, #1
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	4a35      	ldr	r2, [pc, #212]	; (8005570 <_printf_float+0x2e0>)
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f af51 	beq.w	8005346 <_printf_float+0xb6>
 80054a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054a8:	429a      	cmp	r2, r3
 80054aa:	db02      	blt.n	80054b2 <_printf_float+0x222>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	07d8      	lsls	r0, r3, #31
 80054b0:	d50f      	bpl.n	80054d2 <_printf_float+0x242>
 80054b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b6:	4631      	mov	r1, r6
 80054b8:	4628      	mov	r0, r5
 80054ba:	47b8      	blx	r7
 80054bc:	3001      	adds	r0, #1
 80054be:	f43f af42 	beq.w	8005346 <_printf_float+0xb6>
 80054c2:	f04f 0800 	mov.w	r8, #0
 80054c6:	f104 091a 	add.w	r9, r4, #26
 80054ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054cc:	3b01      	subs	r3, #1
 80054ce:	4543      	cmp	r3, r8
 80054d0:	dc09      	bgt.n	80054e6 <_printf_float+0x256>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	079b      	lsls	r3, r3, #30
 80054d6:	f100 8102 	bmi.w	80056de <_printf_float+0x44e>
 80054da:	68e0      	ldr	r0, [r4, #12]
 80054dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054de:	4298      	cmp	r0, r3
 80054e0:	bfb8      	it	lt
 80054e2:	4618      	movlt	r0, r3
 80054e4:	e731      	b.n	800534a <_printf_float+0xba>
 80054e6:	2301      	movs	r3, #1
 80054e8:	464a      	mov	r2, r9
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f af28 	beq.w	8005346 <_printf_float+0xb6>
 80054f6:	f108 0801 	add.w	r8, r8, #1
 80054fa:	e7e6      	b.n	80054ca <_printf_float+0x23a>
 80054fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	dc38      	bgt.n	8005574 <_printf_float+0x2e4>
 8005502:	2301      	movs	r3, #1
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <_printf_float+0x2e0>)
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f af1a 	beq.w	8005346 <_printf_float+0xb6>
 8005512:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005516:	4313      	orrs	r3, r2
 8005518:	d102      	bne.n	8005520 <_printf_float+0x290>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	07d9      	lsls	r1, r3, #31
 800551e:	d5d8      	bpl.n	80054d2 <_printf_float+0x242>
 8005520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005524:	4631      	mov	r1, r6
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	f43f af0b 	beq.w	8005346 <_printf_float+0xb6>
 8005530:	f04f 0900 	mov.w	r9, #0
 8005534:	f104 0a1a 	add.w	sl, r4, #26
 8005538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800553a:	425b      	negs	r3, r3
 800553c:	454b      	cmp	r3, r9
 800553e:	dc01      	bgt.n	8005544 <_printf_float+0x2b4>
 8005540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005542:	e794      	b.n	800546e <_printf_float+0x1de>
 8005544:	2301      	movs	r3, #1
 8005546:	4652      	mov	r2, sl
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f aef9 	beq.w	8005346 <_printf_float+0xb6>
 8005554:	f109 0901 	add.w	r9, r9, #1
 8005558:	e7ee      	b.n	8005538 <_printf_float+0x2a8>
 800555a:	bf00      	nop
 800555c:	7fefffff 	.word	0x7fefffff
 8005560:	08007de0 	.word	0x08007de0
 8005564:	08007de4 	.word	0x08007de4
 8005568:	08007dec 	.word	0x08007dec
 800556c:	08007de8 	.word	0x08007de8
 8005570:	08007df0 	.word	0x08007df0
 8005574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005578:	429a      	cmp	r2, r3
 800557a:	bfa8      	it	ge
 800557c:	461a      	movge	r2, r3
 800557e:	2a00      	cmp	r2, #0
 8005580:	4691      	mov	r9, r2
 8005582:	dc37      	bgt.n	80055f4 <_printf_float+0x364>
 8005584:	f04f 0b00 	mov.w	fp, #0
 8005588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800558c:	f104 021a 	add.w	r2, r4, #26
 8005590:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005594:	ebaa 0309 	sub.w	r3, sl, r9
 8005598:	455b      	cmp	r3, fp
 800559a:	dc33      	bgt.n	8005604 <_printf_float+0x374>
 800559c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055a0:	429a      	cmp	r2, r3
 80055a2:	db3b      	blt.n	800561c <_printf_float+0x38c>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07da      	lsls	r2, r3, #31
 80055a8:	d438      	bmi.n	800561c <_printf_float+0x38c>
 80055aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055ae:	eba3 020a 	sub.w	r2, r3, sl
 80055b2:	eba3 0901 	sub.w	r9, r3, r1
 80055b6:	4591      	cmp	r9, r2
 80055b8:	bfa8      	it	ge
 80055ba:	4691      	movge	r9, r2
 80055bc:	f1b9 0f00 	cmp.w	r9, #0
 80055c0:	dc34      	bgt.n	800562c <_printf_float+0x39c>
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055ca:	f104 0a1a 	add.w	sl, r4, #26
 80055ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	eba3 0309 	sub.w	r3, r3, r9
 80055d8:	4543      	cmp	r3, r8
 80055da:	f77f af7a 	ble.w	80054d2 <_printf_float+0x242>
 80055de:	2301      	movs	r3, #1
 80055e0:	4652      	mov	r2, sl
 80055e2:	4631      	mov	r1, r6
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f aeac 	beq.w	8005346 <_printf_float+0xb6>
 80055ee:	f108 0801 	add.w	r8, r8, #1
 80055f2:	e7ec      	b.n	80055ce <_printf_float+0x33e>
 80055f4:	4613      	mov	r3, r2
 80055f6:	4631      	mov	r1, r6
 80055f8:	4642      	mov	r2, r8
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d1c0      	bne.n	8005584 <_printf_float+0x2f4>
 8005602:	e6a0      	b.n	8005346 <_printf_float+0xb6>
 8005604:	2301      	movs	r3, #1
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	920b      	str	r2, [sp, #44]	; 0x2c
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f ae99 	beq.w	8005346 <_printf_float+0xb6>
 8005614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005616:	f10b 0b01 	add.w	fp, fp, #1
 800561a:	e7b9      	b.n	8005590 <_printf_float+0x300>
 800561c:	4631      	mov	r1, r6
 800561e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	d1bf      	bne.n	80055aa <_printf_float+0x31a>
 800562a:	e68c      	b.n	8005346 <_printf_float+0xb6>
 800562c:	464b      	mov	r3, r9
 800562e:	4631      	mov	r1, r6
 8005630:	4628      	mov	r0, r5
 8005632:	eb08 020a 	add.w	r2, r8, sl
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	d1c2      	bne.n	80055c2 <_printf_float+0x332>
 800563c:	e683      	b.n	8005346 <_printf_float+0xb6>
 800563e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005640:	2a01      	cmp	r2, #1
 8005642:	dc01      	bgt.n	8005648 <_printf_float+0x3b8>
 8005644:	07db      	lsls	r3, r3, #31
 8005646:	d537      	bpl.n	80056b8 <_printf_float+0x428>
 8005648:	2301      	movs	r3, #1
 800564a:	4642      	mov	r2, r8
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	f43f ae77 	beq.w	8005346 <_printf_float+0xb6>
 8005658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f ae6f 	beq.w	8005346 <_printf_float+0xb6>
 8005668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800566c:	2200      	movs	r2, #0
 800566e:	2300      	movs	r3, #0
 8005670:	f7fb f99a 	bl	80009a8 <__aeabi_dcmpeq>
 8005674:	b9d8      	cbnz	r0, 80056ae <_printf_float+0x41e>
 8005676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005678:	f108 0201 	add.w	r2, r8, #1
 800567c:	3b01      	subs	r3, #1
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	47b8      	blx	r7
 8005684:	3001      	adds	r0, #1
 8005686:	d10e      	bne.n	80056a6 <_printf_float+0x416>
 8005688:	e65d      	b.n	8005346 <_printf_float+0xb6>
 800568a:	2301      	movs	r3, #1
 800568c:	464a      	mov	r2, r9
 800568e:	4631      	mov	r1, r6
 8005690:	4628      	mov	r0, r5
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f ae56 	beq.w	8005346 <_printf_float+0xb6>
 800569a:	f108 0801 	add.w	r8, r8, #1
 800569e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4543      	cmp	r3, r8
 80056a4:	dcf1      	bgt.n	800568a <_printf_float+0x3fa>
 80056a6:	4653      	mov	r3, sl
 80056a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056ac:	e6e0      	b.n	8005470 <_printf_float+0x1e0>
 80056ae:	f04f 0800 	mov.w	r8, #0
 80056b2:	f104 091a 	add.w	r9, r4, #26
 80056b6:	e7f2      	b.n	800569e <_printf_float+0x40e>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4642      	mov	r2, r8
 80056bc:	e7df      	b.n	800567e <_printf_float+0x3ee>
 80056be:	2301      	movs	r3, #1
 80056c0:	464a      	mov	r2, r9
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	f43f ae3c 	beq.w	8005346 <_printf_float+0xb6>
 80056ce:	f108 0801 	add.w	r8, r8, #1
 80056d2:	68e3      	ldr	r3, [r4, #12]
 80056d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056d6:	1a5b      	subs	r3, r3, r1
 80056d8:	4543      	cmp	r3, r8
 80056da:	dcf0      	bgt.n	80056be <_printf_float+0x42e>
 80056dc:	e6fd      	b.n	80054da <_printf_float+0x24a>
 80056de:	f04f 0800 	mov.w	r8, #0
 80056e2:	f104 0919 	add.w	r9, r4, #25
 80056e6:	e7f4      	b.n	80056d2 <_printf_float+0x442>

080056e8 <_printf_common>:
 80056e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ec:	4616      	mov	r6, r2
 80056ee:	4699      	mov	r9, r3
 80056f0:	688a      	ldr	r2, [r1, #8]
 80056f2:	690b      	ldr	r3, [r1, #16]
 80056f4:	4607      	mov	r7, r0
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bfb8      	it	lt
 80056fa:	4613      	movlt	r3, r2
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005702:	460c      	mov	r4, r1
 8005704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005708:	b10a      	cbz	r2, 800570e <_printf_common+0x26>
 800570a:	3301      	adds	r3, #1
 800570c:	6033      	str	r3, [r6, #0]
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	0699      	lsls	r1, r3, #26
 8005712:	bf42      	ittt	mi
 8005714:	6833      	ldrmi	r3, [r6, #0]
 8005716:	3302      	addmi	r3, #2
 8005718:	6033      	strmi	r3, [r6, #0]
 800571a:	6825      	ldr	r5, [r4, #0]
 800571c:	f015 0506 	ands.w	r5, r5, #6
 8005720:	d106      	bne.n	8005730 <_printf_common+0x48>
 8005722:	f104 0a19 	add.w	sl, r4, #25
 8005726:	68e3      	ldr	r3, [r4, #12]
 8005728:	6832      	ldr	r2, [r6, #0]
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	42ab      	cmp	r3, r5
 800572e:	dc28      	bgt.n	8005782 <_printf_common+0x9a>
 8005730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005734:	1e13      	subs	r3, r2, #0
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	bf18      	it	ne
 800573a:	2301      	movne	r3, #1
 800573c:	0692      	lsls	r2, r2, #26
 800573e:	d42d      	bmi.n	800579c <_printf_common+0xb4>
 8005740:	4649      	mov	r1, r9
 8005742:	4638      	mov	r0, r7
 8005744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005748:	47c0      	blx	r8
 800574a:	3001      	adds	r0, #1
 800574c:	d020      	beq.n	8005790 <_printf_common+0xa8>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	68e5      	ldr	r5, [r4, #12]
 8005752:	f003 0306 	and.w	r3, r3, #6
 8005756:	2b04      	cmp	r3, #4
 8005758:	bf18      	it	ne
 800575a:	2500      	movne	r5, #0
 800575c:	6832      	ldr	r2, [r6, #0]
 800575e:	f04f 0600 	mov.w	r6, #0
 8005762:	68a3      	ldr	r3, [r4, #8]
 8005764:	bf08      	it	eq
 8005766:	1aad      	subeq	r5, r5, r2
 8005768:	6922      	ldr	r2, [r4, #16]
 800576a:	bf08      	it	eq
 800576c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005770:	4293      	cmp	r3, r2
 8005772:	bfc4      	itt	gt
 8005774:	1a9b      	subgt	r3, r3, r2
 8005776:	18ed      	addgt	r5, r5, r3
 8005778:	341a      	adds	r4, #26
 800577a:	42b5      	cmp	r5, r6
 800577c:	d11a      	bne.n	80057b4 <_printf_common+0xcc>
 800577e:	2000      	movs	r0, #0
 8005780:	e008      	b.n	8005794 <_printf_common+0xac>
 8005782:	2301      	movs	r3, #1
 8005784:	4652      	mov	r2, sl
 8005786:	4649      	mov	r1, r9
 8005788:	4638      	mov	r0, r7
 800578a:	47c0      	blx	r8
 800578c:	3001      	adds	r0, #1
 800578e:	d103      	bne.n	8005798 <_printf_common+0xb0>
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	3501      	adds	r5, #1
 800579a:	e7c4      	b.n	8005726 <_printf_common+0x3e>
 800579c:	2030      	movs	r0, #48	; 0x30
 800579e:	18e1      	adds	r1, r4, r3
 80057a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057aa:	4422      	add	r2, r4
 80057ac:	3302      	adds	r3, #2
 80057ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057b2:	e7c5      	b.n	8005740 <_printf_common+0x58>
 80057b4:	2301      	movs	r3, #1
 80057b6:	4622      	mov	r2, r4
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d0e6      	beq.n	8005790 <_printf_common+0xa8>
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7d9      	b.n	800577a <_printf_common+0x92>
	...

080057c8 <_printf_i>:
 80057c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	7e0f      	ldrb	r7, [r1, #24]
 80057ce:	4691      	mov	r9, r2
 80057d0:	2f78      	cmp	r7, #120	; 0x78
 80057d2:	4680      	mov	r8, r0
 80057d4:	460c      	mov	r4, r1
 80057d6:	469a      	mov	sl, r3
 80057d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057de:	d807      	bhi.n	80057f0 <_printf_i+0x28>
 80057e0:	2f62      	cmp	r7, #98	; 0x62
 80057e2:	d80a      	bhi.n	80057fa <_printf_i+0x32>
 80057e4:	2f00      	cmp	r7, #0
 80057e6:	f000 80d9 	beq.w	800599c <_printf_i+0x1d4>
 80057ea:	2f58      	cmp	r7, #88	; 0x58
 80057ec:	f000 80a4 	beq.w	8005938 <_printf_i+0x170>
 80057f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057f8:	e03a      	b.n	8005870 <_printf_i+0xa8>
 80057fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057fe:	2b15      	cmp	r3, #21
 8005800:	d8f6      	bhi.n	80057f0 <_printf_i+0x28>
 8005802:	a101      	add	r1, pc, #4	; (adr r1, 8005808 <_printf_i+0x40>)
 8005804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005808:	08005861 	.word	0x08005861
 800580c:	08005875 	.word	0x08005875
 8005810:	080057f1 	.word	0x080057f1
 8005814:	080057f1 	.word	0x080057f1
 8005818:	080057f1 	.word	0x080057f1
 800581c:	080057f1 	.word	0x080057f1
 8005820:	08005875 	.word	0x08005875
 8005824:	080057f1 	.word	0x080057f1
 8005828:	080057f1 	.word	0x080057f1
 800582c:	080057f1 	.word	0x080057f1
 8005830:	080057f1 	.word	0x080057f1
 8005834:	08005983 	.word	0x08005983
 8005838:	080058a5 	.word	0x080058a5
 800583c:	08005965 	.word	0x08005965
 8005840:	080057f1 	.word	0x080057f1
 8005844:	080057f1 	.word	0x080057f1
 8005848:	080059a5 	.word	0x080059a5
 800584c:	080057f1 	.word	0x080057f1
 8005850:	080058a5 	.word	0x080058a5
 8005854:	080057f1 	.word	0x080057f1
 8005858:	080057f1 	.word	0x080057f1
 800585c:	0800596d 	.word	0x0800596d
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	602a      	str	r2, [r5, #0]
 8005868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800586c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005870:	2301      	movs	r3, #1
 8005872:	e0a4      	b.n	80059be <_printf_i+0x1f6>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	6829      	ldr	r1, [r5, #0]
 8005878:	0606      	lsls	r6, r0, #24
 800587a:	f101 0304 	add.w	r3, r1, #4
 800587e:	d50a      	bpl.n	8005896 <_printf_i+0xce>
 8005880:	680e      	ldr	r6, [r1, #0]
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	2e00      	cmp	r6, #0
 8005886:	da03      	bge.n	8005890 <_printf_i+0xc8>
 8005888:	232d      	movs	r3, #45	; 0x2d
 800588a:	4276      	negs	r6, r6
 800588c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005890:	230a      	movs	r3, #10
 8005892:	485e      	ldr	r0, [pc, #376]	; (8005a0c <_printf_i+0x244>)
 8005894:	e019      	b.n	80058ca <_printf_i+0x102>
 8005896:	680e      	ldr	r6, [r1, #0]
 8005898:	f010 0f40 	tst.w	r0, #64	; 0x40
 800589c:	602b      	str	r3, [r5, #0]
 800589e:	bf18      	it	ne
 80058a0:	b236      	sxthne	r6, r6
 80058a2:	e7ef      	b.n	8005884 <_printf_i+0xbc>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	6820      	ldr	r0, [r4, #0]
 80058a8:	1d19      	adds	r1, r3, #4
 80058aa:	6029      	str	r1, [r5, #0]
 80058ac:	0601      	lsls	r1, r0, #24
 80058ae:	d501      	bpl.n	80058b4 <_printf_i+0xec>
 80058b0:	681e      	ldr	r6, [r3, #0]
 80058b2:	e002      	b.n	80058ba <_printf_i+0xf2>
 80058b4:	0646      	lsls	r6, r0, #25
 80058b6:	d5fb      	bpl.n	80058b0 <_printf_i+0xe8>
 80058b8:	881e      	ldrh	r6, [r3, #0]
 80058ba:	2f6f      	cmp	r7, #111	; 0x6f
 80058bc:	bf0c      	ite	eq
 80058be:	2308      	moveq	r3, #8
 80058c0:	230a      	movne	r3, #10
 80058c2:	4852      	ldr	r0, [pc, #328]	; (8005a0c <_printf_i+0x244>)
 80058c4:	2100      	movs	r1, #0
 80058c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ca:	6865      	ldr	r5, [r4, #4]
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	bfa8      	it	ge
 80058d0:	6821      	ldrge	r1, [r4, #0]
 80058d2:	60a5      	str	r5, [r4, #8]
 80058d4:	bfa4      	itt	ge
 80058d6:	f021 0104 	bicge.w	r1, r1, #4
 80058da:	6021      	strge	r1, [r4, #0]
 80058dc:	b90e      	cbnz	r6, 80058e2 <_printf_i+0x11a>
 80058de:	2d00      	cmp	r5, #0
 80058e0:	d04d      	beq.n	800597e <_printf_i+0x1b6>
 80058e2:	4615      	mov	r5, r2
 80058e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80058e8:	fb03 6711 	mls	r7, r3, r1, r6
 80058ec:	5dc7      	ldrb	r7, [r0, r7]
 80058ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058f2:	4637      	mov	r7, r6
 80058f4:	42bb      	cmp	r3, r7
 80058f6:	460e      	mov	r6, r1
 80058f8:	d9f4      	bls.n	80058e4 <_printf_i+0x11c>
 80058fa:	2b08      	cmp	r3, #8
 80058fc:	d10b      	bne.n	8005916 <_printf_i+0x14e>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	07de      	lsls	r6, r3, #31
 8005902:	d508      	bpl.n	8005916 <_printf_i+0x14e>
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	6861      	ldr	r1, [r4, #4]
 8005908:	4299      	cmp	r1, r3
 800590a:	bfde      	ittt	le
 800590c:	2330      	movle	r3, #48	; 0x30
 800590e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005912:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005916:	1b52      	subs	r2, r2, r5
 8005918:	6122      	str	r2, [r4, #16]
 800591a:	464b      	mov	r3, r9
 800591c:	4621      	mov	r1, r4
 800591e:	4640      	mov	r0, r8
 8005920:	f8cd a000 	str.w	sl, [sp]
 8005924:	aa03      	add	r2, sp, #12
 8005926:	f7ff fedf 	bl	80056e8 <_printf_common>
 800592a:	3001      	adds	r0, #1
 800592c:	d14c      	bne.n	80059c8 <_printf_i+0x200>
 800592e:	f04f 30ff 	mov.w	r0, #4294967295
 8005932:	b004      	add	sp, #16
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	4834      	ldr	r0, [pc, #208]	; (8005a0c <_printf_i+0x244>)
 800593a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800593e:	6829      	ldr	r1, [r5, #0]
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	f851 6b04 	ldr.w	r6, [r1], #4
 8005946:	6029      	str	r1, [r5, #0]
 8005948:	061d      	lsls	r5, r3, #24
 800594a:	d514      	bpl.n	8005976 <_printf_i+0x1ae>
 800594c:	07df      	lsls	r7, r3, #31
 800594e:	bf44      	itt	mi
 8005950:	f043 0320 	orrmi.w	r3, r3, #32
 8005954:	6023      	strmi	r3, [r4, #0]
 8005956:	b91e      	cbnz	r6, 8005960 <_printf_i+0x198>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	f023 0320 	bic.w	r3, r3, #32
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	2310      	movs	r3, #16
 8005962:	e7af      	b.n	80058c4 <_printf_i+0xfc>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	f043 0320 	orr.w	r3, r3, #32
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	2378      	movs	r3, #120	; 0x78
 800596e:	4828      	ldr	r0, [pc, #160]	; (8005a10 <_printf_i+0x248>)
 8005970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005974:	e7e3      	b.n	800593e <_printf_i+0x176>
 8005976:	0659      	lsls	r1, r3, #25
 8005978:	bf48      	it	mi
 800597a:	b2b6      	uxthmi	r6, r6
 800597c:	e7e6      	b.n	800594c <_printf_i+0x184>
 800597e:	4615      	mov	r5, r2
 8005980:	e7bb      	b.n	80058fa <_printf_i+0x132>
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	6826      	ldr	r6, [r4, #0]
 8005986:	1d18      	adds	r0, r3, #4
 8005988:	6961      	ldr	r1, [r4, #20]
 800598a:	6028      	str	r0, [r5, #0]
 800598c:	0635      	lsls	r5, r6, #24
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	d501      	bpl.n	8005996 <_printf_i+0x1ce>
 8005992:	6019      	str	r1, [r3, #0]
 8005994:	e002      	b.n	800599c <_printf_i+0x1d4>
 8005996:	0670      	lsls	r0, r6, #25
 8005998:	d5fb      	bpl.n	8005992 <_printf_i+0x1ca>
 800599a:	8019      	strh	r1, [r3, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	4615      	mov	r5, r2
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	e7ba      	b.n	800591a <_printf_i+0x152>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	2100      	movs	r1, #0
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	602a      	str	r2, [r5, #0]
 80059ac:	681d      	ldr	r5, [r3, #0]
 80059ae:	6862      	ldr	r2, [r4, #4]
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fedf 	bl	8006774 <memchr>
 80059b6:	b108      	cbz	r0, 80059bc <_printf_i+0x1f4>
 80059b8:	1b40      	subs	r0, r0, r5
 80059ba:	6060      	str	r0, [r4, #4]
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	6123      	str	r3, [r4, #16]
 80059c0:	2300      	movs	r3, #0
 80059c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c6:	e7a8      	b.n	800591a <_printf_i+0x152>
 80059c8:	462a      	mov	r2, r5
 80059ca:	4649      	mov	r1, r9
 80059cc:	4640      	mov	r0, r8
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	47d0      	blx	sl
 80059d2:	3001      	adds	r0, #1
 80059d4:	d0ab      	beq.n	800592e <_printf_i+0x166>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	079b      	lsls	r3, r3, #30
 80059da:	d413      	bmi.n	8005a04 <_printf_i+0x23c>
 80059dc:	68e0      	ldr	r0, [r4, #12]
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	4298      	cmp	r0, r3
 80059e2:	bfb8      	it	lt
 80059e4:	4618      	movlt	r0, r3
 80059e6:	e7a4      	b.n	8005932 <_printf_i+0x16a>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4632      	mov	r2, r6
 80059ec:	4649      	mov	r1, r9
 80059ee:	4640      	mov	r0, r8
 80059f0:	47d0      	blx	sl
 80059f2:	3001      	adds	r0, #1
 80059f4:	d09b      	beq.n	800592e <_printf_i+0x166>
 80059f6:	3501      	adds	r5, #1
 80059f8:	68e3      	ldr	r3, [r4, #12]
 80059fa:	9903      	ldr	r1, [sp, #12]
 80059fc:	1a5b      	subs	r3, r3, r1
 80059fe:	42ab      	cmp	r3, r5
 8005a00:	dcf2      	bgt.n	80059e8 <_printf_i+0x220>
 8005a02:	e7eb      	b.n	80059dc <_printf_i+0x214>
 8005a04:	2500      	movs	r5, #0
 8005a06:	f104 0619 	add.w	r6, r4, #25
 8005a0a:	e7f5      	b.n	80059f8 <_printf_i+0x230>
 8005a0c:	08007df2 	.word	0x08007df2
 8005a10:	08007e03 	.word	0x08007e03

08005a14 <_sbrk_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	2300      	movs	r3, #0
 8005a18:	4d05      	ldr	r5, [pc, #20]	; (8005a30 <_sbrk_r+0x1c>)
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	f7fc fb82 	bl	8002128 <_sbrk>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_sbrk_r+0x1a>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_sbrk_r+0x1a>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	200004b0 	.word	0x200004b0

08005a34 <siprintf>:
 8005a34:	b40e      	push	{r1, r2, r3}
 8005a36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a3a:	b500      	push	{lr}
 8005a3c:	b09c      	sub	sp, #112	; 0x70
 8005a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a40:	9002      	str	r0, [sp, #8]
 8005a42:	9006      	str	r0, [sp, #24]
 8005a44:	9107      	str	r1, [sp, #28]
 8005a46:	9104      	str	r1, [sp, #16]
 8005a48:	4808      	ldr	r0, [pc, #32]	; (8005a6c <siprintf+0x38>)
 8005a4a:	4909      	ldr	r1, [pc, #36]	; (8005a70 <siprintf+0x3c>)
 8005a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a50:	9105      	str	r1, [sp, #20]
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	a902      	add	r1, sp, #8
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	f001 faa6 	bl	8006fa8 <_svfiprintf_r>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	9b02      	ldr	r3, [sp, #8]
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	b01c      	add	sp, #112	; 0x70
 8005a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a68:	b003      	add	sp, #12
 8005a6a:	4770      	bx	lr
 8005a6c:	20000020 	.word	0x20000020
 8005a70:	ffff0208 	.word	0xffff0208

08005a74 <quorem>:
 8005a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	6903      	ldr	r3, [r0, #16]
 8005a7a:	690c      	ldr	r4, [r1, #16]
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	f2c0 8082 	blt.w	8005b88 <quorem+0x114>
 8005a84:	3c01      	subs	r4, #1
 8005a86:	f100 0514 	add.w	r5, r0, #20
 8005a8a:	f101 0814 	add.w	r8, r1, #20
 8005a8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005aa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005aac:	d331      	bcc.n	8005b12 <quorem+0x9e>
 8005aae:	f04f 0e00 	mov.w	lr, #0
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	46ac      	mov	ip, r5
 8005ab6:	46f2      	mov	sl, lr
 8005ab8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005abc:	b293      	uxth	r3, r2
 8005abe:	fb06 e303 	mla	r3, r6, r3, lr
 8005ac2:	0c12      	lsrs	r2, r2, #16
 8005ac4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	fb06 e202 	mla	r2, r6, r2, lr
 8005ace:	ebaa 0303 	sub.w	r3, sl, r3
 8005ad2:	f8dc a000 	ldr.w	sl, [ip]
 8005ad6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ada:	fa1f fa8a 	uxth.w	sl, sl
 8005ade:	4453      	add	r3, sl
 8005ae0:	f8dc a000 	ldr.w	sl, [ip]
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005aea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005af4:	4581      	cmp	r9, r0
 8005af6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005afa:	f84c 3b04 	str.w	r3, [ip], #4
 8005afe:	d2db      	bcs.n	8005ab8 <quorem+0x44>
 8005b00:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b04:	b92b      	cbnz	r3, 8005b12 <quorem+0x9e>
 8005b06:	9b01      	ldr	r3, [sp, #4]
 8005b08:	3b04      	subs	r3, #4
 8005b0a:	429d      	cmp	r5, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	d32f      	bcc.n	8005b70 <quorem+0xfc>
 8005b10:	613c      	str	r4, [r7, #16]
 8005b12:	4638      	mov	r0, r7
 8005b14:	f001 f8d4 	bl	8006cc0 <__mcmp>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	db25      	blt.n	8005b68 <quorem+0xf4>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f04f 0c00 	mov.w	ip, #0
 8005b22:	3601      	adds	r6, #1
 8005b24:	f858 1b04 	ldr.w	r1, [r8], #4
 8005b28:	f8d0 e000 	ldr.w	lr, [r0]
 8005b2c:	b28b      	uxth	r3, r1
 8005b2e:	ebac 0303 	sub.w	r3, ip, r3
 8005b32:	fa1f f28e 	uxth.w	r2, lr
 8005b36:	4413      	add	r3, r2
 8005b38:	0c0a      	lsrs	r2, r1, #16
 8005b3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b48:	45c1      	cmp	r9, r8
 8005b4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b4e:	f840 3b04 	str.w	r3, [r0], #4
 8005b52:	d2e7      	bcs.n	8005b24 <quorem+0xb0>
 8005b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b5c:	b922      	cbnz	r2, 8005b68 <quorem+0xf4>
 8005b5e:	3b04      	subs	r3, #4
 8005b60:	429d      	cmp	r5, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	d30a      	bcc.n	8005b7c <quorem+0x108>
 8005b66:	613c      	str	r4, [r7, #16]
 8005b68:	4630      	mov	r0, r6
 8005b6a:	b003      	add	sp, #12
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	3b04      	subs	r3, #4
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	d1cb      	bne.n	8005b10 <quorem+0x9c>
 8005b78:	3c01      	subs	r4, #1
 8005b7a:	e7c6      	b.n	8005b0a <quorem+0x96>
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	3b04      	subs	r3, #4
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	d1f0      	bne.n	8005b66 <quorem+0xf2>
 8005b84:	3c01      	subs	r4, #1
 8005b86:	e7eb      	b.n	8005b60 <quorem+0xec>
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e7ee      	b.n	8005b6a <quorem+0xf6>
 8005b8c:	0000      	movs	r0, r0
	...

08005b90 <_dtoa_r>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	4616      	mov	r6, r2
 8005b96:	461f      	mov	r7, r3
 8005b98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b9a:	b099      	sub	sp, #100	; 0x64
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ba2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005ba6:	b974      	cbnz	r4, 8005bc6 <_dtoa_r+0x36>
 8005ba8:	2010      	movs	r0, #16
 8005baa:	f7ff f9df 	bl	8004f6c <malloc>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	6268      	str	r0, [r5, #36]	; 0x24
 8005bb2:	b920      	cbnz	r0, 8005bbe <_dtoa_r+0x2e>
 8005bb4:	21ea      	movs	r1, #234	; 0xea
 8005bb6:	4ba8      	ldr	r3, [pc, #672]	; (8005e58 <_dtoa_r+0x2c8>)
 8005bb8:	48a8      	ldr	r0, [pc, #672]	; (8005e5c <_dtoa_r+0x2cc>)
 8005bba:	f001 faf5 	bl	80071a8 <__assert_func>
 8005bbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bc2:	6004      	str	r4, [r0, #0]
 8005bc4:	60c4      	str	r4, [r0, #12]
 8005bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	b151      	cbz	r1, 8005be2 <_dtoa_r+0x52>
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4093      	lsls	r3, r2
 8005bd2:	604a      	str	r2, [r1, #4]
 8005bd4:	608b      	str	r3, [r1, #8]
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 fe34 	bl	8006844 <_Bfree>
 8005bdc:	2200      	movs	r2, #0
 8005bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	1e3b      	subs	r3, r7, #0
 8005be4:	bfaf      	iteee	ge
 8005be6:	2300      	movge	r3, #0
 8005be8:	2201      	movlt	r2, #1
 8005bea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005bee:	9305      	strlt	r3, [sp, #20]
 8005bf0:	bfa8      	it	ge
 8005bf2:	f8c8 3000 	strge.w	r3, [r8]
 8005bf6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005bfa:	4b99      	ldr	r3, [pc, #612]	; (8005e60 <_dtoa_r+0x2d0>)
 8005bfc:	bfb8      	it	lt
 8005bfe:	f8c8 2000 	strlt.w	r2, [r8]
 8005c02:	ea33 0309 	bics.w	r3, r3, r9
 8005c06:	d119      	bne.n	8005c3c <_dtoa_r+0xac>
 8005c08:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c14:	4333      	orrs	r3, r6
 8005c16:	f000 857f 	beq.w	8006718 <_dtoa_r+0xb88>
 8005c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c1c:	b953      	cbnz	r3, 8005c34 <_dtoa_r+0xa4>
 8005c1e:	4b91      	ldr	r3, [pc, #580]	; (8005e64 <_dtoa_r+0x2d4>)
 8005c20:	e022      	b.n	8005c68 <_dtoa_r+0xd8>
 8005c22:	4b91      	ldr	r3, [pc, #580]	; (8005e68 <_dtoa_r+0x2d8>)
 8005c24:	9303      	str	r3, [sp, #12]
 8005c26:	3308      	adds	r3, #8
 8005c28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	9803      	ldr	r0, [sp, #12]
 8005c2e:	b019      	add	sp, #100	; 0x64
 8005c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c34:	4b8b      	ldr	r3, [pc, #556]	; (8005e64 <_dtoa_r+0x2d4>)
 8005c36:	9303      	str	r3, [sp, #12]
 8005c38:	3303      	adds	r3, #3
 8005c3a:	e7f5      	b.n	8005c28 <_dtoa_r+0x98>
 8005c3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005c44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f7fa feac 	bl	80009a8 <__aeabi_dcmpeq>
 8005c50:	4680      	mov	r8, r0
 8005c52:	b158      	cbz	r0, 8005c6c <_dtoa_r+0xdc>
 8005c54:	2301      	movs	r3, #1
 8005c56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8558 	beq.w	8006712 <_dtoa_r+0xb82>
 8005c62:	4882      	ldr	r0, [pc, #520]	; (8005e6c <_dtoa_r+0x2dc>)
 8005c64:	6018      	str	r0, [r3, #0]
 8005c66:	1e43      	subs	r3, r0, #1
 8005c68:	9303      	str	r3, [sp, #12]
 8005c6a:	e7df      	b.n	8005c2c <_dtoa_r+0x9c>
 8005c6c:	ab16      	add	r3, sp, #88	; 0x58
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	ab17      	add	r3, sp, #92	; 0x5c
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4628      	mov	r0, r5
 8005c76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c7a:	f001 f8c9 	bl	8006e10 <__d2b>
 8005c7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005c82:	4683      	mov	fp, r0
 8005c84:	2c00      	cmp	r4, #0
 8005c86:	d07f      	beq.n	8005d88 <_dtoa_r+0x1f8>
 8005c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005c9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005c9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4b72      	ldr	r3, [pc, #456]	; (8005e70 <_dtoa_r+0x2e0>)
 8005ca6:	f7fa fa5f 	bl	8000168 <__aeabi_dsub>
 8005caa:	a365      	add	r3, pc, #404	; (adr r3, 8005e40 <_dtoa_r+0x2b0>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f7fa fc12 	bl	80004d8 <__aeabi_dmul>
 8005cb4:	a364      	add	r3, pc, #400	; (adr r3, 8005e48 <_dtoa_r+0x2b8>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fa57 	bl	800016c <__adddf3>
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	f7fa fb9e 	bl	8000404 <__aeabi_i2d>
 8005cc8:	a361      	add	r3, pc, #388	; (adr r3, 8005e50 <_dtoa_r+0x2c0>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fc03 	bl	80004d8 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fa47 	bl	800016c <__adddf3>
 8005cde:	4606      	mov	r6, r0
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	f7fa fea9 	bl	8000a38 <__aeabi_d2iz>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4682      	mov	sl, r0
 8005cea:	2300      	movs	r3, #0
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	f7fa fe64 	bl	80009bc <__aeabi_dcmplt>
 8005cf4:	b148      	cbz	r0, 8005d0a <_dtoa_r+0x17a>
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	f7fa fb84 	bl	8000404 <__aeabi_i2d>
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	463b      	mov	r3, r7
 8005d00:	f7fa fe52 	bl	80009a8 <__aeabi_dcmpeq>
 8005d04:	b908      	cbnz	r0, 8005d0a <_dtoa_r+0x17a>
 8005d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d0a:	f1ba 0f16 	cmp.w	sl, #22
 8005d0e:	d858      	bhi.n	8005dc2 <_dtoa_r+0x232>
 8005d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d14:	4b57      	ldr	r3, [pc, #348]	; (8005e74 <_dtoa_r+0x2e4>)
 8005d16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f7fa fe4d 	bl	80009bc <__aeabi_dcmplt>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d04f      	beq.n	8005dc6 <_dtoa_r+0x236>
 8005d26:	2300      	movs	r3, #0
 8005d28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d30:	1b1c      	subs	r4, r3, r4
 8005d32:	1e63      	subs	r3, r4, #1
 8005d34:	9309      	str	r3, [sp, #36]	; 0x24
 8005d36:	bf49      	itett	mi
 8005d38:	f1c4 0301 	rsbmi	r3, r4, #1
 8005d3c:	2300      	movpl	r3, #0
 8005d3e:	9306      	strmi	r3, [sp, #24]
 8005d40:	2300      	movmi	r3, #0
 8005d42:	bf54      	ite	pl
 8005d44:	9306      	strpl	r3, [sp, #24]
 8005d46:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005d48:	f1ba 0f00 	cmp.w	sl, #0
 8005d4c:	db3d      	blt.n	8005dca <_dtoa_r+0x23a>
 8005d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d50:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005d54:	4453      	add	r3, sl
 8005d56:	9309      	str	r3, [sp, #36]	; 0x24
 8005d58:	2300      	movs	r3, #0
 8005d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d5e:	2b09      	cmp	r3, #9
 8005d60:	f200 808c 	bhi.w	8005e7c <_dtoa_r+0x2ec>
 8005d64:	2b05      	cmp	r3, #5
 8005d66:	bfc4      	itt	gt
 8005d68:	3b04      	subgt	r3, #4
 8005d6a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d6e:	bfc8      	it	gt
 8005d70:	2400      	movgt	r4, #0
 8005d72:	f1a3 0302 	sub.w	r3, r3, #2
 8005d76:	bfd8      	it	le
 8005d78:	2401      	movle	r4, #1
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	f200 808a 	bhi.w	8005e94 <_dtoa_r+0x304>
 8005d80:	e8df f003 	tbb	[pc, r3]
 8005d84:	5b4d4f2d 	.word	0x5b4d4f2d
 8005d88:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005d8c:	441c      	add	r4, r3
 8005d8e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	bfc3      	ittte	gt
 8005d96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d9a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005d9e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005da2:	f1c3 0320 	rsble	r3, r3, #32
 8005da6:	bfc6      	itte	gt
 8005da8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005dac:	4318      	orrgt	r0, r3
 8005dae:	fa06 f003 	lslle.w	r0, r6, r3
 8005db2:	f7fa fb17 	bl	80003e4 <__aeabi_ui2d>
 8005db6:	2301      	movs	r3, #1
 8005db8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005dbc:	3c01      	subs	r4, #1
 8005dbe:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dc0:	e76f      	b.n	8005ca2 <_dtoa_r+0x112>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e7b2      	b.n	8005d2c <_dtoa_r+0x19c>
 8005dc6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005dc8:	e7b1      	b.n	8005d2e <_dtoa_r+0x19e>
 8005dca:	9b06      	ldr	r3, [sp, #24]
 8005dcc:	eba3 030a 	sub.w	r3, r3, sl
 8005dd0:	9306      	str	r3, [sp, #24]
 8005dd2:	f1ca 0300 	rsb	r3, sl, #0
 8005dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005dd8:	2300      	movs	r3, #0
 8005dda:	930e      	str	r3, [sp, #56]	; 0x38
 8005ddc:	e7be      	b.n	8005d5c <_dtoa_r+0x1cc>
 8005dde:	2300      	movs	r3, #0
 8005de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dc58      	bgt.n	8005e9a <_dtoa_r+0x30a>
 8005de8:	f04f 0901 	mov.w	r9, #1
 8005dec:	464b      	mov	r3, r9
 8005dee:	f8cd 9020 	str.w	r9, [sp, #32]
 8005df2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005df6:	2200      	movs	r2, #0
 8005df8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005dfa:	6042      	str	r2, [r0, #4]
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	f102 0614 	add.w	r6, r2, #20
 8005e02:	429e      	cmp	r6, r3
 8005e04:	6841      	ldr	r1, [r0, #4]
 8005e06:	d94e      	bls.n	8005ea6 <_dtoa_r+0x316>
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 fcdb 	bl	80067c4 <_Balloc>
 8005e0e:	9003      	str	r0, [sp, #12]
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d14c      	bne.n	8005eae <_dtoa_r+0x31e>
 8005e14:	4602      	mov	r2, r0
 8005e16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e1a:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <_dtoa_r+0x2e8>)
 8005e1c:	e6cc      	b.n	8005bb8 <_dtoa_r+0x28>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e7de      	b.n	8005de0 <_dtoa_r+0x250>
 8005e22:	2300      	movs	r3, #0
 8005e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e28:	eb0a 0903 	add.w	r9, sl, r3
 8005e2c:	f109 0301 	add.w	r3, r9, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	9308      	str	r3, [sp, #32]
 8005e34:	bfb8      	it	lt
 8005e36:	2301      	movlt	r3, #1
 8005e38:	e7dd      	b.n	8005df6 <_dtoa_r+0x266>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e7f2      	b.n	8005e24 <_dtoa_r+0x294>
 8005e3e:	bf00      	nop
 8005e40:	636f4361 	.word	0x636f4361
 8005e44:	3fd287a7 	.word	0x3fd287a7
 8005e48:	8b60c8b3 	.word	0x8b60c8b3
 8005e4c:	3fc68a28 	.word	0x3fc68a28
 8005e50:	509f79fb 	.word	0x509f79fb
 8005e54:	3fd34413 	.word	0x3fd34413
 8005e58:	08007e21 	.word	0x08007e21
 8005e5c:	08007e38 	.word	0x08007e38
 8005e60:	7ff00000 	.word	0x7ff00000
 8005e64:	08007e1d 	.word	0x08007e1d
 8005e68:	08007e14 	.word	0x08007e14
 8005e6c:	08007df1 	.word	0x08007df1
 8005e70:	3ff80000 	.word	0x3ff80000
 8005e74:	08007f28 	.word	0x08007f28
 8005e78:	08007e93 	.word	0x08007e93
 8005e7c:	2401      	movs	r4, #1
 8005e7e:	2300      	movs	r3, #0
 8005e80:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e82:	9322      	str	r3, [sp, #136]	; 0x88
 8005e84:	f04f 39ff 	mov.w	r9, #4294967295
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2312      	movs	r3, #18
 8005e8c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005e90:	9223      	str	r2, [sp, #140]	; 0x8c
 8005e92:	e7b0      	b.n	8005df6 <_dtoa_r+0x266>
 8005e94:	2301      	movs	r3, #1
 8005e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e98:	e7f4      	b.n	8005e84 <_dtoa_r+0x2f4>
 8005e9a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ea4:	e7a7      	b.n	8005df6 <_dtoa_r+0x266>
 8005ea6:	3101      	adds	r1, #1
 8005ea8:	6041      	str	r1, [r0, #4]
 8005eaa:	0052      	lsls	r2, r2, #1
 8005eac:	e7a7      	b.n	8005dfe <_dtoa_r+0x26e>
 8005eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005eb0:	9a03      	ldr	r2, [sp, #12]
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	9b08      	ldr	r3, [sp, #32]
 8005eb6:	2b0e      	cmp	r3, #14
 8005eb8:	f200 80a8 	bhi.w	800600c <_dtoa_r+0x47c>
 8005ebc:	2c00      	cmp	r4, #0
 8005ebe:	f000 80a5 	beq.w	800600c <_dtoa_r+0x47c>
 8005ec2:	f1ba 0f00 	cmp.w	sl, #0
 8005ec6:	dd34      	ble.n	8005f32 <_dtoa_r+0x3a2>
 8005ec8:	4a9a      	ldr	r2, [pc, #616]	; (8006134 <_dtoa_r+0x5a4>)
 8005eca:	f00a 030f 	and.w	r3, sl, #15
 8005ece:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ed2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005ed6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005eda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ede:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005ee2:	d016      	beq.n	8005f12 <_dtoa_r+0x382>
 8005ee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ee8:	4b93      	ldr	r3, [pc, #588]	; (8006138 <_dtoa_r+0x5a8>)
 8005eea:	2703      	movs	r7, #3
 8005eec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ef0:	f7fa fc1c 	bl	800072c <__aeabi_ddiv>
 8005ef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ef8:	f004 040f 	and.w	r4, r4, #15
 8005efc:	4e8e      	ldr	r6, [pc, #568]	; (8006138 <_dtoa_r+0x5a8>)
 8005efe:	b954      	cbnz	r4, 8005f16 <_dtoa_r+0x386>
 8005f00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f08:	f7fa fc10 	bl	800072c <__aeabi_ddiv>
 8005f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f10:	e029      	b.n	8005f66 <_dtoa_r+0x3d6>
 8005f12:	2702      	movs	r7, #2
 8005f14:	e7f2      	b.n	8005efc <_dtoa_r+0x36c>
 8005f16:	07e1      	lsls	r1, r4, #31
 8005f18:	d508      	bpl.n	8005f2c <_dtoa_r+0x39c>
 8005f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f22:	f7fa fad9 	bl	80004d8 <__aeabi_dmul>
 8005f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f2a:	3701      	adds	r7, #1
 8005f2c:	1064      	asrs	r4, r4, #1
 8005f2e:	3608      	adds	r6, #8
 8005f30:	e7e5      	b.n	8005efe <_dtoa_r+0x36e>
 8005f32:	f000 80a5 	beq.w	8006080 <_dtoa_r+0x4f0>
 8005f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f3a:	f1ca 0400 	rsb	r4, sl, #0
 8005f3e:	4b7d      	ldr	r3, [pc, #500]	; (8006134 <_dtoa_r+0x5a4>)
 8005f40:	f004 020f 	and.w	r2, r4, #15
 8005f44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f7fa fac4 	bl	80004d8 <__aeabi_dmul>
 8005f50:	2702      	movs	r7, #2
 8005f52:	2300      	movs	r3, #0
 8005f54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f58:	4e77      	ldr	r6, [pc, #476]	; (8006138 <_dtoa_r+0x5a8>)
 8005f5a:	1124      	asrs	r4, r4, #4
 8005f5c:	2c00      	cmp	r4, #0
 8005f5e:	f040 8084 	bne.w	800606a <_dtoa_r+0x4da>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1d2      	bne.n	8005f0c <_dtoa_r+0x37c>
 8005f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 808b 	beq.w	8006084 <_dtoa_r+0x4f4>
 8005f6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4b6f      	ldr	r3, [pc, #444]	; (800613c <_dtoa_r+0x5ac>)
 8005f7e:	f7fa fd1d 	bl	80009bc <__aeabi_dcmplt>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d07e      	beq.n	8006084 <_dtoa_r+0x4f4>
 8005f86:	9b08      	ldr	r3, [sp, #32]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d07b      	beq.n	8006084 <_dtoa_r+0x4f4>
 8005f8c:	f1b9 0f00 	cmp.w	r9, #0
 8005f90:	dd38      	ble.n	8006004 <_dtoa_r+0x474>
 8005f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f96:	2200      	movs	r2, #0
 8005f98:	4b69      	ldr	r3, [pc, #420]	; (8006140 <_dtoa_r+0x5b0>)
 8005f9a:	f7fa fa9d 	bl	80004d8 <__aeabi_dmul>
 8005f9e:	464c      	mov	r4, r9
 8005fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fa4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005fa8:	3701      	adds	r7, #1
 8005faa:	4638      	mov	r0, r7
 8005fac:	f7fa fa2a 	bl	8000404 <__aeabi_i2d>
 8005fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fb4:	f7fa fa90 	bl	80004d8 <__aeabi_dmul>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4b62      	ldr	r3, [pc, #392]	; (8006144 <_dtoa_r+0x5b4>)
 8005fbc:	f7fa f8d6 	bl	800016c <__adddf3>
 8005fc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005fc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fc8:	9611      	str	r6, [sp, #68]	; 0x44
 8005fca:	2c00      	cmp	r4, #0
 8005fcc:	d15d      	bne.n	800608a <_dtoa_r+0x4fa>
 8005fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4b5c      	ldr	r3, [pc, #368]	; (8006148 <_dtoa_r+0x5b8>)
 8005fd6:	f7fa f8c7 	bl	8000168 <__aeabi_dsub>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fe2:	4633      	mov	r3, r6
 8005fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fe6:	f7fa fd07 	bl	80009f8 <__aeabi_dcmpgt>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	f040 829c 	bne.w	8006528 <_dtoa_r+0x998>
 8005ff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ff6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ffa:	f7fa fcdf 	bl	80009bc <__aeabi_dcmplt>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f040 8290 	bne.w	8006524 <_dtoa_r+0x994>
 8006004:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006008:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800600c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800600e:	2b00      	cmp	r3, #0
 8006010:	f2c0 8152 	blt.w	80062b8 <_dtoa_r+0x728>
 8006014:	f1ba 0f0e 	cmp.w	sl, #14
 8006018:	f300 814e 	bgt.w	80062b8 <_dtoa_r+0x728>
 800601c:	4b45      	ldr	r3, [pc, #276]	; (8006134 <_dtoa_r+0x5a4>)
 800601e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006022:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006026:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800602a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800602c:	2b00      	cmp	r3, #0
 800602e:	f280 80db 	bge.w	80061e8 <_dtoa_r+0x658>
 8006032:	9b08      	ldr	r3, [sp, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f300 80d7 	bgt.w	80061e8 <_dtoa_r+0x658>
 800603a:	f040 8272 	bne.w	8006522 <_dtoa_r+0x992>
 800603e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006042:	2200      	movs	r2, #0
 8006044:	4b40      	ldr	r3, [pc, #256]	; (8006148 <_dtoa_r+0x5b8>)
 8006046:	f7fa fa47 	bl	80004d8 <__aeabi_dmul>
 800604a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604e:	f7fa fcc9 	bl	80009e4 <__aeabi_dcmpge>
 8006052:	9c08      	ldr	r4, [sp, #32]
 8006054:	4626      	mov	r6, r4
 8006056:	2800      	cmp	r0, #0
 8006058:	f040 8248 	bne.w	80064ec <_dtoa_r+0x95c>
 800605c:	2331      	movs	r3, #49	; 0x31
 800605e:	9f03      	ldr	r7, [sp, #12]
 8006060:	f10a 0a01 	add.w	sl, sl, #1
 8006064:	f807 3b01 	strb.w	r3, [r7], #1
 8006068:	e244      	b.n	80064f4 <_dtoa_r+0x964>
 800606a:	07e2      	lsls	r2, r4, #31
 800606c:	d505      	bpl.n	800607a <_dtoa_r+0x4ea>
 800606e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006072:	f7fa fa31 	bl	80004d8 <__aeabi_dmul>
 8006076:	2301      	movs	r3, #1
 8006078:	3701      	adds	r7, #1
 800607a:	1064      	asrs	r4, r4, #1
 800607c:	3608      	adds	r6, #8
 800607e:	e76d      	b.n	8005f5c <_dtoa_r+0x3cc>
 8006080:	2702      	movs	r7, #2
 8006082:	e770      	b.n	8005f66 <_dtoa_r+0x3d6>
 8006084:	46d0      	mov	r8, sl
 8006086:	9c08      	ldr	r4, [sp, #32]
 8006088:	e78f      	b.n	8005faa <_dtoa_r+0x41a>
 800608a:	9903      	ldr	r1, [sp, #12]
 800608c:	4b29      	ldr	r3, [pc, #164]	; (8006134 <_dtoa_r+0x5a4>)
 800608e:	4421      	add	r1, r4
 8006090:	9112      	str	r1, [sp, #72]	; 0x48
 8006092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006094:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006098:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800609c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060a0:	2900      	cmp	r1, #0
 80060a2:	d055      	beq.n	8006150 <_dtoa_r+0x5c0>
 80060a4:	2000      	movs	r0, #0
 80060a6:	4929      	ldr	r1, [pc, #164]	; (800614c <_dtoa_r+0x5bc>)
 80060a8:	f7fa fb40 	bl	800072c <__aeabi_ddiv>
 80060ac:	463b      	mov	r3, r7
 80060ae:	4632      	mov	r2, r6
 80060b0:	f7fa f85a 	bl	8000168 <__aeabi_dsub>
 80060b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060b8:	9f03      	ldr	r7, [sp, #12]
 80060ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060be:	f7fa fcbb 	bl	8000a38 <__aeabi_d2iz>
 80060c2:	4604      	mov	r4, r0
 80060c4:	f7fa f99e 	bl	8000404 <__aeabi_i2d>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d0:	f7fa f84a 	bl	8000168 <__aeabi_dsub>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	3430      	adds	r4, #48	; 0x30
 80060da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060e2:	f807 4b01 	strb.w	r4, [r7], #1
 80060e6:	f7fa fc69 	bl	80009bc <__aeabi_dcmplt>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d174      	bne.n	80061d8 <_dtoa_r+0x648>
 80060ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f2:	2000      	movs	r0, #0
 80060f4:	4911      	ldr	r1, [pc, #68]	; (800613c <_dtoa_r+0x5ac>)
 80060f6:	f7fa f837 	bl	8000168 <__aeabi_dsub>
 80060fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060fe:	f7fa fc5d 	bl	80009bc <__aeabi_dcmplt>
 8006102:	2800      	cmp	r0, #0
 8006104:	f040 80b7 	bne.w	8006276 <_dtoa_r+0x6e6>
 8006108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800610a:	429f      	cmp	r7, r3
 800610c:	f43f af7a 	beq.w	8006004 <_dtoa_r+0x474>
 8006110:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006114:	2200      	movs	r2, #0
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <_dtoa_r+0x5b0>)
 8006118:	f7fa f9de 	bl	80004d8 <__aeabi_dmul>
 800611c:	2200      	movs	r2, #0
 800611e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <_dtoa_r+0x5b0>)
 8006128:	f7fa f9d6 	bl	80004d8 <__aeabi_dmul>
 800612c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006130:	e7c3      	b.n	80060ba <_dtoa_r+0x52a>
 8006132:	bf00      	nop
 8006134:	08007f28 	.word	0x08007f28
 8006138:	08007f00 	.word	0x08007f00
 800613c:	3ff00000 	.word	0x3ff00000
 8006140:	40240000 	.word	0x40240000
 8006144:	401c0000 	.word	0x401c0000
 8006148:	40140000 	.word	0x40140000
 800614c:	3fe00000 	.word	0x3fe00000
 8006150:	4630      	mov	r0, r6
 8006152:	4639      	mov	r1, r7
 8006154:	f7fa f9c0 	bl	80004d8 <__aeabi_dmul>
 8006158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800615a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800615e:	9c03      	ldr	r4, [sp, #12]
 8006160:	9314      	str	r3, [sp, #80]	; 0x50
 8006162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006166:	f7fa fc67 	bl	8000a38 <__aeabi_d2iz>
 800616a:	9015      	str	r0, [sp, #84]	; 0x54
 800616c:	f7fa f94a 	bl	8000404 <__aeabi_i2d>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006178:	f7f9 fff6 	bl	8000168 <__aeabi_dsub>
 800617c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800617e:	4606      	mov	r6, r0
 8006180:	3330      	adds	r3, #48	; 0x30
 8006182:	f804 3b01 	strb.w	r3, [r4], #1
 8006186:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006188:	460f      	mov	r7, r1
 800618a:	429c      	cmp	r4, r3
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	d124      	bne.n	80061dc <_dtoa_r+0x64c>
 8006192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006196:	4bb0      	ldr	r3, [pc, #704]	; (8006458 <_dtoa_r+0x8c8>)
 8006198:	f7f9 ffe8 	bl	800016c <__adddf3>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4630      	mov	r0, r6
 80061a2:	4639      	mov	r1, r7
 80061a4:	f7fa fc28 	bl	80009f8 <__aeabi_dcmpgt>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d163      	bne.n	8006274 <_dtoa_r+0x6e4>
 80061ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061b0:	2000      	movs	r0, #0
 80061b2:	49a9      	ldr	r1, [pc, #676]	; (8006458 <_dtoa_r+0x8c8>)
 80061b4:	f7f9 ffd8 	bl	8000168 <__aeabi_dsub>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4630      	mov	r0, r6
 80061be:	4639      	mov	r1, r7
 80061c0:	f7fa fbfc 	bl	80009bc <__aeabi_dcmplt>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f43f af1d 	beq.w	8006004 <_dtoa_r+0x474>
 80061ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80061cc:	1e7b      	subs	r3, r7, #1
 80061ce:	9314      	str	r3, [sp, #80]	; 0x50
 80061d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80061d4:	2b30      	cmp	r3, #48	; 0x30
 80061d6:	d0f8      	beq.n	80061ca <_dtoa_r+0x63a>
 80061d8:	46c2      	mov	sl, r8
 80061da:	e03b      	b.n	8006254 <_dtoa_r+0x6c4>
 80061dc:	4b9f      	ldr	r3, [pc, #636]	; (800645c <_dtoa_r+0x8cc>)
 80061de:	f7fa f97b 	bl	80004d8 <__aeabi_dmul>
 80061e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061e6:	e7bc      	b.n	8006162 <_dtoa_r+0x5d2>
 80061e8:	9f03      	ldr	r7, [sp, #12]
 80061ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80061ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa fa99 	bl	800072c <__aeabi_ddiv>
 80061fa:	f7fa fc1d 	bl	8000a38 <__aeabi_d2iz>
 80061fe:	4604      	mov	r4, r0
 8006200:	f7fa f900 	bl	8000404 <__aeabi_i2d>
 8006204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006208:	f7fa f966 	bl	80004d8 <__aeabi_dmul>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4640      	mov	r0, r8
 8006212:	4649      	mov	r1, r9
 8006214:	f7f9 ffa8 	bl	8000168 <__aeabi_dsub>
 8006218:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800621c:	f807 6b01 	strb.w	r6, [r7], #1
 8006220:	9e03      	ldr	r6, [sp, #12]
 8006222:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006226:	1bbe      	subs	r6, r7, r6
 8006228:	45b4      	cmp	ip, r6
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	d136      	bne.n	800629e <_dtoa_r+0x70e>
 8006230:	f7f9 ff9c 	bl	800016c <__adddf3>
 8006234:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006238:	4680      	mov	r8, r0
 800623a:	4689      	mov	r9, r1
 800623c:	f7fa fbdc 	bl	80009f8 <__aeabi_dcmpgt>
 8006240:	bb58      	cbnz	r0, 800629a <_dtoa_r+0x70a>
 8006242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800624e:	b108      	cbz	r0, 8006254 <_dtoa_r+0x6c4>
 8006250:	07e1      	lsls	r1, r4, #31
 8006252:	d422      	bmi.n	800629a <_dtoa_r+0x70a>
 8006254:	4628      	mov	r0, r5
 8006256:	4659      	mov	r1, fp
 8006258:	f000 faf4 	bl	8006844 <_Bfree>
 800625c:	2300      	movs	r3, #0
 800625e:	703b      	strb	r3, [r7, #0]
 8006260:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006262:	f10a 0001 	add.w	r0, sl, #1
 8006266:	6018      	str	r0, [r3, #0]
 8006268:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800626a:	2b00      	cmp	r3, #0
 800626c:	f43f acde 	beq.w	8005c2c <_dtoa_r+0x9c>
 8006270:	601f      	str	r7, [r3, #0]
 8006272:	e4db      	b.n	8005c2c <_dtoa_r+0x9c>
 8006274:	4627      	mov	r7, r4
 8006276:	463b      	mov	r3, r7
 8006278:	461f      	mov	r7, r3
 800627a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800627e:	2a39      	cmp	r2, #57	; 0x39
 8006280:	d107      	bne.n	8006292 <_dtoa_r+0x702>
 8006282:	9a03      	ldr	r2, [sp, #12]
 8006284:	429a      	cmp	r2, r3
 8006286:	d1f7      	bne.n	8006278 <_dtoa_r+0x6e8>
 8006288:	2230      	movs	r2, #48	; 0x30
 800628a:	9903      	ldr	r1, [sp, #12]
 800628c:	f108 0801 	add.w	r8, r8, #1
 8006290:	700a      	strb	r2, [r1, #0]
 8006292:	781a      	ldrb	r2, [r3, #0]
 8006294:	3201      	adds	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	e79e      	b.n	80061d8 <_dtoa_r+0x648>
 800629a:	46d0      	mov	r8, sl
 800629c:	e7eb      	b.n	8006276 <_dtoa_r+0x6e6>
 800629e:	2200      	movs	r2, #0
 80062a0:	4b6e      	ldr	r3, [pc, #440]	; (800645c <_dtoa_r+0x8cc>)
 80062a2:	f7fa f919 	bl	80004d8 <__aeabi_dmul>
 80062a6:	2200      	movs	r2, #0
 80062a8:	2300      	movs	r3, #0
 80062aa:	4680      	mov	r8, r0
 80062ac:	4689      	mov	r9, r1
 80062ae:	f7fa fb7b 	bl	80009a8 <__aeabi_dcmpeq>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d09b      	beq.n	80061ee <_dtoa_r+0x65e>
 80062b6:	e7cd      	b.n	8006254 <_dtoa_r+0x6c4>
 80062b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	f000 80d0 	beq.w	8006460 <_dtoa_r+0x8d0>
 80062c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062c2:	2a01      	cmp	r2, #1
 80062c4:	f300 80ae 	bgt.w	8006424 <_dtoa_r+0x894>
 80062c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062ca:	2a00      	cmp	r2, #0
 80062cc:	f000 80a6 	beq.w	800641c <_dtoa_r+0x88c>
 80062d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062d6:	9f06      	ldr	r7, [sp, #24]
 80062d8:	9a06      	ldr	r2, [sp, #24]
 80062da:	2101      	movs	r1, #1
 80062dc:	441a      	add	r2, r3
 80062de:	9206      	str	r2, [sp, #24]
 80062e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e2:	4628      	mov	r0, r5
 80062e4:	441a      	add	r2, r3
 80062e6:	9209      	str	r2, [sp, #36]	; 0x24
 80062e8:	f000 fb62 	bl	80069b0 <__i2b>
 80062ec:	4606      	mov	r6, r0
 80062ee:	2f00      	cmp	r7, #0
 80062f0:	dd0c      	ble.n	800630c <_dtoa_r+0x77c>
 80062f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	dd09      	ble.n	800630c <_dtoa_r+0x77c>
 80062f8:	42bb      	cmp	r3, r7
 80062fa:	bfa8      	it	ge
 80062fc:	463b      	movge	r3, r7
 80062fe:	9a06      	ldr	r2, [sp, #24]
 8006300:	1aff      	subs	r7, r7, r3
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	9206      	str	r2, [sp, #24]
 8006306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	9309      	str	r3, [sp, #36]	; 0x24
 800630c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630e:	b1f3      	cbz	r3, 800634e <_dtoa_r+0x7be>
 8006310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 80a8 	beq.w	8006468 <_dtoa_r+0x8d8>
 8006318:	2c00      	cmp	r4, #0
 800631a:	dd10      	ble.n	800633e <_dtoa_r+0x7ae>
 800631c:	4631      	mov	r1, r6
 800631e:	4622      	mov	r2, r4
 8006320:	4628      	mov	r0, r5
 8006322:	f000 fc03 	bl	8006b2c <__pow5mult>
 8006326:	465a      	mov	r2, fp
 8006328:	4601      	mov	r1, r0
 800632a:	4606      	mov	r6, r0
 800632c:	4628      	mov	r0, r5
 800632e:	f000 fb55 	bl	80069dc <__multiply>
 8006332:	4680      	mov	r8, r0
 8006334:	4659      	mov	r1, fp
 8006336:	4628      	mov	r0, r5
 8006338:	f000 fa84 	bl	8006844 <_Bfree>
 800633c:	46c3      	mov	fp, r8
 800633e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006340:	1b1a      	subs	r2, r3, r4
 8006342:	d004      	beq.n	800634e <_dtoa_r+0x7be>
 8006344:	4659      	mov	r1, fp
 8006346:	4628      	mov	r0, r5
 8006348:	f000 fbf0 	bl	8006b2c <__pow5mult>
 800634c:	4683      	mov	fp, r0
 800634e:	2101      	movs	r1, #1
 8006350:	4628      	mov	r0, r5
 8006352:	f000 fb2d 	bl	80069b0 <__i2b>
 8006356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006358:	4604      	mov	r4, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	f340 8086 	ble.w	800646c <_dtoa_r+0x8dc>
 8006360:	461a      	mov	r2, r3
 8006362:	4601      	mov	r1, r0
 8006364:	4628      	mov	r0, r5
 8006366:	f000 fbe1 	bl	8006b2c <__pow5mult>
 800636a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800636c:	4604      	mov	r4, r0
 800636e:	2b01      	cmp	r3, #1
 8006370:	dd7f      	ble.n	8006472 <_dtoa_r+0x8e2>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800637c:	6918      	ldr	r0, [r3, #16]
 800637e:	f000 fac9 	bl	8006914 <__hi0bits>
 8006382:	f1c0 0020 	rsb	r0, r0, #32
 8006386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006388:	4418      	add	r0, r3
 800638a:	f010 001f 	ands.w	r0, r0, #31
 800638e:	f000 8092 	beq.w	80064b6 <_dtoa_r+0x926>
 8006392:	f1c0 0320 	rsb	r3, r0, #32
 8006396:	2b04      	cmp	r3, #4
 8006398:	f340 808a 	ble.w	80064b0 <_dtoa_r+0x920>
 800639c:	f1c0 001c 	rsb	r0, r0, #28
 80063a0:	9b06      	ldr	r3, [sp, #24]
 80063a2:	4407      	add	r7, r0
 80063a4:	4403      	add	r3, r0
 80063a6:	9306      	str	r3, [sp, #24]
 80063a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063aa:	4403      	add	r3, r0
 80063ac:	9309      	str	r3, [sp, #36]	; 0x24
 80063ae:	9b06      	ldr	r3, [sp, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dd05      	ble.n	80063c0 <_dtoa_r+0x830>
 80063b4:	4659      	mov	r1, fp
 80063b6:	461a      	mov	r2, r3
 80063b8:	4628      	mov	r0, r5
 80063ba:	f000 fc11 	bl	8006be0 <__lshift>
 80063be:	4683      	mov	fp, r0
 80063c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	dd05      	ble.n	80063d2 <_dtoa_r+0x842>
 80063c6:	4621      	mov	r1, r4
 80063c8:	461a      	mov	r2, r3
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 fc08 	bl	8006be0 <__lshift>
 80063d0:	4604      	mov	r4, r0
 80063d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d070      	beq.n	80064ba <_dtoa_r+0x92a>
 80063d8:	4621      	mov	r1, r4
 80063da:	4658      	mov	r0, fp
 80063dc:	f000 fc70 	bl	8006cc0 <__mcmp>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	da6a      	bge.n	80064ba <_dtoa_r+0x92a>
 80063e4:	2300      	movs	r3, #0
 80063e6:	4659      	mov	r1, fp
 80063e8:	220a      	movs	r2, #10
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 fa4c 	bl	8006888 <__multadd>
 80063f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f2:	4683      	mov	fp, r0
 80063f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8194 	beq.w	8006726 <_dtoa_r+0xb96>
 80063fe:	4631      	mov	r1, r6
 8006400:	2300      	movs	r3, #0
 8006402:	220a      	movs	r2, #10
 8006404:	4628      	mov	r0, r5
 8006406:	f000 fa3f 	bl	8006888 <__multadd>
 800640a:	f1b9 0f00 	cmp.w	r9, #0
 800640e:	4606      	mov	r6, r0
 8006410:	f300 8093 	bgt.w	800653a <_dtoa_r+0x9aa>
 8006414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006416:	2b02      	cmp	r3, #2
 8006418:	dc57      	bgt.n	80064ca <_dtoa_r+0x93a>
 800641a:	e08e      	b.n	800653a <_dtoa_r+0x9aa>
 800641c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800641e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006422:	e757      	b.n	80062d4 <_dtoa_r+0x744>
 8006424:	9b08      	ldr	r3, [sp, #32]
 8006426:	1e5c      	subs	r4, r3, #1
 8006428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642a:	42a3      	cmp	r3, r4
 800642c:	bfb7      	itett	lt
 800642e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006430:	1b1c      	subge	r4, r3, r4
 8006432:	1ae2      	sublt	r2, r4, r3
 8006434:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006436:	bfbe      	ittt	lt
 8006438:	940a      	strlt	r4, [sp, #40]	; 0x28
 800643a:	189b      	addlt	r3, r3, r2
 800643c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800643e:	9b08      	ldr	r3, [sp, #32]
 8006440:	bfb8      	it	lt
 8006442:	2400      	movlt	r4, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	bfbb      	ittet	lt
 8006448:	9b06      	ldrlt	r3, [sp, #24]
 800644a:	9a08      	ldrlt	r2, [sp, #32]
 800644c:	9f06      	ldrge	r7, [sp, #24]
 800644e:	1a9f      	sublt	r7, r3, r2
 8006450:	bfac      	ite	ge
 8006452:	9b08      	ldrge	r3, [sp, #32]
 8006454:	2300      	movlt	r3, #0
 8006456:	e73f      	b.n	80062d8 <_dtoa_r+0x748>
 8006458:	3fe00000 	.word	0x3fe00000
 800645c:	40240000 	.word	0x40240000
 8006460:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006462:	9f06      	ldr	r7, [sp, #24]
 8006464:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006466:	e742      	b.n	80062ee <_dtoa_r+0x75e>
 8006468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800646a:	e76b      	b.n	8006344 <_dtoa_r+0x7b4>
 800646c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800646e:	2b01      	cmp	r3, #1
 8006470:	dc19      	bgt.n	80064a6 <_dtoa_r+0x916>
 8006472:	9b04      	ldr	r3, [sp, #16]
 8006474:	b9bb      	cbnz	r3, 80064a6 <_dtoa_r+0x916>
 8006476:	9b05      	ldr	r3, [sp, #20]
 8006478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800647c:	b99b      	cbnz	r3, 80064a6 <_dtoa_r+0x916>
 800647e:	9b05      	ldr	r3, [sp, #20]
 8006480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006484:	0d1b      	lsrs	r3, r3, #20
 8006486:	051b      	lsls	r3, r3, #20
 8006488:	b183      	cbz	r3, 80064ac <_dtoa_r+0x91c>
 800648a:	f04f 0801 	mov.w	r8, #1
 800648e:	9b06      	ldr	r3, [sp, #24]
 8006490:	3301      	adds	r3, #1
 8006492:	9306      	str	r3, [sp, #24]
 8006494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006496:	3301      	adds	r3, #1
 8006498:	9309      	str	r3, [sp, #36]	; 0x24
 800649a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	f47f af6a 	bne.w	8006376 <_dtoa_r+0x7e6>
 80064a2:	2001      	movs	r0, #1
 80064a4:	e76f      	b.n	8006386 <_dtoa_r+0x7f6>
 80064a6:	f04f 0800 	mov.w	r8, #0
 80064aa:	e7f6      	b.n	800649a <_dtoa_r+0x90a>
 80064ac:	4698      	mov	r8, r3
 80064ae:	e7f4      	b.n	800649a <_dtoa_r+0x90a>
 80064b0:	f43f af7d 	beq.w	80063ae <_dtoa_r+0x81e>
 80064b4:	4618      	mov	r0, r3
 80064b6:	301c      	adds	r0, #28
 80064b8:	e772      	b.n	80063a0 <_dtoa_r+0x810>
 80064ba:	9b08      	ldr	r3, [sp, #32]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc36      	bgt.n	800652e <_dtoa_r+0x99e>
 80064c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	dd33      	ble.n	800652e <_dtoa_r+0x99e>
 80064c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064ca:	f1b9 0f00 	cmp.w	r9, #0
 80064ce:	d10d      	bne.n	80064ec <_dtoa_r+0x95c>
 80064d0:	4621      	mov	r1, r4
 80064d2:	464b      	mov	r3, r9
 80064d4:	2205      	movs	r2, #5
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 f9d6 	bl	8006888 <__multadd>
 80064dc:	4601      	mov	r1, r0
 80064de:	4604      	mov	r4, r0
 80064e0:	4658      	mov	r0, fp
 80064e2:	f000 fbed 	bl	8006cc0 <__mcmp>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	f73f adb8 	bgt.w	800605c <_dtoa_r+0x4cc>
 80064ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064ee:	9f03      	ldr	r7, [sp, #12]
 80064f0:	ea6f 0a03 	mvn.w	sl, r3
 80064f4:	f04f 0800 	mov.w	r8, #0
 80064f8:	4621      	mov	r1, r4
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 f9a2 	bl	8006844 <_Bfree>
 8006500:	2e00      	cmp	r6, #0
 8006502:	f43f aea7 	beq.w	8006254 <_dtoa_r+0x6c4>
 8006506:	f1b8 0f00 	cmp.w	r8, #0
 800650a:	d005      	beq.n	8006518 <_dtoa_r+0x988>
 800650c:	45b0      	cmp	r8, r6
 800650e:	d003      	beq.n	8006518 <_dtoa_r+0x988>
 8006510:	4641      	mov	r1, r8
 8006512:	4628      	mov	r0, r5
 8006514:	f000 f996 	bl	8006844 <_Bfree>
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	f000 f992 	bl	8006844 <_Bfree>
 8006520:	e698      	b.n	8006254 <_dtoa_r+0x6c4>
 8006522:	2400      	movs	r4, #0
 8006524:	4626      	mov	r6, r4
 8006526:	e7e1      	b.n	80064ec <_dtoa_r+0x95c>
 8006528:	46c2      	mov	sl, r8
 800652a:	4626      	mov	r6, r4
 800652c:	e596      	b.n	800605c <_dtoa_r+0x4cc>
 800652e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006530:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80fd 	beq.w	8006734 <_dtoa_r+0xba4>
 800653a:	2f00      	cmp	r7, #0
 800653c:	dd05      	ble.n	800654a <_dtoa_r+0x9ba>
 800653e:	4631      	mov	r1, r6
 8006540:	463a      	mov	r2, r7
 8006542:	4628      	mov	r0, r5
 8006544:	f000 fb4c 	bl	8006be0 <__lshift>
 8006548:	4606      	mov	r6, r0
 800654a:	f1b8 0f00 	cmp.w	r8, #0
 800654e:	d05c      	beq.n	800660a <_dtoa_r+0xa7a>
 8006550:	4628      	mov	r0, r5
 8006552:	6871      	ldr	r1, [r6, #4]
 8006554:	f000 f936 	bl	80067c4 <_Balloc>
 8006558:	4607      	mov	r7, r0
 800655a:	b928      	cbnz	r0, 8006568 <_dtoa_r+0x9d8>
 800655c:	4602      	mov	r2, r0
 800655e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006562:	4b7f      	ldr	r3, [pc, #508]	; (8006760 <_dtoa_r+0xbd0>)
 8006564:	f7ff bb28 	b.w	8005bb8 <_dtoa_r+0x28>
 8006568:	6932      	ldr	r2, [r6, #16]
 800656a:	f106 010c 	add.w	r1, r6, #12
 800656e:	3202      	adds	r2, #2
 8006570:	0092      	lsls	r2, r2, #2
 8006572:	300c      	adds	r0, #12
 8006574:	f000 f90c 	bl	8006790 <memcpy>
 8006578:	2201      	movs	r2, #1
 800657a:	4639      	mov	r1, r7
 800657c:	4628      	mov	r0, r5
 800657e:	f000 fb2f 	bl	8006be0 <__lshift>
 8006582:	46b0      	mov	r8, r6
 8006584:	4606      	mov	r6, r0
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	3301      	adds	r3, #1
 800658a:	9308      	str	r3, [sp, #32]
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	444b      	add	r3, r9
 8006590:	930a      	str	r3, [sp, #40]	; 0x28
 8006592:	9b04      	ldr	r3, [sp, #16]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	9309      	str	r3, [sp, #36]	; 0x24
 800659a:	9b08      	ldr	r3, [sp, #32]
 800659c:	4621      	mov	r1, r4
 800659e:	3b01      	subs	r3, #1
 80065a0:	4658      	mov	r0, fp
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	f7ff fa66 	bl	8005a74 <quorem>
 80065a8:	4603      	mov	r3, r0
 80065aa:	4641      	mov	r1, r8
 80065ac:	3330      	adds	r3, #48	; 0x30
 80065ae:	9006      	str	r0, [sp, #24]
 80065b0:	4658      	mov	r0, fp
 80065b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b4:	f000 fb84 	bl	8006cc0 <__mcmp>
 80065b8:	4632      	mov	r2, r6
 80065ba:	4681      	mov	r9, r0
 80065bc:	4621      	mov	r1, r4
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 fb9a 	bl	8006cf8 <__mdiff>
 80065c4:	68c2      	ldr	r2, [r0, #12]
 80065c6:	4607      	mov	r7, r0
 80065c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ca:	bb02      	cbnz	r2, 800660e <_dtoa_r+0xa7e>
 80065cc:	4601      	mov	r1, r0
 80065ce:	4658      	mov	r0, fp
 80065d0:	f000 fb76 	bl	8006cc0 <__mcmp>
 80065d4:	4602      	mov	r2, r0
 80065d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d8:	4639      	mov	r1, r7
 80065da:	4628      	mov	r0, r5
 80065dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80065e0:	f000 f930 	bl	8006844 <_Bfree>
 80065e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065e8:	9f08      	ldr	r7, [sp, #32]
 80065ea:	ea43 0102 	orr.w	r1, r3, r2
 80065ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f0:	430b      	orrs	r3, r1
 80065f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f4:	d10d      	bne.n	8006612 <_dtoa_r+0xa82>
 80065f6:	2b39      	cmp	r3, #57	; 0x39
 80065f8:	d029      	beq.n	800664e <_dtoa_r+0xabe>
 80065fa:	f1b9 0f00 	cmp.w	r9, #0
 80065fe:	dd01      	ble.n	8006604 <_dtoa_r+0xa74>
 8006600:	9b06      	ldr	r3, [sp, #24]
 8006602:	3331      	adds	r3, #49	; 0x31
 8006604:	9a04      	ldr	r2, [sp, #16]
 8006606:	7013      	strb	r3, [r2, #0]
 8006608:	e776      	b.n	80064f8 <_dtoa_r+0x968>
 800660a:	4630      	mov	r0, r6
 800660c:	e7b9      	b.n	8006582 <_dtoa_r+0x9f2>
 800660e:	2201      	movs	r2, #1
 8006610:	e7e2      	b.n	80065d8 <_dtoa_r+0xa48>
 8006612:	f1b9 0f00 	cmp.w	r9, #0
 8006616:	db06      	blt.n	8006626 <_dtoa_r+0xa96>
 8006618:	9922      	ldr	r1, [sp, #136]	; 0x88
 800661a:	ea41 0909 	orr.w	r9, r1, r9
 800661e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006620:	ea59 0101 	orrs.w	r1, r9, r1
 8006624:	d120      	bne.n	8006668 <_dtoa_r+0xad8>
 8006626:	2a00      	cmp	r2, #0
 8006628:	ddec      	ble.n	8006604 <_dtoa_r+0xa74>
 800662a:	4659      	mov	r1, fp
 800662c:	2201      	movs	r2, #1
 800662e:	4628      	mov	r0, r5
 8006630:	9308      	str	r3, [sp, #32]
 8006632:	f000 fad5 	bl	8006be0 <__lshift>
 8006636:	4621      	mov	r1, r4
 8006638:	4683      	mov	fp, r0
 800663a:	f000 fb41 	bl	8006cc0 <__mcmp>
 800663e:	2800      	cmp	r0, #0
 8006640:	9b08      	ldr	r3, [sp, #32]
 8006642:	dc02      	bgt.n	800664a <_dtoa_r+0xaba>
 8006644:	d1de      	bne.n	8006604 <_dtoa_r+0xa74>
 8006646:	07da      	lsls	r2, r3, #31
 8006648:	d5dc      	bpl.n	8006604 <_dtoa_r+0xa74>
 800664a:	2b39      	cmp	r3, #57	; 0x39
 800664c:	d1d8      	bne.n	8006600 <_dtoa_r+0xa70>
 800664e:	2339      	movs	r3, #57	; 0x39
 8006650:	9a04      	ldr	r2, [sp, #16]
 8006652:	7013      	strb	r3, [r2, #0]
 8006654:	463b      	mov	r3, r7
 8006656:	461f      	mov	r7, r3
 8006658:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800665c:	3b01      	subs	r3, #1
 800665e:	2a39      	cmp	r2, #57	; 0x39
 8006660:	d050      	beq.n	8006704 <_dtoa_r+0xb74>
 8006662:	3201      	adds	r2, #1
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	e747      	b.n	80064f8 <_dtoa_r+0x968>
 8006668:	2a00      	cmp	r2, #0
 800666a:	dd03      	ble.n	8006674 <_dtoa_r+0xae4>
 800666c:	2b39      	cmp	r3, #57	; 0x39
 800666e:	d0ee      	beq.n	800664e <_dtoa_r+0xabe>
 8006670:	3301      	adds	r3, #1
 8006672:	e7c7      	b.n	8006604 <_dtoa_r+0xa74>
 8006674:	9a08      	ldr	r2, [sp, #32]
 8006676:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006678:	f802 3c01 	strb.w	r3, [r2, #-1]
 800667c:	428a      	cmp	r2, r1
 800667e:	d02a      	beq.n	80066d6 <_dtoa_r+0xb46>
 8006680:	4659      	mov	r1, fp
 8006682:	2300      	movs	r3, #0
 8006684:	220a      	movs	r2, #10
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f8fe 	bl	8006888 <__multadd>
 800668c:	45b0      	cmp	r8, r6
 800668e:	4683      	mov	fp, r0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	f04f 020a 	mov.w	r2, #10
 8006698:	4641      	mov	r1, r8
 800669a:	4628      	mov	r0, r5
 800669c:	d107      	bne.n	80066ae <_dtoa_r+0xb1e>
 800669e:	f000 f8f3 	bl	8006888 <__multadd>
 80066a2:	4680      	mov	r8, r0
 80066a4:	4606      	mov	r6, r0
 80066a6:	9b08      	ldr	r3, [sp, #32]
 80066a8:	3301      	adds	r3, #1
 80066aa:	9308      	str	r3, [sp, #32]
 80066ac:	e775      	b.n	800659a <_dtoa_r+0xa0a>
 80066ae:	f000 f8eb 	bl	8006888 <__multadd>
 80066b2:	4631      	mov	r1, r6
 80066b4:	4680      	mov	r8, r0
 80066b6:	2300      	movs	r3, #0
 80066b8:	220a      	movs	r2, #10
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 f8e4 	bl	8006888 <__multadd>
 80066c0:	4606      	mov	r6, r0
 80066c2:	e7f0      	b.n	80066a6 <_dtoa_r+0xb16>
 80066c4:	f1b9 0f00 	cmp.w	r9, #0
 80066c8:	bfcc      	ite	gt
 80066ca:	464f      	movgt	r7, r9
 80066cc:	2701      	movle	r7, #1
 80066ce:	f04f 0800 	mov.w	r8, #0
 80066d2:	9a03      	ldr	r2, [sp, #12]
 80066d4:	4417      	add	r7, r2
 80066d6:	4659      	mov	r1, fp
 80066d8:	2201      	movs	r2, #1
 80066da:	4628      	mov	r0, r5
 80066dc:	9308      	str	r3, [sp, #32]
 80066de:	f000 fa7f 	bl	8006be0 <__lshift>
 80066e2:	4621      	mov	r1, r4
 80066e4:	4683      	mov	fp, r0
 80066e6:	f000 faeb 	bl	8006cc0 <__mcmp>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	dcb2      	bgt.n	8006654 <_dtoa_r+0xac4>
 80066ee:	d102      	bne.n	80066f6 <_dtoa_r+0xb66>
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	07db      	lsls	r3, r3, #31
 80066f4:	d4ae      	bmi.n	8006654 <_dtoa_r+0xac4>
 80066f6:	463b      	mov	r3, r7
 80066f8:	461f      	mov	r7, r3
 80066fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066fe:	2a30      	cmp	r2, #48	; 0x30
 8006700:	d0fa      	beq.n	80066f8 <_dtoa_r+0xb68>
 8006702:	e6f9      	b.n	80064f8 <_dtoa_r+0x968>
 8006704:	9a03      	ldr	r2, [sp, #12]
 8006706:	429a      	cmp	r2, r3
 8006708:	d1a5      	bne.n	8006656 <_dtoa_r+0xac6>
 800670a:	2331      	movs	r3, #49	; 0x31
 800670c:	f10a 0a01 	add.w	sl, sl, #1
 8006710:	e779      	b.n	8006606 <_dtoa_r+0xa76>
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <_dtoa_r+0xbd4>)
 8006714:	f7ff baa8 	b.w	8005c68 <_dtoa_r+0xd8>
 8006718:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800671a:	2b00      	cmp	r3, #0
 800671c:	f47f aa81 	bne.w	8005c22 <_dtoa_r+0x92>
 8006720:	4b11      	ldr	r3, [pc, #68]	; (8006768 <_dtoa_r+0xbd8>)
 8006722:	f7ff baa1 	b.w	8005c68 <_dtoa_r+0xd8>
 8006726:	f1b9 0f00 	cmp.w	r9, #0
 800672a:	dc03      	bgt.n	8006734 <_dtoa_r+0xba4>
 800672c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800672e:	2b02      	cmp	r3, #2
 8006730:	f73f aecb 	bgt.w	80064ca <_dtoa_r+0x93a>
 8006734:	9f03      	ldr	r7, [sp, #12]
 8006736:	4621      	mov	r1, r4
 8006738:	4658      	mov	r0, fp
 800673a:	f7ff f99b 	bl	8005a74 <quorem>
 800673e:	9a03      	ldr	r2, [sp, #12]
 8006740:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006744:	f807 3b01 	strb.w	r3, [r7], #1
 8006748:	1aba      	subs	r2, r7, r2
 800674a:	4591      	cmp	r9, r2
 800674c:	ddba      	ble.n	80066c4 <_dtoa_r+0xb34>
 800674e:	4659      	mov	r1, fp
 8006750:	2300      	movs	r3, #0
 8006752:	220a      	movs	r2, #10
 8006754:	4628      	mov	r0, r5
 8006756:	f000 f897 	bl	8006888 <__multadd>
 800675a:	4683      	mov	fp, r0
 800675c:	e7eb      	b.n	8006736 <_dtoa_r+0xba6>
 800675e:	bf00      	nop
 8006760:	08007e93 	.word	0x08007e93
 8006764:	08007df0 	.word	0x08007df0
 8006768:	08007e14 	.word	0x08007e14

0800676c <_localeconv_r>:
 800676c:	4800      	ldr	r0, [pc, #0]	; (8006770 <_localeconv_r+0x4>)
 800676e:	4770      	bx	lr
 8006770:	20000174 	.word	0x20000174

08006774 <memchr>:
 8006774:	4603      	mov	r3, r0
 8006776:	b510      	push	{r4, lr}
 8006778:	b2c9      	uxtb	r1, r1
 800677a:	4402      	add	r2, r0
 800677c:	4293      	cmp	r3, r2
 800677e:	4618      	mov	r0, r3
 8006780:	d101      	bne.n	8006786 <memchr+0x12>
 8006782:	2000      	movs	r0, #0
 8006784:	e003      	b.n	800678e <memchr+0x1a>
 8006786:	7804      	ldrb	r4, [r0, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	428c      	cmp	r4, r1
 800678c:	d1f6      	bne.n	800677c <memchr+0x8>
 800678e:	bd10      	pop	{r4, pc}

08006790 <memcpy>:
 8006790:	440a      	add	r2, r1
 8006792:	4291      	cmp	r1, r2
 8006794:	f100 33ff 	add.w	r3, r0, #4294967295
 8006798:	d100      	bne.n	800679c <memcpy+0xc>
 800679a:	4770      	bx	lr
 800679c:	b510      	push	{r4, lr}
 800679e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a2:	4291      	cmp	r1, r2
 80067a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067a8:	d1f9      	bne.n	800679e <memcpy+0xe>
 80067aa:	bd10      	pop	{r4, pc}

080067ac <__malloc_lock>:
 80067ac:	4801      	ldr	r0, [pc, #4]	; (80067b4 <__malloc_lock+0x8>)
 80067ae:	f000 bd2c 	b.w	800720a <__retarget_lock_acquire_recursive>
 80067b2:	bf00      	nop
 80067b4:	200004b4 	.word	0x200004b4

080067b8 <__malloc_unlock>:
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <__malloc_unlock+0x8>)
 80067ba:	f000 bd27 	b.w	800720c <__retarget_lock_release_recursive>
 80067be:	bf00      	nop
 80067c0:	200004b4 	.word	0x200004b4

080067c4 <_Balloc>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067c8:	4604      	mov	r4, r0
 80067ca:	460d      	mov	r5, r1
 80067cc:	b976      	cbnz	r6, 80067ec <_Balloc+0x28>
 80067ce:	2010      	movs	r0, #16
 80067d0:	f7fe fbcc 	bl	8004f6c <malloc>
 80067d4:	4602      	mov	r2, r0
 80067d6:	6260      	str	r0, [r4, #36]	; 0x24
 80067d8:	b920      	cbnz	r0, 80067e4 <_Balloc+0x20>
 80067da:	2166      	movs	r1, #102	; 0x66
 80067dc:	4b17      	ldr	r3, [pc, #92]	; (800683c <_Balloc+0x78>)
 80067de:	4818      	ldr	r0, [pc, #96]	; (8006840 <_Balloc+0x7c>)
 80067e0:	f000 fce2 	bl	80071a8 <__assert_func>
 80067e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067e8:	6006      	str	r6, [r0, #0]
 80067ea:	60c6      	str	r6, [r0, #12]
 80067ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80067ee:	68f3      	ldr	r3, [r6, #12]
 80067f0:	b183      	cbz	r3, 8006814 <_Balloc+0x50>
 80067f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067fa:	b9b8      	cbnz	r0, 800682c <_Balloc+0x68>
 80067fc:	2101      	movs	r1, #1
 80067fe:	fa01 f605 	lsl.w	r6, r1, r5
 8006802:	1d72      	adds	r2, r6, #5
 8006804:	4620      	mov	r0, r4
 8006806:	0092      	lsls	r2, r2, #2
 8006808:	f000 fb5e 	bl	8006ec8 <_calloc_r>
 800680c:	b160      	cbz	r0, 8006828 <_Balloc+0x64>
 800680e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006812:	e00e      	b.n	8006832 <_Balloc+0x6e>
 8006814:	2221      	movs	r2, #33	; 0x21
 8006816:	2104      	movs	r1, #4
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fb55 	bl	8006ec8 <_calloc_r>
 800681e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006820:	60f0      	str	r0, [r6, #12]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e4      	bne.n	80067f2 <_Balloc+0x2e>
 8006828:	2000      	movs	r0, #0
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	6802      	ldr	r2, [r0, #0]
 800682e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006832:	2300      	movs	r3, #0
 8006834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006838:	e7f7      	b.n	800682a <_Balloc+0x66>
 800683a:	bf00      	nop
 800683c:	08007e21 	.word	0x08007e21
 8006840:	08007ea4 	.word	0x08007ea4

08006844 <_Bfree>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006848:	4605      	mov	r5, r0
 800684a:	460c      	mov	r4, r1
 800684c:	b976      	cbnz	r6, 800686c <_Bfree+0x28>
 800684e:	2010      	movs	r0, #16
 8006850:	f7fe fb8c 	bl	8004f6c <malloc>
 8006854:	4602      	mov	r2, r0
 8006856:	6268      	str	r0, [r5, #36]	; 0x24
 8006858:	b920      	cbnz	r0, 8006864 <_Bfree+0x20>
 800685a:	218a      	movs	r1, #138	; 0x8a
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <_Bfree+0x3c>)
 800685e:	4809      	ldr	r0, [pc, #36]	; (8006884 <_Bfree+0x40>)
 8006860:	f000 fca2 	bl	80071a8 <__assert_func>
 8006864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006868:	6006      	str	r6, [r0, #0]
 800686a:	60c6      	str	r6, [r0, #12]
 800686c:	b13c      	cbz	r4, 800687e <_Bfree+0x3a>
 800686e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006870:	6862      	ldr	r2, [r4, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006878:	6021      	str	r1, [r4, #0]
 800687a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	08007e21 	.word	0x08007e21
 8006884:	08007ea4 	.word	0x08007ea4

08006888 <__multadd>:
 8006888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	4607      	mov	r7, r0
 800688e:	460c      	mov	r4, r1
 8006890:	461e      	mov	r6, r3
 8006892:	2000      	movs	r0, #0
 8006894:	690d      	ldr	r5, [r1, #16]
 8006896:	f101 0c14 	add.w	ip, r1, #20
 800689a:	f8dc 3000 	ldr.w	r3, [ip]
 800689e:	3001      	adds	r0, #1
 80068a0:	b299      	uxth	r1, r3
 80068a2:	fb02 6101 	mla	r1, r2, r1, r6
 80068a6:	0c1e      	lsrs	r6, r3, #16
 80068a8:	0c0b      	lsrs	r3, r1, #16
 80068aa:	fb02 3306 	mla	r3, r2, r6, r3
 80068ae:	b289      	uxth	r1, r1
 80068b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068b4:	4285      	cmp	r5, r0
 80068b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068ba:	f84c 1b04 	str.w	r1, [ip], #4
 80068be:	dcec      	bgt.n	800689a <__multadd+0x12>
 80068c0:	b30e      	cbz	r6, 8006906 <__multadd+0x7e>
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	42ab      	cmp	r3, r5
 80068c6:	dc19      	bgt.n	80068fc <__multadd+0x74>
 80068c8:	6861      	ldr	r1, [r4, #4]
 80068ca:	4638      	mov	r0, r7
 80068cc:	3101      	adds	r1, #1
 80068ce:	f7ff ff79 	bl	80067c4 <_Balloc>
 80068d2:	4680      	mov	r8, r0
 80068d4:	b928      	cbnz	r0, 80068e2 <__multadd+0x5a>
 80068d6:	4602      	mov	r2, r0
 80068d8:	21b5      	movs	r1, #181	; 0xb5
 80068da:	4b0c      	ldr	r3, [pc, #48]	; (800690c <__multadd+0x84>)
 80068dc:	480c      	ldr	r0, [pc, #48]	; (8006910 <__multadd+0x88>)
 80068de:	f000 fc63 	bl	80071a8 <__assert_func>
 80068e2:	6922      	ldr	r2, [r4, #16]
 80068e4:	f104 010c 	add.w	r1, r4, #12
 80068e8:	3202      	adds	r2, #2
 80068ea:	0092      	lsls	r2, r2, #2
 80068ec:	300c      	adds	r0, #12
 80068ee:	f7ff ff4f 	bl	8006790 <memcpy>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4638      	mov	r0, r7
 80068f6:	f7ff ffa5 	bl	8006844 <_Bfree>
 80068fa:	4644      	mov	r4, r8
 80068fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006900:	3501      	adds	r5, #1
 8006902:	615e      	str	r6, [r3, #20]
 8006904:	6125      	str	r5, [r4, #16]
 8006906:	4620      	mov	r0, r4
 8006908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800690c:	08007e93 	.word	0x08007e93
 8006910:	08007ea4 	.word	0x08007ea4

08006914 <__hi0bits>:
 8006914:	0c02      	lsrs	r2, r0, #16
 8006916:	0412      	lsls	r2, r2, #16
 8006918:	4603      	mov	r3, r0
 800691a:	b9ca      	cbnz	r2, 8006950 <__hi0bits+0x3c>
 800691c:	0403      	lsls	r3, r0, #16
 800691e:	2010      	movs	r0, #16
 8006920:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006924:	bf04      	itt	eq
 8006926:	021b      	lsleq	r3, r3, #8
 8006928:	3008      	addeq	r0, #8
 800692a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800692e:	bf04      	itt	eq
 8006930:	011b      	lsleq	r3, r3, #4
 8006932:	3004      	addeq	r0, #4
 8006934:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006938:	bf04      	itt	eq
 800693a:	009b      	lsleq	r3, r3, #2
 800693c:	3002      	addeq	r0, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	db05      	blt.n	800694e <__hi0bits+0x3a>
 8006942:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006946:	f100 0001 	add.w	r0, r0, #1
 800694a:	bf08      	it	eq
 800694c:	2020      	moveq	r0, #32
 800694e:	4770      	bx	lr
 8006950:	2000      	movs	r0, #0
 8006952:	e7e5      	b.n	8006920 <__hi0bits+0xc>

08006954 <__lo0bits>:
 8006954:	6803      	ldr	r3, [r0, #0]
 8006956:	4602      	mov	r2, r0
 8006958:	f013 0007 	ands.w	r0, r3, #7
 800695c:	d00b      	beq.n	8006976 <__lo0bits+0x22>
 800695e:	07d9      	lsls	r1, r3, #31
 8006960:	d421      	bmi.n	80069a6 <__lo0bits+0x52>
 8006962:	0798      	lsls	r0, r3, #30
 8006964:	bf49      	itett	mi
 8006966:	085b      	lsrmi	r3, r3, #1
 8006968:	089b      	lsrpl	r3, r3, #2
 800696a:	2001      	movmi	r0, #1
 800696c:	6013      	strmi	r3, [r2, #0]
 800696e:	bf5c      	itt	pl
 8006970:	2002      	movpl	r0, #2
 8006972:	6013      	strpl	r3, [r2, #0]
 8006974:	4770      	bx	lr
 8006976:	b299      	uxth	r1, r3
 8006978:	b909      	cbnz	r1, 800697e <__lo0bits+0x2a>
 800697a:	2010      	movs	r0, #16
 800697c:	0c1b      	lsrs	r3, r3, #16
 800697e:	b2d9      	uxtb	r1, r3
 8006980:	b909      	cbnz	r1, 8006986 <__lo0bits+0x32>
 8006982:	3008      	adds	r0, #8
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	0719      	lsls	r1, r3, #28
 8006988:	bf04      	itt	eq
 800698a:	091b      	lsreq	r3, r3, #4
 800698c:	3004      	addeq	r0, #4
 800698e:	0799      	lsls	r1, r3, #30
 8006990:	bf04      	itt	eq
 8006992:	089b      	lsreq	r3, r3, #2
 8006994:	3002      	addeq	r0, #2
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	d403      	bmi.n	80069a2 <__lo0bits+0x4e>
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	f100 0001 	add.w	r0, r0, #1
 80069a0:	d003      	beq.n	80069aa <__lo0bits+0x56>
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4770      	bx	lr
 80069a6:	2000      	movs	r0, #0
 80069a8:	4770      	bx	lr
 80069aa:	2020      	movs	r0, #32
 80069ac:	4770      	bx	lr
	...

080069b0 <__i2b>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	460c      	mov	r4, r1
 80069b4:	2101      	movs	r1, #1
 80069b6:	f7ff ff05 	bl	80067c4 <_Balloc>
 80069ba:	4602      	mov	r2, r0
 80069bc:	b928      	cbnz	r0, 80069ca <__i2b+0x1a>
 80069be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80069c2:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <__i2b+0x24>)
 80069c4:	4804      	ldr	r0, [pc, #16]	; (80069d8 <__i2b+0x28>)
 80069c6:	f000 fbef 	bl	80071a8 <__assert_func>
 80069ca:	2301      	movs	r3, #1
 80069cc:	6144      	str	r4, [r0, #20]
 80069ce:	6103      	str	r3, [r0, #16]
 80069d0:	bd10      	pop	{r4, pc}
 80069d2:	bf00      	nop
 80069d4:	08007e93 	.word	0x08007e93
 80069d8:	08007ea4 	.word	0x08007ea4

080069dc <__multiply>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	4691      	mov	r9, r2
 80069e2:	690a      	ldr	r2, [r1, #16]
 80069e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069e8:	460c      	mov	r4, r1
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bfbe      	ittt	lt
 80069ee:	460b      	movlt	r3, r1
 80069f0:	464c      	movlt	r4, r9
 80069f2:	4699      	movlt	r9, r3
 80069f4:	6927      	ldr	r7, [r4, #16]
 80069f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	6861      	ldr	r1, [r4, #4]
 80069fe:	eb07 060a 	add.w	r6, r7, sl
 8006a02:	42b3      	cmp	r3, r6
 8006a04:	b085      	sub	sp, #20
 8006a06:	bfb8      	it	lt
 8006a08:	3101      	addlt	r1, #1
 8006a0a:	f7ff fedb 	bl	80067c4 <_Balloc>
 8006a0e:	b930      	cbnz	r0, 8006a1e <__multiply+0x42>
 8006a10:	4602      	mov	r2, r0
 8006a12:	f240 115d 	movw	r1, #349	; 0x15d
 8006a16:	4b43      	ldr	r3, [pc, #268]	; (8006b24 <__multiply+0x148>)
 8006a18:	4843      	ldr	r0, [pc, #268]	; (8006b28 <__multiply+0x14c>)
 8006a1a:	f000 fbc5 	bl	80071a8 <__assert_func>
 8006a1e:	f100 0514 	add.w	r5, r0, #20
 8006a22:	462b      	mov	r3, r5
 8006a24:	2200      	movs	r2, #0
 8006a26:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a2a:	4543      	cmp	r3, r8
 8006a2c:	d321      	bcc.n	8006a72 <__multiply+0x96>
 8006a2e:	f104 0314 	add.w	r3, r4, #20
 8006a32:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a36:	f109 0314 	add.w	r3, r9, #20
 8006a3a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a3e:	9202      	str	r2, [sp, #8]
 8006a40:	1b3a      	subs	r2, r7, r4
 8006a42:	3a15      	subs	r2, #21
 8006a44:	f022 0203 	bic.w	r2, r2, #3
 8006a48:	3204      	adds	r2, #4
 8006a4a:	f104 0115 	add.w	r1, r4, #21
 8006a4e:	428f      	cmp	r7, r1
 8006a50:	bf38      	it	cc
 8006a52:	2204      	movcc	r2, #4
 8006a54:	9201      	str	r2, [sp, #4]
 8006a56:	9a02      	ldr	r2, [sp, #8]
 8006a58:	9303      	str	r3, [sp, #12]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d80c      	bhi.n	8006a78 <__multiply+0x9c>
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	dd03      	ble.n	8006a6a <__multiply+0x8e>
 8006a62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d059      	beq.n	8006b1e <__multiply+0x142>
 8006a6a:	6106      	str	r6, [r0, #16]
 8006a6c:	b005      	add	sp, #20
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a72:	f843 2b04 	str.w	r2, [r3], #4
 8006a76:	e7d8      	b.n	8006a2a <__multiply+0x4e>
 8006a78:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a7c:	f1ba 0f00 	cmp.w	sl, #0
 8006a80:	d023      	beq.n	8006aca <__multiply+0xee>
 8006a82:	46a9      	mov	r9, r5
 8006a84:	f04f 0c00 	mov.w	ip, #0
 8006a88:	f104 0e14 	add.w	lr, r4, #20
 8006a8c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a90:	f8d9 1000 	ldr.w	r1, [r9]
 8006a94:	fa1f fb82 	uxth.w	fp, r2
 8006a98:	b289      	uxth	r1, r1
 8006a9a:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a9e:	4461      	add	r1, ip
 8006aa0:	f8d9 c000 	ldr.w	ip, [r9]
 8006aa4:	0c12      	lsrs	r2, r2, #16
 8006aa6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006aaa:	fb0a c202 	mla	r2, sl, r2, ip
 8006aae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ab2:	b289      	uxth	r1, r1
 8006ab4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ab8:	4577      	cmp	r7, lr
 8006aba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006abe:	f849 1b04 	str.w	r1, [r9], #4
 8006ac2:	d8e3      	bhi.n	8006a8c <__multiply+0xb0>
 8006ac4:	9a01      	ldr	r2, [sp, #4]
 8006ac6:	f845 c002 	str.w	ip, [r5, r2]
 8006aca:	9a03      	ldr	r2, [sp, #12]
 8006acc:	3304      	adds	r3, #4
 8006ace:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ad2:	f1b9 0f00 	cmp.w	r9, #0
 8006ad6:	d020      	beq.n	8006b1a <__multiply+0x13e>
 8006ad8:	46ae      	mov	lr, r5
 8006ada:	f04f 0a00 	mov.w	sl, #0
 8006ade:	6829      	ldr	r1, [r5, #0]
 8006ae0:	f104 0c14 	add.w	ip, r4, #20
 8006ae4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ae8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006aec:	b289      	uxth	r1, r1
 8006aee:	fb09 220b 	mla	r2, r9, fp, r2
 8006af2:	4492      	add	sl, r2
 8006af4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006af8:	f84e 1b04 	str.w	r1, [lr], #4
 8006afc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006b00:	f8be 1000 	ldrh.w	r1, [lr]
 8006b04:	0c12      	lsrs	r2, r2, #16
 8006b06:	fb09 1102 	mla	r1, r9, r2, r1
 8006b0a:	4567      	cmp	r7, ip
 8006b0c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006b10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b14:	d8e6      	bhi.n	8006ae4 <__multiply+0x108>
 8006b16:	9a01      	ldr	r2, [sp, #4]
 8006b18:	50a9      	str	r1, [r5, r2]
 8006b1a:	3504      	adds	r5, #4
 8006b1c:	e79b      	b.n	8006a56 <__multiply+0x7a>
 8006b1e:	3e01      	subs	r6, #1
 8006b20:	e79d      	b.n	8006a5e <__multiply+0x82>
 8006b22:	bf00      	nop
 8006b24:	08007e93 	.word	0x08007e93
 8006b28:	08007ea4 	.word	0x08007ea4

08006b2c <__pow5mult>:
 8006b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b30:	4615      	mov	r5, r2
 8006b32:	f012 0203 	ands.w	r2, r2, #3
 8006b36:	4606      	mov	r6, r0
 8006b38:	460f      	mov	r7, r1
 8006b3a:	d007      	beq.n	8006b4c <__pow5mult+0x20>
 8006b3c:	4c25      	ldr	r4, [pc, #148]	; (8006bd4 <__pow5mult+0xa8>)
 8006b3e:	3a01      	subs	r2, #1
 8006b40:	2300      	movs	r3, #0
 8006b42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b46:	f7ff fe9f 	bl	8006888 <__multadd>
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	10ad      	asrs	r5, r5, #2
 8006b4e:	d03d      	beq.n	8006bcc <__pow5mult+0xa0>
 8006b50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b52:	b97c      	cbnz	r4, 8006b74 <__pow5mult+0x48>
 8006b54:	2010      	movs	r0, #16
 8006b56:	f7fe fa09 	bl	8004f6c <malloc>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6270      	str	r0, [r6, #36]	; 0x24
 8006b5e:	b928      	cbnz	r0, 8006b6c <__pow5mult+0x40>
 8006b60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006b64:	4b1c      	ldr	r3, [pc, #112]	; (8006bd8 <__pow5mult+0xac>)
 8006b66:	481d      	ldr	r0, [pc, #116]	; (8006bdc <__pow5mult+0xb0>)
 8006b68:	f000 fb1e 	bl	80071a8 <__assert_func>
 8006b6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b70:	6004      	str	r4, [r0, #0]
 8006b72:	60c4      	str	r4, [r0, #12]
 8006b74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b7c:	b94c      	cbnz	r4, 8006b92 <__pow5mult+0x66>
 8006b7e:	f240 2171 	movw	r1, #625	; 0x271
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7ff ff14 	bl	80069b0 <__i2b>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b90:	6003      	str	r3, [r0, #0]
 8006b92:	f04f 0900 	mov.w	r9, #0
 8006b96:	07eb      	lsls	r3, r5, #31
 8006b98:	d50a      	bpl.n	8006bb0 <__pow5mult+0x84>
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ff1c 	bl	80069dc <__multiply>
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7ff fe4b 	bl	8006844 <_Bfree>
 8006bae:	4647      	mov	r7, r8
 8006bb0:	106d      	asrs	r5, r5, #1
 8006bb2:	d00b      	beq.n	8006bcc <__pow5mult+0xa0>
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	b938      	cbnz	r0, 8006bc8 <__pow5mult+0x9c>
 8006bb8:	4622      	mov	r2, r4
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f7ff ff0d 	bl	80069dc <__multiply>
 8006bc2:	6020      	str	r0, [r4, #0]
 8006bc4:	f8c0 9000 	str.w	r9, [r0]
 8006bc8:	4604      	mov	r4, r0
 8006bca:	e7e4      	b.n	8006b96 <__pow5mult+0x6a>
 8006bcc:	4638      	mov	r0, r7
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08007ff0 	.word	0x08007ff0
 8006bd8:	08007e21 	.word	0x08007e21
 8006bdc:	08007ea4 	.word	0x08007ea4

08006be0 <__lshift>:
 8006be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be4:	460c      	mov	r4, r1
 8006be6:	4607      	mov	r7, r0
 8006be8:	4691      	mov	r9, r2
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	6849      	ldr	r1, [r1, #4]
 8006bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bf8:	f108 0601 	add.w	r6, r8, #1
 8006bfc:	42b3      	cmp	r3, r6
 8006bfe:	db0b      	blt.n	8006c18 <__lshift+0x38>
 8006c00:	4638      	mov	r0, r7
 8006c02:	f7ff fddf 	bl	80067c4 <_Balloc>
 8006c06:	4605      	mov	r5, r0
 8006c08:	b948      	cbnz	r0, 8006c1e <__lshift+0x3e>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c10:	4b29      	ldr	r3, [pc, #164]	; (8006cb8 <__lshift+0xd8>)
 8006c12:	482a      	ldr	r0, [pc, #168]	; (8006cbc <__lshift+0xdc>)
 8006c14:	f000 fac8 	bl	80071a8 <__assert_func>
 8006c18:	3101      	adds	r1, #1
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	e7ee      	b.n	8006bfc <__lshift+0x1c>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f100 0114 	add.w	r1, r0, #20
 8006c24:	f100 0210 	add.w	r2, r0, #16
 8006c28:	4618      	mov	r0, r3
 8006c2a:	4553      	cmp	r3, sl
 8006c2c:	db37      	blt.n	8006c9e <__lshift+0xbe>
 8006c2e:	6920      	ldr	r0, [r4, #16]
 8006c30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c34:	f104 0314 	add.w	r3, r4, #20
 8006c38:	f019 091f 	ands.w	r9, r9, #31
 8006c3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006c44:	d02f      	beq.n	8006ca6 <__lshift+0xc6>
 8006c46:	468a      	mov	sl, r1
 8006c48:	f04f 0c00 	mov.w	ip, #0
 8006c4c:	f1c9 0e20 	rsb	lr, r9, #32
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	fa02 f209 	lsl.w	r2, r2, r9
 8006c56:	ea42 020c 	orr.w	r2, r2, ip
 8006c5a:	f84a 2b04 	str.w	r2, [sl], #4
 8006c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c62:	4298      	cmp	r0, r3
 8006c64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006c68:	d8f2      	bhi.n	8006c50 <__lshift+0x70>
 8006c6a:	1b03      	subs	r3, r0, r4
 8006c6c:	3b15      	subs	r3, #21
 8006c6e:	f023 0303 	bic.w	r3, r3, #3
 8006c72:	3304      	adds	r3, #4
 8006c74:	f104 0215 	add.w	r2, r4, #21
 8006c78:	4290      	cmp	r0, r2
 8006c7a:	bf38      	it	cc
 8006c7c:	2304      	movcc	r3, #4
 8006c7e:	f841 c003 	str.w	ip, [r1, r3]
 8006c82:	f1bc 0f00 	cmp.w	ip, #0
 8006c86:	d001      	beq.n	8006c8c <__lshift+0xac>
 8006c88:	f108 0602 	add.w	r6, r8, #2
 8006c8c:	3e01      	subs	r6, #1
 8006c8e:	4638      	mov	r0, r7
 8006c90:	4621      	mov	r1, r4
 8006c92:	612e      	str	r6, [r5, #16]
 8006c94:	f7ff fdd6 	bl	8006844 <_Bfree>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	e7c1      	b.n	8006c2a <__lshift+0x4a>
 8006ca6:	3904      	subs	r1, #4
 8006ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cac:	4298      	cmp	r0, r3
 8006cae:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cb2:	d8f9      	bhi.n	8006ca8 <__lshift+0xc8>
 8006cb4:	e7ea      	b.n	8006c8c <__lshift+0xac>
 8006cb6:	bf00      	nop
 8006cb8:	08007e93 	.word	0x08007e93
 8006cbc:	08007ea4 	.word	0x08007ea4

08006cc0 <__mcmp>:
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	690a      	ldr	r2, [r1, #16]
 8006cc4:	6900      	ldr	r0, [r0, #16]
 8006cc6:	b530      	push	{r4, r5, lr}
 8006cc8:	1a80      	subs	r0, r0, r2
 8006cca:	d10d      	bne.n	8006ce8 <__mcmp+0x28>
 8006ccc:	3314      	adds	r3, #20
 8006cce:	3114      	adds	r1, #20
 8006cd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ce0:	4295      	cmp	r5, r2
 8006ce2:	d002      	beq.n	8006cea <__mcmp+0x2a>
 8006ce4:	d304      	bcc.n	8006cf0 <__mcmp+0x30>
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	bd30      	pop	{r4, r5, pc}
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	d3f4      	bcc.n	8006cd8 <__mcmp+0x18>
 8006cee:	e7fb      	b.n	8006ce8 <__mcmp+0x28>
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e7f8      	b.n	8006ce8 <__mcmp+0x28>
	...

08006cf8 <__mdiff>:
 8006cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	4607      	mov	r7, r0
 8006d00:	4611      	mov	r1, r2
 8006d02:	4628      	mov	r0, r5
 8006d04:	4614      	mov	r4, r2
 8006d06:	f7ff ffdb 	bl	8006cc0 <__mcmp>
 8006d0a:	1e06      	subs	r6, r0, #0
 8006d0c:	d111      	bne.n	8006d32 <__mdiff+0x3a>
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4638      	mov	r0, r7
 8006d12:	f7ff fd57 	bl	80067c4 <_Balloc>
 8006d16:	4602      	mov	r2, r0
 8006d18:	b928      	cbnz	r0, 8006d26 <__mdiff+0x2e>
 8006d1a:	f240 2132 	movw	r1, #562	; 0x232
 8006d1e:	4b3a      	ldr	r3, [pc, #232]	; (8006e08 <__mdiff+0x110>)
 8006d20:	483a      	ldr	r0, [pc, #232]	; (8006e0c <__mdiff+0x114>)
 8006d22:	f000 fa41 	bl	80071a8 <__assert_func>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d32:	bfa4      	itt	ge
 8006d34:	4623      	movge	r3, r4
 8006d36:	462c      	movge	r4, r5
 8006d38:	4638      	mov	r0, r7
 8006d3a:	6861      	ldr	r1, [r4, #4]
 8006d3c:	bfa6      	itte	ge
 8006d3e:	461d      	movge	r5, r3
 8006d40:	2600      	movge	r6, #0
 8006d42:	2601      	movlt	r6, #1
 8006d44:	f7ff fd3e 	bl	80067c4 <_Balloc>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	b918      	cbnz	r0, 8006d54 <__mdiff+0x5c>
 8006d4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006d50:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <__mdiff+0x110>)
 8006d52:	e7e5      	b.n	8006d20 <__mdiff+0x28>
 8006d54:	f102 0814 	add.w	r8, r2, #20
 8006d58:	46c2      	mov	sl, r8
 8006d5a:	f04f 0c00 	mov.w	ip, #0
 8006d5e:	6927      	ldr	r7, [r4, #16]
 8006d60:	60c6      	str	r6, [r0, #12]
 8006d62:	692e      	ldr	r6, [r5, #16]
 8006d64:	f104 0014 	add.w	r0, r4, #20
 8006d68:	f105 0914 	add.w	r9, r5, #20
 8006d6c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006d70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d74:	3410      	adds	r4, #16
 8006d76:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006d7a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d7e:	fa1f f18b 	uxth.w	r1, fp
 8006d82:	448c      	add	ip, r1
 8006d84:	b299      	uxth	r1, r3
 8006d86:	0c1b      	lsrs	r3, r3, #16
 8006d88:	ebac 0101 	sub.w	r1, ip, r1
 8006d8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d90:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006d94:	b289      	uxth	r1, r1
 8006d96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006d9a:	454e      	cmp	r6, r9
 8006d9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006da0:	f84a 3b04 	str.w	r3, [sl], #4
 8006da4:	d8e7      	bhi.n	8006d76 <__mdiff+0x7e>
 8006da6:	1b73      	subs	r3, r6, r5
 8006da8:	3b15      	subs	r3, #21
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	3515      	adds	r5, #21
 8006db0:	3304      	adds	r3, #4
 8006db2:	42ae      	cmp	r6, r5
 8006db4:	bf38      	it	cc
 8006db6:	2304      	movcc	r3, #4
 8006db8:	4418      	add	r0, r3
 8006dba:	4443      	add	r3, r8
 8006dbc:	461e      	mov	r6, r3
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	4575      	cmp	r5, lr
 8006dc2:	d30e      	bcc.n	8006de2 <__mdiff+0xea>
 8006dc4:	f10e 0103 	add.w	r1, lr, #3
 8006dc8:	1a09      	subs	r1, r1, r0
 8006dca:	f021 0103 	bic.w	r1, r1, #3
 8006dce:	3803      	subs	r0, #3
 8006dd0:	4586      	cmp	lr, r0
 8006dd2:	bf38      	it	cc
 8006dd4:	2100      	movcc	r1, #0
 8006dd6:	4419      	add	r1, r3
 8006dd8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ddc:	b18b      	cbz	r3, 8006e02 <__mdiff+0x10a>
 8006dde:	6117      	str	r7, [r2, #16]
 8006de0:	e7a4      	b.n	8006d2c <__mdiff+0x34>
 8006de2:	f855 8b04 	ldr.w	r8, [r5], #4
 8006de6:	fa1f f188 	uxth.w	r1, r8
 8006dea:	4461      	add	r1, ip
 8006dec:	140c      	asrs	r4, r1, #16
 8006dee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006df2:	b289      	uxth	r1, r1
 8006df4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006df8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006dfc:	f846 1b04 	str.w	r1, [r6], #4
 8006e00:	e7de      	b.n	8006dc0 <__mdiff+0xc8>
 8006e02:	3f01      	subs	r7, #1
 8006e04:	e7e8      	b.n	8006dd8 <__mdiff+0xe0>
 8006e06:	bf00      	nop
 8006e08:	08007e93 	.word	0x08007e93
 8006e0c:	08007ea4 	.word	0x08007ea4

08006e10 <__d2b>:
 8006e10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e14:	2101      	movs	r1, #1
 8006e16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006e1a:	4690      	mov	r8, r2
 8006e1c:	461d      	mov	r5, r3
 8006e1e:	f7ff fcd1 	bl	80067c4 <_Balloc>
 8006e22:	4604      	mov	r4, r0
 8006e24:	b930      	cbnz	r0, 8006e34 <__d2b+0x24>
 8006e26:	4602      	mov	r2, r0
 8006e28:	f240 310a 	movw	r1, #778	; 0x30a
 8006e2c:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <__d2b+0xb0>)
 8006e2e:	4825      	ldr	r0, [pc, #148]	; (8006ec4 <__d2b+0xb4>)
 8006e30:	f000 f9ba 	bl	80071a8 <__assert_func>
 8006e34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006e38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006e3c:	bb2d      	cbnz	r5, 8006e8a <__d2b+0x7a>
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	f1b8 0300 	subs.w	r3, r8, #0
 8006e44:	d026      	beq.n	8006e94 <__d2b+0x84>
 8006e46:	4668      	mov	r0, sp
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	f7ff fd83 	bl	8006954 <__lo0bits>
 8006e4e:	9900      	ldr	r1, [sp, #0]
 8006e50:	b1f0      	cbz	r0, 8006e90 <__d2b+0x80>
 8006e52:	9a01      	ldr	r2, [sp, #4]
 8006e54:	f1c0 0320 	rsb	r3, r0, #32
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	40c2      	lsrs	r2, r0
 8006e60:	6163      	str	r3, [r4, #20]
 8006e62:	9201      	str	r2, [sp, #4]
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	bf14      	ite	ne
 8006e6a:	2102      	movne	r1, #2
 8006e6c:	2101      	moveq	r1, #1
 8006e6e:	61a3      	str	r3, [r4, #24]
 8006e70:	6121      	str	r1, [r4, #16]
 8006e72:	b1c5      	cbz	r5, 8006ea6 <__d2b+0x96>
 8006e74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e78:	4405      	add	r5, r0
 8006e7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e7e:	603d      	str	r5, [r7, #0]
 8006e80:	6030      	str	r0, [r6, #0]
 8006e82:	4620      	mov	r0, r4
 8006e84:	b002      	add	sp, #8
 8006e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e8e:	e7d6      	b.n	8006e3e <__d2b+0x2e>
 8006e90:	6161      	str	r1, [r4, #20]
 8006e92:	e7e7      	b.n	8006e64 <__d2b+0x54>
 8006e94:	a801      	add	r0, sp, #4
 8006e96:	f7ff fd5d 	bl	8006954 <__lo0bits>
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	9b01      	ldr	r3, [sp, #4]
 8006e9e:	6121      	str	r1, [r4, #16]
 8006ea0:	6163      	str	r3, [r4, #20]
 8006ea2:	3020      	adds	r0, #32
 8006ea4:	e7e5      	b.n	8006e72 <__d2b+0x62>
 8006ea6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006eaa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006eae:	6038      	str	r0, [r7, #0]
 8006eb0:	6918      	ldr	r0, [r3, #16]
 8006eb2:	f7ff fd2f 	bl	8006914 <__hi0bits>
 8006eb6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006eba:	6031      	str	r1, [r6, #0]
 8006ebc:	e7e1      	b.n	8006e82 <__d2b+0x72>
 8006ebe:	bf00      	nop
 8006ec0:	08007e93 	.word	0x08007e93
 8006ec4:	08007ea4 	.word	0x08007ea4

08006ec8 <_calloc_r>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	fba1 5402 	umull	r5, r4, r1, r2
 8006ece:	b934      	cbnz	r4, 8006ede <_calloc_r+0x16>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7fe f8cb 	bl	800506c <_malloc_r>
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	b928      	cbnz	r0, 8006ee6 <_calloc_r+0x1e>
 8006eda:	4630      	mov	r0, r6
 8006edc:	bd70      	pop	{r4, r5, r6, pc}
 8006ede:	220c      	movs	r2, #12
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	6002      	str	r2, [r0, #0]
 8006ee4:	e7f9      	b.n	8006eda <_calloc_r+0x12>
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	4621      	mov	r1, r4
 8006eea:	f7fe f84f 	bl	8004f8c <memset>
 8006eee:	e7f4      	b.n	8006eda <_calloc_r+0x12>

08006ef0 <__ssputs_r>:
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	688e      	ldr	r6, [r1, #8]
 8006ef6:	4682      	mov	sl, r0
 8006ef8:	429e      	cmp	r6, r3
 8006efa:	460c      	mov	r4, r1
 8006efc:	4690      	mov	r8, r2
 8006efe:	461f      	mov	r7, r3
 8006f00:	d838      	bhi.n	8006f74 <__ssputs_r+0x84>
 8006f02:	898a      	ldrh	r2, [r1, #12]
 8006f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f08:	d032      	beq.n	8006f70 <__ssputs_r+0x80>
 8006f0a:	6825      	ldr	r5, [r4, #0]
 8006f0c:	6909      	ldr	r1, [r1, #16]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	eba5 0901 	sub.w	r9, r5, r1
 8006f14:	6965      	ldr	r5, [r4, #20]
 8006f16:	444b      	add	r3, r9
 8006f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f20:	106d      	asrs	r5, r5, #1
 8006f22:	429d      	cmp	r5, r3
 8006f24:	bf38      	it	cc
 8006f26:	461d      	movcc	r5, r3
 8006f28:	0553      	lsls	r3, r2, #21
 8006f2a:	d531      	bpl.n	8006f90 <__ssputs_r+0xa0>
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	f7fe f89d 	bl	800506c <_malloc_r>
 8006f32:	4606      	mov	r6, r0
 8006f34:	b950      	cbnz	r0, 8006f4c <__ssputs_r+0x5c>
 8006f36:	230c      	movs	r3, #12
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	f8ca 3000 	str.w	r3, [sl]
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4c:	464a      	mov	r2, r9
 8006f4e:	6921      	ldr	r1, [r4, #16]
 8006f50:	f7ff fc1e 	bl	8006790 <memcpy>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	6126      	str	r6, [r4, #16]
 8006f62:	444e      	add	r6, r9
 8006f64:	6026      	str	r6, [r4, #0]
 8006f66:	463e      	mov	r6, r7
 8006f68:	6165      	str	r5, [r4, #20]
 8006f6a:	eba5 0509 	sub.w	r5, r5, r9
 8006f6e:	60a5      	str	r5, [r4, #8]
 8006f70:	42be      	cmp	r6, r7
 8006f72:	d900      	bls.n	8006f76 <__ssputs_r+0x86>
 8006f74:	463e      	mov	r6, r7
 8006f76:	4632      	mov	r2, r6
 8006f78:	4641      	mov	r1, r8
 8006f7a:	6820      	ldr	r0, [r4, #0]
 8006f7c:	f000 f959 	bl	8007232 <memmove>
 8006f80:	68a3      	ldr	r3, [r4, #8]
 8006f82:	2000      	movs	r0, #0
 8006f84:	1b9b      	subs	r3, r3, r6
 8006f86:	60a3      	str	r3, [r4, #8]
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	4433      	add	r3, r6
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	e7db      	b.n	8006f48 <__ssputs_r+0x58>
 8006f90:	462a      	mov	r2, r5
 8006f92:	f000 f968 	bl	8007266 <_realloc_r>
 8006f96:	4606      	mov	r6, r0
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d1e1      	bne.n	8006f60 <__ssputs_r+0x70>
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	6921      	ldr	r1, [r4, #16]
 8006fa0:	f7fd fffc 	bl	8004f9c <_free_r>
 8006fa4:	e7c7      	b.n	8006f36 <__ssputs_r+0x46>
	...

08006fa8 <_svfiprintf_r>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	4698      	mov	r8, r3
 8006fae:	898b      	ldrh	r3, [r1, #12]
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	061b      	lsls	r3, r3, #24
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	4614      	mov	r4, r2
 8006fb8:	b09d      	sub	sp, #116	; 0x74
 8006fba:	d50e      	bpl.n	8006fda <_svfiprintf_r+0x32>
 8006fbc:	690b      	ldr	r3, [r1, #16]
 8006fbe:	b963      	cbnz	r3, 8006fda <_svfiprintf_r+0x32>
 8006fc0:	2140      	movs	r1, #64	; 0x40
 8006fc2:	f7fe f853 	bl	800506c <_malloc_r>
 8006fc6:	6028      	str	r0, [r5, #0]
 8006fc8:	6128      	str	r0, [r5, #16]
 8006fca:	b920      	cbnz	r0, 8006fd6 <_svfiprintf_r+0x2e>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	e0d1      	b.n	800717a <_svfiprintf_r+0x1d2>
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	616b      	str	r3, [r5, #20]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fde:	2320      	movs	r3, #32
 8006fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fe4:	2330      	movs	r3, #48	; 0x30
 8006fe6:	f04f 0901 	mov.w	r9, #1
 8006fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007194 <_svfiprintf_r+0x1ec>
 8006ff2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	469a      	mov	sl, r3
 8006ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ffe:	b10a      	cbz	r2, 8007004 <_svfiprintf_r+0x5c>
 8007000:	2a25      	cmp	r2, #37	; 0x25
 8007002:	d1f9      	bne.n	8006ff8 <_svfiprintf_r+0x50>
 8007004:	ebba 0b04 	subs.w	fp, sl, r4
 8007008:	d00b      	beq.n	8007022 <_svfiprintf_r+0x7a>
 800700a:	465b      	mov	r3, fp
 800700c:	4622      	mov	r2, r4
 800700e:	4629      	mov	r1, r5
 8007010:	4638      	mov	r0, r7
 8007012:	f7ff ff6d 	bl	8006ef0 <__ssputs_r>
 8007016:	3001      	adds	r0, #1
 8007018:	f000 80aa 	beq.w	8007170 <_svfiprintf_r+0x1c8>
 800701c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800701e:	445a      	add	r2, fp
 8007020:	9209      	str	r2, [sp, #36]	; 0x24
 8007022:	f89a 3000 	ldrb.w	r3, [sl]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80a2 	beq.w	8007170 <_svfiprintf_r+0x1c8>
 800702c:	2300      	movs	r3, #0
 800702e:	f04f 32ff 	mov.w	r2, #4294967295
 8007032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007036:	f10a 0a01 	add.w	sl, sl, #1
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	9307      	str	r3, [sp, #28]
 800703e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007042:	931a      	str	r3, [sp, #104]	; 0x68
 8007044:	4654      	mov	r4, sl
 8007046:	2205      	movs	r2, #5
 8007048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800704c:	4851      	ldr	r0, [pc, #324]	; (8007194 <_svfiprintf_r+0x1ec>)
 800704e:	f7ff fb91 	bl	8006774 <memchr>
 8007052:	9a04      	ldr	r2, [sp, #16]
 8007054:	b9d8      	cbnz	r0, 800708e <_svfiprintf_r+0xe6>
 8007056:	06d0      	lsls	r0, r2, #27
 8007058:	bf44      	itt	mi
 800705a:	2320      	movmi	r3, #32
 800705c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007060:	0711      	lsls	r1, r2, #28
 8007062:	bf44      	itt	mi
 8007064:	232b      	movmi	r3, #43	; 0x2b
 8007066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800706a:	f89a 3000 	ldrb.w	r3, [sl]
 800706e:	2b2a      	cmp	r3, #42	; 0x2a
 8007070:	d015      	beq.n	800709e <_svfiprintf_r+0xf6>
 8007072:	4654      	mov	r4, sl
 8007074:	2000      	movs	r0, #0
 8007076:	f04f 0c0a 	mov.w	ip, #10
 800707a:	9a07      	ldr	r2, [sp, #28]
 800707c:	4621      	mov	r1, r4
 800707e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007082:	3b30      	subs	r3, #48	; 0x30
 8007084:	2b09      	cmp	r3, #9
 8007086:	d94e      	bls.n	8007126 <_svfiprintf_r+0x17e>
 8007088:	b1b0      	cbz	r0, 80070b8 <_svfiprintf_r+0x110>
 800708a:	9207      	str	r2, [sp, #28]
 800708c:	e014      	b.n	80070b8 <_svfiprintf_r+0x110>
 800708e:	eba0 0308 	sub.w	r3, r0, r8
 8007092:	fa09 f303 	lsl.w	r3, r9, r3
 8007096:	4313      	orrs	r3, r2
 8007098:	46a2      	mov	sl, r4
 800709a:	9304      	str	r3, [sp, #16]
 800709c:	e7d2      	b.n	8007044 <_svfiprintf_r+0x9c>
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	1d19      	adds	r1, r3, #4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	9103      	str	r1, [sp, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bfbb      	ittet	lt
 80070aa:	425b      	neglt	r3, r3
 80070ac:	f042 0202 	orrlt.w	r2, r2, #2
 80070b0:	9307      	strge	r3, [sp, #28]
 80070b2:	9307      	strlt	r3, [sp, #28]
 80070b4:	bfb8      	it	lt
 80070b6:	9204      	strlt	r2, [sp, #16]
 80070b8:	7823      	ldrb	r3, [r4, #0]
 80070ba:	2b2e      	cmp	r3, #46	; 0x2e
 80070bc:	d10c      	bne.n	80070d8 <_svfiprintf_r+0x130>
 80070be:	7863      	ldrb	r3, [r4, #1]
 80070c0:	2b2a      	cmp	r3, #42	; 0x2a
 80070c2:	d135      	bne.n	8007130 <_svfiprintf_r+0x188>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	3402      	adds	r4, #2
 80070c8:	1d1a      	adds	r2, r3, #4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	9203      	str	r2, [sp, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	bfb8      	it	lt
 80070d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80070d6:	9305      	str	r3, [sp, #20]
 80070d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007198 <_svfiprintf_r+0x1f0>
 80070dc:	2203      	movs	r2, #3
 80070de:	4650      	mov	r0, sl
 80070e0:	7821      	ldrb	r1, [r4, #0]
 80070e2:	f7ff fb47 	bl	8006774 <memchr>
 80070e6:	b140      	cbz	r0, 80070fa <_svfiprintf_r+0x152>
 80070e8:	2340      	movs	r3, #64	; 0x40
 80070ea:	eba0 000a 	sub.w	r0, r0, sl
 80070ee:	fa03 f000 	lsl.w	r0, r3, r0
 80070f2:	9b04      	ldr	r3, [sp, #16]
 80070f4:	3401      	adds	r4, #1
 80070f6:	4303      	orrs	r3, r0
 80070f8:	9304      	str	r3, [sp, #16]
 80070fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070fe:	2206      	movs	r2, #6
 8007100:	4826      	ldr	r0, [pc, #152]	; (800719c <_svfiprintf_r+0x1f4>)
 8007102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007106:	f7ff fb35 	bl	8006774 <memchr>
 800710a:	2800      	cmp	r0, #0
 800710c:	d038      	beq.n	8007180 <_svfiprintf_r+0x1d8>
 800710e:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <_svfiprintf_r+0x1f8>)
 8007110:	bb1b      	cbnz	r3, 800715a <_svfiprintf_r+0x1b2>
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	3307      	adds	r3, #7
 8007116:	f023 0307 	bic.w	r3, r3, #7
 800711a:	3308      	adds	r3, #8
 800711c:	9303      	str	r3, [sp, #12]
 800711e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007120:	4433      	add	r3, r6
 8007122:	9309      	str	r3, [sp, #36]	; 0x24
 8007124:	e767      	b.n	8006ff6 <_svfiprintf_r+0x4e>
 8007126:	460c      	mov	r4, r1
 8007128:	2001      	movs	r0, #1
 800712a:	fb0c 3202 	mla	r2, ip, r2, r3
 800712e:	e7a5      	b.n	800707c <_svfiprintf_r+0xd4>
 8007130:	2300      	movs	r3, #0
 8007132:	f04f 0c0a 	mov.w	ip, #10
 8007136:	4619      	mov	r1, r3
 8007138:	3401      	adds	r4, #1
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	4620      	mov	r0, r4
 800713e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007142:	3a30      	subs	r2, #48	; 0x30
 8007144:	2a09      	cmp	r2, #9
 8007146:	d903      	bls.n	8007150 <_svfiprintf_r+0x1a8>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0c5      	beq.n	80070d8 <_svfiprintf_r+0x130>
 800714c:	9105      	str	r1, [sp, #20]
 800714e:	e7c3      	b.n	80070d8 <_svfiprintf_r+0x130>
 8007150:	4604      	mov	r4, r0
 8007152:	2301      	movs	r3, #1
 8007154:	fb0c 2101 	mla	r1, ip, r1, r2
 8007158:	e7f0      	b.n	800713c <_svfiprintf_r+0x194>
 800715a:	ab03      	add	r3, sp, #12
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	462a      	mov	r2, r5
 8007160:	4638      	mov	r0, r7
 8007162:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <_svfiprintf_r+0x1fc>)
 8007164:	a904      	add	r1, sp, #16
 8007166:	f7fe f893 	bl	8005290 <_printf_float>
 800716a:	1c42      	adds	r2, r0, #1
 800716c:	4606      	mov	r6, r0
 800716e:	d1d6      	bne.n	800711e <_svfiprintf_r+0x176>
 8007170:	89ab      	ldrh	r3, [r5, #12]
 8007172:	065b      	lsls	r3, r3, #25
 8007174:	f53f af2c 	bmi.w	8006fd0 <_svfiprintf_r+0x28>
 8007178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800717a:	b01d      	add	sp, #116	; 0x74
 800717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007180:	ab03      	add	r3, sp, #12
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	462a      	mov	r2, r5
 8007186:	4638      	mov	r0, r7
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <_svfiprintf_r+0x1fc>)
 800718a:	a904      	add	r1, sp, #16
 800718c:	f7fe fb1c 	bl	80057c8 <_printf_i>
 8007190:	e7eb      	b.n	800716a <_svfiprintf_r+0x1c2>
 8007192:	bf00      	nop
 8007194:	08007ffc 	.word	0x08007ffc
 8007198:	08008002 	.word	0x08008002
 800719c:	08008006 	.word	0x08008006
 80071a0:	08005291 	.word	0x08005291
 80071a4:	08006ef1 	.word	0x08006ef1

080071a8 <__assert_func>:
 80071a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071aa:	4614      	mov	r4, r2
 80071ac:	461a      	mov	r2, r3
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <__assert_func+0x2c>)
 80071b0:	4605      	mov	r5, r0
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68d8      	ldr	r0, [r3, #12]
 80071b6:	b14c      	cbz	r4, 80071cc <__assert_func+0x24>
 80071b8:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <__assert_func+0x30>)
 80071ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071be:	9100      	str	r1, [sp, #0]
 80071c0:	462b      	mov	r3, r5
 80071c2:	4906      	ldr	r1, [pc, #24]	; (80071dc <__assert_func+0x34>)
 80071c4:	f000 f80e 	bl	80071e4 <fiprintf>
 80071c8:	f000 faa2 	bl	8007710 <abort>
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <__assert_func+0x38>)
 80071ce:	461c      	mov	r4, r3
 80071d0:	e7f3      	b.n	80071ba <__assert_func+0x12>
 80071d2:	bf00      	nop
 80071d4:	20000020 	.word	0x20000020
 80071d8:	0800800d 	.word	0x0800800d
 80071dc:	0800801a 	.word	0x0800801a
 80071e0:	08008048 	.word	0x08008048

080071e4 <fiprintf>:
 80071e4:	b40e      	push	{r1, r2, r3}
 80071e6:	b503      	push	{r0, r1, lr}
 80071e8:	4601      	mov	r1, r0
 80071ea:	ab03      	add	r3, sp, #12
 80071ec:	4805      	ldr	r0, [pc, #20]	; (8007204 <fiprintf+0x20>)
 80071ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f2:	6800      	ldr	r0, [r0, #0]
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	f000 f88d 	bl	8007314 <_vfiprintf_r>
 80071fa:	b002      	add	sp, #8
 80071fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007200:	b003      	add	sp, #12
 8007202:	4770      	bx	lr
 8007204:	20000020 	.word	0x20000020

08007208 <__retarget_lock_init_recursive>:
 8007208:	4770      	bx	lr

0800720a <__retarget_lock_acquire_recursive>:
 800720a:	4770      	bx	lr

0800720c <__retarget_lock_release_recursive>:
 800720c:	4770      	bx	lr

0800720e <__ascii_mbtowc>:
 800720e:	b082      	sub	sp, #8
 8007210:	b901      	cbnz	r1, 8007214 <__ascii_mbtowc+0x6>
 8007212:	a901      	add	r1, sp, #4
 8007214:	b142      	cbz	r2, 8007228 <__ascii_mbtowc+0x1a>
 8007216:	b14b      	cbz	r3, 800722c <__ascii_mbtowc+0x1e>
 8007218:	7813      	ldrb	r3, [r2, #0]
 800721a:	600b      	str	r3, [r1, #0]
 800721c:	7812      	ldrb	r2, [r2, #0]
 800721e:	1e10      	subs	r0, r2, #0
 8007220:	bf18      	it	ne
 8007222:	2001      	movne	r0, #1
 8007224:	b002      	add	sp, #8
 8007226:	4770      	bx	lr
 8007228:	4610      	mov	r0, r2
 800722a:	e7fb      	b.n	8007224 <__ascii_mbtowc+0x16>
 800722c:	f06f 0001 	mvn.w	r0, #1
 8007230:	e7f8      	b.n	8007224 <__ascii_mbtowc+0x16>

08007232 <memmove>:
 8007232:	4288      	cmp	r0, r1
 8007234:	b510      	push	{r4, lr}
 8007236:	eb01 0402 	add.w	r4, r1, r2
 800723a:	d902      	bls.n	8007242 <memmove+0x10>
 800723c:	4284      	cmp	r4, r0
 800723e:	4623      	mov	r3, r4
 8007240:	d807      	bhi.n	8007252 <memmove+0x20>
 8007242:	1e43      	subs	r3, r0, #1
 8007244:	42a1      	cmp	r1, r4
 8007246:	d008      	beq.n	800725a <memmove+0x28>
 8007248:	f811 2b01 	ldrb.w	r2, [r1], #1
 800724c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007250:	e7f8      	b.n	8007244 <memmove+0x12>
 8007252:	4601      	mov	r1, r0
 8007254:	4402      	add	r2, r0
 8007256:	428a      	cmp	r2, r1
 8007258:	d100      	bne.n	800725c <memmove+0x2a>
 800725a:	bd10      	pop	{r4, pc}
 800725c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007260:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007264:	e7f7      	b.n	8007256 <memmove+0x24>

08007266 <_realloc_r>:
 8007266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726a:	4680      	mov	r8, r0
 800726c:	4614      	mov	r4, r2
 800726e:	460e      	mov	r6, r1
 8007270:	b921      	cbnz	r1, 800727c <_realloc_r+0x16>
 8007272:	4611      	mov	r1, r2
 8007274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007278:	f7fd bef8 	b.w	800506c <_malloc_r>
 800727c:	b92a      	cbnz	r2, 800728a <_realloc_r+0x24>
 800727e:	f7fd fe8d 	bl	8004f9c <_free_r>
 8007282:	4625      	mov	r5, r4
 8007284:	4628      	mov	r0, r5
 8007286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800728a:	f000 fc61 	bl	8007b50 <_malloc_usable_size_r>
 800728e:	4284      	cmp	r4, r0
 8007290:	4607      	mov	r7, r0
 8007292:	d802      	bhi.n	800729a <_realloc_r+0x34>
 8007294:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007298:	d812      	bhi.n	80072c0 <_realloc_r+0x5a>
 800729a:	4621      	mov	r1, r4
 800729c:	4640      	mov	r0, r8
 800729e:	f7fd fee5 	bl	800506c <_malloc_r>
 80072a2:	4605      	mov	r5, r0
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d0ed      	beq.n	8007284 <_realloc_r+0x1e>
 80072a8:	42bc      	cmp	r4, r7
 80072aa:	4622      	mov	r2, r4
 80072ac:	4631      	mov	r1, r6
 80072ae:	bf28      	it	cs
 80072b0:	463a      	movcs	r2, r7
 80072b2:	f7ff fa6d 	bl	8006790 <memcpy>
 80072b6:	4631      	mov	r1, r6
 80072b8:	4640      	mov	r0, r8
 80072ba:	f7fd fe6f 	bl	8004f9c <_free_r>
 80072be:	e7e1      	b.n	8007284 <_realloc_r+0x1e>
 80072c0:	4635      	mov	r5, r6
 80072c2:	e7df      	b.n	8007284 <_realloc_r+0x1e>

080072c4 <__sfputc_r>:
 80072c4:	6893      	ldr	r3, [r2, #8]
 80072c6:	b410      	push	{r4}
 80072c8:	3b01      	subs	r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	6093      	str	r3, [r2, #8]
 80072ce:	da07      	bge.n	80072e0 <__sfputc_r+0x1c>
 80072d0:	6994      	ldr	r4, [r2, #24]
 80072d2:	42a3      	cmp	r3, r4
 80072d4:	db01      	blt.n	80072da <__sfputc_r+0x16>
 80072d6:	290a      	cmp	r1, #10
 80072d8:	d102      	bne.n	80072e0 <__sfputc_r+0x1c>
 80072da:	bc10      	pop	{r4}
 80072dc:	f000 b94a 	b.w	8007574 <__swbuf_r>
 80072e0:	6813      	ldr	r3, [r2, #0]
 80072e2:	1c58      	adds	r0, r3, #1
 80072e4:	6010      	str	r0, [r2, #0]
 80072e6:	7019      	strb	r1, [r3, #0]
 80072e8:	4608      	mov	r0, r1
 80072ea:	bc10      	pop	{r4}
 80072ec:	4770      	bx	lr

080072ee <__sfputs_r>:
 80072ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f0:	4606      	mov	r6, r0
 80072f2:	460f      	mov	r7, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	18d5      	adds	r5, r2, r3
 80072f8:	42ac      	cmp	r4, r5
 80072fa:	d101      	bne.n	8007300 <__sfputs_r+0x12>
 80072fc:	2000      	movs	r0, #0
 80072fe:	e007      	b.n	8007310 <__sfputs_r+0x22>
 8007300:	463a      	mov	r2, r7
 8007302:	4630      	mov	r0, r6
 8007304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007308:	f7ff ffdc 	bl	80072c4 <__sfputc_r>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d1f3      	bne.n	80072f8 <__sfputs_r+0xa>
 8007310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007314 <_vfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	460d      	mov	r5, r1
 800731a:	4614      	mov	r4, r2
 800731c:	4698      	mov	r8, r3
 800731e:	4606      	mov	r6, r0
 8007320:	b09d      	sub	sp, #116	; 0x74
 8007322:	b118      	cbz	r0, 800732c <_vfiprintf_r+0x18>
 8007324:	6983      	ldr	r3, [r0, #24]
 8007326:	b90b      	cbnz	r3, 800732c <_vfiprintf_r+0x18>
 8007328:	f000 fb10 	bl	800794c <__sinit>
 800732c:	4b89      	ldr	r3, [pc, #548]	; (8007554 <_vfiprintf_r+0x240>)
 800732e:	429d      	cmp	r5, r3
 8007330:	d11b      	bne.n	800736a <_vfiprintf_r+0x56>
 8007332:	6875      	ldr	r5, [r6, #4]
 8007334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007336:	07d9      	lsls	r1, r3, #31
 8007338:	d405      	bmi.n	8007346 <_vfiprintf_r+0x32>
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	059a      	lsls	r2, r3, #22
 800733e:	d402      	bmi.n	8007346 <_vfiprintf_r+0x32>
 8007340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007342:	f7ff ff62 	bl	800720a <__retarget_lock_acquire_recursive>
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	071b      	lsls	r3, r3, #28
 800734a:	d501      	bpl.n	8007350 <_vfiprintf_r+0x3c>
 800734c:	692b      	ldr	r3, [r5, #16]
 800734e:	b9eb      	cbnz	r3, 800738c <_vfiprintf_r+0x78>
 8007350:	4629      	mov	r1, r5
 8007352:	4630      	mov	r0, r6
 8007354:	f000 f96e 	bl	8007634 <__swsetup_r>
 8007358:	b1c0      	cbz	r0, 800738c <_vfiprintf_r+0x78>
 800735a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800735c:	07dc      	lsls	r4, r3, #31
 800735e:	d50e      	bpl.n	800737e <_vfiprintf_r+0x6a>
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	b01d      	add	sp, #116	; 0x74
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	4b7b      	ldr	r3, [pc, #492]	; (8007558 <_vfiprintf_r+0x244>)
 800736c:	429d      	cmp	r5, r3
 800736e:	d101      	bne.n	8007374 <_vfiprintf_r+0x60>
 8007370:	68b5      	ldr	r5, [r6, #8]
 8007372:	e7df      	b.n	8007334 <_vfiprintf_r+0x20>
 8007374:	4b79      	ldr	r3, [pc, #484]	; (800755c <_vfiprintf_r+0x248>)
 8007376:	429d      	cmp	r5, r3
 8007378:	bf08      	it	eq
 800737a:	68f5      	ldreq	r5, [r6, #12]
 800737c:	e7da      	b.n	8007334 <_vfiprintf_r+0x20>
 800737e:	89ab      	ldrh	r3, [r5, #12]
 8007380:	0598      	lsls	r0, r3, #22
 8007382:	d4ed      	bmi.n	8007360 <_vfiprintf_r+0x4c>
 8007384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007386:	f7ff ff41 	bl	800720c <__retarget_lock_release_recursive>
 800738a:	e7e9      	b.n	8007360 <_vfiprintf_r+0x4c>
 800738c:	2300      	movs	r3, #0
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	2320      	movs	r3, #32
 8007392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007396:	2330      	movs	r3, #48	; 0x30
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007560 <_vfiprintf_r+0x24c>
 80073a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073a8:	4623      	mov	r3, r4
 80073aa:	469a      	mov	sl, r3
 80073ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073b0:	b10a      	cbz	r2, 80073b6 <_vfiprintf_r+0xa2>
 80073b2:	2a25      	cmp	r2, #37	; 0x25
 80073b4:	d1f9      	bne.n	80073aa <_vfiprintf_r+0x96>
 80073b6:	ebba 0b04 	subs.w	fp, sl, r4
 80073ba:	d00b      	beq.n	80073d4 <_vfiprintf_r+0xc0>
 80073bc:	465b      	mov	r3, fp
 80073be:	4622      	mov	r2, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7ff ff93 	bl	80072ee <__sfputs_r>
 80073c8:	3001      	adds	r0, #1
 80073ca:	f000 80aa 	beq.w	8007522 <_vfiprintf_r+0x20e>
 80073ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073d0:	445a      	add	r2, fp
 80073d2:	9209      	str	r2, [sp, #36]	; 0x24
 80073d4:	f89a 3000 	ldrb.w	r3, [sl]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80a2 	beq.w	8007522 <_vfiprintf_r+0x20e>
 80073de:	2300      	movs	r3, #0
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295
 80073e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e8:	f10a 0a01 	add.w	sl, sl, #1
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	9307      	str	r3, [sp, #28]
 80073f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073f4:	931a      	str	r3, [sp, #104]	; 0x68
 80073f6:	4654      	mov	r4, sl
 80073f8:	2205      	movs	r2, #5
 80073fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fe:	4858      	ldr	r0, [pc, #352]	; (8007560 <_vfiprintf_r+0x24c>)
 8007400:	f7ff f9b8 	bl	8006774 <memchr>
 8007404:	9a04      	ldr	r2, [sp, #16]
 8007406:	b9d8      	cbnz	r0, 8007440 <_vfiprintf_r+0x12c>
 8007408:	06d1      	lsls	r1, r2, #27
 800740a:	bf44      	itt	mi
 800740c:	2320      	movmi	r3, #32
 800740e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007412:	0713      	lsls	r3, r2, #28
 8007414:	bf44      	itt	mi
 8007416:	232b      	movmi	r3, #43	; 0x2b
 8007418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800741c:	f89a 3000 	ldrb.w	r3, [sl]
 8007420:	2b2a      	cmp	r3, #42	; 0x2a
 8007422:	d015      	beq.n	8007450 <_vfiprintf_r+0x13c>
 8007424:	4654      	mov	r4, sl
 8007426:	2000      	movs	r0, #0
 8007428:	f04f 0c0a 	mov.w	ip, #10
 800742c:	9a07      	ldr	r2, [sp, #28]
 800742e:	4621      	mov	r1, r4
 8007430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007434:	3b30      	subs	r3, #48	; 0x30
 8007436:	2b09      	cmp	r3, #9
 8007438:	d94e      	bls.n	80074d8 <_vfiprintf_r+0x1c4>
 800743a:	b1b0      	cbz	r0, 800746a <_vfiprintf_r+0x156>
 800743c:	9207      	str	r2, [sp, #28]
 800743e:	e014      	b.n	800746a <_vfiprintf_r+0x156>
 8007440:	eba0 0308 	sub.w	r3, r0, r8
 8007444:	fa09 f303 	lsl.w	r3, r9, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	46a2      	mov	sl, r4
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	e7d2      	b.n	80073f6 <_vfiprintf_r+0xe2>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	1d19      	adds	r1, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9103      	str	r1, [sp, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	bfbb      	ittet	lt
 800745c:	425b      	neglt	r3, r3
 800745e:	f042 0202 	orrlt.w	r2, r2, #2
 8007462:	9307      	strge	r3, [sp, #28]
 8007464:	9307      	strlt	r3, [sp, #28]
 8007466:	bfb8      	it	lt
 8007468:	9204      	strlt	r2, [sp, #16]
 800746a:	7823      	ldrb	r3, [r4, #0]
 800746c:	2b2e      	cmp	r3, #46	; 0x2e
 800746e:	d10c      	bne.n	800748a <_vfiprintf_r+0x176>
 8007470:	7863      	ldrb	r3, [r4, #1]
 8007472:	2b2a      	cmp	r3, #42	; 0x2a
 8007474:	d135      	bne.n	80074e2 <_vfiprintf_r+0x1ce>
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	3402      	adds	r4, #2
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	9203      	str	r2, [sp, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfb8      	it	lt
 8007484:	f04f 33ff 	movlt.w	r3, #4294967295
 8007488:	9305      	str	r3, [sp, #20]
 800748a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007564 <_vfiprintf_r+0x250>
 800748e:	2203      	movs	r2, #3
 8007490:	4650      	mov	r0, sl
 8007492:	7821      	ldrb	r1, [r4, #0]
 8007494:	f7ff f96e 	bl	8006774 <memchr>
 8007498:	b140      	cbz	r0, 80074ac <_vfiprintf_r+0x198>
 800749a:	2340      	movs	r3, #64	; 0x40
 800749c:	eba0 000a 	sub.w	r0, r0, sl
 80074a0:	fa03 f000 	lsl.w	r0, r3, r0
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	3401      	adds	r4, #1
 80074a8:	4303      	orrs	r3, r0
 80074aa:	9304      	str	r3, [sp, #16]
 80074ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b0:	2206      	movs	r2, #6
 80074b2:	482d      	ldr	r0, [pc, #180]	; (8007568 <_vfiprintf_r+0x254>)
 80074b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b8:	f7ff f95c 	bl	8006774 <memchr>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d03f      	beq.n	8007540 <_vfiprintf_r+0x22c>
 80074c0:	4b2a      	ldr	r3, [pc, #168]	; (800756c <_vfiprintf_r+0x258>)
 80074c2:	bb1b      	cbnz	r3, 800750c <_vfiprintf_r+0x1f8>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	3307      	adds	r3, #7
 80074c8:	f023 0307 	bic.w	r3, r3, #7
 80074cc:	3308      	adds	r3, #8
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d2:	443b      	add	r3, r7
 80074d4:	9309      	str	r3, [sp, #36]	; 0x24
 80074d6:	e767      	b.n	80073a8 <_vfiprintf_r+0x94>
 80074d8:	460c      	mov	r4, r1
 80074da:	2001      	movs	r0, #1
 80074dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e0:	e7a5      	b.n	800742e <_vfiprintf_r+0x11a>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f04f 0c0a 	mov.w	ip, #10
 80074e8:	4619      	mov	r1, r3
 80074ea:	3401      	adds	r4, #1
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	4620      	mov	r0, r4
 80074f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f4:	3a30      	subs	r2, #48	; 0x30
 80074f6:	2a09      	cmp	r2, #9
 80074f8:	d903      	bls.n	8007502 <_vfiprintf_r+0x1ee>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0c5      	beq.n	800748a <_vfiprintf_r+0x176>
 80074fe:	9105      	str	r1, [sp, #20]
 8007500:	e7c3      	b.n	800748a <_vfiprintf_r+0x176>
 8007502:	4604      	mov	r4, r0
 8007504:	2301      	movs	r3, #1
 8007506:	fb0c 2101 	mla	r1, ip, r1, r2
 800750a:	e7f0      	b.n	80074ee <_vfiprintf_r+0x1da>
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	462a      	mov	r2, r5
 8007512:	4630      	mov	r0, r6
 8007514:	4b16      	ldr	r3, [pc, #88]	; (8007570 <_vfiprintf_r+0x25c>)
 8007516:	a904      	add	r1, sp, #16
 8007518:	f7fd feba 	bl	8005290 <_printf_float>
 800751c:	4607      	mov	r7, r0
 800751e:	1c78      	adds	r0, r7, #1
 8007520:	d1d6      	bne.n	80074d0 <_vfiprintf_r+0x1bc>
 8007522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007524:	07d9      	lsls	r1, r3, #31
 8007526:	d405      	bmi.n	8007534 <_vfiprintf_r+0x220>
 8007528:	89ab      	ldrh	r3, [r5, #12]
 800752a:	059a      	lsls	r2, r3, #22
 800752c:	d402      	bmi.n	8007534 <_vfiprintf_r+0x220>
 800752e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007530:	f7ff fe6c 	bl	800720c <__retarget_lock_release_recursive>
 8007534:	89ab      	ldrh	r3, [r5, #12]
 8007536:	065b      	lsls	r3, r3, #25
 8007538:	f53f af12 	bmi.w	8007360 <_vfiprintf_r+0x4c>
 800753c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800753e:	e711      	b.n	8007364 <_vfiprintf_r+0x50>
 8007540:	ab03      	add	r3, sp, #12
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	462a      	mov	r2, r5
 8007546:	4630      	mov	r0, r6
 8007548:	4b09      	ldr	r3, [pc, #36]	; (8007570 <_vfiprintf_r+0x25c>)
 800754a:	a904      	add	r1, sp, #16
 800754c:	f7fe f93c 	bl	80057c8 <_printf_i>
 8007550:	e7e4      	b.n	800751c <_vfiprintf_r+0x208>
 8007552:	bf00      	nop
 8007554:	08008174 	.word	0x08008174
 8007558:	08008194 	.word	0x08008194
 800755c:	08008154 	.word	0x08008154
 8007560:	08007ffc 	.word	0x08007ffc
 8007564:	08008002 	.word	0x08008002
 8007568:	08008006 	.word	0x08008006
 800756c:	08005291 	.word	0x08005291
 8007570:	080072ef 	.word	0x080072ef

08007574 <__swbuf_r>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	460e      	mov	r6, r1
 8007578:	4614      	mov	r4, r2
 800757a:	4605      	mov	r5, r0
 800757c:	b118      	cbz	r0, 8007586 <__swbuf_r+0x12>
 800757e:	6983      	ldr	r3, [r0, #24]
 8007580:	b90b      	cbnz	r3, 8007586 <__swbuf_r+0x12>
 8007582:	f000 f9e3 	bl	800794c <__sinit>
 8007586:	4b21      	ldr	r3, [pc, #132]	; (800760c <__swbuf_r+0x98>)
 8007588:	429c      	cmp	r4, r3
 800758a:	d12b      	bne.n	80075e4 <__swbuf_r+0x70>
 800758c:	686c      	ldr	r4, [r5, #4]
 800758e:	69a3      	ldr	r3, [r4, #24]
 8007590:	60a3      	str	r3, [r4, #8]
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	071a      	lsls	r2, r3, #28
 8007596:	d52f      	bpl.n	80075f8 <__swbuf_r+0x84>
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	b36b      	cbz	r3, 80075f8 <__swbuf_r+0x84>
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	6820      	ldr	r0, [r4, #0]
 80075a0:	b2f6      	uxtb	r6, r6
 80075a2:	1ac0      	subs	r0, r0, r3
 80075a4:	6963      	ldr	r3, [r4, #20]
 80075a6:	4637      	mov	r7, r6
 80075a8:	4283      	cmp	r3, r0
 80075aa:	dc04      	bgt.n	80075b6 <__swbuf_r+0x42>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 f938 	bl	8007824 <_fflush_r>
 80075b4:	bb30      	cbnz	r0, 8007604 <__swbuf_r+0x90>
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	3001      	adds	r0, #1
 80075ba:	3b01      	subs	r3, #1
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	6022      	str	r2, [r4, #0]
 80075c4:	701e      	strb	r6, [r3, #0]
 80075c6:	6963      	ldr	r3, [r4, #20]
 80075c8:	4283      	cmp	r3, r0
 80075ca:	d004      	beq.n	80075d6 <__swbuf_r+0x62>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	07db      	lsls	r3, r3, #31
 80075d0:	d506      	bpl.n	80075e0 <__swbuf_r+0x6c>
 80075d2:	2e0a      	cmp	r6, #10
 80075d4:	d104      	bne.n	80075e0 <__swbuf_r+0x6c>
 80075d6:	4621      	mov	r1, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 f923 	bl	8007824 <_fflush_r>
 80075de:	b988      	cbnz	r0, 8007604 <__swbuf_r+0x90>
 80075e0:	4638      	mov	r0, r7
 80075e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e4:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <__swbuf_r+0x9c>)
 80075e6:	429c      	cmp	r4, r3
 80075e8:	d101      	bne.n	80075ee <__swbuf_r+0x7a>
 80075ea:	68ac      	ldr	r4, [r5, #8]
 80075ec:	e7cf      	b.n	800758e <__swbuf_r+0x1a>
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <__swbuf_r+0xa0>)
 80075f0:	429c      	cmp	r4, r3
 80075f2:	bf08      	it	eq
 80075f4:	68ec      	ldreq	r4, [r5, #12]
 80075f6:	e7ca      	b.n	800758e <__swbuf_r+0x1a>
 80075f8:	4621      	mov	r1, r4
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 f81a 	bl	8007634 <__swsetup_r>
 8007600:	2800      	cmp	r0, #0
 8007602:	d0cb      	beq.n	800759c <__swbuf_r+0x28>
 8007604:	f04f 37ff 	mov.w	r7, #4294967295
 8007608:	e7ea      	b.n	80075e0 <__swbuf_r+0x6c>
 800760a:	bf00      	nop
 800760c:	08008174 	.word	0x08008174
 8007610:	08008194 	.word	0x08008194
 8007614:	08008154 	.word	0x08008154

08007618 <__ascii_wctomb>:
 8007618:	4603      	mov	r3, r0
 800761a:	4608      	mov	r0, r1
 800761c:	b141      	cbz	r1, 8007630 <__ascii_wctomb+0x18>
 800761e:	2aff      	cmp	r2, #255	; 0xff
 8007620:	d904      	bls.n	800762c <__ascii_wctomb+0x14>
 8007622:	228a      	movs	r2, #138	; 0x8a
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	4770      	bx	lr
 800762c:	2001      	movs	r0, #1
 800762e:	700a      	strb	r2, [r1, #0]
 8007630:	4770      	bx	lr
	...

08007634 <__swsetup_r>:
 8007634:	4b32      	ldr	r3, [pc, #200]	; (8007700 <__swsetup_r+0xcc>)
 8007636:	b570      	push	{r4, r5, r6, lr}
 8007638:	681d      	ldr	r5, [r3, #0]
 800763a:	4606      	mov	r6, r0
 800763c:	460c      	mov	r4, r1
 800763e:	b125      	cbz	r5, 800764a <__swsetup_r+0x16>
 8007640:	69ab      	ldr	r3, [r5, #24]
 8007642:	b913      	cbnz	r3, 800764a <__swsetup_r+0x16>
 8007644:	4628      	mov	r0, r5
 8007646:	f000 f981 	bl	800794c <__sinit>
 800764a:	4b2e      	ldr	r3, [pc, #184]	; (8007704 <__swsetup_r+0xd0>)
 800764c:	429c      	cmp	r4, r3
 800764e:	d10f      	bne.n	8007670 <__swsetup_r+0x3c>
 8007650:	686c      	ldr	r4, [r5, #4]
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007658:	0719      	lsls	r1, r3, #28
 800765a:	d42c      	bmi.n	80076b6 <__swsetup_r+0x82>
 800765c:	06dd      	lsls	r5, r3, #27
 800765e:	d411      	bmi.n	8007684 <__swsetup_r+0x50>
 8007660:	2309      	movs	r3, #9
 8007662:	6033      	str	r3, [r6, #0]
 8007664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	e03e      	b.n	80076ee <__swsetup_r+0xba>
 8007670:	4b25      	ldr	r3, [pc, #148]	; (8007708 <__swsetup_r+0xd4>)
 8007672:	429c      	cmp	r4, r3
 8007674:	d101      	bne.n	800767a <__swsetup_r+0x46>
 8007676:	68ac      	ldr	r4, [r5, #8]
 8007678:	e7eb      	b.n	8007652 <__swsetup_r+0x1e>
 800767a:	4b24      	ldr	r3, [pc, #144]	; (800770c <__swsetup_r+0xd8>)
 800767c:	429c      	cmp	r4, r3
 800767e:	bf08      	it	eq
 8007680:	68ec      	ldreq	r4, [r5, #12]
 8007682:	e7e6      	b.n	8007652 <__swsetup_r+0x1e>
 8007684:	0758      	lsls	r0, r3, #29
 8007686:	d512      	bpl.n	80076ae <__swsetup_r+0x7a>
 8007688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800768a:	b141      	cbz	r1, 800769e <__swsetup_r+0x6a>
 800768c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007690:	4299      	cmp	r1, r3
 8007692:	d002      	beq.n	800769a <__swsetup_r+0x66>
 8007694:	4630      	mov	r0, r6
 8007696:	f7fd fc81 	bl	8004f9c <_free_r>
 800769a:	2300      	movs	r3, #0
 800769c:	6363      	str	r3, [r4, #52]	; 0x34
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	2300      	movs	r3, #0
 80076a8:	6063      	str	r3, [r4, #4]
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	f043 0308 	orr.w	r3, r3, #8
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	b94b      	cbnz	r3, 80076ce <__swsetup_r+0x9a>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c4:	d003      	beq.n	80076ce <__swsetup_r+0x9a>
 80076c6:	4621      	mov	r1, r4
 80076c8:	4630      	mov	r0, r6
 80076ca:	f000 fa01 	bl	8007ad0 <__smakebuf_r>
 80076ce:	89a0      	ldrh	r0, [r4, #12]
 80076d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076d4:	f010 0301 	ands.w	r3, r0, #1
 80076d8:	d00a      	beq.n	80076f0 <__swsetup_r+0xbc>
 80076da:	2300      	movs	r3, #0
 80076dc:	60a3      	str	r3, [r4, #8]
 80076de:	6963      	ldr	r3, [r4, #20]
 80076e0:	425b      	negs	r3, r3
 80076e2:	61a3      	str	r3, [r4, #24]
 80076e4:	6923      	ldr	r3, [r4, #16]
 80076e6:	b943      	cbnz	r3, 80076fa <__swsetup_r+0xc6>
 80076e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076ec:	d1ba      	bne.n	8007664 <__swsetup_r+0x30>
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	0781      	lsls	r1, r0, #30
 80076f2:	bf58      	it	pl
 80076f4:	6963      	ldrpl	r3, [r4, #20]
 80076f6:	60a3      	str	r3, [r4, #8]
 80076f8:	e7f4      	b.n	80076e4 <__swsetup_r+0xb0>
 80076fa:	2000      	movs	r0, #0
 80076fc:	e7f7      	b.n	80076ee <__swsetup_r+0xba>
 80076fe:	bf00      	nop
 8007700:	20000020 	.word	0x20000020
 8007704:	08008174 	.word	0x08008174
 8007708:	08008194 	.word	0x08008194
 800770c:	08008154 	.word	0x08008154

08007710 <abort>:
 8007710:	2006      	movs	r0, #6
 8007712:	b508      	push	{r3, lr}
 8007714:	f000 fa4c 	bl	8007bb0 <raise>
 8007718:	2001      	movs	r0, #1
 800771a:	f7fa fc92 	bl	8002042 <_exit>
	...

08007720 <__sflush_r>:
 8007720:	898a      	ldrh	r2, [r1, #12]
 8007722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007724:	4605      	mov	r5, r0
 8007726:	0710      	lsls	r0, r2, #28
 8007728:	460c      	mov	r4, r1
 800772a:	d457      	bmi.n	80077dc <__sflush_r+0xbc>
 800772c:	684b      	ldr	r3, [r1, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	dc04      	bgt.n	800773c <__sflush_r+0x1c>
 8007732:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007734:	2b00      	cmp	r3, #0
 8007736:	dc01      	bgt.n	800773c <__sflush_r+0x1c>
 8007738:	2000      	movs	r0, #0
 800773a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800773c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800773e:	2e00      	cmp	r6, #0
 8007740:	d0fa      	beq.n	8007738 <__sflush_r+0x18>
 8007742:	2300      	movs	r3, #0
 8007744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007748:	682f      	ldr	r7, [r5, #0]
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	d032      	beq.n	80077b4 <__sflush_r+0x94>
 800774e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	075a      	lsls	r2, r3, #29
 8007754:	d505      	bpl.n	8007762 <__sflush_r+0x42>
 8007756:	6863      	ldr	r3, [r4, #4]
 8007758:	1ac0      	subs	r0, r0, r3
 800775a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800775c:	b10b      	cbz	r3, 8007762 <__sflush_r+0x42>
 800775e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007760:	1ac0      	subs	r0, r0, r3
 8007762:	2300      	movs	r3, #0
 8007764:	4602      	mov	r2, r0
 8007766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007768:	4628      	mov	r0, r5
 800776a:	6a21      	ldr	r1, [r4, #32]
 800776c:	47b0      	blx	r6
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	d106      	bne.n	8007782 <__sflush_r+0x62>
 8007774:	6829      	ldr	r1, [r5, #0]
 8007776:	291d      	cmp	r1, #29
 8007778:	d82c      	bhi.n	80077d4 <__sflush_r+0xb4>
 800777a:	4a29      	ldr	r2, [pc, #164]	; (8007820 <__sflush_r+0x100>)
 800777c:	40ca      	lsrs	r2, r1
 800777e:	07d6      	lsls	r6, r2, #31
 8007780:	d528      	bpl.n	80077d4 <__sflush_r+0xb4>
 8007782:	2200      	movs	r2, #0
 8007784:	6062      	str	r2, [r4, #4]
 8007786:	6922      	ldr	r2, [r4, #16]
 8007788:	04d9      	lsls	r1, r3, #19
 800778a:	6022      	str	r2, [r4, #0]
 800778c:	d504      	bpl.n	8007798 <__sflush_r+0x78>
 800778e:	1c42      	adds	r2, r0, #1
 8007790:	d101      	bne.n	8007796 <__sflush_r+0x76>
 8007792:	682b      	ldr	r3, [r5, #0]
 8007794:	b903      	cbnz	r3, 8007798 <__sflush_r+0x78>
 8007796:	6560      	str	r0, [r4, #84]	; 0x54
 8007798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800779a:	602f      	str	r7, [r5, #0]
 800779c:	2900      	cmp	r1, #0
 800779e:	d0cb      	beq.n	8007738 <__sflush_r+0x18>
 80077a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a4:	4299      	cmp	r1, r3
 80077a6:	d002      	beq.n	80077ae <__sflush_r+0x8e>
 80077a8:	4628      	mov	r0, r5
 80077aa:	f7fd fbf7 	bl	8004f9c <_free_r>
 80077ae:	2000      	movs	r0, #0
 80077b0:	6360      	str	r0, [r4, #52]	; 0x34
 80077b2:	e7c2      	b.n	800773a <__sflush_r+0x1a>
 80077b4:	6a21      	ldr	r1, [r4, #32]
 80077b6:	2301      	movs	r3, #1
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b0      	blx	r6
 80077bc:	1c41      	adds	r1, r0, #1
 80077be:	d1c7      	bne.n	8007750 <__sflush_r+0x30>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0c4      	beq.n	8007750 <__sflush_r+0x30>
 80077c6:	2b1d      	cmp	r3, #29
 80077c8:	d001      	beq.n	80077ce <__sflush_r+0xae>
 80077ca:	2b16      	cmp	r3, #22
 80077cc:	d101      	bne.n	80077d2 <__sflush_r+0xb2>
 80077ce:	602f      	str	r7, [r5, #0]
 80077d0:	e7b2      	b.n	8007738 <__sflush_r+0x18>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d8:	81a3      	strh	r3, [r4, #12]
 80077da:	e7ae      	b.n	800773a <__sflush_r+0x1a>
 80077dc:	690f      	ldr	r7, [r1, #16]
 80077de:	2f00      	cmp	r7, #0
 80077e0:	d0aa      	beq.n	8007738 <__sflush_r+0x18>
 80077e2:	0793      	lsls	r3, r2, #30
 80077e4:	bf18      	it	ne
 80077e6:	2300      	movne	r3, #0
 80077e8:	680e      	ldr	r6, [r1, #0]
 80077ea:	bf08      	it	eq
 80077ec:	694b      	ldreq	r3, [r1, #20]
 80077ee:	1bf6      	subs	r6, r6, r7
 80077f0:	600f      	str	r7, [r1, #0]
 80077f2:	608b      	str	r3, [r1, #8]
 80077f4:	2e00      	cmp	r6, #0
 80077f6:	dd9f      	ble.n	8007738 <__sflush_r+0x18>
 80077f8:	4633      	mov	r3, r6
 80077fa:	463a      	mov	r2, r7
 80077fc:	4628      	mov	r0, r5
 80077fe:	6a21      	ldr	r1, [r4, #32]
 8007800:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007804:	47e0      	blx	ip
 8007806:	2800      	cmp	r0, #0
 8007808:	dc06      	bgt.n	8007818 <__sflush_r+0xf8>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	e790      	b.n	800773a <__sflush_r+0x1a>
 8007818:	4407      	add	r7, r0
 800781a:	1a36      	subs	r6, r6, r0
 800781c:	e7ea      	b.n	80077f4 <__sflush_r+0xd4>
 800781e:	bf00      	nop
 8007820:	20400001 	.word	0x20400001

08007824 <_fflush_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	690b      	ldr	r3, [r1, #16]
 8007828:	4605      	mov	r5, r0
 800782a:	460c      	mov	r4, r1
 800782c:	b913      	cbnz	r3, 8007834 <_fflush_r+0x10>
 800782e:	2500      	movs	r5, #0
 8007830:	4628      	mov	r0, r5
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	b118      	cbz	r0, 800783e <_fflush_r+0x1a>
 8007836:	6983      	ldr	r3, [r0, #24]
 8007838:	b90b      	cbnz	r3, 800783e <_fflush_r+0x1a>
 800783a:	f000 f887 	bl	800794c <__sinit>
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <_fflush_r+0x6c>)
 8007840:	429c      	cmp	r4, r3
 8007842:	d11b      	bne.n	800787c <_fflush_r+0x58>
 8007844:	686c      	ldr	r4, [r5, #4]
 8007846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0ef      	beq.n	800782e <_fflush_r+0xa>
 800784e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007850:	07d0      	lsls	r0, r2, #31
 8007852:	d404      	bmi.n	800785e <_fflush_r+0x3a>
 8007854:	0599      	lsls	r1, r3, #22
 8007856:	d402      	bmi.n	800785e <_fflush_r+0x3a>
 8007858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800785a:	f7ff fcd6 	bl	800720a <__retarget_lock_acquire_recursive>
 800785e:	4628      	mov	r0, r5
 8007860:	4621      	mov	r1, r4
 8007862:	f7ff ff5d 	bl	8007720 <__sflush_r>
 8007866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007868:	4605      	mov	r5, r0
 800786a:	07da      	lsls	r2, r3, #31
 800786c:	d4e0      	bmi.n	8007830 <_fflush_r+0xc>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	059b      	lsls	r3, r3, #22
 8007872:	d4dd      	bmi.n	8007830 <_fflush_r+0xc>
 8007874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007876:	f7ff fcc9 	bl	800720c <__retarget_lock_release_recursive>
 800787a:	e7d9      	b.n	8007830 <_fflush_r+0xc>
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <_fflush_r+0x70>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d101      	bne.n	8007886 <_fflush_r+0x62>
 8007882:	68ac      	ldr	r4, [r5, #8]
 8007884:	e7df      	b.n	8007846 <_fflush_r+0x22>
 8007886:	4b04      	ldr	r3, [pc, #16]	; (8007898 <_fflush_r+0x74>)
 8007888:	429c      	cmp	r4, r3
 800788a:	bf08      	it	eq
 800788c:	68ec      	ldreq	r4, [r5, #12]
 800788e:	e7da      	b.n	8007846 <_fflush_r+0x22>
 8007890:	08008174 	.word	0x08008174
 8007894:	08008194 	.word	0x08008194
 8007898:	08008154 	.word	0x08008154

0800789c <std>:
 800789c:	2300      	movs	r3, #0
 800789e:	b510      	push	{r4, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	e9c0 3300 	strd	r3, r3, [r0]
 80078a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078aa:	6083      	str	r3, [r0, #8]
 80078ac:	8181      	strh	r1, [r0, #12]
 80078ae:	6643      	str	r3, [r0, #100]	; 0x64
 80078b0:	81c2      	strh	r2, [r0, #14]
 80078b2:	6183      	str	r3, [r0, #24]
 80078b4:	4619      	mov	r1, r3
 80078b6:	2208      	movs	r2, #8
 80078b8:	305c      	adds	r0, #92	; 0x5c
 80078ba:	f7fd fb67 	bl	8004f8c <memset>
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <std+0x38>)
 80078c0:	6224      	str	r4, [r4, #32]
 80078c2:	6263      	str	r3, [r4, #36]	; 0x24
 80078c4:	4b04      	ldr	r3, [pc, #16]	; (80078d8 <std+0x3c>)
 80078c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <std+0x40>)
 80078ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <std+0x44>)
 80078ce:	6323      	str	r3, [r4, #48]	; 0x30
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	bf00      	nop
 80078d4:	08007be9 	.word	0x08007be9
 80078d8:	08007c0b 	.word	0x08007c0b
 80078dc:	08007c43 	.word	0x08007c43
 80078e0:	08007c67 	.word	0x08007c67

080078e4 <_cleanup_r>:
 80078e4:	4901      	ldr	r1, [pc, #4]	; (80078ec <_cleanup_r+0x8>)
 80078e6:	f000 b8af 	b.w	8007a48 <_fwalk_reent>
 80078ea:	bf00      	nop
 80078ec:	08007825 	.word	0x08007825

080078f0 <__sfmoreglue>:
 80078f0:	2268      	movs	r2, #104	; 0x68
 80078f2:	b570      	push	{r4, r5, r6, lr}
 80078f4:	1e4d      	subs	r5, r1, #1
 80078f6:	4355      	muls	r5, r2
 80078f8:	460e      	mov	r6, r1
 80078fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078fe:	f7fd fbb5 	bl	800506c <_malloc_r>
 8007902:	4604      	mov	r4, r0
 8007904:	b140      	cbz	r0, 8007918 <__sfmoreglue+0x28>
 8007906:	2100      	movs	r1, #0
 8007908:	e9c0 1600 	strd	r1, r6, [r0]
 800790c:	300c      	adds	r0, #12
 800790e:	60a0      	str	r0, [r4, #8]
 8007910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007914:	f7fd fb3a 	bl	8004f8c <memset>
 8007918:	4620      	mov	r0, r4
 800791a:	bd70      	pop	{r4, r5, r6, pc}

0800791c <__sfp_lock_acquire>:
 800791c:	4801      	ldr	r0, [pc, #4]	; (8007924 <__sfp_lock_acquire+0x8>)
 800791e:	f7ff bc74 	b.w	800720a <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	200004b5 	.word	0x200004b5

08007928 <__sfp_lock_release>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__sfp_lock_release+0x8>)
 800792a:	f7ff bc6f 	b.w	800720c <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	200004b5 	.word	0x200004b5

08007934 <__sinit_lock_acquire>:
 8007934:	4801      	ldr	r0, [pc, #4]	; (800793c <__sinit_lock_acquire+0x8>)
 8007936:	f7ff bc68 	b.w	800720a <__retarget_lock_acquire_recursive>
 800793a:	bf00      	nop
 800793c:	200004b6 	.word	0x200004b6

08007940 <__sinit_lock_release>:
 8007940:	4801      	ldr	r0, [pc, #4]	; (8007948 <__sinit_lock_release+0x8>)
 8007942:	f7ff bc63 	b.w	800720c <__retarget_lock_release_recursive>
 8007946:	bf00      	nop
 8007948:	200004b6 	.word	0x200004b6

0800794c <__sinit>:
 800794c:	b510      	push	{r4, lr}
 800794e:	4604      	mov	r4, r0
 8007950:	f7ff fff0 	bl	8007934 <__sinit_lock_acquire>
 8007954:	69a3      	ldr	r3, [r4, #24]
 8007956:	b11b      	cbz	r3, 8007960 <__sinit+0x14>
 8007958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800795c:	f7ff bff0 	b.w	8007940 <__sinit_lock_release>
 8007960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007964:	6523      	str	r3, [r4, #80]	; 0x50
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <__sinit+0x68>)
 8007968:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <__sinit+0x6c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	62a2      	str	r2, [r4, #40]	; 0x28
 800796e:	42a3      	cmp	r3, r4
 8007970:	bf08      	it	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	4620      	mov	r0, r4
 8007976:	bf08      	it	eq
 8007978:	61a3      	streq	r3, [r4, #24]
 800797a:	f000 f81f 	bl	80079bc <__sfp>
 800797e:	6060      	str	r0, [r4, #4]
 8007980:	4620      	mov	r0, r4
 8007982:	f000 f81b 	bl	80079bc <__sfp>
 8007986:	60a0      	str	r0, [r4, #8]
 8007988:	4620      	mov	r0, r4
 800798a:	f000 f817 	bl	80079bc <__sfp>
 800798e:	2200      	movs	r2, #0
 8007990:	2104      	movs	r1, #4
 8007992:	60e0      	str	r0, [r4, #12]
 8007994:	6860      	ldr	r0, [r4, #4]
 8007996:	f7ff ff81 	bl	800789c <std>
 800799a:	2201      	movs	r2, #1
 800799c:	2109      	movs	r1, #9
 800799e:	68a0      	ldr	r0, [r4, #8]
 80079a0:	f7ff ff7c 	bl	800789c <std>
 80079a4:	2202      	movs	r2, #2
 80079a6:	2112      	movs	r1, #18
 80079a8:	68e0      	ldr	r0, [r4, #12]
 80079aa:	f7ff ff77 	bl	800789c <std>
 80079ae:	2301      	movs	r3, #1
 80079b0:	61a3      	str	r3, [r4, #24]
 80079b2:	e7d1      	b.n	8007958 <__sinit+0xc>
 80079b4:	08007ddc 	.word	0x08007ddc
 80079b8:	080078e5 	.word	0x080078e5

080079bc <__sfp>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	4607      	mov	r7, r0
 80079c0:	f7ff ffac 	bl	800791c <__sfp_lock_acquire>
 80079c4:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <__sfp+0x84>)
 80079c6:	681e      	ldr	r6, [r3, #0]
 80079c8:	69b3      	ldr	r3, [r6, #24]
 80079ca:	b913      	cbnz	r3, 80079d2 <__sfp+0x16>
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff ffbd 	bl	800794c <__sinit>
 80079d2:	3648      	adds	r6, #72	; 0x48
 80079d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079d8:	3b01      	subs	r3, #1
 80079da:	d503      	bpl.n	80079e4 <__sfp+0x28>
 80079dc:	6833      	ldr	r3, [r6, #0]
 80079de:	b30b      	cbz	r3, 8007a24 <__sfp+0x68>
 80079e0:	6836      	ldr	r6, [r6, #0]
 80079e2:	e7f7      	b.n	80079d4 <__sfp+0x18>
 80079e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079e8:	b9d5      	cbnz	r5, 8007a20 <__sfp+0x64>
 80079ea:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <__sfp+0x88>)
 80079ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079f0:	60e3      	str	r3, [r4, #12]
 80079f2:	6665      	str	r5, [r4, #100]	; 0x64
 80079f4:	f7ff fc08 	bl	8007208 <__retarget_lock_init_recursive>
 80079f8:	f7ff ff96 	bl	8007928 <__sfp_lock_release>
 80079fc:	2208      	movs	r2, #8
 80079fe:	4629      	mov	r1, r5
 8007a00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a08:	6025      	str	r5, [r4, #0]
 8007a0a:	61a5      	str	r5, [r4, #24]
 8007a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a10:	f7fd fabc 	bl	8004f8c <memset>
 8007a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a20:	3468      	adds	r4, #104	; 0x68
 8007a22:	e7d9      	b.n	80079d8 <__sfp+0x1c>
 8007a24:	2104      	movs	r1, #4
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7ff ff62 	bl	80078f0 <__sfmoreglue>
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	6030      	str	r0, [r6, #0]
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d1d5      	bne.n	80079e0 <__sfp+0x24>
 8007a34:	f7ff ff78 	bl	8007928 <__sfp_lock_release>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	e7ee      	b.n	8007a1c <__sfp+0x60>
 8007a3e:	bf00      	nop
 8007a40:	08007ddc 	.word	0x08007ddc
 8007a44:	ffff0001 	.word	0xffff0001

08007a48 <_fwalk_reent>:
 8007a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	4688      	mov	r8, r1
 8007a50:	2700      	movs	r7, #0
 8007a52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a5e:	d505      	bpl.n	8007a6c <_fwalk_reent+0x24>
 8007a60:	6824      	ldr	r4, [r4, #0]
 8007a62:	2c00      	cmp	r4, #0
 8007a64:	d1f7      	bne.n	8007a56 <_fwalk_reent+0xe>
 8007a66:	4638      	mov	r0, r7
 8007a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6c:	89ab      	ldrh	r3, [r5, #12]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d907      	bls.n	8007a82 <_fwalk_reent+0x3a>
 8007a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a76:	3301      	adds	r3, #1
 8007a78:	d003      	beq.n	8007a82 <_fwalk_reent+0x3a>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	47c0      	blx	r8
 8007a80:	4307      	orrs	r7, r0
 8007a82:	3568      	adds	r5, #104	; 0x68
 8007a84:	e7e9      	b.n	8007a5a <_fwalk_reent+0x12>

08007a86 <__swhatbuf_r>:
 8007a86:	b570      	push	{r4, r5, r6, lr}
 8007a88:	460e      	mov	r6, r1
 8007a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8e:	4614      	mov	r4, r2
 8007a90:	2900      	cmp	r1, #0
 8007a92:	461d      	mov	r5, r3
 8007a94:	b096      	sub	sp, #88	; 0x58
 8007a96:	da08      	bge.n	8007aaa <__swhatbuf_r+0x24>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a9e:	602a      	str	r2, [r5, #0]
 8007aa0:	061a      	lsls	r2, r3, #24
 8007aa2:	d410      	bmi.n	8007ac6 <__swhatbuf_r+0x40>
 8007aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa8:	e00e      	b.n	8007ac8 <__swhatbuf_r+0x42>
 8007aaa:	466a      	mov	r2, sp
 8007aac:	f000 f902 	bl	8007cb4 <_fstat_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	dbf1      	blt.n	8007a98 <__swhatbuf_r+0x12>
 8007ab4:	9a01      	ldr	r2, [sp, #4]
 8007ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007abe:	425a      	negs	r2, r3
 8007ac0:	415a      	adcs	r2, r3
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	e7ee      	b.n	8007aa4 <__swhatbuf_r+0x1e>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	2000      	movs	r0, #0
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	b016      	add	sp, #88	; 0x58
 8007ace:	bd70      	pop	{r4, r5, r6, pc}

08007ad0 <__smakebuf_r>:
 8007ad0:	898b      	ldrh	r3, [r1, #12]
 8007ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ad4:	079d      	lsls	r5, r3, #30
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	d507      	bpl.n	8007aec <__smakebuf_r+0x1c>
 8007adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	6163      	str	r3, [r4, #20]
 8007ae8:	b002      	add	sp, #8
 8007aea:	bd70      	pop	{r4, r5, r6, pc}
 8007aec:	466a      	mov	r2, sp
 8007aee:	ab01      	add	r3, sp, #4
 8007af0:	f7ff ffc9 	bl	8007a86 <__swhatbuf_r>
 8007af4:	9900      	ldr	r1, [sp, #0]
 8007af6:	4605      	mov	r5, r0
 8007af8:	4630      	mov	r0, r6
 8007afa:	f7fd fab7 	bl	800506c <_malloc_r>
 8007afe:	b948      	cbnz	r0, 8007b14 <__smakebuf_r+0x44>
 8007b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b04:	059a      	lsls	r2, r3, #22
 8007b06:	d4ef      	bmi.n	8007ae8 <__smakebuf_r+0x18>
 8007b08:	f023 0303 	bic.w	r3, r3, #3
 8007b0c:	f043 0302 	orr.w	r3, r3, #2
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	e7e3      	b.n	8007adc <__smakebuf_r+0xc>
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <__smakebuf_r+0x7c>)
 8007b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	6020      	str	r0, [r4, #0]
 8007b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	9b00      	ldr	r3, [sp, #0]
 8007b24:	6120      	str	r0, [r4, #16]
 8007b26:	6163      	str	r3, [r4, #20]
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	b15b      	cbz	r3, 8007b44 <__smakebuf_r+0x74>
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b32:	f000 f8d1 	bl	8007cd8 <_isatty_r>
 8007b36:	b128      	cbz	r0, 8007b44 <__smakebuf_r+0x74>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	89a0      	ldrh	r0, [r4, #12]
 8007b46:	4305      	orrs	r5, r0
 8007b48:	81a5      	strh	r5, [r4, #12]
 8007b4a:	e7cd      	b.n	8007ae8 <__smakebuf_r+0x18>
 8007b4c:	080078e5 	.word	0x080078e5

08007b50 <_malloc_usable_size_r>:
 8007b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b54:	1f18      	subs	r0, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	bfbc      	itt	lt
 8007b5a:	580b      	ldrlt	r3, [r1, r0]
 8007b5c:	18c0      	addlt	r0, r0, r3
 8007b5e:	4770      	bx	lr

08007b60 <_raise_r>:
 8007b60:	291f      	cmp	r1, #31
 8007b62:	b538      	push	{r3, r4, r5, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	460d      	mov	r5, r1
 8007b68:	d904      	bls.n	8007b74 <_raise_r+0x14>
 8007b6a:	2316      	movs	r3, #22
 8007b6c:	6003      	str	r3, [r0, #0]
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b76:	b112      	cbz	r2, 8007b7e <_raise_r+0x1e>
 8007b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b7c:	b94b      	cbnz	r3, 8007b92 <_raise_r+0x32>
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 f830 	bl	8007be4 <_getpid_r>
 8007b84:	462a      	mov	r2, r5
 8007b86:	4601      	mov	r1, r0
 8007b88:	4620      	mov	r0, r4
 8007b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b8e:	f000 b817 	b.w	8007bc0 <_kill_r>
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d00a      	beq.n	8007bac <_raise_r+0x4c>
 8007b96:	1c59      	adds	r1, r3, #1
 8007b98:	d103      	bne.n	8007ba2 <_raise_r+0x42>
 8007b9a:	2316      	movs	r3, #22
 8007b9c:	6003      	str	r3, [r0, #0]
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	e7e7      	b.n	8007b72 <_raise_r+0x12>
 8007ba2:	2400      	movs	r4, #0
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007baa:	4798      	blx	r3
 8007bac:	2000      	movs	r0, #0
 8007bae:	e7e0      	b.n	8007b72 <_raise_r+0x12>

08007bb0 <raise>:
 8007bb0:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <raise+0xc>)
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	f7ff bfd3 	b.w	8007b60 <_raise_r>
 8007bba:	bf00      	nop
 8007bbc:	20000020 	.word	0x20000020

08007bc0 <_kill_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	4d06      	ldr	r5, [pc, #24]	; (8007be0 <_kill_r+0x20>)
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4608      	mov	r0, r1
 8007bca:	4611      	mov	r1, r2
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	f7fa fa28 	bl	8002022 <_kill>
 8007bd2:	1c43      	adds	r3, r0, #1
 8007bd4:	d102      	bne.n	8007bdc <_kill_r+0x1c>
 8007bd6:	682b      	ldr	r3, [r5, #0]
 8007bd8:	b103      	cbz	r3, 8007bdc <_kill_r+0x1c>
 8007bda:	6023      	str	r3, [r4, #0]
 8007bdc:	bd38      	pop	{r3, r4, r5, pc}
 8007bde:	bf00      	nop
 8007be0:	200004b0 	.word	0x200004b0

08007be4 <_getpid_r>:
 8007be4:	f7fa ba16 	b.w	8002014 <_getpid>

08007be8 <__sread>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	460c      	mov	r4, r1
 8007bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf0:	f000 f894 	bl	8007d1c <_read_r>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	bfab      	itete	ge
 8007bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8007bfc:	181b      	addge	r3, r3, r0
 8007bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c02:	bfac      	ite	ge
 8007c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c06:	81a3      	strhlt	r3, [r4, #12]
 8007c08:	bd10      	pop	{r4, pc}

08007c0a <__swrite>:
 8007c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0e:	461f      	mov	r7, r3
 8007c10:	898b      	ldrh	r3, [r1, #12]
 8007c12:	4605      	mov	r5, r0
 8007c14:	05db      	lsls	r3, r3, #23
 8007c16:	460c      	mov	r4, r1
 8007c18:	4616      	mov	r6, r2
 8007c1a:	d505      	bpl.n	8007c28 <__swrite+0x1e>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c24:	f000 f868 	bl	8007cf8 <_lseek_r>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	4632      	mov	r2, r6
 8007c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	4628      	mov	r0, r5
 8007c34:	463b      	mov	r3, r7
 8007c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3e:	f000 b817 	b.w	8007c70 <_write_r>

08007c42 <__sseek>:
 8007c42:	b510      	push	{r4, lr}
 8007c44:	460c      	mov	r4, r1
 8007c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4a:	f000 f855 	bl	8007cf8 <_lseek_r>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	bf15      	itete	ne
 8007c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c5e:	81a3      	strheq	r3, [r4, #12]
 8007c60:	bf18      	it	ne
 8007c62:	81a3      	strhne	r3, [r4, #12]
 8007c64:	bd10      	pop	{r4, pc}

08007c66 <__sclose>:
 8007c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6a:	f000 b813 	b.w	8007c94 <_close_r>
	...

08007c70 <_write_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	4611      	mov	r1, r2
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4d05      	ldr	r5, [pc, #20]	; (8007c90 <_write_r+0x20>)
 8007c7c:	602a      	str	r2, [r5, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f7fa fa06 	bl	8002090 <_write>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_write_r+0x1e>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_write_r+0x1e>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	200004b0 	.word	0x200004b0

08007c94 <_close_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	2300      	movs	r3, #0
 8007c98:	4d05      	ldr	r5, [pc, #20]	; (8007cb0 <_close_r+0x1c>)
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	f7fa fa12 	bl	80020c8 <_close>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_close_r+0x1a>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_close_r+0x1a>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	200004b0 	.word	0x200004b0

08007cb4 <_fstat_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4d06      	ldr	r5, [pc, #24]	; (8007cd4 <_fstat_r+0x20>)
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	f7fa fa0c 	bl	80020de <_fstat>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	d102      	bne.n	8007cd0 <_fstat_r+0x1c>
 8007cca:	682b      	ldr	r3, [r5, #0]
 8007ccc:	b103      	cbz	r3, 8007cd0 <_fstat_r+0x1c>
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	bd38      	pop	{r3, r4, r5, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200004b0 	.word	0x200004b0

08007cd8 <_isatty_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4d05      	ldr	r5, [pc, #20]	; (8007cf4 <_isatty_r+0x1c>)
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7fa fa0a 	bl	80020fc <_isatty>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_isatty_r+0x1a>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_isatty_r+0x1a>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	200004b0 	.word	0x200004b0

08007cf8 <_lseek_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	2200      	movs	r2, #0
 8007d02:	4d05      	ldr	r5, [pc, #20]	; (8007d18 <_lseek_r+0x20>)
 8007d04:	602a      	str	r2, [r5, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f7fa fa02 	bl	8002110 <_lseek>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_lseek_r+0x1e>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_lseek_r+0x1e>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	200004b0 	.word	0x200004b0

08007d1c <_read_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	2200      	movs	r2, #0
 8007d26:	4d05      	ldr	r5, [pc, #20]	; (8007d3c <_read_r+0x20>)
 8007d28:	602a      	str	r2, [r5, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f7fa f993 	bl	8002056 <_read>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d102      	bne.n	8007d3a <_read_r+0x1e>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	b103      	cbz	r3, 8007d3a <_read_r+0x1e>
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	200004b0 	.word	0x200004b0

08007d40 <_init>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	bf00      	nop
 8007d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d46:	bc08      	pop	{r3}
 8007d48:	469e      	mov	lr, r3
 8007d4a:	4770      	bx	lr

08007d4c <_fini>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	bf00      	nop
 8007d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d52:	bc08      	pop	{r3}
 8007d54:	469e      	mov	lr, r3
 8007d56:	4770      	bx	lr
