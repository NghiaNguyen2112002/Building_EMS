
Node_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008940  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008a50  08008a50  00018a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eac  08008eac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008eac  08008eac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008eac  08008eac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eac  08008eac  00018eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001e0  08009094  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08009094  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b31  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003211  00000000  00000000  00033d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00036f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  00038240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae3f  00000000  00000000  000393e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172d3  00000000  00000000  00054227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939ab  00000000  00000000  0006b4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000feea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006068  00000000  00000000  000feef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a38 	.word	0x08008a38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008a38 	.word	0x08008a38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2uiz>:
 8000d44:	0042      	lsls	r2, r0, #1
 8000d46:	d20e      	bcs.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30b      	bcc.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d409      	bmi.n	8000d6c <__aeabi_f2uiz+0x28>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2uiz+0x32>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d102      	bne.n	8000d7c <__aeabi_f2uiz+0x38>
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	4770      	bx	lr
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <Delay_us>:
 */


#include "DHT.h"

void Delay_us(DHT_Name* DHT, uint16_t duration){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(DHT->timer, 0);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(DHT->timer) < duration){}
 8000d9a:	bf00      	nop
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3f8      	bcc.n	8000d9c <Delay_us+0x18>
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <SetPinIn>:

void SetPinIn(DHT_Name* DHT){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	889b      	ldrh	r3, [r3, #4]
 8000dd0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fb1b 	bl	8003420 <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <SetPinOut>:

void SetPinOut(DHT_Name* DHT){
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f107 0208 	add.w	r2, r7, #8
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fafb 	bl	8003420 <HAL_GPIO_Init>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <WritePin>:

static void WritePin(DHT_Name* DHT, uint8_t value){
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->DHT_port, DHT->DHT_pin, value);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	889b      	ldrh	r3, [r3, #4]
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f002 fc84 	bl	8003756 <HAL_GPIO_WritePin>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <ReadPin>:

static uint8_t ReadPin(DHT_Name* DHT){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(DHT->DHT_port, DHT->DHT_pin);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f002 fc5d 	bl	8003728 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <DHT_Init>:

//===========================HIGH LEVEL FUNCTION===========================//
void DHT_Init(DHT_Name* DHT, GPIO_TypeDef* DHT_port, uint16_t DHT_pin, TIM_HandleTypeDef* timer){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80fb      	strh	r3, [r7, #6]
	DHT->DHT_port = DHT_port;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	601a      	str	r2, [r3, #0]
	DHT->DHT_pin = DHT_pin;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	809a      	strh	r2, [r3, #4]
	DHT->timer = timer;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	609a      	str	r2, [r3, #8]

	DHT->humi = DHT->temp = 0;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

	SetPinOut(DHT);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f7ff ffa1 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 1);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff ffbd 	bl	8000e32 <WritePin>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <DHT_Read>:


void DHT_Read(DHT_Name* DHT){
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	uint16_t time_out = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	82fb      	strh	r3, [r7, #22]
	uint8_t data[5] = {0, 0, 0, 0, 0};
 8000ecc:	4a84      	ldr	r2, [pc, #528]	; (80010e0 <DHT_Read+0x220>)
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed6:	6018      	str	r0, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	7019      	strb	r1, [r3, #0]
	data[2] integral Temp
	data[3] decimal Temp
	data[4] SUM
*/

	DHT->humi = DHT->temp = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]

	SetPinOut(DHT);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff80 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 0);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff9c 	bl	8000e32 <WritePin>
	HAL_Delay(20);
 8000efa:	2014      	movs	r0, #20
 8000efc:	f001 fa20 	bl	8002340 <HAL_Delay>


	SetPinIn(DHT);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff58 	bl	8000db6 <SetPinIn>

	Delay_us(DHT, 40);
 8000f06:	2128      	movs	r1, #40	; 0x28
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff3b 	bl	8000d84 <Delay_us>

	if(!ReadPin(DHT)){
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa1 	bl	8000e56 <ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <DHT_Read+0x62>
		Delay_us(DHT, 80);
 8000f1a:	2150      	movs	r1, #80	; 0x50
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff31 	bl	8000d84 <Delay_us>
	}

	for(time_out = 0; (time_out < 100) && ReadPin(DHT); time_out++);
 8000f22:	2300      	movs	r3, #0
 8000f24:	82fb      	strh	r3, [r7, #22]
 8000f26:	e002      	b.n	8000f2e <DHT_Read+0x6e>
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	82fb      	strh	r3, [r7, #22]
 8000f2e:	8afb      	ldrh	r3, [r7, #22]
 8000f30:	2b63      	cmp	r3, #99	; 0x63
 8000f32:	d805      	bhi.n	8000f40 <DHT_Read+0x80>
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff8e 	bl	8000e56 <ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f3      	bne.n	8000f28 <DHT_Read+0x68>

//	start DHT successful => read
	for(uint8_t i = 0; i < 5; i++){
 8000f40:	2300      	movs	r3, #0
 8000f42:	757b      	strb	r3, [r7, #21]
 8000f44:	e060      	b.n	8001008 <DHT_Read+0x148>
		for(uint8_t j = 0; j < 8; j++){
 8000f46:	2300      	movs	r3, #0
 8000f48:	753b      	strb	r3, [r7, #20]
 8000f4a:	e057      	b.n	8000ffc <DHT_Read+0x13c>

			for(time_out = 0; (time_out < 100) && !ReadPin(DHT); time_out++);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	82fb      	strh	r3, [r7, #22]
 8000f50:	e002      	b.n	8000f58 <DHT_Read+0x98>
 8000f52:	8afb      	ldrh	r3, [r7, #22]
 8000f54:	3301      	adds	r3, #1
 8000f56:	82fb      	strh	r3, [r7, #22]
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	2b63      	cmp	r3, #99	; 0x63
 8000f5c:	d805      	bhi.n	8000f6a <DHT_Read+0xaa>
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff79 	bl	8000e56 <ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f3      	beq.n	8000f52 <DHT_Read+0x92>

			Delay_us(DHT, 40);
 8000f6a:	2128      	movs	r1, #40	; 0x28
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff09 	bl	8000d84 <Delay_us>

			if(!ReadPin(DHT)) data[i] &= (~(1<<(7-j)));
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff6f 	bl	8000e56 <ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d117      	bne.n	8000fae <DHT_Read+0xee>
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	3318      	adds	r3, #24
 8000f82:	443b      	add	r3, r7
 8000f84:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f88:	b25a      	sxtb	r2, r3
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	f1c3 0307 	rsb	r3, r3, #7
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	b25a      	sxtb	r2, r3
 8000fa0:	7d7b      	ldrb	r3, [r7, #21]
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	443b      	add	r3, r7
 8000fa8:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000fac:	e014      	b.n	8000fd8 <DHT_Read+0x118>
			else data[i] |= (1 << (7-j));
 8000fae:	7d7b      	ldrb	r3, [r7, #21]
 8000fb0:	3318      	adds	r3, #24
 8000fb2:	443b      	add	r3, r7
 8000fb4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	7d3b      	ldrb	r3, [r7, #20]
 8000fbc:	f1c3 0307 	rsb	r3, r3, #7
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	7d7b      	ldrb	r3, [r7, #21]
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	3318      	adds	r3, #24
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f803 2c10 	strb.w	r2, [r3, #-16]


			for(time_out = 0; (time_out < 100) && ReadPin(DHT); time_out++);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	82fb      	strh	r3, [r7, #22]
 8000fdc:	e002      	b.n	8000fe4 <DHT_Read+0x124>
 8000fde:	8afb      	ldrh	r3, [r7, #22]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	82fb      	strh	r3, [r7, #22]
 8000fe4:	8afb      	ldrh	r3, [r7, #22]
 8000fe6:	2b63      	cmp	r3, #99	; 0x63
 8000fe8:	d805      	bhi.n	8000ff6 <DHT_Read+0x136>
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff33 	bl	8000e56 <ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f3      	bne.n	8000fde <DHT_Read+0x11e>
		for(uint8_t j = 0; j < 8; j++){
 8000ff6:	7d3b      	ldrb	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	753b      	strb	r3, [r7, #20]
 8000ffc:	7d3b      	ldrb	r3, [r7, #20]
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	d9a4      	bls.n	8000f4c <DHT_Read+0x8c>
	for(uint8_t i = 0; i < 5; i++){
 8001002:	7d7b      	ldrb	r3, [r7, #21]
 8001004:	3301      	adds	r3, #1
 8001006:	757b      	strb	r3, [r7, #21]
 8001008:	7d7b      	ldrb	r3, [r7, #21]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d99b      	bls.n	8000f46 <DHT_Read+0x86>
		}
	}

	if(data[4] != (data[0] + data[1] + data[2] + data[3]))
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	7a3b      	ldrb	r3, [r7, #8]
 8001014:	4619      	mov	r1, r3
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	440b      	add	r3, r1
 800101a:	7ab9      	ldrb	r1, [r7, #10]
 800101c:	440b      	add	r3, r1
 800101e:	7af9      	ldrb	r1, [r7, #11]
 8001020:	440b      	add	r3, r1
 8001022:	429a      	cmp	r2, r3
 8001024:	d157      	bne.n	80010d6 <DHT_Read+0x216>
		return;

	humi = (float)(data[0] * 1.0 + data[1] / 10.0);
 8001026:	7a3b      	ldrb	r3, [r7, #8]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f9eb 	bl	8000404 <__aeabi_i2d>
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	7a7b      	ldrb	r3, [r7, #9]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f9e5 	bl	8000404 <__aeabi_i2d>
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <DHT_Read+0x224>)
 8001040:	f7ff fb74 	bl	800072c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff f88e 	bl	800016c <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd16 	bl	8000a88 <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fe70 	bl	8000d44 <__aeabi_f2uiz>
 8001064:	4603      	mov	r3, r0
 8001066:	827b      	strh	r3, [r7, #18]
	temp = (float)(data[2] * 1.0 + data[3] / 10.0);
 8001068:	7abb      	ldrb	r3, [r7, #10]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f9ca 	bl	8000404 <__aeabi_i2d>
 8001070:	4604      	mov	r4, r0
 8001072:	460d      	mov	r5, r1
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f9c4 	bl	8000404 <__aeabi_i2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <DHT_Read+0x224>)
 8001082:	f7ff fb53 	bl	800072c <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff f86d 	bl	800016c <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fcf5 	bl	8000a88 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe4f 	bl	8000d44 <__aeabi_f2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	823b      	strh	r3, [r7, #16]

	DHT->humi = humi;
 80010aa:	8a7b      	ldrh	r3, [r7, #18]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fdf1 	bl	8000c94 <__aeabi_ui2f>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	611a      	str	r2, [r3, #16]
	DHT->temp = temp;
 80010b8:	8a3b      	ldrh	r3, [r7, #16]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdea 	bl	8000c94 <__aeabi_ui2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60da      	str	r2, [r3, #12]

	SetPinOut(DHT);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fe93 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 1);
 80010cc:	2101      	movs	r1, #1
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff feaf 	bl	8000e32 <WritePin>
 80010d4:	e000      	b.n	80010d8 <DHT_Read+0x218>
		return;
 80010d6:	bf00      	nop
}
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bdb0      	pop	{r4, r5, r7, pc}
 80010de:	bf00      	nop
 80010e0:	08008a50 	.word	0x08008a50
 80010e4:	40240000 	.word	0x40240000

080010e8 <DHT_GetTemp>:

float DHT_GetTemp(DHT_Name* DHT){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
//	return 30.4;
//	return random()%100 + random()%10 / 10.0;
	return DHT->temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <DHT_GetHumi>:

float DHT_GetHumi(DHT_Name* DHT){
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
//	return 50.4;
//	return random()%100 + random()%10 / 10.0;
	return DHT->humi;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <ConvertToJsonString>:

uint8_t mode;
char json_str[200];


uint8_t ConvertToJsonString(void){
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af06      	add	r7, sp, #24
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
										"\"GAS\":%u,\"SMOKE\":%u}#",
										NODE_ID, _data.temp, _data.humid,
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <ConvertToJsonString+0x4c>)
 800111c:	685b      	ldr	r3, [r3, #4]
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f982 	bl	8000428 <__aeabi_f2d>
 8001124:	4604      	mov	r4, r0
 8001126:	460d      	mov	r5, r1
										NODE_ID, _data.temp, _data.humid,
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <ConvertToJsonString+0x4c>)
 800112a:	689b      	ldr	r3, [r3, #8]
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f97b 	bl	8000428 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
										_data.gas, _data.smoke);
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <ConvertToJsonString+0x4c>)
 8001138:	8989      	ldrh	r1, [r1, #12]
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 800113a:	4608      	mov	r0, r1
										_data.gas, _data.smoke);
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <ConvertToJsonString+0x4c>)
 800113e:	89c9      	ldrh	r1, [r1, #14]
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 8001140:	9105      	str	r1, [sp, #20]
 8001142:	9004      	str	r0, [sp, #16]
 8001144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001148:	e9cd 4500 	strd	r4, r5, [sp]
 800114c:	2200      	movs	r2, #0
 800114e:	4905      	ldr	r1, [pc, #20]	; (8001164 <ConvertToJsonString+0x50>)
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <ConvertToJsonString+0x54>)
 8001152:	f005 faed 	bl	8006730 <siprintf>
 8001156:	4603      	mov	r3, r0
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	200002c8 	.word	0x200002c8
 8001164:	08008a58 	.word	0x08008a58
 8001168:	20000200 	.word	0x20000200

0800116c <FSM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void FSM_Init(void){
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	mode = INIT;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <FSM_Init+0x14>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200001fc 	.word	0x200001fc

08001184 <FSM_SystemControl>:
void FSM_SystemControl(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	switch(mode){
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <FSM_SystemControl+0xa8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d847      	bhi.n	8001220 <FSM_SystemControl+0x9c>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <FSM_SystemControl+0x14>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011b1 	.word	0x080011b1
 80011a0:	080011b9 	.word	0x080011b9
 80011a4:	08001201 	.word	0x08001201
	case INIT:

//		_time_read_data = TIME_READ_DATA;
		mode = IDLING;
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <FSM_SystemControl+0xa8>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
		break;
 80011ae:	e03b      	b.n	8001228 <FSM_SystemControl+0xa4>
	case IDLING:
//		if(_time_read_data < 5) mode = READ_DATA;

		mode = READ_DATA;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <FSM_SystemControl+0xa8>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
		break;
 80011b6:	e037      	b.n	8001228 <FSM_SystemControl+0xa4>
	case READ_DATA:
		CLCD_PrintStringBuffer(0, 0, "READ DATA");
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <FSM_SystemControl+0xac>)
 80011ba:	2100      	movs	r1, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f9d7 	bl	8001570 <CLCD_PrintStringBuffer>

		DHT_Read(&_dht);
 80011c2:	481c      	ldr	r0, [pc, #112]	; (8001234 <FSM_SystemControl+0xb0>)
 80011c4:	f7ff fe7c 	bl	8000ec0 <DHT_Read>

		_data.temp = DHT_GetTemp(&_dht);
 80011c8:	481a      	ldr	r0, [pc, #104]	; (8001234 <FSM_SystemControl+0xb0>)
 80011ca:	f7ff ff8d 	bl	80010e8 <DHT_GetTemp>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <FSM_SystemControl+0xb4>)
 80011d2:	6053      	str	r3, [r2, #4]
		_data.humid = DHT_GetHumi(&_dht);
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <FSM_SystemControl+0xb0>)
 80011d6:	f7ff ff92 	bl	80010fe <DHT_GetHumi>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a16      	ldr	r2, [pc, #88]	; (8001238 <FSM_SystemControl+0xb4>)
 80011de:	6093      	str	r3, [r2, #8]

		_data.gas = IN_GetValue_Gas();
 80011e0:	f000 f844 	bl	800126c <IN_GetValue_Gas>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <FSM_SystemControl+0xb4>)
 80011ea:	819a      	strh	r2, [r3, #12]
		_data.smoke = IN_GetValue_Smoke();
 80011ec:	f000 f848 	bl	8001280 <IN_GetValue_Smoke>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <FSM_SystemControl+0xb4>)
 80011f6:	81da      	strh	r2, [r3, #14]

		mode = SEND_DATA;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <FSM_SystemControl+0xa8>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	701a      	strb	r2, [r3, #0]
		break;
 80011fe:	e013      	b.n	8001228 <FSM_SystemControl+0xa4>
	case SEND_DATA:
		CLCD_PrintStringBuffer(0, 0, "SEND DATA");
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <FSM_SystemControl+0xb8>)
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f9b3 	bl	8001570 <CLCD_PrintStringBuffer>

		ZB_SendMsg(json_str, ConvertToJsonString());
 800120a:	f7ff ff83 	bl	8001114 <ConvertToJsonString>
 800120e:	4603      	mov	r3, r0
 8001210:	4619      	mov	r1, r3
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <FSM_SystemControl+0xbc>)
 8001214:	f000 ffec 	bl	80021f0 <ZB_SendMsg>

//		_time_read_data = TIME_READ_DATA;
		mode = IDLING;
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <FSM_SystemControl+0xa8>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
		break;
 800121e:	e003      	b.n	8001228 <FSM_SystemControl+0xa4>
	default:
		mode = INIT;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <FSM_SystemControl+0xa8>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
	}
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001fc 	.word	0x200001fc
 8001230:	08008a94 	.word	0x08008a94
 8001234:	200002d8 	.word	0x200002d8
 8001238:	200002c8 	.word	0x200002c8
 800123c:	08008aa0 	.word	0x08008aa0
 8001240:	20000200 	.word	0x20000200

08001244 <IN_Init>:
ADC_HandleTypeDef* adc;
uint16_t ADC_value[2];


//===========================HIGH LEVEL FUNCTION===========================//
void IN_Init(ADC_HandleTypeDef* hadc){
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	adc = hadc;
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <IN_Init+0x20>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(hadc, (uint32_t*) ADC_value, 2);
 8001252:	2202      	movs	r2, #2
 8001254:	4904      	ldr	r1, [pc, #16]	; (8001268 <IN_Init+0x24>)
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f001 f96e 	bl	8002538 <HAL_ADC_Start_DMA>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200002f0 	.word	0x200002f0
 8001268:	200002f4 	.word	0x200002f4

0800126c <IN_GetValue_Gas>:


uint16_t IN_GetValue_Gas(void){
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	return ADC_value[1];
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <IN_GetValue_Gas+0x10>)
 8001272:	885b      	ldrh	r3, [r3, #2]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200002f4 	.word	0x200002f4

08001280 <IN_GetValue_Smoke>:

uint16_t IN_GetValue_Smoke(void){
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	return ADC_value[0];
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <IN_GetValue_Smoke+0x10>)
 8001286:	881b      	ldrh	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	200002f4 	.word	0x200002f4

08001294 <Delay>:

CLCD_I2C_Name LCD;

uint8_t currentCol, currentRow;

static void Delay(uint16_t time){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 f84d 	bl	8002340 <HAL_Delay>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <WriteI2C>:


static void WriteI2C(uint8_t data, uint8_t mode){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f023 030f 	bic.w	r3, r3, #15
 80012c6:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <WriteI2C+0x90>)
 80012d0:	7adb      	ldrb	r3, [r3, #11]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 80012de:	7bbb      	ldrb	r3, [r7, #14]
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d107      	bne.n	80012fc <WriteI2C+0x4c>
		dataH |= LCD_RS;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	b2db      	uxtb	r3, r3
 8001312:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <WriteI2C+0x90>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <WriteI2C+0x90>)
 800131e:	791b      	ldrb	r3, [r3, #4]
 8001320:	b29b      	uxth	r3, r3
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	b299      	uxth	r1, r3
 8001326:	f107 0208 	add.w	r2, r7, #8
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2304      	movs	r3, #4
 8001332:	f002 fb85 	bl	8003a40 <HAL_I2C_Master_Transmit>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002fc 	.word	0x200002fc

08001344 <CLCD_Init>:



//===========================HIGH LEVEL FUNCTION===========================//
void CLCD_Init(I2C_HandleTypeDef* I2C, uint8_t address, uint8_t row, uint8_t col){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	70fb      	strb	r3, [r7, #3]
 8001356:	460b      	mov	r3, r1
 8001358:	70bb      	strb	r3, [r7, #2]
 800135a:	4613      	mov	r3, r2
 800135c:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	LCD.I2C = I2C;
 800135e:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <CLCD_Init+0x144>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6013      	str	r3, [r2, #0]
	LCD.ADDRESS = address;
 8001364:	4a48      	ldr	r2, [pc, #288]	; (8001488 <CLCD_Init+0x144>)
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	7113      	strb	r3, [r2, #4]
	LCD.COL = col;
 800136a:	4a47      	ldr	r2, [pc, #284]	; (8001488 <CLCD_Init+0x144>)
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	7153      	strb	r3, [r2, #5]
	LCD.ROW = row;
 8001370:	4a45      	ldr	r2, [pc, #276]	; (8001488 <CLCD_Init+0x144>)
 8001372:	78bb      	ldrb	r3, [r7, #2]
 8001374:	7193      	strb	r3, [r2, #6]

	LCD.FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001376:	4b44      	ldr	r3, [pc, #272]	; (8001488 <CLCD_Init+0x144>)
 8001378:	2228      	movs	r2, #40	; 0x28
 800137a:	721a      	strb	r2, [r3, #8]
	LCD.ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800137c:	4b42      	ldr	r3, [pc, #264]	; (8001488 <CLCD_Init+0x144>)
 800137e:	2206      	movs	r2, #6
 8001380:	71da      	strb	r2, [r3, #7]
	LCD.DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <CLCD_Init+0x144>)
 8001384:	220c      	movs	r2, #12
 8001386:	725a      	strb	r2, [r3, #9]
	LCD.CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <CLCD_Init+0x144>)
 800138a:	2214      	movs	r2, #20
 800138c:	729a      	strb	r2, [r3, #10]
	LCD.BACKLIGHT = LCD_BACKLIGHT;
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <CLCD_Init+0x144>)
 8001390:	2208      	movs	r2, #8
 8001392:	72da      	strb	r2, [r3, #11]

	Delay(50);
 8001394:	2032      	movs	r0, #50	; 0x32
 8001396:	f7ff ff7d 	bl	8001294 <Delay>

	if(Lcd_buffer != NULL) free(Lcd_buffer);
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <CLCD_Init+0x148>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <CLCD_Init+0x68>
 80013a2:	4b3a      	ldr	r3, [pc, #232]	; (800148c <CLCD_Init+0x148>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f004 fc66 	bl	8005c78 <free>
	Lcd_buffer = (uint8_t*)malloc(row * col * 8);
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	787a      	ldrb	r2, [r7, #1]
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 fc56 	bl	8005c68 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <CLCD_Init+0x148>)
 80013c2:	601a      	str	r2, [r3, #0]

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e008      	b.n	80013dc <CLCD_Init+0x98>
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <CLCD_Init+0x148>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	4413      	add	r3, r2
 80013d2:	2220      	movs	r2, #32
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	3301      	adds	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <CLCD_Init+0x144>)
 80013e0:	799b      	ldrb	r3, [r3, #6]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <CLCD_Init+0x144>)
 80013e6:	795b      	ldrb	r3, [r3, #5]
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbec      	blt.n	80013ca <CLCD_Init+0x86>

	WriteI2C(0x33, LCD_COMMAND);
 80013f0:	2100      	movs	r1, #0
 80013f2:	2033      	movs	r0, #51	; 0x33
 80013f4:	f7ff ff5c 	bl	80012b0 <WriteI2C>
//	Delay(5);
	WriteI2C(0x33, LCD_COMMAND);
 80013f8:	2100      	movs	r1, #0
 80013fa:	2033      	movs	r0, #51	; 0x33
 80013fc:	f7ff ff58 	bl	80012b0 <WriteI2C>
	Delay(5);
 8001400:	2005      	movs	r0, #5
 8001402:	f7ff ff47 	bl	8001294 <Delay>
	WriteI2C(0x32, LCD_COMMAND);
 8001406:	2100      	movs	r1, #0
 8001408:	2032      	movs	r0, #50	; 0x32
 800140a:	f7ff ff51 	bl	80012b0 <WriteI2C>
	Delay(5);
 800140e:	2005      	movs	r0, #5
 8001410:	f7ff ff40 	bl	8001294 <Delay>
	WriteI2C(0x20, LCD_COMMAND);
 8001414:	2100      	movs	r1, #0
 8001416:	2020      	movs	r0, #32
 8001418:	f7ff ff4a 	bl	80012b0 <WriteI2C>
	Delay(5);
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff ff39 	bl	8001294 <Delay>

//	config lcd
	WriteI2C(LCD.ENTRYMODE, LCD_COMMAND);
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <CLCD_Init+0x144>)
 8001424:	79db      	ldrb	r3, [r3, #7]
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff41 	bl	80012b0 <WriteI2C>
	Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff ff30 	bl	8001294 <Delay>
	WriteI2C(LCD.DISPLAYCTRL, LCD_COMMAND);
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <CLCD_Init+0x144>)
 8001436:	7a5b      	ldrb	r3, [r3, #9]
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff38 	bl	80012b0 <WriteI2C>
	Delay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff ff27 	bl	8001294 <Delay>
	WriteI2C(LCD.CURSORSHIFT, LCD_COMMAND);
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <CLCD_Init+0x144>)
 8001448:	7a9b      	ldrb	r3, [r3, #10]
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff2f 	bl	80012b0 <WriteI2C>
	Delay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff ff1e 	bl	8001294 <Delay>
	WriteI2C(LCD.FUNCTIONSET, LCD_COMMAND);
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <CLCD_Init+0x144>)
 800145a:	7a1b      	ldrb	r3, [r3, #8]
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff26 	bl	80012b0 <WriteI2C>
	Delay(1);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff ff15 	bl	8001294 <Delay>

	WriteI2C(LCD_CLEARDISPLAY, LCD_COMMAND);
 800146a:	2100      	movs	r1, #0
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff ff1f 	bl	80012b0 <WriteI2C>
	Delay(1);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff ff0e 	bl	8001294 <Delay>

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
 8001478:	2100      	movs	r1, #0
 800147a:	2002      	movs	r0, #2
 800147c:	f7ff ff18 	bl	80012b0 <WriteI2C>
}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200002fc 	.word	0x200002fc
 800148c:	200002f8 	.word	0x200002f8

08001490 <SetCursor>:

void SetCursor(uint8_t row, uint8_t col){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4613      	mov	r3, r2
 800149e:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <SetCursor+0x8c>)
 80014a6:	799a      	ldrb	r2, [r3, #6]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80014ae:	fb01 f202 	mul.w	r2, r1, r2
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <SetCursor+0x8c>)
 80014b8:	795a      	ldrb	r2, [r3, #5]
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80014c0:	fb01 f202 	mul.w	r2, r1, r2
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]

	switch(row){
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d819      	bhi.n	8001502 <SetCursor+0x72>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <SetCursor+0x44>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014eb 	.word	0x080014eb
 80014dc:	080014f3 	.word	0x080014f3
 80014e0:	080014fb 	.word	0x080014fb
	case 0:
		address_dram = 0x00 + col;
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	73fb      	strb	r3, [r7, #15]
		break;
 80014e8:	e00b      	b.n	8001502 <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	3340      	adds	r3, #64	; 0x40
 80014ee:	73fb      	strb	r3, [r7, #15]
		break;
 80014f0:	e007      	b.n	8001502 <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 80014f2:	79bb      	ldrb	r3, [r7, #6]
 80014f4:	3314      	adds	r3, #20
 80014f6:	73fb      	strb	r3, [r7, #15]
		break;
 80014f8:	e003      	b.n	8001502 <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	3354      	adds	r3, #84	; 0x54
 80014fe:	73fb      	strb	r3, [r7, #15]
		break;
 8001500:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fecf 	bl	80012b0 <WriteI2C>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002fc 	.word	0x200002fc

08001520 <UpdateCharBuffer>:
void CLCD_BackLight(uint8_t is_on){
	LCD.BACKLIGHT = is_on ? LCD_BACKLIGHT : LCD_NOBACKLIGHT;
}


void UpdateCharBuffer(uint8_t c){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <UpdateCharBuffer+0x40>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <UpdateCharBuffer+0x44>)
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	4611      	mov	r1, r2
 8001534:	4a0c      	ldr	r2, [pc, #48]	; (8001568 <UpdateCharBuffer+0x48>)
 8001536:	7952      	ldrb	r2, [r2, #5]
 8001538:	fb01 f202 	mul.w	r2, r1, r2
 800153c:	490b      	ldr	r1, [pc, #44]	; (800156c <UpdateCharBuffer+0x4c>)
 800153e:	7809      	ldrb	r1, [r1, #0]
 8001540:	440a      	add	r2, r1
 8001542:	4413      	add	r3, r2
 8001544:	79fa      	ldrb	r2, [r7, #7]
 8001546:	701a      	strb	r2, [r3, #0]
	currentCol++;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <UpdateCharBuffer+0x4c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <UpdateCharBuffer+0x4c>)
 8001552:	701a      	strb	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200002f8 	.word	0x200002f8
 8001564:	20000309 	.word	0x20000309
 8001568:	200002fc 	.word	0x200002fc
 800156c:	20000308 	.word	0x20000308

08001570 <CLCD_PrintStringBuffer>:
	currentRow = row % LCD.ROW;
	currentCol = col % LCD.COL;
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
}

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	603a      	str	r2, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	460b      	mov	r3, r1
 800157e:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <CLCD_PrintStringBuffer+0x60>)
 8001582:	799a      	ldrb	r2, [r3, #6]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	fbb3 f1f2 	udiv	r1, r3, r2
 800158a:	fb01 f202 	mul.w	r2, r1, r2
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <CLCD_PrintStringBuffer+0x64>)
 8001594:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <CLCD_PrintStringBuffer+0x60>)
 8001598:	795a      	ldrb	r2, [r3, #5]
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	fbb3 f1f2 	udiv	r1, r3, r2
 80015a0:	fb01 f202 	mul.w	r2, r1, r2
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <CLCD_PrintStringBuffer+0x68>)
 80015aa:	701a      	strb	r2, [r3, #0]
	while(*str){
 80015ac:	e006      	b.n	80015bc <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	603a      	str	r2, [r7, #0]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ffb2 	bl	8001520 <UpdateCharBuffer>
	while(*str){
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f4      	bne.n	80015ae <CLCD_PrintStringBuffer+0x3e>
	}
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200002fc 	.word	0x200002fc
 80015d4:	20000309 	.word	0x20000309
 80015d8:	20000308 	.word	0x20000308

080015dc <CLCD_ClearBuffer>:
    UpdateCharBuffer('.');
    UpdateCharBuffer(decimal_part % 10 + '0');
}


void CLCD_ClearBuffer(void){
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 80015e2:	2300      	movs	r3, #0
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	e008      	b.n	80015fa <CLCD_ClearBuffer+0x1e>
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <CLCD_ClearBuffer+0x40>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	2220      	movs	r2, #32
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	3301      	adds	r3, #1
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <CLCD_ClearBuffer+0x44>)
 80015fe:	799b      	ldrb	r3, [r3, #6]
 8001600:	4619      	mov	r1, r3
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <CLCD_ClearBuffer+0x44>)
 8001604:	795b      	ldrb	r3, [r3, #5]
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	429a      	cmp	r2, r3
 800160c:	dbec      	blt.n	80015e8 <CLCD_ClearBuffer+0xc>
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200002f8 	.word	0x200002f8
 8001620:	200002fc 	.word	0x200002fc

08001624 <CLCD_DisplayScreen>:

void CLCD_DisplayScreen(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 800162a:	2300      	movs	r3, #0
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	e021      	b.n	8001674 <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff2b 	bl	8001490 <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 800163a:	2300      	movs	r3, #0
 800163c:	71bb      	strb	r3, [r7, #6]
 800163e:	e011      	b.n	8001664 <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <CLCD_DisplayScreen+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	4911      	ldr	r1, [pc, #68]	; (800168c <CLCD_DisplayScreen+0x68>)
 8001648:	7949      	ldrb	r1, [r1, #5]
 800164a:	fb02 f101 	mul.w	r1, r2, r1
 800164e:	79ba      	ldrb	r2, [r7, #6]
 8001650:	440a      	add	r2, r1
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe29 	bl	80012b0 <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 800165e:	79bb      	ldrb	r3, [r7, #6]
 8001660:	3301      	adds	r3, #1
 8001662:	71bb      	strb	r3, [r7, #6]
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <CLCD_DisplayScreen+0x68>)
 8001666:	795b      	ldrb	r3, [r3, #5]
 8001668:	79ba      	ldrb	r2, [r7, #6]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3e8      	bcc.n	8001640 <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	3301      	adds	r3, #1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <CLCD_DisplayScreen+0x68>)
 8001676:	799b      	ldrb	r3, [r3, #6]
 8001678:	79fa      	ldrb	r2, [r7, #7]
 800167a:	429a      	cmp	r2, r3
 800167c:	d3d8      	bcc.n	8001630 <CLCD_DisplayScreen+0xc>
		}
	}
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002f8 	.word	0x200002f8
 800168c:	200002fc 	.word	0x200002fc

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f000 fdf2 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f85c 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f000 fa12 	bl	8001ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a0:	f000 f9f2 	bl	8001a88 <MX_DMA_Init>
  MX_TIM2_Init();
 80016a4:	f000 f92c 	bl	8001900 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016a8:	f000 f976 	bl	8001998 <MX_TIM3_Init>
  MX_ADC1_Init();
 80016ac:	f000 f8ac 	bl	8001808 <MX_ADC1_Init>
  MX_I2C1_Init();
 80016b0:	f000 f8f8 	bl	80018a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016b4:	f000 f9be 	bl	8001a34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80016b8:	481d      	ldr	r0, [pc, #116]	; (8001730 <main+0xa0>)
 80016ba:	f003 fa31 	bl	8004b20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80016be:	481d      	ldr	r0, [pc, #116]	; (8001734 <main+0xa4>)
 80016c0:	f003 f9e4 	bl	8004a8c <HAL_TIM_Base_Start>

  TM_Init(&htim2);
 80016c4:	481a      	ldr	r0, [pc, #104]	; (8001730 <main+0xa0>)
 80016c6:	f000 fd27 	bl	8002118 <TM_Init>
  TM_SetTime_ms(3000);
 80016ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016ce:	f000 fd43 	bl	8002158 <TM_SetTime_ms>

  IN_Init(&hadc1);
 80016d2:	4819      	ldr	r0, [pc, #100]	; (8001738 <main+0xa8>)
 80016d4:	f7ff fdb6 	bl	8001244 <IN_Init>


  DHT_Init(&_dht, DHT_GPIO_Port, DHT_Pin, &htim3);
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <main+0xa4>)
 80016da:	2208      	movs	r2, #8
 80016dc:	4917      	ldr	r1, [pc, #92]	; (800173c <main+0xac>)
 80016de:	4818      	ldr	r0, [pc, #96]	; (8001740 <main+0xb0>)
 80016e0:	f7ff fbca 	bl	8000e78 <DHT_Init>

  ZB_Init(&huart1);
 80016e4:	4817      	ldr	r0, [pc, #92]	; (8001744 <main+0xb4>)
 80016e6:	f000 fd75 	bl	80021d4 <ZB_Init>

  CLCD_Init(&hi2c1, 0x27, 2, 16);
 80016ea:	2310      	movs	r3, #16
 80016ec:	2202      	movs	r2, #2
 80016ee:	2127      	movs	r1, #39	; 0x27
 80016f0:	4815      	ldr	r0, [pc, #84]	; (8001748 <main+0xb8>)
 80016f2:	f7ff fe27 	bl	8001344 <CLCD_Init>

  FSM_Init();
 80016f6:	f7ff fd39 	bl	800116c <FSM_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(TM_IsFlag()){
 80016fa:	f000 fd4f 	bl	800219c <TM_IsFlag>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0fa      	beq.n	80016fa <main+0x6a>

		  if(_time_read_data >= 5) _time_read_data -= 5;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <main+0xbc>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d905      	bls.n	8001718 <main+0x88>
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <main+0xbc>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	3b05      	subs	r3, #5
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <main+0xbc>)
 8001716:	801a      	strh	r2, [r3, #0]

		  CLCD_ClearBuffer();
 8001718:	f7ff ff60 	bl	80015dc <CLCD_ClearBuffer>
//		  x = DHT_GetHumi(&_dht0);

//		  CLCD_PrintNumBuffer(0, 0, IN_GetValue_MP2());
//		  CLCD_PrintNumBuffer(1, 0, IN_GetValue_MQ2());

		  FSM_SystemControl();
 800171c:	f7ff fd32 	bl	8001184 <FSM_SystemControl>

		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001724:	480a      	ldr	r0, [pc, #40]	; (8001750 <main+0xc0>)
 8001726:	f002 f82e 	bl	8003786 <HAL_GPIO_TogglePin>

		  CLCD_DisplayScreen();
 800172a:	f7ff ff7b 	bl	8001624 <CLCD_DisplayScreen>
	  if(TM_IsFlag()){
 800172e:	e7e4      	b.n	80016fa <main+0x6a>
 8001730:	200003d4 	.word	0x200003d4
 8001734:	2000041c 	.word	0x2000041c
 8001738:	2000030c 	.word	0x2000030c
 800173c:	40010800 	.word	0x40010800
 8001740:	200002d8 	.word	0x200002d8
 8001744:	20000464 	.word	0x20000464
 8001748:	20000380 	.word	0x20000380
 800174c:	200002ec 	.word	0x200002ec
 8001750:	40011000 	.word	0x40011000

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	; 0x50
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2228      	movs	r2, #40	; 0x28
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f004 fa90 	bl	8005c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001792:	2301      	movs	r3, #1
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001796:	2302      	movs	r3, #2
 8001798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80017a0:	2300      	movs	r3, #0
 80017a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fc4f 	bl	800404c <HAL_RCC_OscConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80017b4:	f000 f9f2 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b8:	230f      	movs	r3, #15
 80017ba:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 febb 	bl	8004550 <HAL_RCC_ClockConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80017e0:	f000 f9dc 	bl	8001b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017e4:	2302      	movs	r3, #2
 80017e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ec:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 f845 	bl	8004880 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80017fc:	f000 f9ce 	bl	8001b9c <Error_Handler>
  }
}
 8001800:	bf00      	nop
 8001802:	3750      	adds	r7, #80	; 0x50
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <MX_ADC1_Init+0x94>)
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <MX_ADC1_Init+0x98>)
 800181c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC1_Init+0x94>)
 8001820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001824:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_ADC1_Init+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_ADC1_Init+0x94>)
 800182e:	2200      	movs	r2, #0
 8001830:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_ADC1_Init+0x94>)
 8001834:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001838:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_ADC1_Init+0x94>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_ADC1_Init+0x94>)
 8001842:	2202      	movs	r2, #2
 8001844:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001846:	4815      	ldr	r0, [pc, #84]	; (800189c <MX_ADC1_Init+0x94>)
 8001848:	f000 fd9e 	bl	8002388 <HAL_ADC_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001852:	f000 f9a3 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800185a:	2301      	movs	r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800185e:	2307      	movs	r3, #7
 8001860:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC1_Init+0x94>)
 8001868:	f001 f82c 	bl	80028c4 <HAL_ADC_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001872:	f000 f993 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001876:	2301      	movs	r3, #1
 8001878:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800187a:	2302      	movs	r3, #2
 800187c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <MX_ADC1_Init+0x94>)
 8001884:	f001 f81e 	bl	80028c4 <HAL_ADC_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800188e:	f000 f985 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000030c 	.word	0x2000030c
 80018a0:	40012400 	.word	0x40012400

080018a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018aa:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <MX_I2C1_Init+0x54>)
 80018ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_I2C1_Init+0x58>)
 80018b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018e2:	f001 ff69 	bl	80037b8 <HAL_I2C_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018ec:	f000 f956 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000380 	.word	0x20000380
 80018f8:	40005400 	.word	0x40005400
 80018fc:	000186a0 	.word	0x000186a0

08001900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_TIM2_Init+0x94>)
 800191e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <MX_TIM2_Init+0x94>)
 8001926:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800192a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_TIM2_Init+0x94>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <MX_TIM2_Init+0x94>)
 8001934:	2231      	movs	r2, #49	; 0x31
 8001936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_TIM2_Init+0x94>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_TIM2_Init+0x94>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <MX_TIM2_Init+0x94>)
 8001946:	f003 f851 	bl	80049ec <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001950:	f000 f924 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_TIM2_Init+0x94>)
 8001962:	f003 fa37 	bl	8004dd4 <HAL_TIM_ConfigClockSource>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800196c:	f000 f916 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM2_Init+0x94>)
 800197e:	f003 fc09 	bl	8005194 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001988:	f000 f908 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200003d4 	.word	0x200003d4

08001998 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <MX_TIM3_Init+0x94>)
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <MX_TIM3_Init+0x98>)
 80019b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_TIM3_Init+0x94>)
 80019bc:	220f      	movs	r2, #15
 80019be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_TIM3_Init+0x94>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_TIM3_Init+0x94>)
 80019c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80019cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_TIM3_Init+0x94>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_TIM3_Init+0x94>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <MX_TIM3_Init+0x94>)
 80019dc:	f003 f806 	bl	80049ec <HAL_TIM_Base_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019e6:	f000 f8d9 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	4619      	mov	r1, r3
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_TIM3_Init+0x94>)
 80019f8:	f003 f9ec 	bl	8004dd4 <HAL_TIM_ConfigClockSource>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a02:	f000 f8cb 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <MX_TIM3_Init+0x94>)
 8001a14:	f003 fbbe 	bl	8005194 <HAL_TIMEx_MasterConfigSynchronization>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a1e:	f000 f8bd 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000041c 	.word	0x2000041c
 8001a30:	40000400 	.word	0x40000400

08001a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <MX_USART1_UART_Init+0x50>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_USART1_UART_Init+0x4c>)
 8001a6c:	f003 fc02 	bl	8005274 <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a76:	f000 f891 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000464 	.word	0x20000464
 8001a84:	40013800 	.word	0x40013800

08001a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_DMA_Init+0x38>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <MX_DMA_Init+0x38>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6153      	str	r3, [r2, #20]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_DMA_Init+0x38>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	200b      	movs	r0, #11
 8001aac:	f001 f9e3 	bl	8002e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ab0:	200b      	movs	r0, #11
 8001ab2:	f001 f9fc 	bl	8002eae <HAL_NVIC_EnableIRQ>

}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a2c      	ldr	r2, [pc, #176]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001af6:	f043 0320 	orr.w	r3, r3, #32
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_GPIO_Init+0xcc>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3e:	4815      	ldr	r0, [pc, #84]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b40:	f001 fe09 	bl	8003756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2108      	movs	r1, #8
 8001b48:	4813      	ldr	r0, [pc, #76]	; (8001b98 <MX_GPIO_Init+0xd4>)
 8001b4a:	f001 fe04 	bl	8003756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	480b      	ldr	r0, [pc, #44]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b68:	f001 fc5a 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_GPIO_Init+0xd4>)
 8001b84:	f001 fc4c 	bl	8003420 <HAL_GPIO_Init>

}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40011000 	.word	0x40011000
 8001b98:	40010800 	.word	0x40010800

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_MspInit+0x60>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_MspInit+0x60>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000

08001c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_ADC_MspInit+0xcc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d151      	bne.n	8001cd0 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <HAL_ADC_MspInit+0xd0>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a2a      	ldr	r2, [pc, #168]	; (8001cdc <HAL_ADC_MspInit+0xd0>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_ADC_MspInit+0xd0>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_ADC_MspInit+0xd0>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <HAL_ADC_MspInit+0xd0>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_ADC_MspInit+0xd0>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GAS_Pin|SMOKE_Pin;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c60:	2303      	movs	r3, #3
 8001c62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <HAL_ADC_MspInit+0xd4>)
 8001c6c:	f001 fbd8 	bl	8003420 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_ADC_MspInit+0xdc>)
 8001c74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ca4:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001ca6:	f001 f91d 	bl	8002ee4 <HAL_DMA_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001cb0:	f7ff ff74 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001cb8:	621a      	str	r2, [r3, #32]
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_ADC_MspInit+0xd8>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2012      	movs	r0, #18
 8001cc6:	f001 f8d6 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001cca:	2012      	movs	r0, #18
 8001ccc:	f001 f8ef 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40012400 	.word	0x40012400
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	2000033c 	.word	0x2000033c
 8001ce8:	40020008 	.word	0x40020008

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <HAL_I2C_MspInit+0x70>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d123      	bne.n	8001d54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4619      	mov	r1, r3
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <HAL_I2C_MspInit+0x78>)
 8001d38:	f001 fb72 	bl	8003420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d46:	61d3      	str	r3, [r2, #28]
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40005400 	.word	0x40005400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010c00 	.word	0x40010c00

08001d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d114      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	201c      	movs	r0, #28
 8001d98:	f001 f86d 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d9c:	201c      	movs	r0, #28
 8001d9e:	f001 f886 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001da2:	e010      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10b      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_UART_MspInit+0x9c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d139      	bne.n	8001e6c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df8:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_UART_MspInit+0xa0>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_UART_MspInit+0xa0>)
 8001dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_UART_MspInit+0xa0>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_UART_MspInit+0xa0>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_UART_MspInit+0xa0>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_UART_MspInit+0xa0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480f      	ldr	r0, [pc, #60]	; (8001e7c <HAL_UART_MspInit+0xa4>)
 8001e3e:	f001 faef 	bl	8003420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	4619      	mov	r1, r3
 8001e56:	4809      	ldr	r0, [pc, #36]	; (8001e7c <HAL_UART_MspInit+0xa4>)
 8001e58:	f001 fae2 	bl	8003420 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2025      	movs	r0, #37	; 0x25
 8001e62:	f001 f808 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e66:	2025      	movs	r0, #37	; 0x25
 8001e68:	f001 f821 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010800 	.word	0x40010800

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <NMI_Handler+0x4>

08001e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <MemManage_Handler+0x4>

08001e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <BusFault_Handler+0x4>

08001e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <UsageFault_Handler+0x4>

08001e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec6:	f000 fa1f 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ed6:	f001 f96f 	bl	80031b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000033c 	.word	0x2000033c

08001ee4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <ADC1_2_IRQHandler+0x10>)
 8001eea:	f000 fc03 	bl	80026f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000030c 	.word	0x2000030c

08001ef8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <TIM2_IRQHandler+0x10>)
 8001efe:	f002 fe61 	bl	8004bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200003d4 	.word	0x200003d4

08001f0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <USART1_IRQHandler+0x10>)
 8001f12:	f003 fa8f 	bl	8005434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000464 	.word	0x20000464

08001f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <_kill>:

int _kill(int pid, int sig)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f38:	f003 fe6c 	bl	8005c14 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2216      	movs	r2, #22
 8001f40:	601a      	str	r2, [r3, #0]
  return -1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_exit>:

void _exit (int status)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f56:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffe7 	bl	8001f2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f60:	e7fe      	b.n	8001f60 <_exit+0x12>

08001f62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e00a      	b.n	8001f8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f74:	f3af 8000 	nop.w
 8001f78:	4601      	mov	r1, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	60ba      	str	r2, [r7, #8]
 8001f80:	b2ca      	uxtb	r2, r1
 8001f82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	dbf0      	blt.n	8001f74 <_read+0x12>
  }

  return len;
 8001f92:	687b      	ldr	r3, [r7, #4]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e009      	b.n	8001fc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	60ba      	str	r2, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbf1      	blt.n	8001fae <_write+0x12>
  }
  return len;
 8001fca:	687b      	ldr	r3, [r7, #4]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_close>:

int _close(int file)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffa:	605a      	str	r2, [r3, #4]
  return 0;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <_isatty>:

int _isatty(int file)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <_sbrk+0x5c>)
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <_sbrk+0x60>)
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <_sbrk+0x64>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <_sbrk+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d207      	bcs.n	8002074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002064:	f003 fdd6 	bl	8005c14 <__errno>
 8002068:	4603      	mov	r3, r0
 800206a:	220c      	movs	r2, #12
 800206c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	e009      	b.n	8002088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <_sbrk+0x64>)
 8002084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20005000 	.word	0x20005000
 8002094:	00000400 	.word	0x00000400
 8002098:	200004a8 	.word	0x200004a8
 800209c:	200004d0 	.word	0x200004d0

080020a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <RunSoftwareTimer>:

static uint8_t MUL_timer		= 1;
static uint8_t flag_timer		= 0;
static uint8_t counter_timer 	= 0;

void RunSoftwareTimer(void){
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	if(counter_timer > 0){
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <RunSoftwareTimer+0x38>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <RunSoftwareTimer+0x2e>
		counter_timer--;
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <RunSoftwareTimer+0x38>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	3b01      	subs	r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <RunSoftwareTimer+0x38>)
 80020c2:	701a      	strb	r2, [r3, #0]
		if(counter_timer == 0){
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <RunSoftwareTimer+0x38>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <RunSoftwareTimer+0x2e>
			counter_timer = MUL_timer;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <RunSoftwareTimer+0x3c>)
 80020ce:	781a      	ldrb	r2, [r3, #0]
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <RunSoftwareTimer+0x38>)
 80020d2:	701a      	strb	r2, [r3, #0]
			flag_timer = 1;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <RunSoftwareTimer+0x40>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200004b1 	.word	0x200004b1
 80020e8:	20000005 	.word	0x20000005
 80020ec:	200004b0 	.word	0x200004b0

080020f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stimer->Instance) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d101      	bne.n	800210a <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 8002106:	f7ff ffd1 	bl	80020ac <RunSoftwareTimer>
	}
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200004ac 	.word	0x200004ac

08002118 <TM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void TM_Init(TIM_HandleTypeDef* htim){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	stimer = htim;
 8002120:	4a09      	ldr	r2, [pc, #36]	; (8002148 <TM_Init+0x30>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
	counter_timer = MUL_timer;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <TM_Init+0x34>)
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <TM_Init+0x38>)
 800212c:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <TM_Init+0x3c>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(stimer);
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <TM_Init+0x30>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f002 fcf1 	bl	8004b20 <HAL_TIM_Base_Start_IT>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200004ac 	.word	0x200004ac
 800214c:	20000005 	.word	0x20000005
 8002150:	200004b1 	.word	0x200004b1
 8002154:	200004b0 	.word	0x200004b0

08002158 <TM_SetTime_ms>:

void TM_SetTime_ms(uint16_t duration){
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
	MUL_timer = duration / TIME_CYCLE;
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	4a09      	ldr	r2, [pc, #36]	; (800218c <TM_SetTime_ms+0x34>)
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	fb93 f3f2 	sdiv	r3, r3, r2
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <TM_SetTime_ms+0x38>)
 8002170:	701a      	strb	r2, [r3, #0]
	counter_timer = MUL_timer;
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <TM_SetTime_ms+0x38>)
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <TM_SetTime_ms+0x3c>)
 8002178:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <TM_SetTime_ms+0x40>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000004 	.word	0x20000004
 8002190:	20000005 	.word	0x20000005
 8002194:	200004b1 	.word	0x200004b1
 8002198:	200004b0 	.word	0x200004b0

0800219c <TM_IsFlag>:

uint8_t TM_IsFlag(void){
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	if(flag_timer) {
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <TM_IsFlag+0x20>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <TM_IsFlag+0x16>
		flag_timer = 0;
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <TM_IsFlag+0x20>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
		return 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <TM_IsFlag+0x18>
	}
	return 0;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	200004b0 	.word	0x200004b0

080021c0 <HAL_UART_RxCpltCallback>:
#include "zigbee.h"

UART_HandleTypeDef* uart_zigbee;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_zigbee->Instance){

	}

}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
	...

080021d4 <ZB_Init>:

//==================HIGH LEVEL FUNCTION==================//
void ZB_Init(UART_HandleTypeDef* huart){
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	uart_zigbee = huart;
 80021dc:	4a03      	ldr	r2, [pc, #12]	; (80021ec <ZB_Init+0x18>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]

}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	200004b4 	.word	0x200004b4

080021f0 <ZB_SendMsg>:

void ZB_SendMsg(char* msg, uint8_t length){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i = 0; i < length; i++){
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	e00b      	b.n	800221a <ZB_SendMsg+0x2a>
		HAL_UART_Transmit(uart_zigbee, msg + i, 1, 100);
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <ZB_SendMsg+0x3c>)
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	18d1      	adds	r1, r2, r3
 800220c:	2364      	movs	r3, #100	; 0x64
 800220e:	2201      	movs	r2, #1
 8002210:	f003 f87d 	bl	800530e <HAL_UART_Transmit>
	for(i = 0; i < length; i++){
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	3301      	adds	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	429a      	cmp	r2, r3
 8002220:	d3ef      	bcc.n	8002202 <ZB_SendMsg+0x12>
	}

//	HAL_UART_Transmit(uart_zigbee, (uint8_t*)msg, length, 2000);


}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200004b4 	.word	0x200004b4

08002230 <Reset_Handler>:
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <LoopFillZerobss+0x12>)
 8002232:	490d      	ldr	r1, [pc, #52]	; (8002268 <LoopFillZerobss+0x16>)
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <LoopFillZerobss+0x1a>)
 8002236:	2300      	movs	r3, #0
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:
 800223a:	58d4      	ldr	r4, [r2, r3]
 800223c:	50c4      	str	r4, [r0, r3]
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:
 8002240:	18c4      	adds	r4, r0, r3
 8002242:	428c      	cmp	r4, r1
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <LoopFillZerobss+0x1e>)
 8002248:	4c0a      	ldr	r4, [pc, #40]	; (8002274 <LoopFillZerobss+0x22>)
 800224a:	2300      	movs	r3, #0
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:
 8002252:	42a2      	cmp	r2, r4
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>
 8002256:	f7ff ff23 	bl	80020a0 <SystemInit>
 800225a:	f003 fce1 	bl	8005c20 <__libc_init_array>
 800225e:	f7ff fa17 	bl	8001690 <main>
 8002262:	4770      	bx	lr
 8002264:	20000000 	.word	0x20000000
 8002268:	200001e0 	.word	0x200001e0
 800226c:	08008eb4 	.word	0x08008eb4
 8002270:	200001e0 	.word	0x200001e0
 8002274:	200004cc 	.word	0x200004cc

08002278 <CAN1_RX1_IRQHandler>:
 8002278:	e7fe      	b.n	8002278 <CAN1_RX1_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_Init+0x28>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_Init+0x28>)
 8002286:	f043 0310 	orr.w	r3, r3, #16
 800228a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 fde7 	bl	8002e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	200f      	movs	r0, #15
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff fc86 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fdff 	bl	8002eca <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f000 fdc7 	bl	8002e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000000 	.word	0x20000000
 8002300:	2000000c 	.word	0x2000000c
 8002304:	20000008 	.word	0x20000008

08002308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_IncTick+0x1c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_IncTick+0x20>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a03      	ldr	r2, [pc, #12]	; (8002328 <HAL_IncTick+0x20>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	2000000c 	.word	0x2000000c
 8002328:	200004b8 	.word	0x200004b8

0800232c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <HAL_GetTick+0x10>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	200004b8 	.word	0x200004b8

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff fff0 	bl	800232c <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffe0 	bl	800232c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000000c 	.word	0x2000000c

08002388 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0be      	b.n	8002528 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fc20 	bl	8001c0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fbcb 	bl	8002b68 <ADC_ConversionStop_Disable>
 80023d2:	4603      	mov	r3, r0
 80023d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 8099 	bne.w	8002516 <HAL_ADC_Init+0x18e>
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 8095 	bne.w	8002516 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023f4:	f023 0302 	bic.w	r3, r3, #2
 80023f8:	f043 0202 	orr.w	r2, r3, #2
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002408:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7b1b      	ldrb	r3, [r3, #12]
 800240e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002410:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4313      	orrs	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002420:	d003      	beq.n	800242a <HAL_ADC_Init+0xa2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_ADC_Init+0xa8>
 800242a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242e:	e000      	b.n	8002432 <HAL_ADC_Init+0xaa>
 8002430:	2300      	movs	r3, #0
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7d1b      	ldrb	r3, [r3, #20]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d119      	bne.n	8002474 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7b1b      	ldrb	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	3b01      	subs	r3, #1
 800244e:	035a      	lsls	r2, r3, #13
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e00b      	b.n	8002474 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_ADC_Init+0x1a8>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	430b      	orrs	r3, r1
 800249a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a4:	d003      	beq.n	80024ae <HAL_ADC_Init+0x126>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d104      	bne.n	80024b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	051b      	lsls	r3, r3, #20
 80024b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_ADC_Init+0x1ac>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024f2:	e018      	b.n	8002526 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	f023 0312 	bic.w	r3, r3, #18
 80024fc:	f043 0210 	orr.w	r2, r3, #16
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002514:	e007      	b.n	8002526 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002526:	7dfb      	ldrb	r3, [r7, #23]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	ffe1f7fd 	.word	0xffe1f7fd
 8002534:	ff1f0efe 	.word	0xff1f0efe

08002538 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a64      	ldr	r2, [pc, #400]	; (80026e0 <HAL_ADC_Start_DMA+0x1a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_ADC_Start_DMA+0x24>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a63      	ldr	r2, [pc, #396]	; (80026e4 <HAL_ADC_Start_DMA+0x1ac>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d106      	bne.n	800256a <HAL_ADC_Start_DMA+0x32>
 800255c:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <HAL_ADC_Start_DMA+0x1a8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 80b3 	bne.w	80026d0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_ADC_Start_DMA+0x40>
 8002574:	2302      	movs	r3, #2
 8002576:	e0ae      	b.n	80026d6 <HAL_ADC_Start_DMA+0x19e>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fa97 	bl	8002ab4 <ADC_Enable>
 8002586:	4603      	mov	r3, r0
 8002588:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 809a 	bne.w	80026c6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a4e      	ldr	r2, [pc, #312]	; (80026e4 <HAL_ADC_Start_DMA+0x1ac>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_Start_DMA+0x84>
 80025b0:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <HAL_ADC_Start_DMA+0x1a8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d115      	bne.n	80025e8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d026      	beq.n	8002624 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025e6:	e01d      	b.n	8002624 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <HAL_ADC_Start_DMA+0x1a8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d004      	beq.n	8002608 <HAL_ADC_Start_DMA+0xd0>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_ADC_Start_DMA+0x1ac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10d      	bne.n	8002624 <HAL_ADC_Start_DMA+0xec>
 8002608:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <HAL_ADC_Start_DMA+0x1a8>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800261c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f023 0206 	bic.w	r2, r3, #6
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
 800263c:	e002      	b.n	8002644 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <HAL_ADC_Start_DMA+0x1b0>)
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a24      	ldr	r2, [pc, #144]	; (80026ec <HAL_ADC_Start_DMA+0x1b4>)
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <HAL_ADC_Start_DMA+0x1b8>)
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0202 	mvn.w	r2, #2
 800266c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a18      	ldr	r0, [r3, #32]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	334c      	adds	r3, #76	; 0x4c
 8002688:	4619      	mov	r1, r3
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f000 fc83 	bl	8002f98 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800269c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026a0:	d108      	bne.n	80026b4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80026b0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80026b2:	e00f      	b.n	80026d4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026c2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80026c4:	e006      	b.n	80026d4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80026ce:	e001      	b.n	80026d4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40012400 	.word	0x40012400
 80026e4:	40012800 	.word	0x40012800
 80026e8:	08002beb 	.word	0x08002beb
 80026ec:	08002c67 	.word	0x08002c67
 80026f0:	08002c83 	.word	0x08002c83

080026f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b20      	cmp	r3, #32
 8002708:	d140      	bne.n	800278c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b02      	cmp	r3, #2
 8002716:	d139      	bne.n	800278c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800273a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800273e:	d11d      	bne.n	800277c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002744:	2b00      	cmp	r3, #0
 8002746:	d119      	bne.n	800277c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0220 	bic.w	r2, r2, #32
 8002756:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f87c 	bl	800287a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0212 	mvn.w	r2, #18
 800278a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	d14f      	bne.n	800283a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d148      	bne.n	800283a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80027ca:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80027ce:	d012      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d125      	bne.n	800282a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80027e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027ec:	d11d      	bne.n	800282a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d119      	bne.n	800282a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002804:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa43 	bl	8002cb6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 020c 	mvn.w	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d114      	bne.n	8002872 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10d      	bne.n	8002872 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f81b 	bl	800289e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0201 	mvn.w	r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x20>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e0dc      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x1da>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d81c      	bhi.n	800292e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	3b05      	subs	r3, #5
 8002906:	221f      	movs	r2, #31
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	4019      	ands	r1, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3b05      	subs	r3, #5
 8002920:	fa00 f203 	lsl.w	r2, r0, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	635a      	str	r2, [r3, #52]	; 0x34
 800292c:	e03c      	b.n	80029a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d81c      	bhi.n	8002970 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3b23      	subs	r3, #35	; 0x23
 8002948:	221f      	movs	r2, #31
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	4019      	ands	r1, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	3b23      	subs	r3, #35	; 0x23
 8002962:	fa00 f203 	lsl.w	r2, r0, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
 800296e:	e01b      	b.n	80029a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	3b41      	subs	r3, #65	; 0x41
 8002982:	221f      	movs	r2, #31
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	4019      	ands	r1, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b41      	subs	r3, #65	; 0x41
 800299c:	fa00 f203 	lsl.w	r2, r0, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b09      	cmp	r3, #9
 80029ae:	d91c      	bls.n	80029ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	3b1e      	subs	r3, #30
 80029c2:	2207      	movs	r2, #7
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4019      	ands	r1, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6898      	ldr	r0, [r3, #8]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	3b1e      	subs	r3, #30
 80029dc:	fa00 f203 	lsl.w	r2, r0, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	e019      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6919      	ldr	r1, [r3, #16]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	2207      	movs	r2, #7
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4019      	ands	r1, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6898      	ldr	r0, [r3, #8]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	fa00 f203 	lsl.w	r2, r0, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d003      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a2a:	2b11      	cmp	r3, #17
 8002a2c:	d132      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d125      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d126      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d11a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_ADC_ConfigChannel+0x1e8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	0c9a      	lsrs	r2, r3, #18
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a74:	e002      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f9      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x1b2>
 8002a82:	e007      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40012400 	.word	0x40012400
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	431bde83 	.word	0x431bde83

08002ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d040      	beq.n	8002b54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <ADC_Enable+0xac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <ADC_Enable+0xb0>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002af0:	e002      	b.n	8002af8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f9      	bne.n	8002af2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002afe:	f7ff fc15 	bl	800232c <HAL_GetTick>
 8002b02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b04:	e01f      	b.n	8002b46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b06:	f7ff fc11 	bl	800232c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d918      	bls.n	8002b46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d011      	beq.n	8002b46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	f043 0210 	orr.w	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	f043 0201 	orr.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d1d8      	bne.n	8002b06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000000 	.word	0x20000000
 8002b64:	431bde83 	.word	0x431bde83

08002b68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d12e      	bne.n	8002be0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b92:	f7ff fbcb 	bl	800232c <HAL_GetTick>
 8002b96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b98:	e01b      	b.n	8002bd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b9a:	f7ff fbc7 	bl	800232c <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d914      	bls.n	8002bd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10d      	bne.n	8002bd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	f043 0210 	orr.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e007      	b.n	8002be2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d0dc      	beq.n	8002b9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d127      	bne.n	8002c54 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c1e:	d115      	bne.n	8002c4c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f7ff fe14 	bl	800287a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c52:	e004      	b.n	8002c5e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff fe09 	bl	800288c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f043 0204 	orr.w	r2, r3, #4
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff fe01 	bl	80028b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4906      	ldr	r1, [pc, #24]	; (8002d60 <__NVIC_EnableIRQ+0x34>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2c:	d301      	bcc.n	8002e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00f      	b.n	8002e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <SysTick_Config+0x40>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f7ff ff90 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <SysTick_Config+0x40>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <SysTick_Config+0x40>)
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	e000e010 	.word	0xe000e010

08002e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff2d 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff ff42 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff90 	bl	8002db8 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5f 	bl	8002d64 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff35 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffa2 	bl	8002e1c <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e043      	b.n	8002f82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <HAL_DMA_Init+0xa8>)
 8002f02:	4413      	add	r3, r2
 8002f04:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <HAL_DMA_Init+0xac>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	009a      	lsls	r2, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <HAL_DMA_Init+0xb0>)
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	bffdfff8 	.word	0xbffdfff8
 8002f90:	cccccccd 	.word	0xcccccccd
 8002f94:	40020000 	.word	0x40020000

08002f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Start_IT+0x20>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e04a      	b.n	800304e <HAL_DMA_Start_IT+0xb6>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d13a      	bne.n	8003040 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f9e8 	bl	80033c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 020e 	orr.w	r2, r2, #14
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e00f      	b.n	800302e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0204 	bic.w	r2, r2, #4
 800301c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 020a 	orr.w	r2, r2, #10
 800302c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e005      	b.n	800304c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003048:	2302      	movs	r3, #2
 800304a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800304c:	7dfb      	ldrb	r3, [r7, #23]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003068:	2b02      	cmp	r3, #2
 800306a:	d008      	beq.n	800307e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2204      	movs	r2, #4
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e020      	b.n	80030c0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 020e 	bic.w	r2, r2, #14
 800308c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d005      	beq.n	80030ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2204      	movs	r2, #4
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e051      	b.n	8003192 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 020e 	bic.w	r2, r2, #14
 80030fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a22      	ldr	r2, [pc, #136]	; (800319c <HAL_DMA_Abort_IT+0xd0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d029      	beq.n	800316c <HAL_DMA_Abort_IT+0xa0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <HAL_DMA_Abort_IT+0xd4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d022      	beq.n	8003168 <HAL_DMA_Abort_IT+0x9c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <HAL_DMA_Abort_IT+0xd8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d01a      	beq.n	8003162 <HAL_DMA_Abort_IT+0x96>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_DMA_Abort_IT+0xdc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d012      	beq.n	800315c <HAL_DMA_Abort_IT+0x90>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <HAL_DMA_Abort_IT+0xe0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00a      	beq.n	8003156 <HAL_DMA_Abort_IT+0x8a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1a      	ldr	r2, [pc, #104]	; (80031b0 <HAL_DMA_Abort_IT+0xe4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d102      	bne.n	8003150 <HAL_DMA_Abort_IT+0x84>
 800314a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800314e:	e00e      	b.n	800316e <HAL_DMA_Abort_IT+0xa2>
 8003150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003154:	e00b      	b.n	800316e <HAL_DMA_Abort_IT+0xa2>
 8003156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800315a:	e008      	b.n	800316e <HAL_DMA_Abort_IT+0xa2>
 800315c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003160:	e005      	b.n	800316e <HAL_DMA_Abort_IT+0xa2>
 8003162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003166:	e002      	b.n	800316e <HAL_DMA_Abort_IT+0xa2>
 8003168:	2310      	movs	r3, #16
 800316a:	e000      	b.n	800316e <HAL_DMA_Abort_IT+0xa2>
 800316c:	2301      	movs	r3, #1
 800316e:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_DMA_Abort_IT+0xe8>)
 8003170:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
    } 
  }
  return status;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40020008 	.word	0x40020008
 80031a0:	4002001c 	.word	0x4002001c
 80031a4:	40020030 	.word	0x40020030
 80031a8:	40020044 	.word	0x40020044
 80031ac:	40020058 	.word	0x40020058
 80031b0:	4002006c 	.word	0x4002006c
 80031b4:	40020000 	.word	0x40020000

080031b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	2204      	movs	r2, #4
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d04f      	beq.n	8003280 <HAL_DMA_IRQHandler+0xc8>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d04a      	beq.n	8003280 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d107      	bne.n	8003208 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a66      	ldr	r2, [pc, #408]	; (80033a8 <HAL_DMA_IRQHandler+0x1f0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d029      	beq.n	8003266 <HAL_DMA_IRQHandler+0xae>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a65      	ldr	r2, [pc, #404]	; (80033ac <HAL_DMA_IRQHandler+0x1f4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <HAL_DMA_IRQHandler+0xaa>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a63      	ldr	r2, [pc, #396]	; (80033b0 <HAL_DMA_IRQHandler+0x1f8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01a      	beq.n	800325c <HAL_DMA_IRQHandler+0xa4>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a62      	ldr	r2, [pc, #392]	; (80033b4 <HAL_DMA_IRQHandler+0x1fc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d012      	beq.n	8003256 <HAL_DMA_IRQHandler+0x9e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a60      	ldr	r2, [pc, #384]	; (80033b8 <HAL_DMA_IRQHandler+0x200>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00a      	beq.n	8003250 <HAL_DMA_IRQHandler+0x98>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5f      	ldr	r2, [pc, #380]	; (80033bc <HAL_DMA_IRQHandler+0x204>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d102      	bne.n	800324a <HAL_DMA_IRQHandler+0x92>
 8003244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003248:	e00e      	b.n	8003268 <HAL_DMA_IRQHandler+0xb0>
 800324a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800324e:	e00b      	b.n	8003268 <HAL_DMA_IRQHandler+0xb0>
 8003250:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003254:	e008      	b.n	8003268 <HAL_DMA_IRQHandler+0xb0>
 8003256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800325a:	e005      	b.n	8003268 <HAL_DMA_IRQHandler+0xb0>
 800325c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003260:	e002      	b.n	8003268 <HAL_DMA_IRQHandler+0xb0>
 8003262:	2340      	movs	r3, #64	; 0x40
 8003264:	e000      	b.n	8003268 <HAL_DMA_IRQHandler+0xb0>
 8003266:	2304      	movs	r3, #4
 8003268:	4a55      	ldr	r2, [pc, #340]	; (80033c0 <HAL_DMA_IRQHandler+0x208>)
 800326a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8094 	beq.w	800339e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800327e:	e08e      	b.n	800339e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	2202      	movs	r2, #2
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d056      	beq.n	800333e <HAL_DMA_IRQHandler+0x186>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d051      	beq.n	800333e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 020a 	bic.w	r2, r2, #10
 80032b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a38      	ldr	r2, [pc, #224]	; (80033a8 <HAL_DMA_IRQHandler+0x1f0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d029      	beq.n	800331e <HAL_DMA_IRQHandler+0x166>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a37      	ldr	r2, [pc, #220]	; (80033ac <HAL_DMA_IRQHandler+0x1f4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_IRQHandler+0x162>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <HAL_DMA_IRQHandler+0x1f8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01a      	beq.n	8003314 <HAL_DMA_IRQHandler+0x15c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <HAL_DMA_IRQHandler+0x1fc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d012      	beq.n	800330e <HAL_DMA_IRQHandler+0x156>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a32      	ldr	r2, [pc, #200]	; (80033b8 <HAL_DMA_IRQHandler+0x200>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00a      	beq.n	8003308 <HAL_DMA_IRQHandler+0x150>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a31      	ldr	r2, [pc, #196]	; (80033bc <HAL_DMA_IRQHandler+0x204>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <HAL_DMA_IRQHandler+0x14a>
 80032fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003300:	e00e      	b.n	8003320 <HAL_DMA_IRQHandler+0x168>
 8003302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003306:	e00b      	b.n	8003320 <HAL_DMA_IRQHandler+0x168>
 8003308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330c:	e008      	b.n	8003320 <HAL_DMA_IRQHandler+0x168>
 800330e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003312:	e005      	b.n	8003320 <HAL_DMA_IRQHandler+0x168>
 8003314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003318:	e002      	b.n	8003320 <HAL_DMA_IRQHandler+0x168>
 800331a:	2320      	movs	r3, #32
 800331c:	e000      	b.n	8003320 <HAL_DMA_IRQHandler+0x168>
 800331e:	2302      	movs	r3, #2
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <HAL_DMA_IRQHandler+0x208>)
 8003322:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d034      	beq.n	800339e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800333c:	e02f      	b.n	800339e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2208      	movs	r2, #8
 8003344:	409a      	lsls	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d028      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x1e8>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d023      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 020e 	bic.w	r2, r2, #14
 8003366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f202 	lsl.w	r2, r1, r2
 8003376:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
    }
  }
  return;
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
}
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40020008 	.word	0x40020008
 80033ac:	4002001c 	.word	0x4002001c
 80033b0:	40020030 	.word	0x40020030
 80033b4:	40020044 	.word	0x40020044
 80033b8:	40020058 	.word	0x40020058
 80033bc:	4002006c 	.word	0x4002006c
 80033c0:	40020000 	.word	0x40020000

080033c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f202 	lsl.w	r2, r1, r2
 80033e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d108      	bne.n	8003404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003402:	e007      	b.n	8003414 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	60da      	str	r2, [r3, #12]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
	...

08003420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003420:	b480      	push	{r7}
 8003422:	b08b      	sub	sp, #44	; 0x2c
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800342e:	2300      	movs	r3, #0
 8003430:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003432:	e169      	b.n	8003708 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003434:	2201      	movs	r2, #1
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	429a      	cmp	r2, r3
 800344e:	f040 8158 	bne.w	8003702 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a9a      	ldr	r2, [pc, #616]	; (80036c0 <HAL_GPIO_Init+0x2a0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d05e      	beq.n	800351a <HAL_GPIO_Init+0xfa>
 800345c:	4a98      	ldr	r2, [pc, #608]	; (80036c0 <HAL_GPIO_Init+0x2a0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d875      	bhi.n	800354e <HAL_GPIO_Init+0x12e>
 8003462:	4a98      	ldr	r2, [pc, #608]	; (80036c4 <HAL_GPIO_Init+0x2a4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d058      	beq.n	800351a <HAL_GPIO_Init+0xfa>
 8003468:	4a96      	ldr	r2, [pc, #600]	; (80036c4 <HAL_GPIO_Init+0x2a4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d86f      	bhi.n	800354e <HAL_GPIO_Init+0x12e>
 800346e:	4a96      	ldr	r2, [pc, #600]	; (80036c8 <HAL_GPIO_Init+0x2a8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d052      	beq.n	800351a <HAL_GPIO_Init+0xfa>
 8003474:	4a94      	ldr	r2, [pc, #592]	; (80036c8 <HAL_GPIO_Init+0x2a8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d869      	bhi.n	800354e <HAL_GPIO_Init+0x12e>
 800347a:	4a94      	ldr	r2, [pc, #592]	; (80036cc <HAL_GPIO_Init+0x2ac>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04c      	beq.n	800351a <HAL_GPIO_Init+0xfa>
 8003480:	4a92      	ldr	r2, [pc, #584]	; (80036cc <HAL_GPIO_Init+0x2ac>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d863      	bhi.n	800354e <HAL_GPIO_Init+0x12e>
 8003486:	4a92      	ldr	r2, [pc, #584]	; (80036d0 <HAL_GPIO_Init+0x2b0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d046      	beq.n	800351a <HAL_GPIO_Init+0xfa>
 800348c:	4a90      	ldr	r2, [pc, #576]	; (80036d0 <HAL_GPIO_Init+0x2b0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d85d      	bhi.n	800354e <HAL_GPIO_Init+0x12e>
 8003492:	2b12      	cmp	r3, #18
 8003494:	d82a      	bhi.n	80034ec <HAL_GPIO_Init+0xcc>
 8003496:	2b12      	cmp	r3, #18
 8003498:	d859      	bhi.n	800354e <HAL_GPIO_Init+0x12e>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_GPIO_Init+0x80>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	0800351b 	.word	0x0800351b
 80034a4:	080034f5 	.word	0x080034f5
 80034a8:	08003507 	.word	0x08003507
 80034ac:	08003549 	.word	0x08003549
 80034b0:	0800354f 	.word	0x0800354f
 80034b4:	0800354f 	.word	0x0800354f
 80034b8:	0800354f 	.word	0x0800354f
 80034bc:	0800354f 	.word	0x0800354f
 80034c0:	0800354f 	.word	0x0800354f
 80034c4:	0800354f 	.word	0x0800354f
 80034c8:	0800354f 	.word	0x0800354f
 80034cc:	0800354f 	.word	0x0800354f
 80034d0:	0800354f 	.word	0x0800354f
 80034d4:	0800354f 	.word	0x0800354f
 80034d8:	0800354f 	.word	0x0800354f
 80034dc:	0800354f 	.word	0x0800354f
 80034e0:	0800354f 	.word	0x0800354f
 80034e4:	080034fd 	.word	0x080034fd
 80034e8:	08003511 	.word	0x08003511
 80034ec:	4a79      	ldr	r2, [pc, #484]	; (80036d4 <HAL_GPIO_Init+0x2b4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034f2:	e02c      	b.n	800354e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	623b      	str	r3, [r7, #32]
          break;
 80034fa:	e029      	b.n	8003550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	3304      	adds	r3, #4
 8003502:	623b      	str	r3, [r7, #32]
          break;
 8003504:	e024      	b.n	8003550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	3308      	adds	r3, #8
 800350c:	623b      	str	r3, [r7, #32]
          break;
 800350e:	e01f      	b.n	8003550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	330c      	adds	r3, #12
 8003516:	623b      	str	r3, [r7, #32]
          break;
 8003518:	e01a      	b.n	8003550 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003522:	2304      	movs	r3, #4
 8003524:	623b      	str	r3, [r7, #32]
          break;
 8003526:	e013      	b.n	8003550 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003530:	2308      	movs	r3, #8
 8003532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	611a      	str	r2, [r3, #16]
          break;
 800353a:	e009      	b.n	8003550 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800353c:	2308      	movs	r3, #8
 800353e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	615a      	str	r2, [r3, #20]
          break;
 8003546:	e003      	b.n	8003550 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003548:	2300      	movs	r3, #0
 800354a:	623b      	str	r3, [r7, #32]
          break;
 800354c:	e000      	b.n	8003550 <HAL_GPIO_Init+0x130>
          break;
 800354e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2bff      	cmp	r3, #255	; 0xff
 8003554:	d801      	bhi.n	800355a <HAL_GPIO_Init+0x13a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	e001      	b.n	800355e <HAL_GPIO_Init+0x13e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2bff      	cmp	r3, #255	; 0xff
 8003564:	d802      	bhi.n	800356c <HAL_GPIO_Init+0x14c>
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	e002      	b.n	8003572 <HAL_GPIO_Init+0x152>
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	3b08      	subs	r3, #8
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	210f      	movs	r1, #15
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	401a      	ands	r2, r3
 8003584:	6a39      	ldr	r1, [r7, #32]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	431a      	orrs	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80b1 	beq.w	8003702 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035a0:	4b4d      	ldr	r3, [pc, #308]	; (80036d8 <HAL_GPIO_Init+0x2b8>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	4a4c      	ldr	r2, [pc, #304]	; (80036d8 <HAL_GPIO_Init+0x2b8>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6193      	str	r3, [r2, #24]
 80035ac:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_GPIO_Init+0x2b8>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035b8:	4a48      	ldr	r2, [pc, #288]	; (80036dc <HAL_GPIO_Init+0x2bc>)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	3302      	adds	r3, #2
 80035c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	220f      	movs	r2, #15
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4013      	ands	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a40      	ldr	r2, [pc, #256]	; (80036e0 <HAL_GPIO_Init+0x2c0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d013      	beq.n	800360c <HAL_GPIO_Init+0x1ec>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3f      	ldr	r2, [pc, #252]	; (80036e4 <HAL_GPIO_Init+0x2c4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00d      	beq.n	8003608 <HAL_GPIO_Init+0x1e8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3e      	ldr	r2, [pc, #248]	; (80036e8 <HAL_GPIO_Init+0x2c8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <HAL_GPIO_Init+0x1e4>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3d      	ldr	r2, [pc, #244]	; (80036ec <HAL_GPIO_Init+0x2cc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_GPIO_Init+0x1e0>
 80035fc:	2303      	movs	r3, #3
 80035fe:	e006      	b.n	800360e <HAL_GPIO_Init+0x1ee>
 8003600:	2304      	movs	r3, #4
 8003602:	e004      	b.n	800360e <HAL_GPIO_Init+0x1ee>
 8003604:	2302      	movs	r3, #2
 8003606:	e002      	b.n	800360e <HAL_GPIO_Init+0x1ee>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_GPIO_Init+0x1ee>
 800360c:	2300      	movs	r3, #0
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	f002 0203 	and.w	r2, r2, #3
 8003614:	0092      	lsls	r2, r2, #2
 8003616:	4093      	lsls	r3, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800361e:	492f      	ldr	r1, [pc, #188]	; (80036dc <HAL_GPIO_Init+0x2bc>)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	3302      	adds	r3, #2
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003638:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	492c      	ldr	r1, [pc, #176]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]
 8003644:	e006      	b.n	8003654 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	43db      	mvns	r3, r3
 800364e:	4928      	ldr	r1, [pc, #160]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 8003650:	4013      	ands	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d006      	beq.n	800366e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003660:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	4922      	ldr	r1, [pc, #136]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
 800366c:	e006      	b.n	800367c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	43db      	mvns	r3, r3
 8003676:	491e      	ldr	r1, [pc, #120]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 8003678:	4013      	ands	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d006      	beq.n	8003696 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003688:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	4918      	ldr	r1, [pc, #96]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]
 8003694:	e006      	b.n	80036a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	43db      	mvns	r3, r3
 800369e:	4914      	ldr	r1, [pc, #80]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d021      	beq.n	80036f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	490e      	ldr	r1, [pc, #56]	; (80036f0 <HAL_GPIO_Init+0x2d0>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60cb      	str	r3, [r1, #12]
 80036bc:	e021      	b.n	8003702 <HAL_GPIO_Init+0x2e2>
 80036be:	bf00      	nop
 80036c0:	10320000 	.word	0x10320000
 80036c4:	10310000 	.word	0x10310000
 80036c8:	10220000 	.word	0x10220000
 80036cc:	10210000 	.word	0x10210000
 80036d0:	10120000 	.word	0x10120000
 80036d4:	10110000 	.word	0x10110000
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40010800 	.word	0x40010800
 80036e4:	40010c00 	.word	0x40010c00
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40011400 	.word	0x40011400
 80036f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_GPIO_Init+0x304>)
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	4909      	ldr	r1, [pc, #36]	; (8003724 <HAL_GPIO_Init+0x304>)
 80036fe:	4013      	ands	r3, r2
 8003700:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	3301      	adds	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	f47f ae8e 	bne.w	8003434 <HAL_GPIO_Init+0x14>
  }
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	372c      	adds	r7, #44	; 0x2c
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	e001      	b.n	800374a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	807b      	strh	r3, [r7, #2]
 8003762:	4613      	mov	r3, r2
 8003764:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003766:	787b      	ldrb	r3, [r7, #1]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376c:	887a      	ldrh	r2, [r7, #2]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003772:	e003      	b.n	800377c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	041a      	lsls	r2, r3, #16
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	611a      	str	r2, [r3, #16]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003798:	887a      	ldrh	r2, [r7, #2]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4013      	ands	r3, r2
 800379e:	041a      	lsls	r2, r3, #16
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43d9      	mvns	r1, r3
 80037a4:	887b      	ldrh	r3, [r7, #2]
 80037a6:	400b      	ands	r3, r1
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	611a      	str	r2, [r3, #16]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e12b      	b.n	8003a22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fe fa84 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800380a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800381a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800381c:	f000 ffea 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8003820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4a81      	ldr	r2, [pc, #516]	; (8003a2c <HAL_I2C_Init+0x274>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d807      	bhi.n	800383c <HAL_I2C_Init+0x84>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a80      	ldr	r2, [pc, #512]	; (8003a30 <HAL_I2C_Init+0x278>)
 8003830:	4293      	cmp	r3, r2
 8003832:	bf94      	ite	ls
 8003834:	2301      	movls	r3, #1
 8003836:	2300      	movhi	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e006      	b.n	800384a <HAL_I2C_Init+0x92>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a7d      	ldr	r2, [pc, #500]	; (8003a34 <HAL_I2C_Init+0x27c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	bf94      	ite	ls
 8003844:	2301      	movls	r3, #1
 8003846:	2300      	movhi	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0e7      	b.n	8003a22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a78      	ldr	r2, [pc, #480]	; (8003a38 <HAL_I2C_Init+0x280>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0c9b      	lsrs	r3, r3, #18
 800385c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a6a      	ldr	r2, [pc, #424]	; (8003a2c <HAL_I2C_Init+0x274>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d802      	bhi.n	800388c <HAL_I2C_Init+0xd4>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3301      	adds	r3, #1
 800388a:	e009      	b.n	80038a0 <HAL_I2C_Init+0xe8>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	4a69      	ldr	r2, [pc, #420]	; (8003a3c <HAL_I2C_Init+0x284>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	3301      	adds	r3, #1
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	495c      	ldr	r1, [pc, #368]	; (8003a2c <HAL_I2C_Init+0x274>)
 80038bc:	428b      	cmp	r3, r1
 80038be:	d819      	bhi.n	80038f4 <HAL_I2C_Init+0x13c>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1e59      	subs	r1, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ce:	1c59      	adds	r1, r3, #1
 80038d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038d4:	400b      	ands	r3, r1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_I2C_Init+0x138>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1e59      	subs	r1, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ee:	e051      	b.n	8003994 <HAL_I2C_Init+0x1dc>
 80038f0:	2304      	movs	r3, #4
 80038f2:	e04f      	b.n	8003994 <HAL_I2C_Init+0x1dc>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d111      	bne.n	8003920 <HAL_I2C_Init+0x168>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	440b      	add	r3, r1
 800390a:	fbb0 f3f3 	udiv	r3, r0, r3
 800390e:	3301      	adds	r3, #1
 8003910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e012      	b.n	8003946 <HAL_I2C_Init+0x18e>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e58      	subs	r0, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	0099      	lsls	r1, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	fbb0 f3f3 	udiv	r3, r0, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Init+0x196>
 800394a:	2301      	movs	r3, #1
 800394c:	e022      	b.n	8003994 <HAL_I2C_Init+0x1dc>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10e      	bne.n	8003974 <HAL_I2C_Init+0x1bc>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1e58      	subs	r0, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	440b      	add	r3, r1
 8003964:	fbb0 f3f3 	udiv	r3, r0, r3
 8003968:	3301      	adds	r3, #1
 800396a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003972:	e00f      	b.n	8003994 <HAL_I2C_Init+0x1dc>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1e58      	subs	r0, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	0099      	lsls	r1, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	fbb0 f3f3 	udiv	r3, r0, r3
 800398a:	3301      	adds	r3, #1
 800398c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	6809      	ldr	r1, [r1, #0]
 8003998:	4313      	orrs	r3, r2
 800399a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6911      	ldr	r1, [r2, #16]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68d2      	ldr	r2, [r2, #12]
 80039ce:	4311      	orrs	r1, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	000186a0 	.word	0x000186a0
 8003a30:	001e847f 	.word	0x001e847f
 8003a34:	003d08ff 	.word	0x003d08ff
 8003a38:	431bde83 	.word	0x431bde83
 8003a3c:	10624dd3 	.word	0x10624dd3

08003a40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	817b      	strh	r3, [r7, #10]
 8003a50:	4613      	mov	r3, r2
 8003a52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7fe fc6a 	bl	800232c <HAL_GetTick>
 8003a58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	f040 80e0 	bne.w	8003c28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2319      	movs	r3, #25
 8003a6e:	2201      	movs	r2, #1
 8003a70:	4970      	ldr	r1, [pc, #448]	; (8003c34 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f964 	bl	8003d40 <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e0d3      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2C_Master_Transmit+0x50>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0cc      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d007      	beq.n	8003ab6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2221      	movs	r2, #33	; 0x21
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	893a      	ldrh	r2, [r7, #8]
 8003ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a50      	ldr	r2, [pc, #320]	; (8003c38 <HAL_I2C_Master_Transmit+0x1f8>)
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003af8:	8979      	ldrh	r1, [r7, #10]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f89c 	bl	8003c3c <I2C_MasterRequestWrite>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e08d      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b24:	e066      	b.n	8003bf4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	6a39      	ldr	r1, [r7, #32]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f9de 	bl	8003eec <I2C_WaitOnTXEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d107      	bne.n	8003b4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06b      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_I2C_Master_Transmit+0x188>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d017      	beq.n	8003bc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	6a39      	ldr	r1, [r7, #32]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f9ce 	bl	8003f6e <I2C_WaitOnBTFFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d107      	bne.n	8003bf0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e01a      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d194      	bne.n	8003b26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	00100002 	.word	0x00100002
 8003c38:	ffff0000 	.word	0xffff0000

08003c3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d006      	beq.n	8003c66 <I2C_MasterRequestWrite+0x2a>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d003      	beq.n	8003c66 <I2C_MasterRequestWrite+0x2a>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c64:	d108      	bne.n	8003c78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e00b      	b.n	8003c90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	2b12      	cmp	r3, #18
 8003c7e:	d107      	bne.n	8003c90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f84f 	bl	8003d40 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb6:	d103      	bne.n	8003cc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e035      	b.n	8003d30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ccc:	d108      	bne.n	8003ce0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cce:	897b      	ldrh	r3, [r7, #10]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cdc:	611a      	str	r2, [r3, #16]
 8003cde:	e01b      	b.n	8003d18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ce0:	897b      	ldrh	r3, [r7, #10]
 8003ce2:	11db      	asrs	r3, r3, #7
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 0306 	and.w	r3, r3, #6
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f063 030f 	orn	r3, r3, #15
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	490e      	ldr	r1, [pc, #56]	; (8003d38 <I2C_MasterRequestWrite+0xfc>)
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f875 	bl	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e010      	b.n	8003d30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d0e:	897b      	ldrh	r3, [r7, #10]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4907      	ldr	r1, [pc, #28]	; (8003d3c <I2C_MasterRequestWrite+0x100>)
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f865 	bl	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	00010008 	.word	0x00010008
 8003d3c:	00010002 	.word	0x00010002

08003d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d50:	e025      	b.n	8003d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d021      	beq.n	8003d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe fae7 	bl	800232c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e023      	b.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d10d      	bne.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	43da      	mvns	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4013      	ands	r3, r2
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	bf0c      	ite	eq
 8003dba:	2301      	moveq	r3, #1
 8003dbc:	2300      	movne	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	e00c      	b.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d0b6      	beq.n	8003d52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dfc:	e051      	b.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0c:	d123      	bne.n	8003e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e046      	b.n	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d021      	beq.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fa65 	bl	800232c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d116      	bne.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e020      	b.n	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d10c      	bne.n	8003ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf14      	ite	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	2300      	moveq	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	e00b      	b.n	8003ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d18d      	bne.n	8003dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ef8:	e02d      	b.n	8003f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f878 	bl	8003ff0 <I2C_IsAcknowledgeFailed>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e02d      	b.n	8003f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d021      	beq.n	8003f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fe fa0b 	bl	800232c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d116      	bne.n	8003f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e007      	b.n	8003f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d1ca      	bne.n	8003efa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f7a:	e02d      	b.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f837 	bl	8003ff0 <I2C_IsAcknowledgeFailed>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e02d      	b.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d021      	beq.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f94:	f7fe f9ca 	bl	800232c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d116      	bne.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e007      	b.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d1ca      	bne.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d11b      	bne.n	8004040 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004010:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e272      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 8087 	beq.w	800417a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800406c:	4b92      	ldr	r3, [pc, #584]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b04      	cmp	r3, #4
 8004076:	d00c      	beq.n	8004092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004078:	4b8f      	ldr	r3, [pc, #572]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d112      	bne.n	80040aa <HAL_RCC_OscConfig+0x5e>
 8004084:	4b8c      	ldr	r3, [pc, #560]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d10b      	bne.n	80040aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004092:	4b89      	ldr	r3, [pc, #548]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d06c      	beq.n	8004178 <HAL_RCC_OscConfig+0x12c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d168      	bne.n	8004178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e24c      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0x76>
 80040b4:	4b80      	ldr	r3, [pc, #512]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a7f      	ldr	r2, [pc, #508]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	e02e      	b.n	8004120 <HAL_RCC_OscConfig+0xd4>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x98>
 80040ca:	4b7b      	ldr	r3, [pc, #492]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b78      	ldr	r3, [pc, #480]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a77      	ldr	r2, [pc, #476]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e01d      	b.n	8004120 <HAL_RCC_OscConfig+0xd4>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ec:	d10c      	bne.n	8004108 <HAL_RCC_OscConfig+0xbc>
 80040ee:	4b72      	ldr	r3, [pc, #456]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a71      	ldr	r2, [pc, #452]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b6f      	ldr	r3, [pc, #444]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6e      	ldr	r2, [pc, #440]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e00b      	b.n	8004120 <HAL_RCC_OscConfig+0xd4>
 8004108:	4b6b      	ldr	r3, [pc, #428]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a6a      	ldr	r2, [pc, #424]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 800410e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b68      	ldr	r3, [pc, #416]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a67      	ldr	r2, [pc, #412]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 800411a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d013      	beq.n	8004150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe f900 	bl	800232c <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004130:	f7fe f8fc 	bl	800232c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e200      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	4b5d      	ldr	r3, [pc, #372]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0xe4>
 800414e:	e014      	b.n	800417a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe f8ec 	bl	800232c <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004158:	f7fe f8e8 	bl	800232c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e1ec      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x10c>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d063      	beq.n	800424e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004186:	4b4c      	ldr	r3, [pc, #304]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004192:	4b49      	ldr	r3, [pc, #292]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b08      	cmp	r3, #8
 800419c:	d11c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x18c>
 800419e:	4b46      	ldr	r3, [pc, #280]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d116      	bne.n	80041d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	4b43      	ldr	r3, [pc, #268]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_RCC_OscConfig+0x176>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e1c0      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4939      	ldr	r1, [pc, #228]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	e03a      	b.n	800424e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e0:	4b36      	ldr	r3, [pc, #216]	; (80042bc <HAL_RCC_OscConfig+0x270>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fe f8a1 	bl	800232c <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ee:	f7fe f89d 	bl	800232c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1a1      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4927      	ldr	r1, [pc, #156]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
 8004220:	e015      	b.n	800424e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <HAL_RCC_OscConfig+0x270>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fe f880 	bl	800232c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004230:	f7fe f87c 	bl	800232c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e180      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d03a      	beq.n	80042d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d019      	beq.n	8004296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <HAL_RCC_OscConfig+0x274>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004268:	f7fe f860 	bl	800232c <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004270:	f7fe f85c 	bl	800232c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e160      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <HAL_RCC_OscConfig+0x26c>)
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800428e:	2001      	movs	r0, #1
 8004290:	f000 fad8 	bl	8004844 <RCC_Delay>
 8004294:	e01c      	b.n	80042d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_RCC_OscConfig+0x274>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429c:	f7fe f846 	bl	800232c <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a2:	e00f      	b.n	80042c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fe f842 	bl	800232c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d908      	bls.n	80042c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e146      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000
 80042bc:	42420000 	.word	0x42420000
 80042c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c4:	4b92      	ldr	r3, [pc, #584]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e9      	bne.n	80042a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a6 	beq.w	800442a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042de:	2300      	movs	r3, #0
 80042e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e2:	4b8b      	ldr	r3, [pc, #556]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10d      	bne.n	800430a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ee:	4b88      	ldr	r3, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4a87      	ldr	r2, [pc, #540]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f8:	61d3      	str	r3, [r2, #28]
 80042fa:	4b85      	ldr	r3, [pc, #532]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430a:	4b82      	ldr	r3, [pc, #520]	; (8004514 <HAL_RCC_OscConfig+0x4c8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d118      	bne.n	8004348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004316:	4b7f      	ldr	r3, [pc, #508]	; (8004514 <HAL_RCC_OscConfig+0x4c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7e      	ldr	r2, [pc, #504]	; (8004514 <HAL_RCC_OscConfig+0x4c8>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004322:	f7fe f803 	bl	800232c <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432a:	f7fd ffff 	bl	800232c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b64      	cmp	r3, #100	; 0x64
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e103      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	4b75      	ldr	r3, [pc, #468]	; (8004514 <HAL_RCC_OscConfig+0x4c8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d106      	bne.n	800435e <HAL_RCC_OscConfig+0x312>
 8004350:	4b6f      	ldr	r3, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	4a6e      	ldr	r2, [pc, #440]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6213      	str	r3, [r2, #32]
 800435c:	e02d      	b.n	80043ba <HAL_RCC_OscConfig+0x36e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10c      	bne.n	8004380 <HAL_RCC_OscConfig+0x334>
 8004366:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	4a69      	ldr	r2, [pc, #420]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	6213      	str	r3, [r2, #32]
 8004372:	4b67      	ldr	r3, [pc, #412]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4a66      	ldr	r2, [pc, #408]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	f023 0304 	bic.w	r3, r3, #4
 800437c:	6213      	str	r3, [r2, #32]
 800437e:	e01c      	b.n	80043ba <HAL_RCC_OscConfig+0x36e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b05      	cmp	r3, #5
 8004386:	d10c      	bne.n	80043a2 <HAL_RCC_OscConfig+0x356>
 8004388:	4b61      	ldr	r3, [pc, #388]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	4a60      	ldr	r2, [pc, #384]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 800438e:	f043 0304 	orr.w	r3, r3, #4
 8004392:	6213      	str	r3, [r2, #32]
 8004394:	4b5e      	ldr	r3, [pc, #376]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	4a5d      	ldr	r2, [pc, #372]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6213      	str	r3, [r2, #32]
 80043a0:	e00b      	b.n	80043ba <HAL_RCC_OscConfig+0x36e>
 80043a2:	4b5b      	ldr	r3, [pc, #364]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4a5a      	ldr	r2, [pc, #360]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	6213      	str	r3, [r2, #32]
 80043ae:	4b58      	ldr	r3, [pc, #352]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4a57      	ldr	r2, [pc, #348]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	f023 0304 	bic.w	r3, r3, #4
 80043b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d015      	beq.n	80043ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c2:	f7fd ffb3 	bl	800232c <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd ffaf 	bl	800232c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0b1      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	4b4b      	ldr	r3, [pc, #300]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ee      	beq.n	80043ca <HAL_RCC_OscConfig+0x37e>
 80043ec:	e014      	b.n	8004418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ee:	f7fd ff9d 	bl	800232c <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f4:	e00a      	b.n	800440c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f6:	f7fd ff99 	bl	800232c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f241 3288 	movw	r2, #5000	; 0x1388
 8004404:	4293      	cmp	r3, r2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e09b      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440c:	4b40      	ldr	r3, [pc, #256]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ee      	bne.n	80043f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d105      	bne.n	800442a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800441e:	4b3c      	ldr	r3, [pc, #240]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4a3b      	ldr	r2, [pc, #236]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8087 	beq.w	8004542 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d061      	beq.n	8004504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d146      	bne.n	80044d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004448:	4b33      	ldr	r3, [pc, #204]	; (8004518 <HAL_RCC_OscConfig+0x4cc>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fd ff6d 	bl	800232c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004456:	f7fd ff69 	bl	800232c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e06d      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004468:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d108      	bne.n	8004490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800447e:	4b24      	ldr	r3, [pc, #144]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	4921      	ldr	r1, [pc, #132]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004490:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a19      	ldr	r1, [r3, #32]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	430b      	orrs	r3, r1
 80044a2:	491b      	ldr	r1, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_RCC_OscConfig+0x4cc>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fd ff3d 	bl	800232c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fd ff39 	bl	800232c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e03d      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x46a>
 80044d4:	e035      	b.n	8004542 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <HAL_RCC_OscConfig+0x4cc>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd ff26 	bl	800232c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fd ff22 	bl	800232c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e026      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x498>
 8004502:	e01e      	b.n	8004542 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e019      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
 8004510:	40021000 	.word	0x40021000
 8004514:	40007000 	.word	0x40007000
 8004518:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_OscConfig+0x500>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	429a      	cmp	r2, r3
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000

08004550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0d0      	b.n	8004706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d910      	bls.n	8004594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b67      	ldr	r3, [pc, #412]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 0207 	bic.w	r2, r3, #7
 800457a:	4965      	ldr	r1, [pc, #404]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b63      	ldr	r3, [pc, #396]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0b8      	b.n	8004706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a58      	ldr	r2, [pc, #352]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c4:	4b53      	ldr	r3, [pc, #332]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a52      	ldr	r2, [pc, #328]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d0:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	494d      	ldr	r1, [pc, #308]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d040      	beq.n	8004670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d115      	bne.n	800462e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e07f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e073      	b.n	8004706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e06b      	b.n	8004706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800462e:	4b39      	ldr	r3, [pc, #228]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f023 0203 	bic.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4936      	ldr	r1, [pc, #216]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004640:	f7fd fe74 	bl	800232c <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fd fe70 	bl	800232c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e053      	b.n	8004706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	4b2d      	ldr	r3, [pc, #180]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 020c 	and.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	429a      	cmp	r2, r3
 800466e:	d1eb      	bne.n	8004648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d210      	bcs.n	80046a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 0207 	bic.w	r2, r3, #7
 8004686:	4922      	ldr	r1, [pc, #136]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e032      	b.n	8004706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4916      	ldr	r1, [pc, #88]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	490e      	ldr	r1, [pc, #56]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046de:	f000 f821 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	490a      	ldr	r1, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	5ccb      	ldrb	r3, [r1, r3]
 80046f2:	fa22 f303 	lsr.w	r3, r2, r3
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <HAL_RCC_ClockConfig+0x1cc>)
 80046f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1d0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd fdd2 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40022000 	.word	0x40022000
 8004714:	40021000 	.word	0x40021000
 8004718:	08008abc 	.word	0x08008abc
 800471c:	20000000 	.word	0x20000000
 8004720:	20000008 	.word	0x20000008

08004724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004724:	b490      	push	{r4, r7}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800472a:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800472c:	1d3c      	adds	r4, r7, #4
 800472e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004734:	f240 2301 	movw	r3, #513	; 0x201
 8004738:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	2300      	movs	r3, #0
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800474e:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b04      	cmp	r3, #4
 800475c:	d002      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x40>
 800475e:	2b08      	cmp	r3, #8
 8004760:	d003      	beq.n	800476a <HAL_RCC_GetSysClockFreq+0x46>
 8004762:	e02b      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004766:	623b      	str	r3, [r7, #32]
      break;
 8004768:	e02b      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	0c9b      	lsrs	r3, r3, #18
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	3328      	adds	r3, #40	; 0x28
 8004774:	443b      	add	r3, r7
 8004776:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800477a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d012      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	0c5b      	lsrs	r3, r3, #17
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	3328      	adds	r3, #40	; 0x28
 8004792:	443b      	add	r3, r7
 8004794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800479e:	fb03 f202 	mul.w	r2, r3, r2
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
 80047aa:	e004      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	623b      	str	r3, [r7, #32]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047be:	623b      	str	r3, [r7, #32]
      break;
 80047c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc90      	pop	{r4, r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	08008aac 	.word	0x08008aac
 80047d4:	40021000 	.word	0x40021000
 80047d8:	007a1200 	.word	0x007a1200
 80047dc:	003d0900 	.word	0x003d0900

080047e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	20000000 	.word	0x20000000

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f8:	f7ff fff2 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4903      	ldr	r1, [pc, #12]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40021000 	.word	0x40021000
 8004818:	08008acc 	.word	0x08008acc

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004820:	f7ff ffde 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	0adb      	lsrs	r3, r3, #11
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4903      	ldr	r1, [pc, #12]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	08008acc 	.word	0x08008acc

08004844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <RCC_Delay+0x34>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <RCC_Delay+0x38>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	0a5b      	lsrs	r3, r3, #9
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004860:	bf00      	nop
  }
  while (Delay --);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1e5a      	subs	r2, r3, #1
 8004866:	60fa      	str	r2, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f9      	bne.n	8004860 <RCC_Delay+0x1c>
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	20000000 	.word	0x20000000
 800487c:	10624dd3 	.word	0x10624dd3

08004880 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d07d      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a0:	4b4f      	ldr	r3, [pc, #316]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10d      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ac:	4b4c      	ldr	r3, [pc, #304]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	4a4b      	ldr	r2, [pc, #300]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b6:	61d3      	str	r3, [r2, #28]
 80048b8:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	4b46      	ldr	r3, [pc, #280]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d118      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d4:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a42      	ldr	r2, [pc, #264]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e0:	f7fd fd24 	bl	800232c <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e8:	f7fd fd20 	bl	800232c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e06d      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004906:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02e      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	429a      	cmp	r2, r3
 8004922:	d027      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004924:	4b2e      	ldr	r3, [pc, #184]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800492e:	4b2e      	ldr	r3, [pc, #184]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004934:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800493a:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d014      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fd fcef 	bl	800232c <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fd fceb 	bl	800232c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e036      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ee      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4917      	ldr	r1, [pc, #92]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	4313      	orrs	r3, r2
 8004984:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	490b      	ldr	r1, [pc, #44]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4904      	ldr	r1, [pc, #16]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40007000 	.word	0x40007000
 80049e8:	42420440 	.word	0x42420440

080049ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e041      	b.n	8004a82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fd f9a8 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f000 faba 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e032      	b.n	8004b0a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <HAL_TIM_Base_Start+0x88>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_TIM_Base_Start+0x48>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d009      	beq.n	8004ad4 <HAL_TIM_Base_Start+0x48>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <HAL_TIM_Base_Start+0x8c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_TIM_Base_Start+0x48>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <HAL_TIM_Base_Start+0x90>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d111      	bne.n	8004af8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d010      	beq.n	8004b08 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af6:	e007      	b.n	8004b08 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800

08004b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d001      	beq.n	8004b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e03a      	b.n	8004bae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <HAL_TIM_Base_Start_IT+0x98>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x58>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d009      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x58>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <HAL_TIM_Base_Start_IT+0x9c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x58>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a13      	ldr	r2, [pc, #76]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d111      	bne.n	8004b9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d010      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	e007      	b.n	8004bac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800

08004bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0202 	mvn.w	r2, #2
 8004bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9b1 	bl	8004f6e <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9a4 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f9b3 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d122      	bne.n	8004c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0204 	mvn.w	r2, #4
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f987 	bl	8004f6e <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f97a 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f989 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d122      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0208 	mvn.w	r2, #8
 8004c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f95d 	bl	8004f6e <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e005      	b.n	8004cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f950 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f95f 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d122      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d11b      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0210 	mvn.w	r2, #16
 8004cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f933 	bl	8004f6e <HAL_TIM_IC_CaptureCallback>
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f926 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f935 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d10e      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0201 	mvn.w	r2, #1
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fd f9d4 	bl	80020f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d10e      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b80      	cmp	r3, #128	; 0x80
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa77 	bl	8005262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8f9 	bl	8004f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0220 	mvn.w	r2, #32
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa42 	bl	8005250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_TIM_ConfigClockSource+0x18>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e0b3      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x180>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e24:	d03e      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0xd0>
 8004e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2a:	f200 8087 	bhi.w	8004f3c <HAL_TIM_ConfigClockSource+0x168>
 8004e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e32:	f000 8085 	beq.w	8004f40 <HAL_TIM_ConfigClockSource+0x16c>
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3a:	d87f      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x168>
 8004e3c:	2b70      	cmp	r3, #112	; 0x70
 8004e3e:	d01a      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0xa2>
 8004e40:	2b70      	cmp	r3, #112	; 0x70
 8004e42:	d87b      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x168>
 8004e44:	2b60      	cmp	r3, #96	; 0x60
 8004e46:	d050      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x116>
 8004e48:	2b60      	cmp	r3, #96	; 0x60
 8004e4a:	d877      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x168>
 8004e4c:	2b50      	cmp	r3, #80	; 0x50
 8004e4e:	d03c      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xf6>
 8004e50:	2b50      	cmp	r3, #80	; 0x50
 8004e52:	d873      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x168>
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d058      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x136>
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d86f      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x168>
 8004e5c:	2b30      	cmp	r3, #48	; 0x30
 8004e5e:	d064      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x156>
 8004e60:	2b30      	cmp	r3, #48	; 0x30
 8004e62:	d86b      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x168>
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d060      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x156>
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d867      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x168>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d05c      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x156>
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d05a      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e74:	e062      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6899      	ldr	r1, [r3, #8]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f000 f966 	bl	8005156 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	609a      	str	r2, [r3, #8]
      break;
 8004ea2:	e04e      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6899      	ldr	r1, [r3, #8]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f000 f94f 	bl	8005156 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec6:	609a      	str	r2, [r3, #8]
      break;
 8004ec8:	e03b      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f000 f8c6 	bl	8005068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2150      	movs	r1, #80	; 0x50
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f91d 	bl	8005122 <TIM_ITRx_SetConfig>
      break;
 8004ee8:	e02b      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 f8e4 	bl	80050c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2160      	movs	r1, #96	; 0x60
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f90d 	bl	8005122 <TIM_ITRx_SetConfig>
      break;
 8004f08:	e01b      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 f8a6 	bl	8005068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2140      	movs	r1, #64	; 0x40
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f8fd 	bl	8005122 <TIM_ITRx_SetConfig>
      break;
 8004f28:	e00b      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f000 f8f4 	bl	8005122 <TIM_ITRx_SetConfig>
        break;
 8004f3a:	e002      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a29      	ldr	r2, [pc, #164]	; (800505c <TIM_Base_SetConfig+0xb8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <TIM_Base_SetConfig+0x30>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d007      	beq.n	8004fd4 <TIM_Base_SetConfig+0x30>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a26      	ldr	r2, [pc, #152]	; (8005060 <TIM_Base_SetConfig+0xbc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0x30>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a25      	ldr	r2, [pc, #148]	; (8005064 <TIM_Base_SetConfig+0xc0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d108      	bne.n	8004fe6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1c      	ldr	r2, [pc, #112]	; (800505c <TIM_Base_SetConfig+0xb8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0x62>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0x62>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a19      	ldr	r2, [pc, #100]	; (8005060 <TIM_Base_SetConfig+0xbc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0x62>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a18      	ldr	r2, [pc, #96]	; (8005064 <TIM_Base_SetConfig+0xc0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a07      	ldr	r2, [pc, #28]	; (800505c <TIM_Base_SetConfig+0xb8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d103      	bne.n	800504c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	615a      	str	r2, [r3, #20]
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800

08005068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 030a 	bic.w	r3, r3, #10
 80050a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr

080050c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 0210 	bic.w	r2, r3, #16
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	031b      	lsls	r3, r3, #12
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005100:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	621a      	str	r2, [r3, #32]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	f043 0307 	orr.w	r3, r3, #7
 8005144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005156:	b480      	push	{r7}
 8005158:	b087      	sub	sp, #28
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005170:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	431a      	orrs	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4313      	orrs	r3, r2
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	609a      	str	r2, [r3, #8]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e046      	b.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a16      	ldr	r2, [pc, #88]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f8:	d009      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a10      	ldr	r2, [pc, #64]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10c      	bne.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4313      	orrs	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800

08005250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e03f      	b.n	8005306 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fc fd9c 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2224      	movs	r2, #36	; 0x24
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fc1d 	bl	8005af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695a      	ldr	r2, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b08a      	sub	sp, #40	; 0x28
 8005312:	af02      	add	r7, sp, #8
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b20      	cmp	r3, #32
 800532c:	d17c      	bne.n	8005428 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_UART_Transmit+0x2c>
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e075      	b.n	800542a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_UART_Transmit+0x3e>
 8005348:	2302      	movs	r3, #2
 800534a:	e06e      	b.n	800542a <HAL_UART_Transmit+0x11c>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2221      	movs	r2, #33	; 0x21
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005362:	f7fc ffe3 	bl	800232c <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d108      	bne.n	8005390 <HAL_UART_Transmit+0x82>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e003      	b.n	8005398 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053a0:	e02a      	b.n	80053f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fa08 	bl	80057c2 <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e036      	b.n	800542a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3302      	adds	r3, #2
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e007      	b.n	80053ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	3301      	adds	r3, #1
 80053e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1cf      	bne.n	80053a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2140      	movs	r1, #64	; 0x40
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f9d8 	bl	80057c2 <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e006      	b.n	800542a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_UART_IRQHandler+0x52>
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa90 	bl	80059a4 <UART_Receive_IT>
      return;
 8005484:	e17b      	b.n	800577e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80b1 	beq.w	80055f0 <HAL_UART_IRQHandler+0x1bc>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <HAL_UART_IRQHandler+0x70>
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80a6 	beq.w	80055f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_UART_IRQHandler+0x90>
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	f043 0201 	orr.w	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_UART_IRQHandler+0xb0>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f043 0202 	orr.w	r2, r3, #2
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_UART_IRQHandler+0xd0>
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f043 0204 	orr.w	r2, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00f      	beq.n	800552e <HAL_UART_IRQHandler+0xfa>
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <HAL_UART_IRQHandler+0xee>
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f043 0208 	orr.w	r2, r3, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 811e 	beq.w	8005774 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_UART_IRQHandler+0x11e>
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa29 	bl	80059a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <HAL_UART_IRQHandler+0x146>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d031      	beq.n	80055de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f96b 	bl	8005856 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d023      	beq.n	80055d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d013      	beq.n	80055ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	4a76      	ldr	r2, [pc, #472]	; (8005784 <HAL_UART_IRQHandler+0x350>)
 80055ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fd fd8a 	bl	80030cc <HAL_DMA_Abort_IT>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e00e      	b.n	80055ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f8e3 	bl	800579a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	e00a      	b.n	80055ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f8df 	bl	800579a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e006      	b.n	80055ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8db 	bl	800579a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055ea:	e0c3      	b.n	8005774 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	bf00      	nop
    return;
 80055ee:	e0c1      	b.n	8005774 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	f040 80a1 	bne.w	800573c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 809b 	beq.w	800573c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8095 	beq.w	800573c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04e      	beq.n	80056d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005640:	8a3b      	ldrh	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8098 	beq.w	8005778 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800564c:	8a3a      	ldrh	r2, [r7, #16]
 800564e:	429a      	cmp	r2, r3
 8005650:	f080 8092 	bcs.w	8005778 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8a3a      	ldrh	r2, [r7, #16]
 8005658:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b20      	cmp	r3, #32
 8005662:	d02b      	beq.n	80056bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005672:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005692:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0210 	bic.w	r2, r2, #16
 80056b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fd fccd 	bl	8003056 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f86d 	bl	80057ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056d2:	e051      	b.n	8005778 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056dc:	b29b      	uxth	r3, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d047      	beq.n	800577c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80056ec:	8a7b      	ldrh	r3, [r7, #18]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d044      	beq.n	800577c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005700:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0210 	bic.w	r2, r2, #16
 800572e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005730:	8a7b      	ldrh	r3, [r7, #18]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f839 	bl	80057ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800573a:	e01f      	b.n	800577c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_UART_IRQHandler+0x324>
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f8c0 	bl	80058d6 <UART_Transmit_IT>
    return;
 8005756:	e012      	b.n	800577e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00d      	beq.n	800577e <HAL_UART_IRQHandler+0x34a>
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f901 	bl	8005974 <UART_EndTransmit_IT>
    return;
 8005772:	e004      	b.n	800577e <HAL_UART_IRQHandler+0x34a>
    return;
 8005774:	bf00      	nop
 8005776:	e002      	b.n	800577e <HAL_UART_IRQHandler+0x34a>
      return;
 8005778:	bf00      	nop
 800577a:	e000      	b.n	800577e <HAL_UART_IRQHandler+0x34a>
      return;
 800577c:	bf00      	nop
  }
}
 800577e:	3728      	adds	r7, #40	; 0x28
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	080058af 	.word	0x080058af

08005788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr

0800579a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	603b      	str	r3, [r7, #0]
 80057ce:	4613      	mov	r3, r2
 80057d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d2:	e02c      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d028      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80057e2:	f7fc fda3 	bl	800232c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d21d      	bcs.n	800582e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005800:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695a      	ldr	r2, [r3, #20]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e00f      	b.n	800584e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	429a      	cmp	r2, r3
 800584a:	d0c3      	beq.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800586c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	2b01      	cmp	r3, #1
 8005884:	d107      	bne.n	8005896 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0210 	bic.w	r2, r2, #16
 8005894:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff ff66 	bl	800579a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b21      	cmp	r3, #33	; 0x21
 80058e8:	d13e      	bne.n	8005968 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f2:	d114      	bne.n	800591e <UART_Transmit_IT+0x48>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d110      	bne.n	800591e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005910:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	1c9a      	adds	r2, r3, #2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]
 800591c:	e008      	b.n	8005930 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6211      	str	r1, [r2, #32]
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29b      	uxth	r3, r3
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4619      	mov	r1, r3
 800593e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10f      	bne.n	8005964 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005952:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005962:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff fef7 	bl	8005788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b22      	cmp	r3, #34	; 0x22
 80059b6:	f040 8099 	bne.w	8005aec <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c2:	d117      	bne.n	80059f4 <UART_Receive_IT+0x50>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d113      	bne.n	80059f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	629a      	str	r2, [r3, #40]	; 0x28
 80059f2:	e026      	b.n	8005a42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a06:	d007      	beq.n	8005a18 <UART_Receive_IT+0x74>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <UART_Receive_IT+0x82>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e008      	b.n	8005a38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d148      	bne.n	8005ae8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0220 	bic.w	r2, r2, #32
 8005a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d123      	bne.n	8005ade <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0210 	bic.w	r2, r2, #16
 8005aaa:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d10a      	bne.n	8005ad0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fe68 	bl	80057ac <HAL_UARTEx_RxEventCallback>
 8005adc:	e002      	b.n	8005ae4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fc fb6e 	bl	80021c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e002      	b.n	8005aee <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b32:	f023 030c 	bic.w	r3, r3, #12
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <UART_SetConfig+0x114>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d103      	bne.n	8005b68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b60:	f7fe fe5c 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	e002      	b.n	8005b6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fe fe44 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8005b6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009a      	lsls	r2, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <UART_SetConfig+0x118>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	0119      	lsls	r1, r3, #4
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009a      	lsls	r2, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ba4:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <UART_SetConfig+0x118>)
 8005ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	2064      	movs	r0, #100	; 0x64
 8005bae:	fb00 f303 	mul.w	r3, r0, r3
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	3332      	adds	r3, #50	; 0x32
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <UART_SetConfig+0x118>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc4:	4419      	add	r1, r3
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <UART_SetConfig+0x118>)
 8005bde:	fba3 0302 	umull	r0, r3, r3, r2
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2064      	movs	r0, #100	; 0x64
 8005be6:	fb00 f303 	mul.w	r3, r0, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	3332      	adds	r3, #50	; 0x32
 8005bf0:	4a07      	ldr	r2, [pc, #28]	; (8005c10 <UART_SetConfig+0x118>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	f003 020f 	and.w	r2, r3, #15
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	440a      	add	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40013800 	.word	0x40013800
 8005c10:	51eb851f 	.word	0x51eb851f

08005c14 <__errno>:
 8005c14:	4b01      	ldr	r3, [pc, #4]	; (8005c1c <__errno+0x8>)
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000010 	.word	0x20000010

08005c20 <__libc_init_array>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	2600      	movs	r6, #0
 8005c24:	4d0c      	ldr	r5, [pc, #48]	; (8005c58 <__libc_init_array+0x38>)
 8005c26:	4c0d      	ldr	r4, [pc, #52]	; (8005c5c <__libc_init_array+0x3c>)
 8005c28:	1b64      	subs	r4, r4, r5
 8005c2a:	10a4      	asrs	r4, r4, #2
 8005c2c:	42a6      	cmp	r6, r4
 8005c2e:	d109      	bne.n	8005c44 <__libc_init_array+0x24>
 8005c30:	f002 ff02 	bl	8008a38 <_init>
 8005c34:	2600      	movs	r6, #0
 8005c36:	4d0a      	ldr	r5, [pc, #40]	; (8005c60 <__libc_init_array+0x40>)
 8005c38:	4c0a      	ldr	r4, [pc, #40]	; (8005c64 <__libc_init_array+0x44>)
 8005c3a:	1b64      	subs	r4, r4, r5
 8005c3c:	10a4      	asrs	r4, r4, #2
 8005c3e:	42a6      	cmp	r6, r4
 8005c40:	d105      	bne.n	8005c4e <__libc_init_array+0x2e>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c48:	4798      	blx	r3
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7ee      	b.n	8005c2c <__libc_init_array+0xc>
 8005c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c52:	4798      	blx	r3
 8005c54:	3601      	adds	r6, #1
 8005c56:	e7f2      	b.n	8005c3e <__libc_init_array+0x1e>
 8005c58:	08008eac 	.word	0x08008eac
 8005c5c:	08008eac 	.word	0x08008eac
 8005c60:	08008eac 	.word	0x08008eac
 8005c64:	08008eb0 	.word	0x08008eb0

08005c68 <malloc>:
 8005c68:	4b02      	ldr	r3, [pc, #8]	; (8005c74 <malloc+0xc>)
 8005c6a:	4601      	mov	r1, r0
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	f000 b87b 	b.w	8005d68 <_malloc_r>
 8005c72:	bf00      	nop
 8005c74:	20000010 	.word	0x20000010

08005c78 <free>:
 8005c78:	4b02      	ldr	r3, [pc, #8]	; (8005c84 <free+0xc>)
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	f000 b80b 	b.w	8005c98 <_free_r>
 8005c82:	bf00      	nop
 8005c84:	20000010 	.word	0x20000010

08005c88 <memset>:
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4402      	add	r2, r0
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memset+0xa>
 8005c90:	4770      	bx	lr
 8005c92:	f803 1b01 	strb.w	r1, [r3], #1
 8005c96:	e7f9      	b.n	8005c8c <memset+0x4>

08005c98 <_free_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d040      	beq.n	8005d22 <_free_r+0x8a>
 8005ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca4:	1f0c      	subs	r4, r1, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfb8      	it	lt
 8005caa:	18e4      	addlt	r4, r4, r3
 8005cac:	f001 fbfa 	bl	80074a4 <__malloc_lock>
 8005cb0:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <_free_r+0x8c>)
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	b933      	cbnz	r3, 8005cc4 <_free_r+0x2c>
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	6014      	str	r4, [r2, #0]
 8005cba:	4628      	mov	r0, r5
 8005cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cc0:	f001 bbf6 	b.w	80074b0 <__malloc_unlock>
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d908      	bls.n	8005cda <_free_r+0x42>
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	1821      	adds	r1, r4, r0
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	bf01      	itttt	eq
 8005cd0:	6819      	ldreq	r1, [r3, #0]
 8005cd2:	685b      	ldreq	r3, [r3, #4]
 8005cd4:	1809      	addeq	r1, r1, r0
 8005cd6:	6021      	streq	r1, [r4, #0]
 8005cd8:	e7ed      	b.n	8005cb6 <_free_r+0x1e>
 8005cda:	461a      	mov	r2, r3
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b10b      	cbz	r3, 8005ce4 <_free_r+0x4c>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d9fa      	bls.n	8005cda <_free_r+0x42>
 8005ce4:	6811      	ldr	r1, [r2, #0]
 8005ce6:	1850      	adds	r0, r2, r1
 8005ce8:	42a0      	cmp	r0, r4
 8005cea:	d10b      	bne.n	8005d04 <_free_r+0x6c>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	4401      	add	r1, r0
 8005cf0:	1850      	adds	r0, r2, r1
 8005cf2:	4283      	cmp	r3, r0
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	d1e0      	bne.n	8005cba <_free_r+0x22>
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4401      	add	r1, r0
 8005cfe:	6011      	str	r1, [r2, #0]
 8005d00:	6053      	str	r3, [r2, #4]
 8005d02:	e7da      	b.n	8005cba <_free_r+0x22>
 8005d04:	d902      	bls.n	8005d0c <_free_r+0x74>
 8005d06:	230c      	movs	r3, #12
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	e7d6      	b.n	8005cba <_free_r+0x22>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	1821      	adds	r1, r4, r0
 8005d10:	428b      	cmp	r3, r1
 8005d12:	bf01      	itttt	eq
 8005d14:	6819      	ldreq	r1, [r3, #0]
 8005d16:	685b      	ldreq	r3, [r3, #4]
 8005d18:	1809      	addeq	r1, r1, r0
 8005d1a:	6021      	streq	r1, [r4, #0]
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	6054      	str	r4, [r2, #4]
 8005d20:	e7cb      	b.n	8005cba <_free_r+0x22>
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	200004bc 	.word	0x200004bc

08005d28 <sbrk_aligned>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4e0e      	ldr	r6, [pc, #56]	; (8005d64 <sbrk_aligned+0x3c>)
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	6831      	ldr	r1, [r6, #0]
 8005d30:	4605      	mov	r5, r0
 8005d32:	b911      	cbnz	r1, 8005d3a <sbrk_aligned+0x12>
 8005d34:	f000 fcec 	bl	8006710 <_sbrk_r>
 8005d38:	6030      	str	r0, [r6, #0]
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 fce7 	bl	8006710 <_sbrk_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d00a      	beq.n	8005d5c <sbrk_aligned+0x34>
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d007      	beq.n	8005d60 <sbrk_aligned+0x38>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 fcdc 	bl	8006710 <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d101      	bne.n	8005d60 <sbrk_aligned+0x38>
 8005d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d60:	4620      	mov	r0, r4
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	200004c0 	.word	0x200004c0

08005d68 <_malloc_r>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	1ccd      	adds	r5, r1, #3
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	db01      	blt.n	8005d84 <_malloc_r+0x1c>
 8005d80:	42a9      	cmp	r1, r5
 8005d82:	d905      	bls.n	8005d90 <_malloc_r+0x28>
 8005d84:	230c      	movs	r3, #12
 8005d86:	2600      	movs	r6, #0
 8005d88:	603b      	str	r3, [r7, #0]
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	4e2e      	ldr	r6, [pc, #184]	; (8005e4c <_malloc_r+0xe4>)
 8005d92:	f001 fb87 	bl	80074a4 <__malloc_lock>
 8005d96:	6833      	ldr	r3, [r6, #0]
 8005d98:	461c      	mov	r4, r3
 8005d9a:	bb34      	cbnz	r4, 8005dea <_malloc_r+0x82>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ffc2 	bl	8005d28 <sbrk_aligned>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	4604      	mov	r4, r0
 8005da8:	d14d      	bne.n	8005e46 <_malloc_r+0xde>
 8005daa:	6834      	ldr	r4, [r6, #0]
 8005dac:	4626      	mov	r6, r4
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d140      	bne.n	8005e34 <_malloc_r+0xcc>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	4631      	mov	r1, r6
 8005db6:	4638      	mov	r0, r7
 8005db8:	eb04 0803 	add.w	r8, r4, r3
 8005dbc:	f000 fca8 	bl	8006710 <_sbrk_r>
 8005dc0:	4580      	cmp	r8, r0
 8005dc2:	d13a      	bne.n	8005e3a <_malloc_r+0xd2>
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	3503      	adds	r5, #3
 8005dc8:	1a6d      	subs	r5, r5, r1
 8005dca:	f025 0503 	bic.w	r5, r5, #3
 8005dce:	3508      	adds	r5, #8
 8005dd0:	2d0c      	cmp	r5, #12
 8005dd2:	bf38      	it	cc
 8005dd4:	250c      	movcc	r5, #12
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7ff ffa5 	bl	8005d28 <sbrk_aligned>
 8005dde:	3001      	adds	r0, #1
 8005de0:	d02b      	beq.n	8005e3a <_malloc_r+0xd2>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	442b      	add	r3, r5
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	e00e      	b.n	8005e08 <_malloc_r+0xa0>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	1b52      	subs	r2, r2, r5
 8005dee:	d41e      	bmi.n	8005e2e <_malloc_r+0xc6>
 8005df0:	2a0b      	cmp	r2, #11
 8005df2:	d916      	bls.n	8005e22 <_malloc_r+0xba>
 8005df4:	1961      	adds	r1, r4, r5
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	6025      	str	r5, [r4, #0]
 8005dfa:	bf18      	it	ne
 8005dfc:	6059      	strne	r1, [r3, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	bf08      	it	eq
 8005e02:	6031      	streq	r1, [r6, #0]
 8005e04:	5162      	str	r2, [r4, r5]
 8005e06:	604b      	str	r3, [r1, #4]
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f104 060b 	add.w	r6, r4, #11
 8005e0e:	f001 fb4f 	bl	80074b0 <__malloc_unlock>
 8005e12:	f026 0607 	bic.w	r6, r6, #7
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	1af2      	subs	r2, r6, r3
 8005e1a:	d0b6      	beq.n	8005d8a <_malloc_r+0x22>
 8005e1c:	1b9b      	subs	r3, r3, r6
 8005e1e:	50a3      	str	r3, [r4, r2]
 8005e20:	e7b3      	b.n	8005d8a <_malloc_r+0x22>
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	bf0c      	ite	eq
 8005e28:	6032      	streq	r2, [r6, #0]
 8005e2a:	605a      	strne	r2, [r3, #4]
 8005e2c:	e7ec      	b.n	8005e08 <_malloc_r+0xa0>
 8005e2e:	4623      	mov	r3, r4
 8005e30:	6864      	ldr	r4, [r4, #4]
 8005e32:	e7b2      	b.n	8005d9a <_malloc_r+0x32>
 8005e34:	4634      	mov	r4, r6
 8005e36:	6876      	ldr	r6, [r6, #4]
 8005e38:	e7b9      	b.n	8005dae <_malloc_r+0x46>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	f001 fb36 	bl	80074b0 <__malloc_unlock>
 8005e44:	e7a1      	b.n	8005d8a <_malloc_r+0x22>
 8005e46:	6025      	str	r5, [r4, #0]
 8005e48:	e7de      	b.n	8005e08 <_malloc_r+0xa0>
 8005e4a:	bf00      	nop
 8005e4c:	200004bc 	.word	0x200004bc

08005e50 <__cvt>:
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e56:	461f      	mov	r7, r3
 8005e58:	bfbb      	ittet	lt
 8005e5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	461f      	movlt	r7, r3
 8005e60:	2300      	movge	r3, #0
 8005e62:	232d      	movlt	r3, #45	; 0x2d
 8005e64:	b088      	sub	sp, #32
 8005e66:	4614      	mov	r4, r2
 8005e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e6c:	7013      	strb	r3, [r2, #0]
 8005e6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e70:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e74:	f023 0820 	bic.w	r8, r3, #32
 8005e78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e7c:	d005      	beq.n	8005e8a <__cvt+0x3a>
 8005e7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e82:	d100      	bne.n	8005e86 <__cvt+0x36>
 8005e84:	3501      	adds	r5, #1
 8005e86:	2302      	movs	r3, #2
 8005e88:	e000      	b.n	8005e8c <__cvt+0x3c>
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	aa07      	add	r2, sp, #28
 8005e8e:	9204      	str	r2, [sp, #16]
 8005e90:	aa06      	add	r2, sp, #24
 8005e92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e96:	e9cd 3500 	strd	r3, r5, [sp]
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	f000 fcf3 	bl	8006888 <_dtoa_r>
 8005ea2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	d102      	bne.n	8005eb0 <__cvt+0x60>
 8005eaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eac:	07db      	lsls	r3, r3, #31
 8005eae:	d522      	bpl.n	8005ef6 <__cvt+0xa6>
 8005eb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eb4:	eb06 0905 	add.w	r9, r6, r5
 8005eb8:	d110      	bne.n	8005edc <__cvt+0x8c>
 8005eba:	7833      	ldrb	r3, [r6, #0]
 8005ebc:	2b30      	cmp	r3, #48	; 0x30
 8005ebe:	d10a      	bne.n	8005ed6 <__cvt+0x86>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	f7fa fd6e 	bl	80009a8 <__aeabi_dcmpeq>
 8005ecc:	b918      	cbnz	r0, 8005ed6 <__cvt+0x86>
 8005ece:	f1c5 0501 	rsb	r5, r5, #1
 8005ed2:	f8ca 5000 	str.w	r5, [sl]
 8005ed6:	f8da 3000 	ldr.w	r3, [sl]
 8005eda:	4499      	add	r9, r3
 8005edc:	2200      	movs	r2, #0
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fd60 	bl	80009a8 <__aeabi_dcmpeq>
 8005ee8:	b108      	cbz	r0, 8005eee <__cvt+0x9e>
 8005eea:	f8cd 901c 	str.w	r9, [sp, #28]
 8005eee:	2230      	movs	r2, #48	; 0x30
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	454b      	cmp	r3, r9
 8005ef4:	d307      	bcc.n	8005f06 <__cvt+0xb6>
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	9b07      	ldr	r3, [sp, #28]
 8005efa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005efc:	1b9b      	subs	r3, r3, r6
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	b008      	add	sp, #32
 8005f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f06:	1c59      	adds	r1, r3, #1
 8005f08:	9107      	str	r1, [sp, #28]
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	e7f0      	b.n	8005ef0 <__cvt+0xa0>

08005f0e <__exponent>:
 8005f0e:	4603      	mov	r3, r0
 8005f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f12:	2900      	cmp	r1, #0
 8005f14:	f803 2b02 	strb.w	r2, [r3], #2
 8005f18:	bfb6      	itet	lt
 8005f1a:	222d      	movlt	r2, #45	; 0x2d
 8005f1c:	222b      	movge	r2, #43	; 0x2b
 8005f1e:	4249      	neglt	r1, r1
 8005f20:	2909      	cmp	r1, #9
 8005f22:	7042      	strb	r2, [r0, #1]
 8005f24:	dd2b      	ble.n	8005f7e <__exponent+0x70>
 8005f26:	f10d 0407 	add.w	r4, sp, #7
 8005f2a:	46a4      	mov	ip, r4
 8005f2c:	270a      	movs	r7, #10
 8005f2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f32:	460a      	mov	r2, r1
 8005f34:	46a6      	mov	lr, r4
 8005f36:	fb07 1516 	mls	r5, r7, r6, r1
 8005f3a:	2a63      	cmp	r2, #99	; 0x63
 8005f3c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005f40:	4631      	mov	r1, r6
 8005f42:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f4a:	dcf0      	bgt.n	8005f2e <__exponent+0x20>
 8005f4c:	3130      	adds	r1, #48	; 0x30
 8005f4e:	f1ae 0502 	sub.w	r5, lr, #2
 8005f52:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f56:	4629      	mov	r1, r5
 8005f58:	1c44      	adds	r4, r0, #1
 8005f5a:	4561      	cmp	r1, ip
 8005f5c:	d30a      	bcc.n	8005f74 <__exponent+0x66>
 8005f5e:	f10d 0209 	add.w	r2, sp, #9
 8005f62:	eba2 020e 	sub.w	r2, r2, lr
 8005f66:	4565      	cmp	r5, ip
 8005f68:	bf88      	it	hi
 8005f6a:	2200      	movhi	r2, #0
 8005f6c:	4413      	add	r3, r2
 8005f6e:	1a18      	subs	r0, r3, r0
 8005f70:	b003      	add	sp, #12
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f78:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f7c:	e7ed      	b.n	8005f5a <__exponent+0x4c>
 8005f7e:	2330      	movs	r3, #48	; 0x30
 8005f80:	3130      	adds	r1, #48	; 0x30
 8005f82:	7083      	strb	r3, [r0, #2]
 8005f84:	70c1      	strb	r1, [r0, #3]
 8005f86:	1d03      	adds	r3, r0, #4
 8005f88:	e7f1      	b.n	8005f6e <__exponent+0x60>
	...

08005f8c <_printf_float>:
 8005f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	b091      	sub	sp, #68	; 0x44
 8005f92:	460c      	mov	r4, r1
 8005f94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005f98:	4616      	mov	r6, r2
 8005f9a:	461f      	mov	r7, r3
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	f001 fa61 	bl	8007464 <_localeconv_r>
 8005fa2:	6803      	ldr	r3, [r0, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa8:	f7fa f8d2 	bl	8000150 <strlen>
 8005fac:	2300      	movs	r3, #0
 8005fae:	930e      	str	r3, [sp, #56]	; 0x38
 8005fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb4:	900a      	str	r0, [sp, #40]	; 0x28
 8005fb6:	3307      	adds	r3, #7
 8005fb8:	f023 0307 	bic.w	r3, r3, #7
 8005fbc:	f103 0208 	add.w	r2, r3, #8
 8005fc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005fc4:	f8d4 b000 	ldr.w	fp, [r4]
 8005fc8:	f8c8 2000 	str.w	r2, [r8]
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fd4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005fd8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005fdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fde:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4b9c      	ldr	r3, [pc, #624]	; (8006258 <_printf_float+0x2cc>)
 8005fe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fe8:	f7fa fd10 	bl	8000a0c <__aeabi_dcmpun>
 8005fec:	bb70      	cbnz	r0, 800604c <_printf_float+0xc0>
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	4b98      	ldr	r3, [pc, #608]	; (8006258 <_printf_float+0x2cc>)
 8005ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ff8:	f7fa fcea 	bl	80009d0 <__aeabi_dcmple>
 8005ffc:	bb30      	cbnz	r0, 800604c <_printf_float+0xc0>
 8005ffe:	2200      	movs	r2, #0
 8006000:	2300      	movs	r3, #0
 8006002:	4640      	mov	r0, r8
 8006004:	4651      	mov	r1, sl
 8006006:	f7fa fcd9 	bl	80009bc <__aeabi_dcmplt>
 800600a:	b110      	cbz	r0, 8006012 <_printf_float+0x86>
 800600c:	232d      	movs	r3, #45	; 0x2d
 800600e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006012:	4b92      	ldr	r3, [pc, #584]	; (800625c <_printf_float+0x2d0>)
 8006014:	4892      	ldr	r0, [pc, #584]	; (8006260 <_printf_float+0x2d4>)
 8006016:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800601a:	bf94      	ite	ls
 800601c:	4698      	movls	r8, r3
 800601e:	4680      	movhi	r8, r0
 8006020:	2303      	movs	r3, #3
 8006022:	f04f 0a00 	mov.w	sl, #0
 8006026:	6123      	str	r3, [r4, #16]
 8006028:	f02b 0304 	bic.w	r3, fp, #4
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	4633      	mov	r3, r6
 8006030:	4621      	mov	r1, r4
 8006032:	4628      	mov	r0, r5
 8006034:	9700      	str	r7, [sp, #0]
 8006036:	aa0f      	add	r2, sp, #60	; 0x3c
 8006038:	f000 f9d4 	bl	80063e4 <_printf_common>
 800603c:	3001      	adds	r0, #1
 800603e:	f040 8090 	bne.w	8006162 <_printf_float+0x1d6>
 8006042:	f04f 30ff 	mov.w	r0, #4294967295
 8006046:	b011      	add	sp, #68	; 0x44
 8006048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604c:	4642      	mov	r2, r8
 800604e:	4653      	mov	r3, sl
 8006050:	4640      	mov	r0, r8
 8006052:	4651      	mov	r1, sl
 8006054:	f7fa fcda 	bl	8000a0c <__aeabi_dcmpun>
 8006058:	b148      	cbz	r0, 800606e <_printf_float+0xe2>
 800605a:	f1ba 0f00 	cmp.w	sl, #0
 800605e:	bfb8      	it	lt
 8006060:	232d      	movlt	r3, #45	; 0x2d
 8006062:	4880      	ldr	r0, [pc, #512]	; (8006264 <_printf_float+0x2d8>)
 8006064:	bfb8      	it	lt
 8006066:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800606a:	4b7f      	ldr	r3, [pc, #508]	; (8006268 <_printf_float+0x2dc>)
 800606c:	e7d3      	b.n	8006016 <_printf_float+0x8a>
 800606e:	6863      	ldr	r3, [r4, #4]
 8006070:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	d142      	bne.n	80060fe <_printf_float+0x172>
 8006078:	2306      	movs	r3, #6
 800607a:	6063      	str	r3, [r4, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	9206      	str	r2, [sp, #24]
 8006080:	aa0e      	add	r2, sp, #56	; 0x38
 8006082:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006086:	aa0d      	add	r2, sp, #52	; 0x34
 8006088:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800608c:	9203      	str	r2, [sp, #12]
 800608e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006092:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	6863      	ldr	r3, [r4, #4]
 800609a:	4642      	mov	r2, r8
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4628      	mov	r0, r5
 80060a0:	4653      	mov	r3, sl
 80060a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80060a4:	f7ff fed4 	bl	8005e50 <__cvt>
 80060a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060aa:	4680      	mov	r8, r0
 80060ac:	2947      	cmp	r1, #71	; 0x47
 80060ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060b0:	d108      	bne.n	80060c4 <_printf_float+0x138>
 80060b2:	1cc8      	adds	r0, r1, #3
 80060b4:	db02      	blt.n	80060bc <_printf_float+0x130>
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	4299      	cmp	r1, r3
 80060ba:	dd40      	ble.n	800613e <_printf_float+0x1b2>
 80060bc:	f1a9 0902 	sub.w	r9, r9, #2
 80060c0:	fa5f f989 	uxtb.w	r9, r9
 80060c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80060c8:	d81f      	bhi.n	800610a <_printf_float+0x17e>
 80060ca:	464a      	mov	r2, r9
 80060cc:	3901      	subs	r1, #1
 80060ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060d2:	910d      	str	r1, [sp, #52]	; 0x34
 80060d4:	f7ff ff1b 	bl	8005f0e <__exponent>
 80060d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060da:	4682      	mov	sl, r0
 80060dc:	1813      	adds	r3, r2, r0
 80060de:	2a01      	cmp	r2, #1
 80060e0:	6123      	str	r3, [r4, #16]
 80060e2:	dc02      	bgt.n	80060ea <_printf_float+0x15e>
 80060e4:	6822      	ldr	r2, [r4, #0]
 80060e6:	07d2      	lsls	r2, r2, #31
 80060e8:	d501      	bpl.n	80060ee <_printf_float+0x162>
 80060ea:	3301      	adds	r3, #1
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d09b      	beq.n	800602e <_printf_float+0xa2>
 80060f6:	232d      	movs	r3, #45	; 0x2d
 80060f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fc:	e797      	b.n	800602e <_printf_float+0xa2>
 80060fe:	2947      	cmp	r1, #71	; 0x47
 8006100:	d1bc      	bne.n	800607c <_printf_float+0xf0>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ba      	bne.n	800607c <_printf_float+0xf0>
 8006106:	2301      	movs	r3, #1
 8006108:	e7b7      	b.n	800607a <_printf_float+0xee>
 800610a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800610e:	d118      	bne.n	8006142 <_printf_float+0x1b6>
 8006110:	2900      	cmp	r1, #0
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	dd0b      	ble.n	800612e <_printf_float+0x1a2>
 8006116:	6121      	str	r1, [r4, #16]
 8006118:	b913      	cbnz	r3, 8006120 <_printf_float+0x194>
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	07d0      	lsls	r0, r2, #31
 800611e:	d502      	bpl.n	8006126 <_printf_float+0x19a>
 8006120:	3301      	adds	r3, #1
 8006122:	440b      	add	r3, r1
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	f04f 0a00 	mov.w	sl, #0
 800612a:	65a1      	str	r1, [r4, #88]	; 0x58
 800612c:	e7df      	b.n	80060ee <_printf_float+0x162>
 800612e:	b913      	cbnz	r3, 8006136 <_printf_float+0x1aa>
 8006130:	6822      	ldr	r2, [r4, #0]
 8006132:	07d2      	lsls	r2, r2, #31
 8006134:	d501      	bpl.n	800613a <_printf_float+0x1ae>
 8006136:	3302      	adds	r3, #2
 8006138:	e7f4      	b.n	8006124 <_printf_float+0x198>
 800613a:	2301      	movs	r3, #1
 800613c:	e7f2      	b.n	8006124 <_printf_float+0x198>
 800613e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006144:	4299      	cmp	r1, r3
 8006146:	db05      	blt.n	8006154 <_printf_float+0x1c8>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	6121      	str	r1, [r4, #16]
 800614c:	07d8      	lsls	r0, r3, #31
 800614e:	d5ea      	bpl.n	8006126 <_printf_float+0x19a>
 8006150:	1c4b      	adds	r3, r1, #1
 8006152:	e7e7      	b.n	8006124 <_printf_float+0x198>
 8006154:	2900      	cmp	r1, #0
 8006156:	bfcc      	ite	gt
 8006158:	2201      	movgt	r2, #1
 800615a:	f1c1 0202 	rsble	r2, r1, #2
 800615e:	4413      	add	r3, r2
 8006160:	e7e0      	b.n	8006124 <_printf_float+0x198>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	055a      	lsls	r2, r3, #21
 8006166:	d407      	bmi.n	8006178 <_printf_float+0x1ec>
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	4642      	mov	r2, r8
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	d12b      	bne.n	80061ce <_printf_float+0x242>
 8006176:	e764      	b.n	8006042 <_printf_float+0xb6>
 8006178:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800617c:	f240 80dd 	bls.w	800633a <_printf_float+0x3ae>
 8006180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006184:	2200      	movs	r2, #0
 8006186:	2300      	movs	r3, #0
 8006188:	f7fa fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800618c:	2800      	cmp	r0, #0
 800618e:	d033      	beq.n	80061f8 <_printf_float+0x26c>
 8006190:	2301      	movs	r3, #1
 8006192:	4631      	mov	r1, r6
 8006194:	4628      	mov	r0, r5
 8006196:	4a35      	ldr	r2, [pc, #212]	; (800626c <_printf_float+0x2e0>)
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	f43f af51 	beq.w	8006042 <_printf_float+0xb6>
 80061a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061a4:	429a      	cmp	r2, r3
 80061a6:	db02      	blt.n	80061ae <_printf_float+0x222>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	07d8      	lsls	r0, r3, #31
 80061ac:	d50f      	bpl.n	80061ce <_printf_float+0x242>
 80061ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	f43f af42 	beq.w	8006042 <_printf_float+0xb6>
 80061be:	f04f 0800 	mov.w	r8, #0
 80061c2:	f104 091a 	add.w	r9, r4, #26
 80061c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c8:	3b01      	subs	r3, #1
 80061ca:	4543      	cmp	r3, r8
 80061cc:	dc09      	bgt.n	80061e2 <_printf_float+0x256>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	079b      	lsls	r3, r3, #30
 80061d2:	f100 8102 	bmi.w	80063da <_printf_float+0x44e>
 80061d6:	68e0      	ldr	r0, [r4, #12]
 80061d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061da:	4298      	cmp	r0, r3
 80061dc:	bfb8      	it	lt
 80061de:	4618      	movlt	r0, r3
 80061e0:	e731      	b.n	8006046 <_printf_float+0xba>
 80061e2:	2301      	movs	r3, #1
 80061e4:	464a      	mov	r2, r9
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f af28 	beq.w	8006042 <_printf_float+0xb6>
 80061f2:	f108 0801 	add.w	r8, r8, #1
 80061f6:	e7e6      	b.n	80061c6 <_printf_float+0x23a>
 80061f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dc38      	bgt.n	8006270 <_printf_float+0x2e4>
 80061fe:	2301      	movs	r3, #1
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	4a19      	ldr	r2, [pc, #100]	; (800626c <_printf_float+0x2e0>)
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	f43f af1a 	beq.w	8006042 <_printf_float+0xb6>
 800620e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006212:	4313      	orrs	r3, r2
 8006214:	d102      	bne.n	800621c <_printf_float+0x290>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	07d9      	lsls	r1, r3, #31
 800621a:	d5d8      	bpl.n	80061ce <_printf_float+0x242>
 800621c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f af0b 	beq.w	8006042 <_printf_float+0xb6>
 800622c:	f04f 0900 	mov.w	r9, #0
 8006230:	f104 0a1a 	add.w	sl, r4, #26
 8006234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006236:	425b      	negs	r3, r3
 8006238:	454b      	cmp	r3, r9
 800623a:	dc01      	bgt.n	8006240 <_printf_float+0x2b4>
 800623c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800623e:	e794      	b.n	800616a <_printf_float+0x1de>
 8006240:	2301      	movs	r3, #1
 8006242:	4652      	mov	r2, sl
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	f43f aef9 	beq.w	8006042 <_printf_float+0xb6>
 8006250:	f109 0901 	add.w	r9, r9, #1
 8006254:	e7ee      	b.n	8006234 <_printf_float+0x2a8>
 8006256:	bf00      	nop
 8006258:	7fefffff 	.word	0x7fefffff
 800625c:	08008ad8 	.word	0x08008ad8
 8006260:	08008adc 	.word	0x08008adc
 8006264:	08008ae4 	.word	0x08008ae4
 8006268:	08008ae0 	.word	0x08008ae0
 800626c:	08008ae8 	.word	0x08008ae8
 8006270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006274:	429a      	cmp	r2, r3
 8006276:	bfa8      	it	ge
 8006278:	461a      	movge	r2, r3
 800627a:	2a00      	cmp	r2, #0
 800627c:	4691      	mov	r9, r2
 800627e:	dc37      	bgt.n	80062f0 <_printf_float+0x364>
 8006280:	f04f 0b00 	mov.w	fp, #0
 8006284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006288:	f104 021a 	add.w	r2, r4, #26
 800628c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006290:	ebaa 0309 	sub.w	r3, sl, r9
 8006294:	455b      	cmp	r3, fp
 8006296:	dc33      	bgt.n	8006300 <_printf_float+0x374>
 8006298:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800629c:	429a      	cmp	r2, r3
 800629e:	db3b      	blt.n	8006318 <_printf_float+0x38c>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07da      	lsls	r2, r3, #31
 80062a4:	d438      	bmi.n	8006318 <_printf_float+0x38c>
 80062a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062aa:	eba3 020a 	sub.w	r2, r3, sl
 80062ae:	eba3 0901 	sub.w	r9, r3, r1
 80062b2:	4591      	cmp	r9, r2
 80062b4:	bfa8      	it	ge
 80062b6:	4691      	movge	r9, r2
 80062b8:	f1b9 0f00 	cmp.w	r9, #0
 80062bc:	dc34      	bgt.n	8006328 <_printf_float+0x39c>
 80062be:	f04f 0800 	mov.w	r8, #0
 80062c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062c6:	f104 0a1a 	add.w	sl, r4, #26
 80062ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	eba3 0309 	sub.w	r3, r3, r9
 80062d4:	4543      	cmp	r3, r8
 80062d6:	f77f af7a 	ble.w	80061ce <_printf_float+0x242>
 80062da:	2301      	movs	r3, #1
 80062dc:	4652      	mov	r2, sl
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	f43f aeac 	beq.w	8006042 <_printf_float+0xb6>
 80062ea:	f108 0801 	add.w	r8, r8, #1
 80062ee:	e7ec      	b.n	80062ca <_printf_float+0x33e>
 80062f0:	4613      	mov	r3, r2
 80062f2:	4631      	mov	r1, r6
 80062f4:	4642      	mov	r2, r8
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	d1c0      	bne.n	8006280 <_printf_float+0x2f4>
 80062fe:	e6a0      	b.n	8006042 <_printf_float+0xb6>
 8006300:	2301      	movs	r3, #1
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	920b      	str	r2, [sp, #44]	; 0x2c
 8006308:	47b8      	blx	r7
 800630a:	3001      	adds	r0, #1
 800630c:	f43f ae99 	beq.w	8006042 <_printf_float+0xb6>
 8006310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006312:	f10b 0b01 	add.w	fp, fp, #1
 8006316:	e7b9      	b.n	800628c <_printf_float+0x300>
 8006318:	4631      	mov	r1, r6
 800631a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	d1bf      	bne.n	80062a6 <_printf_float+0x31a>
 8006326:	e68c      	b.n	8006042 <_printf_float+0xb6>
 8006328:	464b      	mov	r3, r9
 800632a:	4631      	mov	r1, r6
 800632c:	4628      	mov	r0, r5
 800632e:	eb08 020a 	add.w	r2, r8, sl
 8006332:	47b8      	blx	r7
 8006334:	3001      	adds	r0, #1
 8006336:	d1c2      	bne.n	80062be <_printf_float+0x332>
 8006338:	e683      	b.n	8006042 <_printf_float+0xb6>
 800633a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800633c:	2a01      	cmp	r2, #1
 800633e:	dc01      	bgt.n	8006344 <_printf_float+0x3b8>
 8006340:	07db      	lsls	r3, r3, #31
 8006342:	d537      	bpl.n	80063b4 <_printf_float+0x428>
 8006344:	2301      	movs	r3, #1
 8006346:	4642      	mov	r2, r8
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f ae77 	beq.w	8006042 <_printf_float+0xb6>
 8006354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	f43f ae6f 	beq.w	8006042 <_printf_float+0xb6>
 8006364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006368:	2200      	movs	r2, #0
 800636a:	2300      	movs	r3, #0
 800636c:	f7fa fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8006370:	b9d8      	cbnz	r0, 80063aa <_printf_float+0x41e>
 8006372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006374:	f108 0201 	add.w	r2, r8, #1
 8006378:	3b01      	subs	r3, #1
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	d10e      	bne.n	80063a2 <_printf_float+0x416>
 8006384:	e65d      	b.n	8006042 <_printf_float+0xb6>
 8006386:	2301      	movs	r3, #1
 8006388:	464a      	mov	r2, r9
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	f43f ae56 	beq.w	8006042 <_printf_float+0xb6>
 8006396:	f108 0801 	add.w	r8, r8, #1
 800639a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800639c:	3b01      	subs	r3, #1
 800639e:	4543      	cmp	r3, r8
 80063a0:	dcf1      	bgt.n	8006386 <_printf_float+0x3fa>
 80063a2:	4653      	mov	r3, sl
 80063a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063a8:	e6e0      	b.n	800616c <_printf_float+0x1e0>
 80063aa:	f04f 0800 	mov.w	r8, #0
 80063ae:	f104 091a 	add.w	r9, r4, #26
 80063b2:	e7f2      	b.n	800639a <_printf_float+0x40e>
 80063b4:	2301      	movs	r3, #1
 80063b6:	4642      	mov	r2, r8
 80063b8:	e7df      	b.n	800637a <_printf_float+0x3ee>
 80063ba:	2301      	movs	r3, #1
 80063bc:	464a      	mov	r2, r9
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	47b8      	blx	r7
 80063c4:	3001      	adds	r0, #1
 80063c6:	f43f ae3c 	beq.w	8006042 <_printf_float+0xb6>
 80063ca:	f108 0801 	add.w	r8, r8, #1
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063d2:	1a5b      	subs	r3, r3, r1
 80063d4:	4543      	cmp	r3, r8
 80063d6:	dcf0      	bgt.n	80063ba <_printf_float+0x42e>
 80063d8:	e6fd      	b.n	80061d6 <_printf_float+0x24a>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	f104 0919 	add.w	r9, r4, #25
 80063e2:	e7f4      	b.n	80063ce <_printf_float+0x442>

080063e4 <_printf_common>:
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	4616      	mov	r6, r2
 80063ea:	4699      	mov	r9, r3
 80063ec:	688a      	ldr	r2, [r1, #8]
 80063ee:	690b      	ldr	r3, [r1, #16]
 80063f0:	4607      	mov	r7, r0
 80063f2:	4293      	cmp	r3, r2
 80063f4:	bfb8      	it	lt
 80063f6:	4613      	movlt	r3, r2
 80063f8:	6033      	str	r3, [r6, #0]
 80063fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063fe:	460c      	mov	r4, r1
 8006400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006404:	b10a      	cbz	r2, 800640a <_printf_common+0x26>
 8006406:	3301      	adds	r3, #1
 8006408:	6033      	str	r3, [r6, #0]
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	0699      	lsls	r1, r3, #26
 800640e:	bf42      	ittt	mi
 8006410:	6833      	ldrmi	r3, [r6, #0]
 8006412:	3302      	addmi	r3, #2
 8006414:	6033      	strmi	r3, [r6, #0]
 8006416:	6825      	ldr	r5, [r4, #0]
 8006418:	f015 0506 	ands.w	r5, r5, #6
 800641c:	d106      	bne.n	800642c <_printf_common+0x48>
 800641e:	f104 0a19 	add.w	sl, r4, #25
 8006422:	68e3      	ldr	r3, [r4, #12]
 8006424:	6832      	ldr	r2, [r6, #0]
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	42ab      	cmp	r3, r5
 800642a:	dc28      	bgt.n	800647e <_printf_common+0x9a>
 800642c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006430:	1e13      	subs	r3, r2, #0
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	bf18      	it	ne
 8006436:	2301      	movne	r3, #1
 8006438:	0692      	lsls	r2, r2, #26
 800643a:	d42d      	bmi.n	8006498 <_printf_common+0xb4>
 800643c:	4649      	mov	r1, r9
 800643e:	4638      	mov	r0, r7
 8006440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006444:	47c0      	blx	r8
 8006446:	3001      	adds	r0, #1
 8006448:	d020      	beq.n	800648c <_printf_common+0xa8>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	68e5      	ldr	r5, [r4, #12]
 800644e:	f003 0306 	and.w	r3, r3, #6
 8006452:	2b04      	cmp	r3, #4
 8006454:	bf18      	it	ne
 8006456:	2500      	movne	r5, #0
 8006458:	6832      	ldr	r2, [r6, #0]
 800645a:	f04f 0600 	mov.w	r6, #0
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	bf08      	it	eq
 8006462:	1aad      	subeq	r5, r5, r2
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	bf08      	it	eq
 8006468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800646c:	4293      	cmp	r3, r2
 800646e:	bfc4      	itt	gt
 8006470:	1a9b      	subgt	r3, r3, r2
 8006472:	18ed      	addgt	r5, r5, r3
 8006474:	341a      	adds	r4, #26
 8006476:	42b5      	cmp	r5, r6
 8006478:	d11a      	bne.n	80064b0 <_printf_common+0xcc>
 800647a:	2000      	movs	r0, #0
 800647c:	e008      	b.n	8006490 <_printf_common+0xac>
 800647e:	2301      	movs	r3, #1
 8006480:	4652      	mov	r2, sl
 8006482:	4649      	mov	r1, r9
 8006484:	4638      	mov	r0, r7
 8006486:	47c0      	blx	r8
 8006488:	3001      	adds	r0, #1
 800648a:	d103      	bne.n	8006494 <_printf_common+0xb0>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	3501      	adds	r5, #1
 8006496:	e7c4      	b.n	8006422 <_printf_common+0x3e>
 8006498:	2030      	movs	r0, #48	; 0x30
 800649a:	18e1      	adds	r1, r4, r3
 800649c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a6:	4422      	add	r2, r4
 80064a8:	3302      	adds	r3, #2
 80064aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064ae:	e7c5      	b.n	800643c <_printf_common+0x58>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4622      	mov	r2, r4
 80064b4:	4649      	mov	r1, r9
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c0      	blx	r8
 80064ba:	3001      	adds	r0, #1
 80064bc:	d0e6      	beq.n	800648c <_printf_common+0xa8>
 80064be:	3601      	adds	r6, #1
 80064c0:	e7d9      	b.n	8006476 <_printf_common+0x92>
	...

080064c4 <_printf_i>:
 80064c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	7e0f      	ldrb	r7, [r1, #24]
 80064ca:	4691      	mov	r9, r2
 80064cc:	2f78      	cmp	r7, #120	; 0x78
 80064ce:	4680      	mov	r8, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	469a      	mov	sl, r3
 80064d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064da:	d807      	bhi.n	80064ec <_printf_i+0x28>
 80064dc:	2f62      	cmp	r7, #98	; 0x62
 80064de:	d80a      	bhi.n	80064f6 <_printf_i+0x32>
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	f000 80d9 	beq.w	8006698 <_printf_i+0x1d4>
 80064e6:	2f58      	cmp	r7, #88	; 0x58
 80064e8:	f000 80a4 	beq.w	8006634 <_printf_i+0x170>
 80064ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f4:	e03a      	b.n	800656c <_printf_i+0xa8>
 80064f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064fa:	2b15      	cmp	r3, #21
 80064fc:	d8f6      	bhi.n	80064ec <_printf_i+0x28>
 80064fe:	a101      	add	r1, pc, #4	; (adr r1, 8006504 <_printf_i+0x40>)
 8006500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006504:	0800655d 	.word	0x0800655d
 8006508:	08006571 	.word	0x08006571
 800650c:	080064ed 	.word	0x080064ed
 8006510:	080064ed 	.word	0x080064ed
 8006514:	080064ed 	.word	0x080064ed
 8006518:	080064ed 	.word	0x080064ed
 800651c:	08006571 	.word	0x08006571
 8006520:	080064ed 	.word	0x080064ed
 8006524:	080064ed 	.word	0x080064ed
 8006528:	080064ed 	.word	0x080064ed
 800652c:	080064ed 	.word	0x080064ed
 8006530:	0800667f 	.word	0x0800667f
 8006534:	080065a1 	.word	0x080065a1
 8006538:	08006661 	.word	0x08006661
 800653c:	080064ed 	.word	0x080064ed
 8006540:	080064ed 	.word	0x080064ed
 8006544:	080066a1 	.word	0x080066a1
 8006548:	080064ed 	.word	0x080064ed
 800654c:	080065a1 	.word	0x080065a1
 8006550:	080064ed 	.word	0x080064ed
 8006554:	080064ed 	.word	0x080064ed
 8006558:	08006669 	.word	0x08006669
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	602a      	str	r2, [r5, #0]
 8006564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e0a4      	b.n	80066ba <_printf_i+0x1f6>
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	6829      	ldr	r1, [r5, #0]
 8006574:	0606      	lsls	r6, r0, #24
 8006576:	f101 0304 	add.w	r3, r1, #4
 800657a:	d50a      	bpl.n	8006592 <_printf_i+0xce>
 800657c:	680e      	ldr	r6, [r1, #0]
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	2e00      	cmp	r6, #0
 8006582:	da03      	bge.n	800658c <_printf_i+0xc8>
 8006584:	232d      	movs	r3, #45	; 0x2d
 8006586:	4276      	negs	r6, r6
 8006588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658c:	230a      	movs	r3, #10
 800658e:	485e      	ldr	r0, [pc, #376]	; (8006708 <_printf_i+0x244>)
 8006590:	e019      	b.n	80065c6 <_printf_i+0x102>
 8006592:	680e      	ldr	r6, [r1, #0]
 8006594:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	bf18      	it	ne
 800659c:	b236      	sxthne	r6, r6
 800659e:	e7ef      	b.n	8006580 <_printf_i+0xbc>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	1d19      	adds	r1, r3, #4
 80065a6:	6029      	str	r1, [r5, #0]
 80065a8:	0601      	lsls	r1, r0, #24
 80065aa:	d501      	bpl.n	80065b0 <_printf_i+0xec>
 80065ac:	681e      	ldr	r6, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <_printf_i+0xf2>
 80065b0:	0646      	lsls	r6, r0, #25
 80065b2:	d5fb      	bpl.n	80065ac <_printf_i+0xe8>
 80065b4:	881e      	ldrh	r6, [r3, #0]
 80065b6:	2f6f      	cmp	r7, #111	; 0x6f
 80065b8:	bf0c      	ite	eq
 80065ba:	2308      	moveq	r3, #8
 80065bc:	230a      	movne	r3, #10
 80065be:	4852      	ldr	r0, [pc, #328]	; (8006708 <_printf_i+0x244>)
 80065c0:	2100      	movs	r1, #0
 80065c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c6:	6865      	ldr	r5, [r4, #4]
 80065c8:	2d00      	cmp	r5, #0
 80065ca:	bfa8      	it	ge
 80065cc:	6821      	ldrge	r1, [r4, #0]
 80065ce:	60a5      	str	r5, [r4, #8]
 80065d0:	bfa4      	itt	ge
 80065d2:	f021 0104 	bicge.w	r1, r1, #4
 80065d6:	6021      	strge	r1, [r4, #0]
 80065d8:	b90e      	cbnz	r6, 80065de <_printf_i+0x11a>
 80065da:	2d00      	cmp	r5, #0
 80065dc:	d04d      	beq.n	800667a <_printf_i+0x1b6>
 80065de:	4615      	mov	r5, r2
 80065e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80065e4:	fb03 6711 	mls	r7, r3, r1, r6
 80065e8:	5dc7      	ldrb	r7, [r0, r7]
 80065ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065ee:	4637      	mov	r7, r6
 80065f0:	42bb      	cmp	r3, r7
 80065f2:	460e      	mov	r6, r1
 80065f4:	d9f4      	bls.n	80065e0 <_printf_i+0x11c>
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d10b      	bne.n	8006612 <_printf_i+0x14e>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	07de      	lsls	r6, r3, #31
 80065fe:	d508      	bpl.n	8006612 <_printf_i+0x14e>
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	6861      	ldr	r1, [r4, #4]
 8006604:	4299      	cmp	r1, r3
 8006606:	bfde      	ittt	le
 8006608:	2330      	movle	r3, #48	; 0x30
 800660a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800660e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006612:	1b52      	subs	r2, r2, r5
 8006614:	6122      	str	r2, [r4, #16]
 8006616:	464b      	mov	r3, r9
 8006618:	4621      	mov	r1, r4
 800661a:	4640      	mov	r0, r8
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	aa03      	add	r2, sp, #12
 8006622:	f7ff fedf 	bl	80063e4 <_printf_common>
 8006626:	3001      	adds	r0, #1
 8006628:	d14c      	bne.n	80066c4 <_printf_i+0x200>
 800662a:	f04f 30ff 	mov.w	r0, #4294967295
 800662e:	b004      	add	sp, #16
 8006630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006634:	4834      	ldr	r0, [pc, #208]	; (8006708 <_printf_i+0x244>)
 8006636:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800663a:	6829      	ldr	r1, [r5, #0]
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006642:	6029      	str	r1, [r5, #0]
 8006644:	061d      	lsls	r5, r3, #24
 8006646:	d514      	bpl.n	8006672 <_printf_i+0x1ae>
 8006648:	07df      	lsls	r7, r3, #31
 800664a:	bf44      	itt	mi
 800664c:	f043 0320 	orrmi.w	r3, r3, #32
 8006650:	6023      	strmi	r3, [r4, #0]
 8006652:	b91e      	cbnz	r6, 800665c <_printf_i+0x198>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	f023 0320 	bic.w	r3, r3, #32
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	2310      	movs	r3, #16
 800665e:	e7af      	b.n	80065c0 <_printf_i+0xfc>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	f043 0320 	orr.w	r3, r3, #32
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	2378      	movs	r3, #120	; 0x78
 800666a:	4828      	ldr	r0, [pc, #160]	; (800670c <_printf_i+0x248>)
 800666c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006670:	e7e3      	b.n	800663a <_printf_i+0x176>
 8006672:	0659      	lsls	r1, r3, #25
 8006674:	bf48      	it	mi
 8006676:	b2b6      	uxthmi	r6, r6
 8006678:	e7e6      	b.n	8006648 <_printf_i+0x184>
 800667a:	4615      	mov	r5, r2
 800667c:	e7bb      	b.n	80065f6 <_printf_i+0x132>
 800667e:	682b      	ldr	r3, [r5, #0]
 8006680:	6826      	ldr	r6, [r4, #0]
 8006682:	1d18      	adds	r0, r3, #4
 8006684:	6961      	ldr	r1, [r4, #20]
 8006686:	6028      	str	r0, [r5, #0]
 8006688:	0635      	lsls	r5, r6, #24
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	d501      	bpl.n	8006692 <_printf_i+0x1ce>
 800668e:	6019      	str	r1, [r3, #0]
 8006690:	e002      	b.n	8006698 <_printf_i+0x1d4>
 8006692:	0670      	lsls	r0, r6, #25
 8006694:	d5fb      	bpl.n	800668e <_printf_i+0x1ca>
 8006696:	8019      	strh	r1, [r3, #0]
 8006698:	2300      	movs	r3, #0
 800669a:	4615      	mov	r5, r2
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	e7ba      	b.n	8006616 <_printf_i+0x152>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	2100      	movs	r1, #0
 80066a4:	1d1a      	adds	r2, r3, #4
 80066a6:	602a      	str	r2, [r5, #0]
 80066a8:	681d      	ldr	r5, [r3, #0]
 80066aa:	6862      	ldr	r2, [r4, #4]
 80066ac:	4628      	mov	r0, r5
 80066ae:	f000 fedd 	bl	800746c <memchr>
 80066b2:	b108      	cbz	r0, 80066b8 <_printf_i+0x1f4>
 80066b4:	1b40      	subs	r0, r0, r5
 80066b6:	6060      	str	r0, [r4, #4]
 80066b8:	6863      	ldr	r3, [r4, #4]
 80066ba:	6123      	str	r3, [r4, #16]
 80066bc:	2300      	movs	r3, #0
 80066be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c2:	e7a8      	b.n	8006616 <_printf_i+0x152>
 80066c4:	462a      	mov	r2, r5
 80066c6:	4649      	mov	r1, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	47d0      	blx	sl
 80066ce:	3001      	adds	r0, #1
 80066d0:	d0ab      	beq.n	800662a <_printf_i+0x166>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	079b      	lsls	r3, r3, #30
 80066d6:	d413      	bmi.n	8006700 <_printf_i+0x23c>
 80066d8:	68e0      	ldr	r0, [r4, #12]
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	4298      	cmp	r0, r3
 80066de:	bfb8      	it	lt
 80066e0:	4618      	movlt	r0, r3
 80066e2:	e7a4      	b.n	800662e <_printf_i+0x16a>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4632      	mov	r2, r6
 80066e8:	4649      	mov	r1, r9
 80066ea:	4640      	mov	r0, r8
 80066ec:	47d0      	blx	sl
 80066ee:	3001      	adds	r0, #1
 80066f0:	d09b      	beq.n	800662a <_printf_i+0x166>
 80066f2:	3501      	adds	r5, #1
 80066f4:	68e3      	ldr	r3, [r4, #12]
 80066f6:	9903      	ldr	r1, [sp, #12]
 80066f8:	1a5b      	subs	r3, r3, r1
 80066fa:	42ab      	cmp	r3, r5
 80066fc:	dcf2      	bgt.n	80066e4 <_printf_i+0x220>
 80066fe:	e7eb      	b.n	80066d8 <_printf_i+0x214>
 8006700:	2500      	movs	r5, #0
 8006702:	f104 0619 	add.w	r6, r4, #25
 8006706:	e7f5      	b.n	80066f4 <_printf_i+0x230>
 8006708:	08008aea 	.word	0x08008aea
 800670c:	08008afb 	.word	0x08008afb

08006710 <_sbrk_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	2300      	movs	r3, #0
 8006714:	4d05      	ldr	r5, [pc, #20]	; (800672c <_sbrk_r+0x1c>)
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	f7fb fc8a 	bl	8002034 <_sbrk>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_sbrk_r+0x1a>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_sbrk_r+0x1a>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	200004c4 	.word	0x200004c4

08006730 <siprintf>:
 8006730:	b40e      	push	{r1, r2, r3}
 8006732:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006736:	b500      	push	{lr}
 8006738:	b09c      	sub	sp, #112	; 0x70
 800673a:	ab1d      	add	r3, sp, #116	; 0x74
 800673c:	9002      	str	r0, [sp, #8]
 800673e:	9006      	str	r0, [sp, #24]
 8006740:	9107      	str	r1, [sp, #28]
 8006742:	9104      	str	r1, [sp, #16]
 8006744:	4808      	ldr	r0, [pc, #32]	; (8006768 <siprintf+0x38>)
 8006746:	4909      	ldr	r1, [pc, #36]	; (800676c <siprintf+0x3c>)
 8006748:	f853 2b04 	ldr.w	r2, [r3], #4
 800674c:	9105      	str	r1, [sp, #20]
 800674e:	6800      	ldr	r0, [r0, #0]
 8006750:	a902      	add	r1, sp, #8
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	f001 faa4 	bl	8007ca0 <_svfiprintf_r>
 8006758:	2200      	movs	r2, #0
 800675a:	9b02      	ldr	r3, [sp, #8]
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	b01c      	add	sp, #112	; 0x70
 8006760:	f85d eb04 	ldr.w	lr, [sp], #4
 8006764:	b003      	add	sp, #12
 8006766:	4770      	bx	lr
 8006768:	20000010 	.word	0x20000010
 800676c:	ffff0208 	.word	0xffff0208

08006770 <quorem>:
 8006770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	6903      	ldr	r3, [r0, #16]
 8006776:	690c      	ldr	r4, [r1, #16]
 8006778:	4607      	mov	r7, r0
 800677a:	42a3      	cmp	r3, r4
 800677c:	f2c0 8082 	blt.w	8006884 <quorem+0x114>
 8006780:	3c01      	subs	r4, #1
 8006782:	f100 0514 	add.w	r5, r0, #20
 8006786:	f101 0814 	add.w	r8, r1, #20
 800678a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006794:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006798:	3301      	adds	r3, #1
 800679a:	429a      	cmp	r2, r3
 800679c:	fbb2 f6f3 	udiv	r6, r2, r3
 80067a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067a8:	d331      	bcc.n	800680e <quorem+0x9e>
 80067aa:	f04f 0e00 	mov.w	lr, #0
 80067ae:	4640      	mov	r0, r8
 80067b0:	46ac      	mov	ip, r5
 80067b2:	46f2      	mov	sl, lr
 80067b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80067b8:	b293      	uxth	r3, r2
 80067ba:	fb06 e303 	mla	r3, r6, r3, lr
 80067be:	0c12      	lsrs	r2, r2, #16
 80067c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	fb06 e202 	mla	r2, r6, r2, lr
 80067ca:	ebaa 0303 	sub.w	r3, sl, r3
 80067ce:	f8dc a000 	ldr.w	sl, [ip]
 80067d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067d6:	fa1f fa8a 	uxth.w	sl, sl
 80067da:	4453      	add	r3, sl
 80067dc:	f8dc a000 	ldr.w	sl, [ip]
 80067e0:	b292      	uxth	r2, r2
 80067e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067f0:	4581      	cmp	r9, r0
 80067f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067f6:	f84c 3b04 	str.w	r3, [ip], #4
 80067fa:	d2db      	bcs.n	80067b4 <quorem+0x44>
 80067fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006800:	b92b      	cbnz	r3, 800680e <quorem+0x9e>
 8006802:	9b01      	ldr	r3, [sp, #4]
 8006804:	3b04      	subs	r3, #4
 8006806:	429d      	cmp	r5, r3
 8006808:	461a      	mov	r2, r3
 800680a:	d32f      	bcc.n	800686c <quorem+0xfc>
 800680c:	613c      	str	r4, [r7, #16]
 800680e:	4638      	mov	r0, r7
 8006810:	f001 f8d2 	bl	80079b8 <__mcmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	db25      	blt.n	8006864 <quorem+0xf4>
 8006818:	4628      	mov	r0, r5
 800681a:	f04f 0c00 	mov.w	ip, #0
 800681e:	3601      	adds	r6, #1
 8006820:	f858 1b04 	ldr.w	r1, [r8], #4
 8006824:	f8d0 e000 	ldr.w	lr, [r0]
 8006828:	b28b      	uxth	r3, r1
 800682a:	ebac 0303 	sub.w	r3, ip, r3
 800682e:	fa1f f28e 	uxth.w	r2, lr
 8006832:	4413      	add	r3, r2
 8006834:	0c0a      	lsrs	r2, r1, #16
 8006836:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800683a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800683e:	b29b      	uxth	r3, r3
 8006840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006844:	45c1      	cmp	r9, r8
 8006846:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800684a:	f840 3b04 	str.w	r3, [r0], #4
 800684e:	d2e7      	bcs.n	8006820 <quorem+0xb0>
 8006850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006854:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006858:	b922      	cbnz	r2, 8006864 <quorem+0xf4>
 800685a:	3b04      	subs	r3, #4
 800685c:	429d      	cmp	r5, r3
 800685e:	461a      	mov	r2, r3
 8006860:	d30a      	bcc.n	8006878 <quorem+0x108>
 8006862:	613c      	str	r4, [r7, #16]
 8006864:	4630      	mov	r0, r6
 8006866:	b003      	add	sp, #12
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	3b04      	subs	r3, #4
 8006870:	2a00      	cmp	r2, #0
 8006872:	d1cb      	bne.n	800680c <quorem+0x9c>
 8006874:	3c01      	subs	r4, #1
 8006876:	e7c6      	b.n	8006806 <quorem+0x96>
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	3b04      	subs	r3, #4
 800687c:	2a00      	cmp	r2, #0
 800687e:	d1f0      	bne.n	8006862 <quorem+0xf2>
 8006880:	3c01      	subs	r4, #1
 8006882:	e7eb      	b.n	800685c <quorem+0xec>
 8006884:	2000      	movs	r0, #0
 8006886:	e7ee      	b.n	8006866 <quorem+0xf6>

08006888 <_dtoa_r>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	4616      	mov	r6, r2
 800688e:	461f      	mov	r7, r3
 8006890:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006892:	b099      	sub	sp, #100	; 0x64
 8006894:	4605      	mov	r5, r0
 8006896:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800689a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800689e:	b974      	cbnz	r4, 80068be <_dtoa_r+0x36>
 80068a0:	2010      	movs	r0, #16
 80068a2:	f7ff f9e1 	bl	8005c68 <malloc>
 80068a6:	4602      	mov	r2, r0
 80068a8:	6268      	str	r0, [r5, #36]	; 0x24
 80068aa:	b920      	cbnz	r0, 80068b6 <_dtoa_r+0x2e>
 80068ac:	21ea      	movs	r1, #234	; 0xea
 80068ae:	4ba8      	ldr	r3, [pc, #672]	; (8006b50 <_dtoa_r+0x2c8>)
 80068b0:	48a8      	ldr	r0, [pc, #672]	; (8006b54 <_dtoa_r+0x2cc>)
 80068b2:	f001 faf5 	bl	8007ea0 <__assert_func>
 80068b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068ba:	6004      	str	r4, [r0, #0]
 80068bc:	60c4      	str	r4, [r0, #12]
 80068be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	b151      	cbz	r1, 80068da <_dtoa_r+0x52>
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	2301      	movs	r3, #1
 80068c8:	4093      	lsls	r3, r2
 80068ca:	604a      	str	r2, [r1, #4]
 80068cc:	608b      	str	r3, [r1, #8]
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 fe34 	bl	800753c <_Bfree>
 80068d4:	2200      	movs	r2, #0
 80068d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	1e3b      	subs	r3, r7, #0
 80068dc:	bfaf      	iteee	ge
 80068de:	2300      	movge	r3, #0
 80068e0:	2201      	movlt	r2, #1
 80068e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068e6:	9305      	strlt	r3, [sp, #20]
 80068e8:	bfa8      	it	ge
 80068ea:	f8c8 3000 	strge.w	r3, [r8]
 80068ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068f2:	4b99      	ldr	r3, [pc, #612]	; (8006b58 <_dtoa_r+0x2d0>)
 80068f4:	bfb8      	it	lt
 80068f6:	f8c8 2000 	strlt.w	r2, [r8]
 80068fa:	ea33 0309 	bics.w	r3, r3, r9
 80068fe:	d119      	bne.n	8006934 <_dtoa_r+0xac>
 8006900:	f242 730f 	movw	r3, #9999	; 0x270f
 8006904:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800690c:	4333      	orrs	r3, r6
 800690e:	f000 857f 	beq.w	8007410 <_dtoa_r+0xb88>
 8006912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006914:	b953      	cbnz	r3, 800692c <_dtoa_r+0xa4>
 8006916:	4b91      	ldr	r3, [pc, #580]	; (8006b5c <_dtoa_r+0x2d4>)
 8006918:	e022      	b.n	8006960 <_dtoa_r+0xd8>
 800691a:	4b91      	ldr	r3, [pc, #580]	; (8006b60 <_dtoa_r+0x2d8>)
 800691c:	9303      	str	r3, [sp, #12]
 800691e:	3308      	adds	r3, #8
 8006920:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	9803      	ldr	r0, [sp, #12]
 8006926:	b019      	add	sp, #100	; 0x64
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	4b8b      	ldr	r3, [pc, #556]	; (8006b5c <_dtoa_r+0x2d4>)
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	3303      	adds	r3, #3
 8006932:	e7f5      	b.n	8006920 <_dtoa_r+0x98>
 8006934:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006938:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800693c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006940:	2200      	movs	r2, #0
 8006942:	2300      	movs	r3, #0
 8006944:	f7fa f830 	bl	80009a8 <__aeabi_dcmpeq>
 8006948:	4680      	mov	r8, r0
 800694a:	b158      	cbz	r0, 8006964 <_dtoa_r+0xdc>
 800694c:	2301      	movs	r3, #1
 800694e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8558 	beq.w	800740a <_dtoa_r+0xb82>
 800695a:	4882      	ldr	r0, [pc, #520]	; (8006b64 <_dtoa_r+0x2dc>)
 800695c:	6018      	str	r0, [r3, #0]
 800695e:	1e43      	subs	r3, r0, #1
 8006960:	9303      	str	r3, [sp, #12]
 8006962:	e7df      	b.n	8006924 <_dtoa_r+0x9c>
 8006964:	ab16      	add	r3, sp, #88	; 0x58
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	ab17      	add	r3, sp, #92	; 0x5c
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4628      	mov	r0, r5
 800696e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006972:	f001 f8c9 	bl	8007b08 <__d2b>
 8006976:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800697a:	4683      	mov	fp, r0
 800697c:	2c00      	cmp	r4, #0
 800697e:	d07f      	beq.n	8006a80 <_dtoa_r+0x1f8>
 8006980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006986:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800698a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800698e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006992:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006996:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800699a:	2200      	movs	r2, #0
 800699c:	4b72      	ldr	r3, [pc, #456]	; (8006b68 <_dtoa_r+0x2e0>)
 800699e:	f7f9 fbe3 	bl	8000168 <__aeabi_dsub>
 80069a2:	a365      	add	r3, pc, #404	; (adr r3, 8006b38 <_dtoa_r+0x2b0>)
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f7f9 fd96 	bl	80004d8 <__aeabi_dmul>
 80069ac:	a364      	add	r3, pc, #400	; (adr r3, 8006b40 <_dtoa_r+0x2b8>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f7f9 fbdb 	bl	800016c <__adddf3>
 80069b6:	4606      	mov	r6, r0
 80069b8:	4620      	mov	r0, r4
 80069ba:	460f      	mov	r7, r1
 80069bc:	f7f9 fd22 	bl	8000404 <__aeabi_i2d>
 80069c0:	a361      	add	r3, pc, #388	; (adr r3, 8006b48 <_dtoa_r+0x2c0>)
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	f7f9 fd87 	bl	80004d8 <__aeabi_dmul>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4630      	mov	r0, r6
 80069d0:	4639      	mov	r1, r7
 80069d2:	f7f9 fbcb 	bl	800016c <__adddf3>
 80069d6:	4606      	mov	r6, r0
 80069d8:	460f      	mov	r7, r1
 80069da:	f7fa f82d 	bl	8000a38 <__aeabi_d2iz>
 80069de:	2200      	movs	r2, #0
 80069e0:	4682      	mov	sl, r0
 80069e2:	2300      	movs	r3, #0
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	f7f9 ffe8 	bl	80009bc <__aeabi_dcmplt>
 80069ec:	b148      	cbz	r0, 8006a02 <_dtoa_r+0x17a>
 80069ee:	4650      	mov	r0, sl
 80069f0:	f7f9 fd08 	bl	8000404 <__aeabi_i2d>
 80069f4:	4632      	mov	r2, r6
 80069f6:	463b      	mov	r3, r7
 80069f8:	f7f9 ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80069fc:	b908      	cbnz	r0, 8006a02 <_dtoa_r+0x17a>
 80069fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a02:	f1ba 0f16 	cmp.w	sl, #22
 8006a06:	d858      	bhi.n	8006aba <_dtoa_r+0x232>
 8006a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a0c:	4b57      	ldr	r3, [pc, #348]	; (8006b6c <_dtoa_r+0x2e4>)
 8006a0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 ffd1 	bl	80009bc <__aeabi_dcmplt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d04f      	beq.n	8006abe <_dtoa_r+0x236>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a24:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a28:	1b1c      	subs	r4, r3, r4
 8006a2a:	1e63      	subs	r3, r4, #1
 8006a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2e:	bf49      	itett	mi
 8006a30:	f1c4 0301 	rsbmi	r3, r4, #1
 8006a34:	2300      	movpl	r3, #0
 8006a36:	9306      	strmi	r3, [sp, #24]
 8006a38:	2300      	movmi	r3, #0
 8006a3a:	bf54      	ite	pl
 8006a3c:	9306      	strpl	r3, [sp, #24]
 8006a3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006a40:	f1ba 0f00 	cmp.w	sl, #0
 8006a44:	db3d      	blt.n	8006ac2 <_dtoa_r+0x23a>
 8006a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a4c:	4453      	add	r3, sl
 8006a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a50:	2300      	movs	r3, #0
 8006a52:	930a      	str	r3, [sp, #40]	; 0x28
 8006a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	f200 808c 	bhi.w	8006b74 <_dtoa_r+0x2ec>
 8006a5c:	2b05      	cmp	r3, #5
 8006a5e:	bfc4      	itt	gt
 8006a60:	3b04      	subgt	r3, #4
 8006a62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a66:	bfc8      	it	gt
 8006a68:	2400      	movgt	r4, #0
 8006a6a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a6e:	bfd8      	it	le
 8006a70:	2401      	movle	r4, #1
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	f200 808a 	bhi.w	8006b8c <_dtoa_r+0x304>
 8006a78:	e8df f003 	tbb	[pc, r3]
 8006a7c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006a80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a84:	441c      	add	r4, r3
 8006a86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	bfc3      	ittte	gt
 8006a8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a96:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a9a:	f1c3 0320 	rsble	r3, r3, #32
 8006a9e:	bfc6      	itte	gt
 8006aa0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006aa4:	4318      	orrgt	r0, r3
 8006aa6:	fa06 f003 	lslle.w	r0, r6, r3
 8006aaa:	f7f9 fc9b 	bl	80003e4 <__aeabi_ui2d>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006ab4:	3c01      	subs	r4, #1
 8006ab6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ab8:	e76f      	b.n	800699a <_dtoa_r+0x112>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7b2      	b.n	8006a24 <_dtoa_r+0x19c>
 8006abe:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ac0:	e7b1      	b.n	8006a26 <_dtoa_r+0x19e>
 8006ac2:	9b06      	ldr	r3, [sp, #24]
 8006ac4:	eba3 030a 	sub.w	r3, r3, sl
 8006ac8:	9306      	str	r3, [sp, #24]
 8006aca:	f1ca 0300 	rsb	r3, sl, #0
 8006ace:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ad4:	e7be      	b.n	8006a54 <_dtoa_r+0x1cc>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dc58      	bgt.n	8006b92 <_dtoa_r+0x30a>
 8006ae0:	f04f 0901 	mov.w	r9, #1
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006aea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006aee:	2200      	movs	r2, #0
 8006af0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006af2:	6042      	str	r2, [r0, #4]
 8006af4:	2204      	movs	r2, #4
 8006af6:	f102 0614 	add.w	r6, r2, #20
 8006afa:	429e      	cmp	r6, r3
 8006afc:	6841      	ldr	r1, [r0, #4]
 8006afe:	d94e      	bls.n	8006b9e <_dtoa_r+0x316>
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 fcdb 	bl	80074bc <_Balloc>
 8006b06:	9003      	str	r0, [sp, #12]
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d14c      	bne.n	8006ba6 <_dtoa_r+0x31e>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b12:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <_dtoa_r+0x2e8>)
 8006b14:	e6cc      	b.n	80068b0 <_dtoa_r+0x28>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e7de      	b.n	8006ad8 <_dtoa_r+0x250>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b20:	eb0a 0903 	add.w	r9, sl, r3
 8006b24:	f109 0301 	add.w	r3, r9, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	bfb8      	it	lt
 8006b2e:	2301      	movlt	r3, #1
 8006b30:	e7dd      	b.n	8006aee <_dtoa_r+0x266>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e7f2      	b.n	8006b1c <_dtoa_r+0x294>
 8006b36:	bf00      	nop
 8006b38:	636f4361 	.word	0x636f4361
 8006b3c:	3fd287a7 	.word	0x3fd287a7
 8006b40:	8b60c8b3 	.word	0x8b60c8b3
 8006b44:	3fc68a28 	.word	0x3fc68a28
 8006b48:	509f79fb 	.word	0x509f79fb
 8006b4c:	3fd34413 	.word	0x3fd34413
 8006b50:	08008b19 	.word	0x08008b19
 8006b54:	08008b30 	.word	0x08008b30
 8006b58:	7ff00000 	.word	0x7ff00000
 8006b5c:	08008b15 	.word	0x08008b15
 8006b60:	08008b0c 	.word	0x08008b0c
 8006b64:	08008ae9 	.word	0x08008ae9
 8006b68:	3ff80000 	.word	0x3ff80000
 8006b6c:	08008c20 	.word	0x08008c20
 8006b70:	08008b8b 	.word	0x08008b8b
 8006b74:	2401      	movs	r4, #1
 8006b76:	2300      	movs	r3, #0
 8006b78:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b7a:	9322      	str	r3, [sp, #136]	; 0x88
 8006b7c:	f04f 39ff 	mov.w	r9, #4294967295
 8006b80:	2200      	movs	r2, #0
 8006b82:	2312      	movs	r3, #18
 8006b84:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b88:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b8a:	e7b0      	b.n	8006aee <_dtoa_r+0x266>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b90:	e7f4      	b.n	8006b7c <_dtoa_r+0x2f4>
 8006b92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b96:	464b      	mov	r3, r9
 8006b98:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b9c:	e7a7      	b.n	8006aee <_dtoa_r+0x266>
 8006b9e:	3101      	adds	r1, #1
 8006ba0:	6041      	str	r1, [r0, #4]
 8006ba2:	0052      	lsls	r2, r2, #1
 8006ba4:	e7a7      	b.n	8006af6 <_dtoa_r+0x26e>
 8006ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ba8:	9a03      	ldr	r2, [sp, #12]
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	9b08      	ldr	r3, [sp, #32]
 8006bae:	2b0e      	cmp	r3, #14
 8006bb0:	f200 80a8 	bhi.w	8006d04 <_dtoa_r+0x47c>
 8006bb4:	2c00      	cmp	r4, #0
 8006bb6:	f000 80a5 	beq.w	8006d04 <_dtoa_r+0x47c>
 8006bba:	f1ba 0f00 	cmp.w	sl, #0
 8006bbe:	dd34      	ble.n	8006c2a <_dtoa_r+0x3a2>
 8006bc0:	4a9a      	ldr	r2, [pc, #616]	; (8006e2c <_dtoa_r+0x5a4>)
 8006bc2:	f00a 030f 	and.w	r3, sl, #15
 8006bc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006bce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006bd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006bda:	d016      	beq.n	8006c0a <_dtoa_r+0x382>
 8006bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006be0:	4b93      	ldr	r3, [pc, #588]	; (8006e30 <_dtoa_r+0x5a8>)
 8006be2:	2703      	movs	r7, #3
 8006be4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006be8:	f7f9 fda0 	bl	800072c <__aeabi_ddiv>
 8006bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf0:	f004 040f 	and.w	r4, r4, #15
 8006bf4:	4e8e      	ldr	r6, [pc, #568]	; (8006e30 <_dtoa_r+0x5a8>)
 8006bf6:	b954      	cbnz	r4, 8006c0e <_dtoa_r+0x386>
 8006bf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c00:	f7f9 fd94 	bl	800072c <__aeabi_ddiv>
 8006c04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c08:	e029      	b.n	8006c5e <_dtoa_r+0x3d6>
 8006c0a:	2702      	movs	r7, #2
 8006c0c:	e7f2      	b.n	8006bf4 <_dtoa_r+0x36c>
 8006c0e:	07e1      	lsls	r1, r4, #31
 8006c10:	d508      	bpl.n	8006c24 <_dtoa_r+0x39c>
 8006c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c1a:	f7f9 fc5d 	bl	80004d8 <__aeabi_dmul>
 8006c1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c22:	3701      	adds	r7, #1
 8006c24:	1064      	asrs	r4, r4, #1
 8006c26:	3608      	adds	r6, #8
 8006c28:	e7e5      	b.n	8006bf6 <_dtoa_r+0x36e>
 8006c2a:	f000 80a5 	beq.w	8006d78 <_dtoa_r+0x4f0>
 8006c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c32:	f1ca 0400 	rsb	r4, sl, #0
 8006c36:	4b7d      	ldr	r3, [pc, #500]	; (8006e2c <_dtoa_r+0x5a4>)
 8006c38:	f004 020f 	and.w	r2, r4, #15
 8006c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 fc48 	bl	80004d8 <__aeabi_dmul>
 8006c48:	2702      	movs	r7, #2
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c50:	4e77      	ldr	r6, [pc, #476]	; (8006e30 <_dtoa_r+0x5a8>)
 8006c52:	1124      	asrs	r4, r4, #4
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	f040 8084 	bne.w	8006d62 <_dtoa_r+0x4da>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1d2      	bne.n	8006c04 <_dtoa_r+0x37c>
 8006c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 808b 	beq.w	8006d7c <_dtoa_r+0x4f4>
 8006c66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c72:	2200      	movs	r2, #0
 8006c74:	4b6f      	ldr	r3, [pc, #444]	; (8006e34 <_dtoa_r+0x5ac>)
 8006c76:	f7f9 fea1 	bl	80009bc <__aeabi_dcmplt>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d07e      	beq.n	8006d7c <_dtoa_r+0x4f4>
 8006c7e:	9b08      	ldr	r3, [sp, #32]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d07b      	beq.n	8006d7c <_dtoa_r+0x4f4>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	dd38      	ble.n	8006cfc <_dtoa_r+0x474>
 8006c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4b69      	ldr	r3, [pc, #420]	; (8006e38 <_dtoa_r+0x5b0>)
 8006c92:	f7f9 fc21 	bl	80004d8 <__aeabi_dmul>
 8006c96:	464c      	mov	r4, r9
 8006c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c9c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006ca0:	3701      	adds	r7, #1
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	f7f9 fbae 	bl	8000404 <__aeabi_i2d>
 8006ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cac:	f7f9 fc14 	bl	80004d8 <__aeabi_dmul>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4b62      	ldr	r3, [pc, #392]	; (8006e3c <_dtoa_r+0x5b4>)
 8006cb4:	f7f9 fa5a 	bl	800016c <__adddf3>
 8006cb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006cbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cc0:	9611      	str	r6, [sp, #68]	; 0x44
 8006cc2:	2c00      	cmp	r4, #0
 8006cc4:	d15d      	bne.n	8006d82 <_dtoa_r+0x4fa>
 8006cc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4b5c      	ldr	r3, [pc, #368]	; (8006e40 <_dtoa_r+0x5b8>)
 8006cce:	f7f9 fa4b 	bl	8000168 <__aeabi_dsub>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cda:	4633      	mov	r3, r6
 8006cdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cde:	f7f9 fe8b 	bl	80009f8 <__aeabi_dcmpgt>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	f040 829c 	bne.w	8007220 <_dtoa_r+0x998>
 8006ce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006cf2:	f7f9 fe63 	bl	80009bc <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8290 	bne.w	800721c <_dtoa_r+0x994>
 8006cfc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006d00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f2c0 8152 	blt.w	8006fb0 <_dtoa_r+0x728>
 8006d0c:	f1ba 0f0e 	cmp.w	sl, #14
 8006d10:	f300 814e 	bgt.w	8006fb0 <_dtoa_r+0x728>
 8006d14:	4b45      	ldr	r3, [pc, #276]	; (8006e2c <_dtoa_r+0x5a4>)
 8006d16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006d22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f280 80db 	bge.w	8006ee0 <_dtoa_r+0x658>
 8006d2a:	9b08      	ldr	r3, [sp, #32]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f300 80d7 	bgt.w	8006ee0 <_dtoa_r+0x658>
 8006d32:	f040 8272 	bne.w	800721a <_dtoa_r+0x992>
 8006d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	4b40      	ldr	r3, [pc, #256]	; (8006e40 <_dtoa_r+0x5b8>)
 8006d3e:	f7f9 fbcb 	bl	80004d8 <__aeabi_dmul>
 8006d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d46:	f7f9 fe4d 	bl	80009e4 <__aeabi_dcmpge>
 8006d4a:	9c08      	ldr	r4, [sp, #32]
 8006d4c:	4626      	mov	r6, r4
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f040 8248 	bne.w	80071e4 <_dtoa_r+0x95c>
 8006d54:	2331      	movs	r3, #49	; 0x31
 8006d56:	9f03      	ldr	r7, [sp, #12]
 8006d58:	f10a 0a01 	add.w	sl, sl, #1
 8006d5c:	f807 3b01 	strb.w	r3, [r7], #1
 8006d60:	e244      	b.n	80071ec <_dtoa_r+0x964>
 8006d62:	07e2      	lsls	r2, r4, #31
 8006d64:	d505      	bpl.n	8006d72 <_dtoa_r+0x4ea>
 8006d66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d6a:	f7f9 fbb5 	bl	80004d8 <__aeabi_dmul>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	3701      	adds	r7, #1
 8006d72:	1064      	asrs	r4, r4, #1
 8006d74:	3608      	adds	r6, #8
 8006d76:	e76d      	b.n	8006c54 <_dtoa_r+0x3cc>
 8006d78:	2702      	movs	r7, #2
 8006d7a:	e770      	b.n	8006c5e <_dtoa_r+0x3d6>
 8006d7c:	46d0      	mov	r8, sl
 8006d7e:	9c08      	ldr	r4, [sp, #32]
 8006d80:	e78f      	b.n	8006ca2 <_dtoa_r+0x41a>
 8006d82:	9903      	ldr	r1, [sp, #12]
 8006d84:	4b29      	ldr	r3, [pc, #164]	; (8006e2c <_dtoa_r+0x5a4>)
 8006d86:	4421      	add	r1, r4
 8006d88:	9112      	str	r1, [sp, #72]	; 0x48
 8006d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d98:	2900      	cmp	r1, #0
 8006d9a:	d055      	beq.n	8006e48 <_dtoa_r+0x5c0>
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	4929      	ldr	r1, [pc, #164]	; (8006e44 <_dtoa_r+0x5bc>)
 8006da0:	f7f9 fcc4 	bl	800072c <__aeabi_ddiv>
 8006da4:	463b      	mov	r3, r7
 8006da6:	4632      	mov	r2, r6
 8006da8:	f7f9 f9de 	bl	8000168 <__aeabi_dsub>
 8006dac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006db0:	9f03      	ldr	r7, [sp, #12]
 8006db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db6:	f7f9 fe3f 	bl	8000a38 <__aeabi_d2iz>
 8006dba:	4604      	mov	r4, r0
 8006dbc:	f7f9 fb22 	bl	8000404 <__aeabi_i2d>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dc8:	f7f9 f9ce 	bl	8000168 <__aeabi_dsub>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	3430      	adds	r4, #48	; 0x30
 8006dd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dda:	f807 4b01 	strb.w	r4, [r7], #1
 8006dde:	f7f9 fded 	bl	80009bc <__aeabi_dcmplt>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d174      	bne.n	8006ed0 <_dtoa_r+0x648>
 8006de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dea:	2000      	movs	r0, #0
 8006dec:	4911      	ldr	r1, [pc, #68]	; (8006e34 <_dtoa_r+0x5ac>)
 8006dee:	f7f9 f9bb 	bl	8000168 <__aeabi_dsub>
 8006df2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006df6:	f7f9 fde1 	bl	80009bc <__aeabi_dcmplt>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	f040 80b7 	bne.w	8006f6e <_dtoa_r+0x6e6>
 8006e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e02:	429f      	cmp	r7, r3
 8006e04:	f43f af7a 	beq.w	8006cfc <_dtoa_r+0x474>
 8006e08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <_dtoa_r+0x5b0>)
 8006e10:	f7f9 fb62 	bl	80004d8 <__aeabi_dmul>
 8006e14:	2200      	movs	r2, #0
 8006e16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e1e:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <_dtoa_r+0x5b0>)
 8006e20:	f7f9 fb5a 	bl	80004d8 <__aeabi_dmul>
 8006e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e28:	e7c3      	b.n	8006db2 <_dtoa_r+0x52a>
 8006e2a:	bf00      	nop
 8006e2c:	08008c20 	.word	0x08008c20
 8006e30:	08008bf8 	.word	0x08008bf8
 8006e34:	3ff00000 	.word	0x3ff00000
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	401c0000 	.word	0x401c0000
 8006e40:	40140000 	.word	0x40140000
 8006e44:	3fe00000 	.word	0x3fe00000
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fb44 	bl	80004d8 <__aeabi_dmul>
 8006e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e56:	9c03      	ldr	r4, [sp, #12]
 8006e58:	9314      	str	r3, [sp, #80]	; 0x50
 8006e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e5e:	f7f9 fdeb 	bl	8000a38 <__aeabi_d2iz>
 8006e62:	9015      	str	r0, [sp, #84]	; 0x54
 8006e64:	f7f9 face 	bl	8000404 <__aeabi_i2d>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e70:	f7f9 f97a 	bl	8000168 <__aeabi_dsub>
 8006e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e76:	4606      	mov	r6, r0
 8006e78:	3330      	adds	r3, #48	; 0x30
 8006e7a:	f804 3b01 	strb.w	r3, [r4], #1
 8006e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e80:	460f      	mov	r7, r1
 8006e82:	429c      	cmp	r4, r3
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	d124      	bne.n	8006ed4 <_dtoa_r+0x64c>
 8006e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e8e:	4bb0      	ldr	r3, [pc, #704]	; (8007150 <_dtoa_r+0x8c8>)
 8006e90:	f7f9 f96c 	bl	800016c <__adddf3>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 fdac 	bl	80009f8 <__aeabi_dcmpgt>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d163      	bne.n	8006f6c <_dtoa_r+0x6e4>
 8006ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	49a9      	ldr	r1, [pc, #676]	; (8007150 <_dtoa_r+0x8c8>)
 8006eac:	f7f9 f95c 	bl	8000168 <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	f7f9 fd80 	bl	80009bc <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f43f af1d 	beq.w	8006cfc <_dtoa_r+0x474>
 8006ec2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006ec4:	1e7b      	subs	r3, r7, #1
 8006ec6:	9314      	str	r3, [sp, #80]	; 0x50
 8006ec8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006ecc:	2b30      	cmp	r3, #48	; 0x30
 8006ece:	d0f8      	beq.n	8006ec2 <_dtoa_r+0x63a>
 8006ed0:	46c2      	mov	sl, r8
 8006ed2:	e03b      	b.n	8006f4c <_dtoa_r+0x6c4>
 8006ed4:	4b9f      	ldr	r3, [pc, #636]	; (8007154 <_dtoa_r+0x8cc>)
 8006ed6:	f7f9 faff 	bl	80004d8 <__aeabi_dmul>
 8006eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ede:	e7bc      	b.n	8006e5a <_dtoa_r+0x5d2>
 8006ee0:	9f03      	ldr	r7, [sp, #12]
 8006ee2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eea:	4640      	mov	r0, r8
 8006eec:	4649      	mov	r1, r9
 8006eee:	f7f9 fc1d 	bl	800072c <__aeabi_ddiv>
 8006ef2:	f7f9 fda1 	bl	8000a38 <__aeabi_d2iz>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	f7f9 fa84 	bl	8000404 <__aeabi_i2d>
 8006efc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f00:	f7f9 faea 	bl	80004d8 <__aeabi_dmul>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	f7f9 f92c 	bl	8000168 <__aeabi_dsub>
 8006f10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006f14:	f807 6b01 	strb.w	r6, [r7], #1
 8006f18:	9e03      	ldr	r6, [sp, #12]
 8006f1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006f1e:	1bbe      	subs	r6, r7, r6
 8006f20:	45b4      	cmp	ip, r6
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	d136      	bne.n	8006f96 <_dtoa_r+0x70e>
 8006f28:	f7f9 f920 	bl	800016c <__adddf3>
 8006f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f30:	4680      	mov	r8, r0
 8006f32:	4689      	mov	r9, r1
 8006f34:	f7f9 fd60 	bl	80009f8 <__aeabi_dcmpgt>
 8006f38:	bb58      	cbnz	r0, 8006f92 <_dtoa_r+0x70a>
 8006f3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4649      	mov	r1, r9
 8006f42:	f7f9 fd31 	bl	80009a8 <__aeabi_dcmpeq>
 8006f46:	b108      	cbz	r0, 8006f4c <_dtoa_r+0x6c4>
 8006f48:	07e1      	lsls	r1, r4, #31
 8006f4a:	d422      	bmi.n	8006f92 <_dtoa_r+0x70a>
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	4659      	mov	r1, fp
 8006f50:	f000 faf4 	bl	800753c <_Bfree>
 8006f54:	2300      	movs	r3, #0
 8006f56:	703b      	strb	r3, [r7, #0]
 8006f58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f5a:	f10a 0001 	add.w	r0, sl, #1
 8006f5e:	6018      	str	r0, [r3, #0]
 8006f60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f43f acde 	beq.w	8006924 <_dtoa_r+0x9c>
 8006f68:	601f      	str	r7, [r3, #0]
 8006f6a:	e4db      	b.n	8006924 <_dtoa_r+0x9c>
 8006f6c:	4627      	mov	r7, r4
 8006f6e:	463b      	mov	r3, r7
 8006f70:	461f      	mov	r7, r3
 8006f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f76:	2a39      	cmp	r2, #57	; 0x39
 8006f78:	d107      	bne.n	8006f8a <_dtoa_r+0x702>
 8006f7a:	9a03      	ldr	r2, [sp, #12]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d1f7      	bne.n	8006f70 <_dtoa_r+0x6e8>
 8006f80:	2230      	movs	r2, #48	; 0x30
 8006f82:	9903      	ldr	r1, [sp, #12]
 8006f84:	f108 0801 	add.w	r8, r8, #1
 8006f88:	700a      	strb	r2, [r1, #0]
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	3201      	adds	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	e79e      	b.n	8006ed0 <_dtoa_r+0x648>
 8006f92:	46d0      	mov	r8, sl
 8006f94:	e7eb      	b.n	8006f6e <_dtoa_r+0x6e6>
 8006f96:	2200      	movs	r2, #0
 8006f98:	4b6e      	ldr	r3, [pc, #440]	; (8007154 <_dtoa_r+0x8cc>)
 8006f9a:	f7f9 fa9d 	bl	80004d8 <__aeabi_dmul>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4680      	mov	r8, r0
 8006fa4:	4689      	mov	r9, r1
 8006fa6:	f7f9 fcff 	bl	80009a8 <__aeabi_dcmpeq>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d09b      	beq.n	8006ee6 <_dtoa_r+0x65e>
 8006fae:	e7cd      	b.n	8006f4c <_dtoa_r+0x6c4>
 8006fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	f000 80d0 	beq.w	8007158 <_dtoa_r+0x8d0>
 8006fb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006fba:	2a01      	cmp	r2, #1
 8006fbc:	f300 80ae 	bgt.w	800711c <_dtoa_r+0x894>
 8006fc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	f000 80a6 	beq.w	8007114 <_dtoa_r+0x88c>
 8006fc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006fce:	9f06      	ldr	r7, [sp, #24]
 8006fd0:	9a06      	ldr	r2, [sp, #24]
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	441a      	add	r2, r3
 8006fd6:	9206      	str	r2, [sp, #24]
 8006fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fda:	4628      	mov	r0, r5
 8006fdc:	441a      	add	r2, r3
 8006fde:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe0:	f000 fb62 	bl	80076a8 <__i2b>
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	2f00      	cmp	r7, #0
 8006fe8:	dd0c      	ble.n	8007004 <_dtoa_r+0x77c>
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dd09      	ble.n	8007004 <_dtoa_r+0x77c>
 8006ff0:	42bb      	cmp	r3, r7
 8006ff2:	bfa8      	it	ge
 8006ff4:	463b      	movge	r3, r7
 8006ff6:	9a06      	ldr	r2, [sp, #24]
 8006ff8:	1aff      	subs	r7, r7, r3
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	9206      	str	r2, [sp, #24]
 8006ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	9309      	str	r3, [sp, #36]	; 0x24
 8007004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007006:	b1f3      	cbz	r3, 8007046 <_dtoa_r+0x7be>
 8007008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80a8 	beq.w	8007160 <_dtoa_r+0x8d8>
 8007010:	2c00      	cmp	r4, #0
 8007012:	dd10      	ble.n	8007036 <_dtoa_r+0x7ae>
 8007014:	4631      	mov	r1, r6
 8007016:	4622      	mov	r2, r4
 8007018:	4628      	mov	r0, r5
 800701a:	f000 fc03 	bl	8007824 <__pow5mult>
 800701e:	465a      	mov	r2, fp
 8007020:	4601      	mov	r1, r0
 8007022:	4606      	mov	r6, r0
 8007024:	4628      	mov	r0, r5
 8007026:	f000 fb55 	bl	80076d4 <__multiply>
 800702a:	4680      	mov	r8, r0
 800702c:	4659      	mov	r1, fp
 800702e:	4628      	mov	r0, r5
 8007030:	f000 fa84 	bl	800753c <_Bfree>
 8007034:	46c3      	mov	fp, r8
 8007036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007038:	1b1a      	subs	r2, r3, r4
 800703a:	d004      	beq.n	8007046 <_dtoa_r+0x7be>
 800703c:	4659      	mov	r1, fp
 800703e:	4628      	mov	r0, r5
 8007040:	f000 fbf0 	bl	8007824 <__pow5mult>
 8007044:	4683      	mov	fp, r0
 8007046:	2101      	movs	r1, #1
 8007048:	4628      	mov	r0, r5
 800704a:	f000 fb2d 	bl	80076a8 <__i2b>
 800704e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007050:	4604      	mov	r4, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	f340 8086 	ble.w	8007164 <_dtoa_r+0x8dc>
 8007058:	461a      	mov	r2, r3
 800705a:	4601      	mov	r1, r0
 800705c:	4628      	mov	r0, r5
 800705e:	f000 fbe1 	bl	8007824 <__pow5mult>
 8007062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007064:	4604      	mov	r4, r0
 8007066:	2b01      	cmp	r3, #1
 8007068:	dd7f      	ble.n	800716a <_dtoa_r+0x8e2>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007074:	6918      	ldr	r0, [r3, #16]
 8007076:	f000 fac9 	bl	800760c <__hi0bits>
 800707a:	f1c0 0020 	rsb	r0, r0, #32
 800707e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007080:	4418      	add	r0, r3
 8007082:	f010 001f 	ands.w	r0, r0, #31
 8007086:	f000 8092 	beq.w	80071ae <_dtoa_r+0x926>
 800708a:	f1c0 0320 	rsb	r3, r0, #32
 800708e:	2b04      	cmp	r3, #4
 8007090:	f340 808a 	ble.w	80071a8 <_dtoa_r+0x920>
 8007094:	f1c0 001c 	rsb	r0, r0, #28
 8007098:	9b06      	ldr	r3, [sp, #24]
 800709a:	4407      	add	r7, r0
 800709c:	4403      	add	r3, r0
 800709e:	9306      	str	r3, [sp, #24]
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	4403      	add	r3, r0
 80070a4:	9309      	str	r3, [sp, #36]	; 0x24
 80070a6:	9b06      	ldr	r3, [sp, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dd05      	ble.n	80070b8 <_dtoa_r+0x830>
 80070ac:	4659      	mov	r1, fp
 80070ae:	461a      	mov	r2, r3
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 fc11 	bl	80078d8 <__lshift>
 80070b6:	4683      	mov	fp, r0
 80070b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dd05      	ble.n	80070ca <_dtoa_r+0x842>
 80070be:	4621      	mov	r1, r4
 80070c0:	461a      	mov	r2, r3
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 fc08 	bl	80078d8 <__lshift>
 80070c8:	4604      	mov	r4, r0
 80070ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d070      	beq.n	80071b2 <_dtoa_r+0x92a>
 80070d0:	4621      	mov	r1, r4
 80070d2:	4658      	mov	r0, fp
 80070d4:	f000 fc70 	bl	80079b8 <__mcmp>
 80070d8:	2800      	cmp	r0, #0
 80070da:	da6a      	bge.n	80071b2 <_dtoa_r+0x92a>
 80070dc:	2300      	movs	r3, #0
 80070de:	4659      	mov	r1, fp
 80070e0:	220a      	movs	r2, #10
 80070e2:	4628      	mov	r0, r5
 80070e4:	f000 fa4c 	bl	8007580 <__multadd>
 80070e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ea:	4683      	mov	fp, r0
 80070ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8194 	beq.w	800741e <_dtoa_r+0xb96>
 80070f6:	4631      	mov	r1, r6
 80070f8:	2300      	movs	r3, #0
 80070fa:	220a      	movs	r2, #10
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 fa3f 	bl	8007580 <__multadd>
 8007102:	f1b9 0f00 	cmp.w	r9, #0
 8007106:	4606      	mov	r6, r0
 8007108:	f300 8093 	bgt.w	8007232 <_dtoa_r+0x9aa>
 800710c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800710e:	2b02      	cmp	r3, #2
 8007110:	dc57      	bgt.n	80071c2 <_dtoa_r+0x93a>
 8007112:	e08e      	b.n	8007232 <_dtoa_r+0x9aa>
 8007114:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800711a:	e757      	b.n	8006fcc <_dtoa_r+0x744>
 800711c:	9b08      	ldr	r3, [sp, #32]
 800711e:	1e5c      	subs	r4, r3, #1
 8007120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007122:	42a3      	cmp	r3, r4
 8007124:	bfb7      	itett	lt
 8007126:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007128:	1b1c      	subge	r4, r3, r4
 800712a:	1ae2      	sublt	r2, r4, r3
 800712c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800712e:	bfbe      	ittt	lt
 8007130:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007132:	189b      	addlt	r3, r3, r2
 8007134:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007136:	9b08      	ldr	r3, [sp, #32]
 8007138:	bfb8      	it	lt
 800713a:	2400      	movlt	r4, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	bfbb      	ittet	lt
 8007140:	9b06      	ldrlt	r3, [sp, #24]
 8007142:	9a08      	ldrlt	r2, [sp, #32]
 8007144:	9f06      	ldrge	r7, [sp, #24]
 8007146:	1a9f      	sublt	r7, r3, r2
 8007148:	bfac      	ite	ge
 800714a:	9b08      	ldrge	r3, [sp, #32]
 800714c:	2300      	movlt	r3, #0
 800714e:	e73f      	b.n	8006fd0 <_dtoa_r+0x748>
 8007150:	3fe00000 	.word	0x3fe00000
 8007154:	40240000 	.word	0x40240000
 8007158:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800715a:	9f06      	ldr	r7, [sp, #24]
 800715c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800715e:	e742      	b.n	8006fe6 <_dtoa_r+0x75e>
 8007160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007162:	e76b      	b.n	800703c <_dtoa_r+0x7b4>
 8007164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007166:	2b01      	cmp	r3, #1
 8007168:	dc19      	bgt.n	800719e <_dtoa_r+0x916>
 800716a:	9b04      	ldr	r3, [sp, #16]
 800716c:	b9bb      	cbnz	r3, 800719e <_dtoa_r+0x916>
 800716e:	9b05      	ldr	r3, [sp, #20]
 8007170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007174:	b99b      	cbnz	r3, 800719e <_dtoa_r+0x916>
 8007176:	9b05      	ldr	r3, [sp, #20]
 8007178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800717c:	0d1b      	lsrs	r3, r3, #20
 800717e:	051b      	lsls	r3, r3, #20
 8007180:	b183      	cbz	r3, 80071a4 <_dtoa_r+0x91c>
 8007182:	f04f 0801 	mov.w	r8, #1
 8007186:	9b06      	ldr	r3, [sp, #24]
 8007188:	3301      	adds	r3, #1
 800718a:	9306      	str	r3, [sp, #24]
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	3301      	adds	r3, #1
 8007190:	9309      	str	r3, [sp, #36]	; 0x24
 8007192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	f47f af6a 	bne.w	800706e <_dtoa_r+0x7e6>
 800719a:	2001      	movs	r0, #1
 800719c:	e76f      	b.n	800707e <_dtoa_r+0x7f6>
 800719e:	f04f 0800 	mov.w	r8, #0
 80071a2:	e7f6      	b.n	8007192 <_dtoa_r+0x90a>
 80071a4:	4698      	mov	r8, r3
 80071a6:	e7f4      	b.n	8007192 <_dtoa_r+0x90a>
 80071a8:	f43f af7d 	beq.w	80070a6 <_dtoa_r+0x81e>
 80071ac:	4618      	mov	r0, r3
 80071ae:	301c      	adds	r0, #28
 80071b0:	e772      	b.n	8007098 <_dtoa_r+0x810>
 80071b2:	9b08      	ldr	r3, [sp, #32]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dc36      	bgt.n	8007226 <_dtoa_r+0x99e>
 80071b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	dd33      	ble.n	8007226 <_dtoa_r+0x99e>
 80071be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071c2:	f1b9 0f00 	cmp.w	r9, #0
 80071c6:	d10d      	bne.n	80071e4 <_dtoa_r+0x95c>
 80071c8:	4621      	mov	r1, r4
 80071ca:	464b      	mov	r3, r9
 80071cc:	2205      	movs	r2, #5
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 f9d6 	bl	8007580 <__multadd>
 80071d4:	4601      	mov	r1, r0
 80071d6:	4604      	mov	r4, r0
 80071d8:	4658      	mov	r0, fp
 80071da:	f000 fbed 	bl	80079b8 <__mcmp>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f73f adb8 	bgt.w	8006d54 <_dtoa_r+0x4cc>
 80071e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071e6:	9f03      	ldr	r7, [sp, #12]
 80071e8:	ea6f 0a03 	mvn.w	sl, r3
 80071ec:	f04f 0800 	mov.w	r8, #0
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 f9a2 	bl	800753c <_Bfree>
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	f43f aea7 	beq.w	8006f4c <_dtoa_r+0x6c4>
 80071fe:	f1b8 0f00 	cmp.w	r8, #0
 8007202:	d005      	beq.n	8007210 <_dtoa_r+0x988>
 8007204:	45b0      	cmp	r8, r6
 8007206:	d003      	beq.n	8007210 <_dtoa_r+0x988>
 8007208:	4641      	mov	r1, r8
 800720a:	4628      	mov	r0, r5
 800720c:	f000 f996 	bl	800753c <_Bfree>
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	f000 f992 	bl	800753c <_Bfree>
 8007218:	e698      	b.n	8006f4c <_dtoa_r+0x6c4>
 800721a:	2400      	movs	r4, #0
 800721c:	4626      	mov	r6, r4
 800721e:	e7e1      	b.n	80071e4 <_dtoa_r+0x95c>
 8007220:	46c2      	mov	sl, r8
 8007222:	4626      	mov	r6, r4
 8007224:	e596      	b.n	8006d54 <_dtoa_r+0x4cc>
 8007226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 80fd 	beq.w	800742c <_dtoa_r+0xba4>
 8007232:	2f00      	cmp	r7, #0
 8007234:	dd05      	ble.n	8007242 <_dtoa_r+0x9ba>
 8007236:	4631      	mov	r1, r6
 8007238:	463a      	mov	r2, r7
 800723a:	4628      	mov	r0, r5
 800723c:	f000 fb4c 	bl	80078d8 <__lshift>
 8007240:	4606      	mov	r6, r0
 8007242:	f1b8 0f00 	cmp.w	r8, #0
 8007246:	d05c      	beq.n	8007302 <_dtoa_r+0xa7a>
 8007248:	4628      	mov	r0, r5
 800724a:	6871      	ldr	r1, [r6, #4]
 800724c:	f000 f936 	bl	80074bc <_Balloc>
 8007250:	4607      	mov	r7, r0
 8007252:	b928      	cbnz	r0, 8007260 <_dtoa_r+0x9d8>
 8007254:	4602      	mov	r2, r0
 8007256:	f240 21ea 	movw	r1, #746	; 0x2ea
 800725a:	4b7f      	ldr	r3, [pc, #508]	; (8007458 <_dtoa_r+0xbd0>)
 800725c:	f7ff bb28 	b.w	80068b0 <_dtoa_r+0x28>
 8007260:	6932      	ldr	r2, [r6, #16]
 8007262:	f106 010c 	add.w	r1, r6, #12
 8007266:	3202      	adds	r2, #2
 8007268:	0092      	lsls	r2, r2, #2
 800726a:	300c      	adds	r0, #12
 800726c:	f000 f90c 	bl	8007488 <memcpy>
 8007270:	2201      	movs	r2, #1
 8007272:	4639      	mov	r1, r7
 8007274:	4628      	mov	r0, r5
 8007276:	f000 fb2f 	bl	80078d8 <__lshift>
 800727a:	46b0      	mov	r8, r6
 800727c:	4606      	mov	r6, r0
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	3301      	adds	r3, #1
 8007282:	9308      	str	r3, [sp, #32]
 8007284:	9b03      	ldr	r3, [sp, #12]
 8007286:	444b      	add	r3, r9
 8007288:	930a      	str	r3, [sp, #40]	; 0x28
 800728a:	9b04      	ldr	r3, [sp, #16]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	9309      	str	r3, [sp, #36]	; 0x24
 8007292:	9b08      	ldr	r3, [sp, #32]
 8007294:	4621      	mov	r1, r4
 8007296:	3b01      	subs	r3, #1
 8007298:	4658      	mov	r0, fp
 800729a:	9304      	str	r3, [sp, #16]
 800729c:	f7ff fa68 	bl	8006770 <quorem>
 80072a0:	4603      	mov	r3, r0
 80072a2:	4641      	mov	r1, r8
 80072a4:	3330      	adds	r3, #48	; 0x30
 80072a6:	9006      	str	r0, [sp, #24]
 80072a8:	4658      	mov	r0, fp
 80072aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80072ac:	f000 fb84 	bl	80079b8 <__mcmp>
 80072b0:	4632      	mov	r2, r6
 80072b2:	4681      	mov	r9, r0
 80072b4:	4621      	mov	r1, r4
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 fb9a 	bl	80079f0 <__mdiff>
 80072bc:	68c2      	ldr	r2, [r0, #12]
 80072be:	4607      	mov	r7, r0
 80072c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072c2:	bb02      	cbnz	r2, 8007306 <_dtoa_r+0xa7e>
 80072c4:	4601      	mov	r1, r0
 80072c6:	4658      	mov	r0, fp
 80072c8:	f000 fb76 	bl	80079b8 <__mcmp>
 80072cc:	4602      	mov	r2, r0
 80072ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d0:	4639      	mov	r1, r7
 80072d2:	4628      	mov	r0, r5
 80072d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80072d8:	f000 f930 	bl	800753c <_Bfree>
 80072dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072e0:	9f08      	ldr	r7, [sp, #32]
 80072e2:	ea43 0102 	orr.w	r1, r3, r2
 80072e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e8:	430b      	orrs	r3, r1
 80072ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ec:	d10d      	bne.n	800730a <_dtoa_r+0xa82>
 80072ee:	2b39      	cmp	r3, #57	; 0x39
 80072f0:	d029      	beq.n	8007346 <_dtoa_r+0xabe>
 80072f2:	f1b9 0f00 	cmp.w	r9, #0
 80072f6:	dd01      	ble.n	80072fc <_dtoa_r+0xa74>
 80072f8:	9b06      	ldr	r3, [sp, #24]
 80072fa:	3331      	adds	r3, #49	; 0x31
 80072fc:	9a04      	ldr	r2, [sp, #16]
 80072fe:	7013      	strb	r3, [r2, #0]
 8007300:	e776      	b.n	80071f0 <_dtoa_r+0x968>
 8007302:	4630      	mov	r0, r6
 8007304:	e7b9      	b.n	800727a <_dtoa_r+0x9f2>
 8007306:	2201      	movs	r2, #1
 8007308:	e7e2      	b.n	80072d0 <_dtoa_r+0xa48>
 800730a:	f1b9 0f00 	cmp.w	r9, #0
 800730e:	db06      	blt.n	800731e <_dtoa_r+0xa96>
 8007310:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007312:	ea41 0909 	orr.w	r9, r1, r9
 8007316:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007318:	ea59 0101 	orrs.w	r1, r9, r1
 800731c:	d120      	bne.n	8007360 <_dtoa_r+0xad8>
 800731e:	2a00      	cmp	r2, #0
 8007320:	ddec      	ble.n	80072fc <_dtoa_r+0xa74>
 8007322:	4659      	mov	r1, fp
 8007324:	2201      	movs	r2, #1
 8007326:	4628      	mov	r0, r5
 8007328:	9308      	str	r3, [sp, #32]
 800732a:	f000 fad5 	bl	80078d8 <__lshift>
 800732e:	4621      	mov	r1, r4
 8007330:	4683      	mov	fp, r0
 8007332:	f000 fb41 	bl	80079b8 <__mcmp>
 8007336:	2800      	cmp	r0, #0
 8007338:	9b08      	ldr	r3, [sp, #32]
 800733a:	dc02      	bgt.n	8007342 <_dtoa_r+0xaba>
 800733c:	d1de      	bne.n	80072fc <_dtoa_r+0xa74>
 800733e:	07da      	lsls	r2, r3, #31
 8007340:	d5dc      	bpl.n	80072fc <_dtoa_r+0xa74>
 8007342:	2b39      	cmp	r3, #57	; 0x39
 8007344:	d1d8      	bne.n	80072f8 <_dtoa_r+0xa70>
 8007346:	2339      	movs	r3, #57	; 0x39
 8007348:	9a04      	ldr	r2, [sp, #16]
 800734a:	7013      	strb	r3, [r2, #0]
 800734c:	463b      	mov	r3, r7
 800734e:	461f      	mov	r7, r3
 8007350:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007354:	3b01      	subs	r3, #1
 8007356:	2a39      	cmp	r2, #57	; 0x39
 8007358:	d050      	beq.n	80073fc <_dtoa_r+0xb74>
 800735a:	3201      	adds	r2, #1
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	e747      	b.n	80071f0 <_dtoa_r+0x968>
 8007360:	2a00      	cmp	r2, #0
 8007362:	dd03      	ble.n	800736c <_dtoa_r+0xae4>
 8007364:	2b39      	cmp	r3, #57	; 0x39
 8007366:	d0ee      	beq.n	8007346 <_dtoa_r+0xabe>
 8007368:	3301      	adds	r3, #1
 800736a:	e7c7      	b.n	80072fc <_dtoa_r+0xa74>
 800736c:	9a08      	ldr	r2, [sp, #32]
 800736e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007370:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007374:	428a      	cmp	r2, r1
 8007376:	d02a      	beq.n	80073ce <_dtoa_r+0xb46>
 8007378:	4659      	mov	r1, fp
 800737a:	2300      	movs	r3, #0
 800737c:	220a      	movs	r2, #10
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f8fe 	bl	8007580 <__multadd>
 8007384:	45b0      	cmp	r8, r6
 8007386:	4683      	mov	fp, r0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	f04f 020a 	mov.w	r2, #10
 8007390:	4641      	mov	r1, r8
 8007392:	4628      	mov	r0, r5
 8007394:	d107      	bne.n	80073a6 <_dtoa_r+0xb1e>
 8007396:	f000 f8f3 	bl	8007580 <__multadd>
 800739a:	4680      	mov	r8, r0
 800739c:	4606      	mov	r6, r0
 800739e:	9b08      	ldr	r3, [sp, #32]
 80073a0:	3301      	adds	r3, #1
 80073a2:	9308      	str	r3, [sp, #32]
 80073a4:	e775      	b.n	8007292 <_dtoa_r+0xa0a>
 80073a6:	f000 f8eb 	bl	8007580 <__multadd>
 80073aa:	4631      	mov	r1, r6
 80073ac:	4680      	mov	r8, r0
 80073ae:	2300      	movs	r3, #0
 80073b0:	220a      	movs	r2, #10
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 f8e4 	bl	8007580 <__multadd>
 80073b8:	4606      	mov	r6, r0
 80073ba:	e7f0      	b.n	800739e <_dtoa_r+0xb16>
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	bfcc      	ite	gt
 80073c2:	464f      	movgt	r7, r9
 80073c4:	2701      	movle	r7, #1
 80073c6:	f04f 0800 	mov.w	r8, #0
 80073ca:	9a03      	ldr	r2, [sp, #12]
 80073cc:	4417      	add	r7, r2
 80073ce:	4659      	mov	r1, fp
 80073d0:	2201      	movs	r2, #1
 80073d2:	4628      	mov	r0, r5
 80073d4:	9308      	str	r3, [sp, #32]
 80073d6:	f000 fa7f 	bl	80078d8 <__lshift>
 80073da:	4621      	mov	r1, r4
 80073dc:	4683      	mov	fp, r0
 80073de:	f000 faeb 	bl	80079b8 <__mcmp>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	dcb2      	bgt.n	800734c <_dtoa_r+0xac4>
 80073e6:	d102      	bne.n	80073ee <_dtoa_r+0xb66>
 80073e8:	9b08      	ldr	r3, [sp, #32]
 80073ea:	07db      	lsls	r3, r3, #31
 80073ec:	d4ae      	bmi.n	800734c <_dtoa_r+0xac4>
 80073ee:	463b      	mov	r3, r7
 80073f0:	461f      	mov	r7, r3
 80073f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073f6:	2a30      	cmp	r2, #48	; 0x30
 80073f8:	d0fa      	beq.n	80073f0 <_dtoa_r+0xb68>
 80073fa:	e6f9      	b.n	80071f0 <_dtoa_r+0x968>
 80073fc:	9a03      	ldr	r2, [sp, #12]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d1a5      	bne.n	800734e <_dtoa_r+0xac6>
 8007402:	2331      	movs	r3, #49	; 0x31
 8007404:	f10a 0a01 	add.w	sl, sl, #1
 8007408:	e779      	b.n	80072fe <_dtoa_r+0xa76>
 800740a:	4b14      	ldr	r3, [pc, #80]	; (800745c <_dtoa_r+0xbd4>)
 800740c:	f7ff baa8 	b.w	8006960 <_dtoa_r+0xd8>
 8007410:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007412:	2b00      	cmp	r3, #0
 8007414:	f47f aa81 	bne.w	800691a <_dtoa_r+0x92>
 8007418:	4b11      	ldr	r3, [pc, #68]	; (8007460 <_dtoa_r+0xbd8>)
 800741a:	f7ff baa1 	b.w	8006960 <_dtoa_r+0xd8>
 800741e:	f1b9 0f00 	cmp.w	r9, #0
 8007422:	dc03      	bgt.n	800742c <_dtoa_r+0xba4>
 8007424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007426:	2b02      	cmp	r3, #2
 8007428:	f73f aecb 	bgt.w	80071c2 <_dtoa_r+0x93a>
 800742c:	9f03      	ldr	r7, [sp, #12]
 800742e:	4621      	mov	r1, r4
 8007430:	4658      	mov	r0, fp
 8007432:	f7ff f99d 	bl	8006770 <quorem>
 8007436:	9a03      	ldr	r2, [sp, #12]
 8007438:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800743c:	f807 3b01 	strb.w	r3, [r7], #1
 8007440:	1aba      	subs	r2, r7, r2
 8007442:	4591      	cmp	r9, r2
 8007444:	ddba      	ble.n	80073bc <_dtoa_r+0xb34>
 8007446:	4659      	mov	r1, fp
 8007448:	2300      	movs	r3, #0
 800744a:	220a      	movs	r2, #10
 800744c:	4628      	mov	r0, r5
 800744e:	f000 f897 	bl	8007580 <__multadd>
 8007452:	4683      	mov	fp, r0
 8007454:	e7eb      	b.n	800742e <_dtoa_r+0xba6>
 8007456:	bf00      	nop
 8007458:	08008b8b 	.word	0x08008b8b
 800745c:	08008ae8 	.word	0x08008ae8
 8007460:	08008b0c 	.word	0x08008b0c

08007464 <_localeconv_r>:
 8007464:	4800      	ldr	r0, [pc, #0]	; (8007468 <_localeconv_r+0x4>)
 8007466:	4770      	bx	lr
 8007468:	20000164 	.word	0x20000164

0800746c <memchr>:
 800746c:	4603      	mov	r3, r0
 800746e:	b510      	push	{r4, lr}
 8007470:	b2c9      	uxtb	r1, r1
 8007472:	4402      	add	r2, r0
 8007474:	4293      	cmp	r3, r2
 8007476:	4618      	mov	r0, r3
 8007478:	d101      	bne.n	800747e <memchr+0x12>
 800747a:	2000      	movs	r0, #0
 800747c:	e003      	b.n	8007486 <memchr+0x1a>
 800747e:	7804      	ldrb	r4, [r0, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	428c      	cmp	r4, r1
 8007484:	d1f6      	bne.n	8007474 <memchr+0x8>
 8007486:	bd10      	pop	{r4, pc}

08007488 <memcpy>:
 8007488:	440a      	add	r2, r1
 800748a:	4291      	cmp	r1, r2
 800748c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007490:	d100      	bne.n	8007494 <memcpy+0xc>
 8007492:	4770      	bx	lr
 8007494:	b510      	push	{r4, lr}
 8007496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800749a:	4291      	cmp	r1, r2
 800749c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074a0:	d1f9      	bne.n	8007496 <memcpy+0xe>
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <__malloc_lock>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__malloc_lock+0x8>)
 80074a6:	f000 bd2c 	b.w	8007f02 <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	200004c8 	.word	0x200004c8

080074b0 <__malloc_unlock>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__malloc_unlock+0x8>)
 80074b2:	f000 bd27 	b.w	8007f04 <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	200004c8 	.word	0x200004c8

080074bc <_Balloc>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074c0:	4604      	mov	r4, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	b976      	cbnz	r6, 80074e4 <_Balloc+0x28>
 80074c6:	2010      	movs	r0, #16
 80074c8:	f7fe fbce 	bl	8005c68 <malloc>
 80074cc:	4602      	mov	r2, r0
 80074ce:	6260      	str	r0, [r4, #36]	; 0x24
 80074d0:	b920      	cbnz	r0, 80074dc <_Balloc+0x20>
 80074d2:	2166      	movs	r1, #102	; 0x66
 80074d4:	4b17      	ldr	r3, [pc, #92]	; (8007534 <_Balloc+0x78>)
 80074d6:	4818      	ldr	r0, [pc, #96]	; (8007538 <_Balloc+0x7c>)
 80074d8:	f000 fce2 	bl	8007ea0 <__assert_func>
 80074dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074e0:	6006      	str	r6, [r0, #0]
 80074e2:	60c6      	str	r6, [r0, #12]
 80074e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074e6:	68f3      	ldr	r3, [r6, #12]
 80074e8:	b183      	cbz	r3, 800750c <_Balloc+0x50>
 80074ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074f2:	b9b8      	cbnz	r0, 8007524 <_Balloc+0x68>
 80074f4:	2101      	movs	r1, #1
 80074f6:	fa01 f605 	lsl.w	r6, r1, r5
 80074fa:	1d72      	adds	r2, r6, #5
 80074fc:	4620      	mov	r0, r4
 80074fe:	0092      	lsls	r2, r2, #2
 8007500:	f000 fb5e 	bl	8007bc0 <_calloc_r>
 8007504:	b160      	cbz	r0, 8007520 <_Balloc+0x64>
 8007506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800750a:	e00e      	b.n	800752a <_Balloc+0x6e>
 800750c:	2221      	movs	r2, #33	; 0x21
 800750e:	2104      	movs	r1, #4
 8007510:	4620      	mov	r0, r4
 8007512:	f000 fb55 	bl	8007bc0 <_calloc_r>
 8007516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007518:	60f0      	str	r0, [r6, #12]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e4      	bne.n	80074ea <_Balloc+0x2e>
 8007520:	2000      	movs	r0, #0
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	6802      	ldr	r2, [r0, #0]
 8007526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800752a:	2300      	movs	r3, #0
 800752c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007530:	e7f7      	b.n	8007522 <_Balloc+0x66>
 8007532:	bf00      	nop
 8007534:	08008b19 	.word	0x08008b19
 8007538:	08008b9c 	.word	0x08008b9c

0800753c <_Bfree>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007540:	4605      	mov	r5, r0
 8007542:	460c      	mov	r4, r1
 8007544:	b976      	cbnz	r6, 8007564 <_Bfree+0x28>
 8007546:	2010      	movs	r0, #16
 8007548:	f7fe fb8e 	bl	8005c68 <malloc>
 800754c:	4602      	mov	r2, r0
 800754e:	6268      	str	r0, [r5, #36]	; 0x24
 8007550:	b920      	cbnz	r0, 800755c <_Bfree+0x20>
 8007552:	218a      	movs	r1, #138	; 0x8a
 8007554:	4b08      	ldr	r3, [pc, #32]	; (8007578 <_Bfree+0x3c>)
 8007556:	4809      	ldr	r0, [pc, #36]	; (800757c <_Bfree+0x40>)
 8007558:	f000 fca2 	bl	8007ea0 <__assert_func>
 800755c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007560:	6006      	str	r6, [r0, #0]
 8007562:	60c6      	str	r6, [r0, #12]
 8007564:	b13c      	cbz	r4, 8007576 <_Bfree+0x3a>
 8007566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007568:	6862      	ldr	r2, [r4, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007570:	6021      	str	r1, [r4, #0]
 8007572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	08008b19 	.word	0x08008b19
 800757c:	08008b9c 	.word	0x08008b9c

08007580 <__multadd>:
 8007580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007584:	4607      	mov	r7, r0
 8007586:	460c      	mov	r4, r1
 8007588:	461e      	mov	r6, r3
 800758a:	2000      	movs	r0, #0
 800758c:	690d      	ldr	r5, [r1, #16]
 800758e:	f101 0c14 	add.w	ip, r1, #20
 8007592:	f8dc 3000 	ldr.w	r3, [ip]
 8007596:	3001      	adds	r0, #1
 8007598:	b299      	uxth	r1, r3
 800759a:	fb02 6101 	mla	r1, r2, r1, r6
 800759e:	0c1e      	lsrs	r6, r3, #16
 80075a0:	0c0b      	lsrs	r3, r1, #16
 80075a2:	fb02 3306 	mla	r3, r2, r6, r3
 80075a6:	b289      	uxth	r1, r1
 80075a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075ac:	4285      	cmp	r5, r0
 80075ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075b2:	f84c 1b04 	str.w	r1, [ip], #4
 80075b6:	dcec      	bgt.n	8007592 <__multadd+0x12>
 80075b8:	b30e      	cbz	r6, 80075fe <__multadd+0x7e>
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dc19      	bgt.n	80075f4 <__multadd+0x74>
 80075c0:	6861      	ldr	r1, [r4, #4]
 80075c2:	4638      	mov	r0, r7
 80075c4:	3101      	adds	r1, #1
 80075c6:	f7ff ff79 	bl	80074bc <_Balloc>
 80075ca:	4680      	mov	r8, r0
 80075cc:	b928      	cbnz	r0, 80075da <__multadd+0x5a>
 80075ce:	4602      	mov	r2, r0
 80075d0:	21b5      	movs	r1, #181	; 0xb5
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <__multadd+0x84>)
 80075d4:	480c      	ldr	r0, [pc, #48]	; (8007608 <__multadd+0x88>)
 80075d6:	f000 fc63 	bl	8007ea0 <__assert_func>
 80075da:	6922      	ldr	r2, [r4, #16]
 80075dc:	f104 010c 	add.w	r1, r4, #12
 80075e0:	3202      	adds	r2, #2
 80075e2:	0092      	lsls	r2, r2, #2
 80075e4:	300c      	adds	r0, #12
 80075e6:	f7ff ff4f 	bl	8007488 <memcpy>
 80075ea:	4621      	mov	r1, r4
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ffa5 	bl	800753c <_Bfree>
 80075f2:	4644      	mov	r4, r8
 80075f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075f8:	3501      	adds	r5, #1
 80075fa:	615e      	str	r6, [r3, #20]
 80075fc:	6125      	str	r5, [r4, #16]
 80075fe:	4620      	mov	r0, r4
 8007600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007604:	08008b8b 	.word	0x08008b8b
 8007608:	08008b9c 	.word	0x08008b9c

0800760c <__hi0bits>:
 800760c:	0c02      	lsrs	r2, r0, #16
 800760e:	0412      	lsls	r2, r2, #16
 8007610:	4603      	mov	r3, r0
 8007612:	b9ca      	cbnz	r2, 8007648 <__hi0bits+0x3c>
 8007614:	0403      	lsls	r3, r0, #16
 8007616:	2010      	movs	r0, #16
 8007618:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800761c:	bf04      	itt	eq
 800761e:	021b      	lsleq	r3, r3, #8
 8007620:	3008      	addeq	r0, #8
 8007622:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007626:	bf04      	itt	eq
 8007628:	011b      	lsleq	r3, r3, #4
 800762a:	3004      	addeq	r0, #4
 800762c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007630:	bf04      	itt	eq
 8007632:	009b      	lsleq	r3, r3, #2
 8007634:	3002      	addeq	r0, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	db05      	blt.n	8007646 <__hi0bits+0x3a>
 800763a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800763e:	f100 0001 	add.w	r0, r0, #1
 8007642:	bf08      	it	eq
 8007644:	2020      	moveq	r0, #32
 8007646:	4770      	bx	lr
 8007648:	2000      	movs	r0, #0
 800764a:	e7e5      	b.n	8007618 <__hi0bits+0xc>

0800764c <__lo0bits>:
 800764c:	6803      	ldr	r3, [r0, #0]
 800764e:	4602      	mov	r2, r0
 8007650:	f013 0007 	ands.w	r0, r3, #7
 8007654:	d00b      	beq.n	800766e <__lo0bits+0x22>
 8007656:	07d9      	lsls	r1, r3, #31
 8007658:	d421      	bmi.n	800769e <__lo0bits+0x52>
 800765a:	0798      	lsls	r0, r3, #30
 800765c:	bf49      	itett	mi
 800765e:	085b      	lsrmi	r3, r3, #1
 8007660:	089b      	lsrpl	r3, r3, #2
 8007662:	2001      	movmi	r0, #1
 8007664:	6013      	strmi	r3, [r2, #0]
 8007666:	bf5c      	itt	pl
 8007668:	2002      	movpl	r0, #2
 800766a:	6013      	strpl	r3, [r2, #0]
 800766c:	4770      	bx	lr
 800766e:	b299      	uxth	r1, r3
 8007670:	b909      	cbnz	r1, 8007676 <__lo0bits+0x2a>
 8007672:	2010      	movs	r0, #16
 8007674:	0c1b      	lsrs	r3, r3, #16
 8007676:	b2d9      	uxtb	r1, r3
 8007678:	b909      	cbnz	r1, 800767e <__lo0bits+0x32>
 800767a:	3008      	adds	r0, #8
 800767c:	0a1b      	lsrs	r3, r3, #8
 800767e:	0719      	lsls	r1, r3, #28
 8007680:	bf04      	itt	eq
 8007682:	091b      	lsreq	r3, r3, #4
 8007684:	3004      	addeq	r0, #4
 8007686:	0799      	lsls	r1, r3, #30
 8007688:	bf04      	itt	eq
 800768a:	089b      	lsreq	r3, r3, #2
 800768c:	3002      	addeq	r0, #2
 800768e:	07d9      	lsls	r1, r3, #31
 8007690:	d403      	bmi.n	800769a <__lo0bits+0x4e>
 8007692:	085b      	lsrs	r3, r3, #1
 8007694:	f100 0001 	add.w	r0, r0, #1
 8007698:	d003      	beq.n	80076a2 <__lo0bits+0x56>
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	4770      	bx	lr
 800769e:	2000      	movs	r0, #0
 80076a0:	4770      	bx	lr
 80076a2:	2020      	movs	r0, #32
 80076a4:	4770      	bx	lr
	...

080076a8 <__i2b>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	460c      	mov	r4, r1
 80076ac:	2101      	movs	r1, #1
 80076ae:	f7ff ff05 	bl	80074bc <_Balloc>
 80076b2:	4602      	mov	r2, r0
 80076b4:	b928      	cbnz	r0, 80076c2 <__i2b+0x1a>
 80076b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076ba:	4b04      	ldr	r3, [pc, #16]	; (80076cc <__i2b+0x24>)
 80076bc:	4804      	ldr	r0, [pc, #16]	; (80076d0 <__i2b+0x28>)
 80076be:	f000 fbef 	bl	8007ea0 <__assert_func>
 80076c2:	2301      	movs	r3, #1
 80076c4:	6144      	str	r4, [r0, #20]
 80076c6:	6103      	str	r3, [r0, #16]
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	bf00      	nop
 80076cc:	08008b8b 	.word	0x08008b8b
 80076d0:	08008b9c 	.word	0x08008b9c

080076d4 <__multiply>:
 80076d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	4691      	mov	r9, r2
 80076da:	690a      	ldr	r2, [r1, #16]
 80076dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076e0:	460c      	mov	r4, r1
 80076e2:	429a      	cmp	r2, r3
 80076e4:	bfbe      	ittt	lt
 80076e6:	460b      	movlt	r3, r1
 80076e8:	464c      	movlt	r4, r9
 80076ea:	4699      	movlt	r9, r3
 80076ec:	6927      	ldr	r7, [r4, #16]
 80076ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076f2:	68a3      	ldr	r3, [r4, #8]
 80076f4:	6861      	ldr	r1, [r4, #4]
 80076f6:	eb07 060a 	add.w	r6, r7, sl
 80076fa:	42b3      	cmp	r3, r6
 80076fc:	b085      	sub	sp, #20
 80076fe:	bfb8      	it	lt
 8007700:	3101      	addlt	r1, #1
 8007702:	f7ff fedb 	bl	80074bc <_Balloc>
 8007706:	b930      	cbnz	r0, 8007716 <__multiply+0x42>
 8007708:	4602      	mov	r2, r0
 800770a:	f240 115d 	movw	r1, #349	; 0x15d
 800770e:	4b43      	ldr	r3, [pc, #268]	; (800781c <__multiply+0x148>)
 8007710:	4843      	ldr	r0, [pc, #268]	; (8007820 <__multiply+0x14c>)
 8007712:	f000 fbc5 	bl	8007ea0 <__assert_func>
 8007716:	f100 0514 	add.w	r5, r0, #20
 800771a:	462b      	mov	r3, r5
 800771c:	2200      	movs	r2, #0
 800771e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007722:	4543      	cmp	r3, r8
 8007724:	d321      	bcc.n	800776a <__multiply+0x96>
 8007726:	f104 0314 	add.w	r3, r4, #20
 800772a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800772e:	f109 0314 	add.w	r3, r9, #20
 8007732:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007736:	9202      	str	r2, [sp, #8]
 8007738:	1b3a      	subs	r2, r7, r4
 800773a:	3a15      	subs	r2, #21
 800773c:	f022 0203 	bic.w	r2, r2, #3
 8007740:	3204      	adds	r2, #4
 8007742:	f104 0115 	add.w	r1, r4, #21
 8007746:	428f      	cmp	r7, r1
 8007748:	bf38      	it	cc
 800774a:	2204      	movcc	r2, #4
 800774c:	9201      	str	r2, [sp, #4]
 800774e:	9a02      	ldr	r2, [sp, #8]
 8007750:	9303      	str	r3, [sp, #12]
 8007752:	429a      	cmp	r2, r3
 8007754:	d80c      	bhi.n	8007770 <__multiply+0x9c>
 8007756:	2e00      	cmp	r6, #0
 8007758:	dd03      	ble.n	8007762 <__multiply+0x8e>
 800775a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800775e:	2b00      	cmp	r3, #0
 8007760:	d059      	beq.n	8007816 <__multiply+0x142>
 8007762:	6106      	str	r6, [r0, #16]
 8007764:	b005      	add	sp, #20
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	f843 2b04 	str.w	r2, [r3], #4
 800776e:	e7d8      	b.n	8007722 <__multiply+0x4e>
 8007770:	f8b3 a000 	ldrh.w	sl, [r3]
 8007774:	f1ba 0f00 	cmp.w	sl, #0
 8007778:	d023      	beq.n	80077c2 <__multiply+0xee>
 800777a:	46a9      	mov	r9, r5
 800777c:	f04f 0c00 	mov.w	ip, #0
 8007780:	f104 0e14 	add.w	lr, r4, #20
 8007784:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007788:	f8d9 1000 	ldr.w	r1, [r9]
 800778c:	fa1f fb82 	uxth.w	fp, r2
 8007790:	b289      	uxth	r1, r1
 8007792:	fb0a 110b 	mla	r1, sl, fp, r1
 8007796:	4461      	add	r1, ip
 8007798:	f8d9 c000 	ldr.w	ip, [r9]
 800779c:	0c12      	lsrs	r2, r2, #16
 800779e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80077a2:	fb0a c202 	mla	r2, sl, r2, ip
 80077a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077aa:	b289      	uxth	r1, r1
 80077ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077b0:	4577      	cmp	r7, lr
 80077b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077b6:	f849 1b04 	str.w	r1, [r9], #4
 80077ba:	d8e3      	bhi.n	8007784 <__multiply+0xb0>
 80077bc:	9a01      	ldr	r2, [sp, #4]
 80077be:	f845 c002 	str.w	ip, [r5, r2]
 80077c2:	9a03      	ldr	r2, [sp, #12]
 80077c4:	3304      	adds	r3, #4
 80077c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077ca:	f1b9 0f00 	cmp.w	r9, #0
 80077ce:	d020      	beq.n	8007812 <__multiply+0x13e>
 80077d0:	46ae      	mov	lr, r5
 80077d2:	f04f 0a00 	mov.w	sl, #0
 80077d6:	6829      	ldr	r1, [r5, #0]
 80077d8:	f104 0c14 	add.w	ip, r4, #20
 80077dc:	f8bc b000 	ldrh.w	fp, [ip]
 80077e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077e4:	b289      	uxth	r1, r1
 80077e6:	fb09 220b 	mla	r2, r9, fp, r2
 80077ea:	4492      	add	sl, r2
 80077ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077f0:	f84e 1b04 	str.w	r1, [lr], #4
 80077f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077f8:	f8be 1000 	ldrh.w	r1, [lr]
 80077fc:	0c12      	lsrs	r2, r2, #16
 80077fe:	fb09 1102 	mla	r1, r9, r2, r1
 8007802:	4567      	cmp	r7, ip
 8007804:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007808:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800780c:	d8e6      	bhi.n	80077dc <__multiply+0x108>
 800780e:	9a01      	ldr	r2, [sp, #4]
 8007810:	50a9      	str	r1, [r5, r2]
 8007812:	3504      	adds	r5, #4
 8007814:	e79b      	b.n	800774e <__multiply+0x7a>
 8007816:	3e01      	subs	r6, #1
 8007818:	e79d      	b.n	8007756 <__multiply+0x82>
 800781a:	bf00      	nop
 800781c:	08008b8b 	.word	0x08008b8b
 8007820:	08008b9c 	.word	0x08008b9c

08007824 <__pow5mult>:
 8007824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007828:	4615      	mov	r5, r2
 800782a:	f012 0203 	ands.w	r2, r2, #3
 800782e:	4606      	mov	r6, r0
 8007830:	460f      	mov	r7, r1
 8007832:	d007      	beq.n	8007844 <__pow5mult+0x20>
 8007834:	4c25      	ldr	r4, [pc, #148]	; (80078cc <__pow5mult+0xa8>)
 8007836:	3a01      	subs	r2, #1
 8007838:	2300      	movs	r3, #0
 800783a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800783e:	f7ff fe9f 	bl	8007580 <__multadd>
 8007842:	4607      	mov	r7, r0
 8007844:	10ad      	asrs	r5, r5, #2
 8007846:	d03d      	beq.n	80078c4 <__pow5mult+0xa0>
 8007848:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800784a:	b97c      	cbnz	r4, 800786c <__pow5mult+0x48>
 800784c:	2010      	movs	r0, #16
 800784e:	f7fe fa0b 	bl	8005c68 <malloc>
 8007852:	4602      	mov	r2, r0
 8007854:	6270      	str	r0, [r6, #36]	; 0x24
 8007856:	b928      	cbnz	r0, 8007864 <__pow5mult+0x40>
 8007858:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800785c:	4b1c      	ldr	r3, [pc, #112]	; (80078d0 <__pow5mult+0xac>)
 800785e:	481d      	ldr	r0, [pc, #116]	; (80078d4 <__pow5mult+0xb0>)
 8007860:	f000 fb1e 	bl	8007ea0 <__assert_func>
 8007864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007868:	6004      	str	r4, [r0, #0]
 800786a:	60c4      	str	r4, [r0, #12]
 800786c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007874:	b94c      	cbnz	r4, 800788a <__pow5mult+0x66>
 8007876:	f240 2171 	movw	r1, #625	; 0x271
 800787a:	4630      	mov	r0, r6
 800787c:	f7ff ff14 	bl	80076a8 <__i2b>
 8007880:	2300      	movs	r3, #0
 8007882:	4604      	mov	r4, r0
 8007884:	f8c8 0008 	str.w	r0, [r8, #8]
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	f04f 0900 	mov.w	r9, #0
 800788e:	07eb      	lsls	r3, r5, #31
 8007890:	d50a      	bpl.n	80078a8 <__pow5mult+0x84>
 8007892:	4639      	mov	r1, r7
 8007894:	4622      	mov	r2, r4
 8007896:	4630      	mov	r0, r6
 8007898:	f7ff ff1c 	bl	80076d4 <__multiply>
 800789c:	4680      	mov	r8, r0
 800789e:	4639      	mov	r1, r7
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7ff fe4b 	bl	800753c <_Bfree>
 80078a6:	4647      	mov	r7, r8
 80078a8:	106d      	asrs	r5, r5, #1
 80078aa:	d00b      	beq.n	80078c4 <__pow5mult+0xa0>
 80078ac:	6820      	ldr	r0, [r4, #0]
 80078ae:	b938      	cbnz	r0, 80078c0 <__pow5mult+0x9c>
 80078b0:	4622      	mov	r2, r4
 80078b2:	4621      	mov	r1, r4
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7ff ff0d 	bl	80076d4 <__multiply>
 80078ba:	6020      	str	r0, [r4, #0]
 80078bc:	f8c0 9000 	str.w	r9, [r0]
 80078c0:	4604      	mov	r4, r0
 80078c2:	e7e4      	b.n	800788e <__pow5mult+0x6a>
 80078c4:	4638      	mov	r0, r7
 80078c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ca:	bf00      	nop
 80078cc:	08008ce8 	.word	0x08008ce8
 80078d0:	08008b19 	.word	0x08008b19
 80078d4:	08008b9c 	.word	0x08008b9c

080078d8 <__lshift>:
 80078d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	460c      	mov	r4, r1
 80078de:	4607      	mov	r7, r0
 80078e0:	4691      	mov	r9, r2
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	6849      	ldr	r1, [r1, #4]
 80078e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078f0:	f108 0601 	add.w	r6, r8, #1
 80078f4:	42b3      	cmp	r3, r6
 80078f6:	db0b      	blt.n	8007910 <__lshift+0x38>
 80078f8:	4638      	mov	r0, r7
 80078fa:	f7ff fddf 	bl	80074bc <_Balloc>
 80078fe:	4605      	mov	r5, r0
 8007900:	b948      	cbnz	r0, 8007916 <__lshift+0x3e>
 8007902:	4602      	mov	r2, r0
 8007904:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007908:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <__lshift+0xd8>)
 800790a:	482a      	ldr	r0, [pc, #168]	; (80079b4 <__lshift+0xdc>)
 800790c:	f000 fac8 	bl	8007ea0 <__assert_func>
 8007910:	3101      	adds	r1, #1
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	e7ee      	b.n	80078f4 <__lshift+0x1c>
 8007916:	2300      	movs	r3, #0
 8007918:	f100 0114 	add.w	r1, r0, #20
 800791c:	f100 0210 	add.w	r2, r0, #16
 8007920:	4618      	mov	r0, r3
 8007922:	4553      	cmp	r3, sl
 8007924:	db37      	blt.n	8007996 <__lshift+0xbe>
 8007926:	6920      	ldr	r0, [r4, #16]
 8007928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800792c:	f104 0314 	add.w	r3, r4, #20
 8007930:	f019 091f 	ands.w	r9, r9, #31
 8007934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007938:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800793c:	d02f      	beq.n	800799e <__lshift+0xc6>
 800793e:	468a      	mov	sl, r1
 8007940:	f04f 0c00 	mov.w	ip, #0
 8007944:	f1c9 0e20 	rsb	lr, r9, #32
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	fa02 f209 	lsl.w	r2, r2, r9
 800794e:	ea42 020c 	orr.w	r2, r2, ip
 8007952:	f84a 2b04 	str.w	r2, [sl], #4
 8007956:	f853 2b04 	ldr.w	r2, [r3], #4
 800795a:	4298      	cmp	r0, r3
 800795c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007960:	d8f2      	bhi.n	8007948 <__lshift+0x70>
 8007962:	1b03      	subs	r3, r0, r4
 8007964:	3b15      	subs	r3, #21
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	3304      	adds	r3, #4
 800796c:	f104 0215 	add.w	r2, r4, #21
 8007970:	4290      	cmp	r0, r2
 8007972:	bf38      	it	cc
 8007974:	2304      	movcc	r3, #4
 8007976:	f841 c003 	str.w	ip, [r1, r3]
 800797a:	f1bc 0f00 	cmp.w	ip, #0
 800797e:	d001      	beq.n	8007984 <__lshift+0xac>
 8007980:	f108 0602 	add.w	r6, r8, #2
 8007984:	3e01      	subs	r6, #1
 8007986:	4638      	mov	r0, r7
 8007988:	4621      	mov	r1, r4
 800798a:	612e      	str	r6, [r5, #16]
 800798c:	f7ff fdd6 	bl	800753c <_Bfree>
 8007990:	4628      	mov	r0, r5
 8007992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007996:	f842 0f04 	str.w	r0, [r2, #4]!
 800799a:	3301      	adds	r3, #1
 800799c:	e7c1      	b.n	8007922 <__lshift+0x4a>
 800799e:	3904      	subs	r1, #4
 80079a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a4:	4298      	cmp	r0, r3
 80079a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80079aa:	d8f9      	bhi.n	80079a0 <__lshift+0xc8>
 80079ac:	e7ea      	b.n	8007984 <__lshift+0xac>
 80079ae:	bf00      	nop
 80079b0:	08008b8b 	.word	0x08008b8b
 80079b4:	08008b9c 	.word	0x08008b9c

080079b8 <__mcmp>:
 80079b8:	4603      	mov	r3, r0
 80079ba:	690a      	ldr	r2, [r1, #16]
 80079bc:	6900      	ldr	r0, [r0, #16]
 80079be:	b530      	push	{r4, r5, lr}
 80079c0:	1a80      	subs	r0, r0, r2
 80079c2:	d10d      	bne.n	80079e0 <__mcmp+0x28>
 80079c4:	3314      	adds	r3, #20
 80079c6:	3114      	adds	r1, #20
 80079c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079d8:	4295      	cmp	r5, r2
 80079da:	d002      	beq.n	80079e2 <__mcmp+0x2a>
 80079dc:	d304      	bcc.n	80079e8 <__mcmp+0x30>
 80079de:	2001      	movs	r0, #1
 80079e0:	bd30      	pop	{r4, r5, pc}
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	d3f4      	bcc.n	80079d0 <__mcmp+0x18>
 80079e6:	e7fb      	b.n	80079e0 <__mcmp+0x28>
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	e7f8      	b.n	80079e0 <__mcmp+0x28>
	...

080079f0 <__mdiff>:
 80079f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	460d      	mov	r5, r1
 80079f6:	4607      	mov	r7, r0
 80079f8:	4611      	mov	r1, r2
 80079fa:	4628      	mov	r0, r5
 80079fc:	4614      	mov	r4, r2
 80079fe:	f7ff ffdb 	bl	80079b8 <__mcmp>
 8007a02:	1e06      	subs	r6, r0, #0
 8007a04:	d111      	bne.n	8007a2a <__mdiff+0x3a>
 8007a06:	4631      	mov	r1, r6
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7ff fd57 	bl	80074bc <_Balloc>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	b928      	cbnz	r0, 8007a1e <__mdiff+0x2e>
 8007a12:	f240 2132 	movw	r1, #562	; 0x232
 8007a16:	4b3a      	ldr	r3, [pc, #232]	; (8007b00 <__mdiff+0x110>)
 8007a18:	483a      	ldr	r0, [pc, #232]	; (8007b04 <__mdiff+0x114>)
 8007a1a:	f000 fa41 	bl	8007ea0 <__assert_func>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007a24:	4610      	mov	r0, r2
 8007a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2a:	bfa4      	itt	ge
 8007a2c:	4623      	movge	r3, r4
 8007a2e:	462c      	movge	r4, r5
 8007a30:	4638      	mov	r0, r7
 8007a32:	6861      	ldr	r1, [r4, #4]
 8007a34:	bfa6      	itte	ge
 8007a36:	461d      	movge	r5, r3
 8007a38:	2600      	movge	r6, #0
 8007a3a:	2601      	movlt	r6, #1
 8007a3c:	f7ff fd3e 	bl	80074bc <_Balloc>
 8007a40:	4602      	mov	r2, r0
 8007a42:	b918      	cbnz	r0, 8007a4c <__mdiff+0x5c>
 8007a44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a48:	4b2d      	ldr	r3, [pc, #180]	; (8007b00 <__mdiff+0x110>)
 8007a4a:	e7e5      	b.n	8007a18 <__mdiff+0x28>
 8007a4c:	f102 0814 	add.w	r8, r2, #20
 8007a50:	46c2      	mov	sl, r8
 8007a52:	f04f 0c00 	mov.w	ip, #0
 8007a56:	6927      	ldr	r7, [r4, #16]
 8007a58:	60c6      	str	r6, [r0, #12]
 8007a5a:	692e      	ldr	r6, [r5, #16]
 8007a5c:	f104 0014 	add.w	r0, r4, #20
 8007a60:	f105 0914 	add.w	r9, r5, #20
 8007a64:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007a68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a6c:	3410      	adds	r4, #16
 8007a6e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007a72:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a76:	fa1f f18b 	uxth.w	r1, fp
 8007a7a:	448c      	add	ip, r1
 8007a7c:	b299      	uxth	r1, r3
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	ebac 0101 	sub.w	r1, ip, r1
 8007a84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a88:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a8c:	b289      	uxth	r1, r1
 8007a8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a92:	454e      	cmp	r6, r9
 8007a94:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a98:	f84a 3b04 	str.w	r3, [sl], #4
 8007a9c:	d8e7      	bhi.n	8007a6e <__mdiff+0x7e>
 8007a9e:	1b73      	subs	r3, r6, r5
 8007aa0:	3b15      	subs	r3, #21
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	3515      	adds	r5, #21
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	42ae      	cmp	r6, r5
 8007aac:	bf38      	it	cc
 8007aae:	2304      	movcc	r3, #4
 8007ab0:	4418      	add	r0, r3
 8007ab2:	4443      	add	r3, r8
 8007ab4:	461e      	mov	r6, r3
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	4575      	cmp	r5, lr
 8007aba:	d30e      	bcc.n	8007ada <__mdiff+0xea>
 8007abc:	f10e 0103 	add.w	r1, lr, #3
 8007ac0:	1a09      	subs	r1, r1, r0
 8007ac2:	f021 0103 	bic.w	r1, r1, #3
 8007ac6:	3803      	subs	r0, #3
 8007ac8:	4586      	cmp	lr, r0
 8007aca:	bf38      	it	cc
 8007acc:	2100      	movcc	r1, #0
 8007ace:	4419      	add	r1, r3
 8007ad0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ad4:	b18b      	cbz	r3, 8007afa <__mdiff+0x10a>
 8007ad6:	6117      	str	r7, [r2, #16]
 8007ad8:	e7a4      	b.n	8007a24 <__mdiff+0x34>
 8007ada:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ade:	fa1f f188 	uxth.w	r1, r8
 8007ae2:	4461      	add	r1, ip
 8007ae4:	140c      	asrs	r4, r1, #16
 8007ae6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007aea:	b289      	uxth	r1, r1
 8007aec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007af0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007af4:	f846 1b04 	str.w	r1, [r6], #4
 8007af8:	e7de      	b.n	8007ab8 <__mdiff+0xc8>
 8007afa:	3f01      	subs	r7, #1
 8007afc:	e7e8      	b.n	8007ad0 <__mdiff+0xe0>
 8007afe:	bf00      	nop
 8007b00:	08008b8b 	.word	0x08008b8b
 8007b04:	08008b9c 	.word	0x08008b9c

08007b08 <__d2b>:
 8007b08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007b12:	4690      	mov	r8, r2
 8007b14:	461d      	mov	r5, r3
 8007b16:	f7ff fcd1 	bl	80074bc <_Balloc>
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	b930      	cbnz	r0, 8007b2c <__d2b+0x24>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	f240 310a 	movw	r1, #778	; 0x30a
 8007b24:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <__d2b+0xb0>)
 8007b26:	4825      	ldr	r0, [pc, #148]	; (8007bbc <__d2b+0xb4>)
 8007b28:	f000 f9ba 	bl	8007ea0 <__assert_func>
 8007b2c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007b30:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007b34:	bb2d      	cbnz	r5, 8007b82 <__d2b+0x7a>
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	f1b8 0300 	subs.w	r3, r8, #0
 8007b3c:	d026      	beq.n	8007b8c <__d2b+0x84>
 8007b3e:	4668      	mov	r0, sp
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	f7ff fd83 	bl	800764c <__lo0bits>
 8007b46:	9900      	ldr	r1, [sp, #0]
 8007b48:	b1f0      	cbz	r0, 8007b88 <__d2b+0x80>
 8007b4a:	9a01      	ldr	r2, [sp, #4]
 8007b4c:	f1c0 0320 	rsb	r3, r0, #32
 8007b50:	fa02 f303 	lsl.w	r3, r2, r3
 8007b54:	430b      	orrs	r3, r1
 8007b56:	40c2      	lsrs	r2, r0
 8007b58:	6163      	str	r3, [r4, #20]
 8007b5a:	9201      	str	r2, [sp, #4]
 8007b5c:	9b01      	ldr	r3, [sp, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bf14      	ite	ne
 8007b62:	2102      	movne	r1, #2
 8007b64:	2101      	moveq	r1, #1
 8007b66:	61a3      	str	r3, [r4, #24]
 8007b68:	6121      	str	r1, [r4, #16]
 8007b6a:	b1c5      	cbz	r5, 8007b9e <__d2b+0x96>
 8007b6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b70:	4405      	add	r5, r0
 8007b72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b76:	603d      	str	r5, [r7, #0]
 8007b78:	6030      	str	r0, [r6, #0]
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	b002      	add	sp, #8
 8007b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b86:	e7d6      	b.n	8007b36 <__d2b+0x2e>
 8007b88:	6161      	str	r1, [r4, #20]
 8007b8a:	e7e7      	b.n	8007b5c <__d2b+0x54>
 8007b8c:	a801      	add	r0, sp, #4
 8007b8e:	f7ff fd5d 	bl	800764c <__lo0bits>
 8007b92:	2101      	movs	r1, #1
 8007b94:	9b01      	ldr	r3, [sp, #4]
 8007b96:	6121      	str	r1, [r4, #16]
 8007b98:	6163      	str	r3, [r4, #20]
 8007b9a:	3020      	adds	r0, #32
 8007b9c:	e7e5      	b.n	8007b6a <__d2b+0x62>
 8007b9e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007ba2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ba6:	6038      	str	r0, [r7, #0]
 8007ba8:	6918      	ldr	r0, [r3, #16]
 8007baa:	f7ff fd2f 	bl	800760c <__hi0bits>
 8007bae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007bb2:	6031      	str	r1, [r6, #0]
 8007bb4:	e7e1      	b.n	8007b7a <__d2b+0x72>
 8007bb6:	bf00      	nop
 8007bb8:	08008b8b 	.word	0x08008b8b
 8007bbc:	08008b9c 	.word	0x08008b9c

08007bc0 <_calloc_r>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	fba1 5402 	umull	r5, r4, r1, r2
 8007bc6:	b934      	cbnz	r4, 8007bd6 <_calloc_r+0x16>
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7fe f8cd 	bl	8005d68 <_malloc_r>
 8007bce:	4606      	mov	r6, r0
 8007bd0:	b928      	cbnz	r0, 8007bde <_calloc_r+0x1e>
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
 8007bd6:	220c      	movs	r2, #12
 8007bd8:	2600      	movs	r6, #0
 8007bda:	6002      	str	r2, [r0, #0]
 8007bdc:	e7f9      	b.n	8007bd2 <_calloc_r+0x12>
 8007bde:	462a      	mov	r2, r5
 8007be0:	4621      	mov	r1, r4
 8007be2:	f7fe f851 	bl	8005c88 <memset>
 8007be6:	e7f4      	b.n	8007bd2 <_calloc_r+0x12>

08007be8 <__ssputs_r>:
 8007be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	688e      	ldr	r6, [r1, #8]
 8007bee:	4682      	mov	sl, r0
 8007bf0:	429e      	cmp	r6, r3
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	4690      	mov	r8, r2
 8007bf6:	461f      	mov	r7, r3
 8007bf8:	d838      	bhi.n	8007c6c <__ssputs_r+0x84>
 8007bfa:	898a      	ldrh	r2, [r1, #12]
 8007bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c00:	d032      	beq.n	8007c68 <__ssputs_r+0x80>
 8007c02:	6825      	ldr	r5, [r4, #0]
 8007c04:	6909      	ldr	r1, [r1, #16]
 8007c06:	3301      	adds	r3, #1
 8007c08:	eba5 0901 	sub.w	r9, r5, r1
 8007c0c:	6965      	ldr	r5, [r4, #20]
 8007c0e:	444b      	add	r3, r9
 8007c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c18:	106d      	asrs	r5, r5, #1
 8007c1a:	429d      	cmp	r5, r3
 8007c1c:	bf38      	it	cc
 8007c1e:	461d      	movcc	r5, r3
 8007c20:	0553      	lsls	r3, r2, #21
 8007c22:	d531      	bpl.n	8007c88 <__ssputs_r+0xa0>
 8007c24:	4629      	mov	r1, r5
 8007c26:	f7fe f89f 	bl	8005d68 <_malloc_r>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	b950      	cbnz	r0, 8007c44 <__ssputs_r+0x5c>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	f8ca 3000 	str.w	r3, [sl]
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c3e:	81a3      	strh	r3, [r4, #12]
 8007c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c44:	464a      	mov	r2, r9
 8007c46:	6921      	ldr	r1, [r4, #16]
 8007c48:	f7ff fc1e 	bl	8007488 <memcpy>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	6126      	str	r6, [r4, #16]
 8007c5a:	444e      	add	r6, r9
 8007c5c:	6026      	str	r6, [r4, #0]
 8007c5e:	463e      	mov	r6, r7
 8007c60:	6165      	str	r5, [r4, #20]
 8007c62:	eba5 0509 	sub.w	r5, r5, r9
 8007c66:	60a5      	str	r5, [r4, #8]
 8007c68:	42be      	cmp	r6, r7
 8007c6a:	d900      	bls.n	8007c6e <__ssputs_r+0x86>
 8007c6c:	463e      	mov	r6, r7
 8007c6e:	4632      	mov	r2, r6
 8007c70:	4641      	mov	r1, r8
 8007c72:	6820      	ldr	r0, [r4, #0]
 8007c74:	f000 f959 	bl	8007f2a <memmove>
 8007c78:	68a3      	ldr	r3, [r4, #8]
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	1b9b      	subs	r3, r3, r6
 8007c7e:	60a3      	str	r3, [r4, #8]
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	4433      	add	r3, r6
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	e7db      	b.n	8007c40 <__ssputs_r+0x58>
 8007c88:	462a      	mov	r2, r5
 8007c8a:	f000 f968 	bl	8007f5e <_realloc_r>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1e1      	bne.n	8007c58 <__ssputs_r+0x70>
 8007c94:	4650      	mov	r0, sl
 8007c96:	6921      	ldr	r1, [r4, #16]
 8007c98:	f7fd fffe 	bl	8005c98 <_free_r>
 8007c9c:	e7c7      	b.n	8007c2e <__ssputs_r+0x46>
	...

08007ca0 <_svfiprintf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	4698      	mov	r8, r3
 8007ca6:	898b      	ldrh	r3, [r1, #12]
 8007ca8:	4607      	mov	r7, r0
 8007caa:	061b      	lsls	r3, r3, #24
 8007cac:	460d      	mov	r5, r1
 8007cae:	4614      	mov	r4, r2
 8007cb0:	b09d      	sub	sp, #116	; 0x74
 8007cb2:	d50e      	bpl.n	8007cd2 <_svfiprintf_r+0x32>
 8007cb4:	690b      	ldr	r3, [r1, #16]
 8007cb6:	b963      	cbnz	r3, 8007cd2 <_svfiprintf_r+0x32>
 8007cb8:	2140      	movs	r1, #64	; 0x40
 8007cba:	f7fe f855 	bl	8005d68 <_malloc_r>
 8007cbe:	6028      	str	r0, [r5, #0]
 8007cc0:	6128      	str	r0, [r5, #16]
 8007cc2:	b920      	cbnz	r0, 8007cce <_svfiprintf_r+0x2e>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	e0d1      	b.n	8007e72 <_svfiprintf_r+0x1d2>
 8007cce:	2340      	movs	r3, #64	; 0x40
 8007cd0:	616b      	str	r3, [r5, #20]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd6:	2320      	movs	r3, #32
 8007cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cdc:	2330      	movs	r3, #48	; 0x30
 8007cde:	f04f 0901 	mov.w	r9, #1
 8007ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ce6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e8c <_svfiprintf_r+0x1ec>
 8007cea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cee:	4623      	mov	r3, r4
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf6:	b10a      	cbz	r2, 8007cfc <_svfiprintf_r+0x5c>
 8007cf8:	2a25      	cmp	r2, #37	; 0x25
 8007cfa:	d1f9      	bne.n	8007cf0 <_svfiprintf_r+0x50>
 8007cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8007d00:	d00b      	beq.n	8007d1a <_svfiprintf_r+0x7a>
 8007d02:	465b      	mov	r3, fp
 8007d04:	4622      	mov	r2, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7ff ff6d 	bl	8007be8 <__ssputs_r>
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f000 80aa 	beq.w	8007e68 <_svfiprintf_r+0x1c8>
 8007d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d16:	445a      	add	r2, fp
 8007d18:	9209      	str	r2, [sp, #36]	; 0x24
 8007d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80a2 	beq.w	8007e68 <_svfiprintf_r+0x1c8>
 8007d24:	2300      	movs	r3, #0
 8007d26:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d2e:	f10a 0a01 	add.w	sl, sl, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	9307      	str	r3, [sp, #28]
 8007d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d3c:	4654      	mov	r4, sl
 8007d3e:	2205      	movs	r2, #5
 8007d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d44:	4851      	ldr	r0, [pc, #324]	; (8007e8c <_svfiprintf_r+0x1ec>)
 8007d46:	f7ff fb91 	bl	800746c <memchr>
 8007d4a:	9a04      	ldr	r2, [sp, #16]
 8007d4c:	b9d8      	cbnz	r0, 8007d86 <_svfiprintf_r+0xe6>
 8007d4e:	06d0      	lsls	r0, r2, #27
 8007d50:	bf44      	itt	mi
 8007d52:	2320      	movmi	r3, #32
 8007d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d58:	0711      	lsls	r1, r2, #28
 8007d5a:	bf44      	itt	mi
 8007d5c:	232b      	movmi	r3, #43	; 0x2b
 8007d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d62:	f89a 3000 	ldrb.w	r3, [sl]
 8007d66:	2b2a      	cmp	r3, #42	; 0x2a
 8007d68:	d015      	beq.n	8007d96 <_svfiprintf_r+0xf6>
 8007d6a:	4654      	mov	r4, sl
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	f04f 0c0a 	mov.w	ip, #10
 8007d72:	9a07      	ldr	r2, [sp, #28]
 8007d74:	4621      	mov	r1, r4
 8007d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7a:	3b30      	subs	r3, #48	; 0x30
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d94e      	bls.n	8007e1e <_svfiprintf_r+0x17e>
 8007d80:	b1b0      	cbz	r0, 8007db0 <_svfiprintf_r+0x110>
 8007d82:	9207      	str	r2, [sp, #28]
 8007d84:	e014      	b.n	8007db0 <_svfiprintf_r+0x110>
 8007d86:	eba0 0308 	sub.w	r3, r0, r8
 8007d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	46a2      	mov	sl, r4
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	e7d2      	b.n	8007d3c <_svfiprintf_r+0x9c>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	1d19      	adds	r1, r3, #4
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	9103      	str	r1, [sp, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfbb      	ittet	lt
 8007da2:	425b      	neglt	r3, r3
 8007da4:	f042 0202 	orrlt.w	r2, r2, #2
 8007da8:	9307      	strge	r3, [sp, #28]
 8007daa:	9307      	strlt	r3, [sp, #28]
 8007dac:	bfb8      	it	lt
 8007dae:	9204      	strlt	r2, [sp, #16]
 8007db0:	7823      	ldrb	r3, [r4, #0]
 8007db2:	2b2e      	cmp	r3, #46	; 0x2e
 8007db4:	d10c      	bne.n	8007dd0 <_svfiprintf_r+0x130>
 8007db6:	7863      	ldrb	r3, [r4, #1]
 8007db8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dba:	d135      	bne.n	8007e28 <_svfiprintf_r+0x188>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	3402      	adds	r4, #2
 8007dc0:	1d1a      	adds	r2, r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	9203      	str	r2, [sp, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bfb8      	it	lt
 8007dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007e90 <_svfiprintf_r+0x1f0>
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	4650      	mov	r0, sl
 8007dd8:	7821      	ldrb	r1, [r4, #0]
 8007dda:	f7ff fb47 	bl	800746c <memchr>
 8007dde:	b140      	cbz	r0, 8007df2 <_svfiprintf_r+0x152>
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	eba0 000a 	sub.w	r0, r0, sl
 8007de6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	3401      	adds	r4, #1
 8007dee:	4303      	orrs	r3, r0
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df6:	2206      	movs	r2, #6
 8007df8:	4826      	ldr	r0, [pc, #152]	; (8007e94 <_svfiprintf_r+0x1f4>)
 8007dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dfe:	f7ff fb35 	bl	800746c <memchr>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d038      	beq.n	8007e78 <_svfiprintf_r+0x1d8>
 8007e06:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <_svfiprintf_r+0x1f8>)
 8007e08:	bb1b      	cbnz	r3, 8007e52 <_svfiprintf_r+0x1b2>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	3307      	adds	r3, #7
 8007e0e:	f023 0307 	bic.w	r3, r3, #7
 8007e12:	3308      	adds	r3, #8
 8007e14:	9303      	str	r3, [sp, #12]
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	4433      	add	r3, r6
 8007e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1c:	e767      	b.n	8007cee <_svfiprintf_r+0x4e>
 8007e1e:	460c      	mov	r4, r1
 8007e20:	2001      	movs	r0, #1
 8007e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e26:	e7a5      	b.n	8007d74 <_svfiprintf_r+0xd4>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f04f 0c0a 	mov.w	ip, #10
 8007e2e:	4619      	mov	r1, r3
 8007e30:	3401      	adds	r4, #1
 8007e32:	9305      	str	r3, [sp, #20]
 8007e34:	4620      	mov	r0, r4
 8007e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3a:	3a30      	subs	r2, #48	; 0x30
 8007e3c:	2a09      	cmp	r2, #9
 8007e3e:	d903      	bls.n	8007e48 <_svfiprintf_r+0x1a8>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0c5      	beq.n	8007dd0 <_svfiprintf_r+0x130>
 8007e44:	9105      	str	r1, [sp, #20]
 8007e46:	e7c3      	b.n	8007dd0 <_svfiprintf_r+0x130>
 8007e48:	4604      	mov	r4, r0
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e50:	e7f0      	b.n	8007e34 <_svfiprintf_r+0x194>
 8007e52:	ab03      	add	r3, sp, #12
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	462a      	mov	r2, r5
 8007e58:	4638      	mov	r0, r7
 8007e5a:	4b10      	ldr	r3, [pc, #64]	; (8007e9c <_svfiprintf_r+0x1fc>)
 8007e5c:	a904      	add	r1, sp, #16
 8007e5e:	f7fe f895 	bl	8005f8c <_printf_float>
 8007e62:	1c42      	adds	r2, r0, #1
 8007e64:	4606      	mov	r6, r0
 8007e66:	d1d6      	bne.n	8007e16 <_svfiprintf_r+0x176>
 8007e68:	89ab      	ldrh	r3, [r5, #12]
 8007e6a:	065b      	lsls	r3, r3, #25
 8007e6c:	f53f af2c 	bmi.w	8007cc8 <_svfiprintf_r+0x28>
 8007e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e72:	b01d      	add	sp, #116	; 0x74
 8007e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e78:	ab03      	add	r3, sp, #12
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	4638      	mov	r0, r7
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <_svfiprintf_r+0x1fc>)
 8007e82:	a904      	add	r1, sp, #16
 8007e84:	f7fe fb1e 	bl	80064c4 <_printf_i>
 8007e88:	e7eb      	b.n	8007e62 <_svfiprintf_r+0x1c2>
 8007e8a:	bf00      	nop
 8007e8c:	08008cf4 	.word	0x08008cf4
 8007e90:	08008cfa 	.word	0x08008cfa
 8007e94:	08008cfe 	.word	0x08008cfe
 8007e98:	08005f8d 	.word	0x08005f8d
 8007e9c:	08007be9 	.word	0x08007be9

08007ea0 <__assert_func>:
 8007ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ea2:	4614      	mov	r4, r2
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <__assert_func+0x2c>)
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68d8      	ldr	r0, [r3, #12]
 8007eae:	b14c      	cbz	r4, 8007ec4 <__assert_func+0x24>
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <__assert_func+0x30>)
 8007eb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007eb6:	9100      	str	r1, [sp, #0]
 8007eb8:	462b      	mov	r3, r5
 8007eba:	4906      	ldr	r1, [pc, #24]	; (8007ed4 <__assert_func+0x34>)
 8007ebc:	f000 f80e 	bl	8007edc <fiprintf>
 8007ec0:	f000 faa2 	bl	8008408 <abort>
 8007ec4:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <__assert_func+0x38>)
 8007ec6:	461c      	mov	r4, r3
 8007ec8:	e7f3      	b.n	8007eb2 <__assert_func+0x12>
 8007eca:	bf00      	nop
 8007ecc:	20000010 	.word	0x20000010
 8007ed0:	08008d05 	.word	0x08008d05
 8007ed4:	08008d12 	.word	0x08008d12
 8007ed8:	08008d40 	.word	0x08008d40

08007edc <fiprintf>:
 8007edc:	b40e      	push	{r1, r2, r3}
 8007ede:	b503      	push	{r0, r1, lr}
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	ab03      	add	r3, sp, #12
 8007ee4:	4805      	ldr	r0, [pc, #20]	; (8007efc <fiprintf+0x20>)
 8007ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eea:	6800      	ldr	r0, [r0, #0]
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	f000 f88d 	bl	800800c <_vfiprintf_r>
 8007ef2:	b002      	add	sp, #8
 8007ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ef8:	b003      	add	sp, #12
 8007efa:	4770      	bx	lr
 8007efc:	20000010 	.word	0x20000010

08007f00 <__retarget_lock_init_recursive>:
 8007f00:	4770      	bx	lr

08007f02 <__retarget_lock_acquire_recursive>:
 8007f02:	4770      	bx	lr

08007f04 <__retarget_lock_release_recursive>:
 8007f04:	4770      	bx	lr

08007f06 <__ascii_mbtowc>:
 8007f06:	b082      	sub	sp, #8
 8007f08:	b901      	cbnz	r1, 8007f0c <__ascii_mbtowc+0x6>
 8007f0a:	a901      	add	r1, sp, #4
 8007f0c:	b142      	cbz	r2, 8007f20 <__ascii_mbtowc+0x1a>
 8007f0e:	b14b      	cbz	r3, 8007f24 <__ascii_mbtowc+0x1e>
 8007f10:	7813      	ldrb	r3, [r2, #0]
 8007f12:	600b      	str	r3, [r1, #0]
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	1e10      	subs	r0, r2, #0
 8007f18:	bf18      	it	ne
 8007f1a:	2001      	movne	r0, #1
 8007f1c:	b002      	add	sp, #8
 8007f1e:	4770      	bx	lr
 8007f20:	4610      	mov	r0, r2
 8007f22:	e7fb      	b.n	8007f1c <__ascii_mbtowc+0x16>
 8007f24:	f06f 0001 	mvn.w	r0, #1
 8007f28:	e7f8      	b.n	8007f1c <__ascii_mbtowc+0x16>

08007f2a <memmove>:
 8007f2a:	4288      	cmp	r0, r1
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	eb01 0402 	add.w	r4, r1, r2
 8007f32:	d902      	bls.n	8007f3a <memmove+0x10>
 8007f34:	4284      	cmp	r4, r0
 8007f36:	4623      	mov	r3, r4
 8007f38:	d807      	bhi.n	8007f4a <memmove+0x20>
 8007f3a:	1e43      	subs	r3, r0, #1
 8007f3c:	42a1      	cmp	r1, r4
 8007f3e:	d008      	beq.n	8007f52 <memmove+0x28>
 8007f40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f48:	e7f8      	b.n	8007f3c <memmove+0x12>
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	4402      	add	r2, r0
 8007f4e:	428a      	cmp	r2, r1
 8007f50:	d100      	bne.n	8007f54 <memmove+0x2a>
 8007f52:	bd10      	pop	{r4, pc}
 8007f54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f5c:	e7f7      	b.n	8007f4e <memmove+0x24>

08007f5e <_realloc_r>:
 8007f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f62:	4680      	mov	r8, r0
 8007f64:	4614      	mov	r4, r2
 8007f66:	460e      	mov	r6, r1
 8007f68:	b921      	cbnz	r1, 8007f74 <_realloc_r+0x16>
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f70:	f7fd befa 	b.w	8005d68 <_malloc_r>
 8007f74:	b92a      	cbnz	r2, 8007f82 <_realloc_r+0x24>
 8007f76:	f7fd fe8f 	bl	8005c98 <_free_r>
 8007f7a:	4625      	mov	r5, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f82:	f000 fc61 	bl	8008848 <_malloc_usable_size_r>
 8007f86:	4284      	cmp	r4, r0
 8007f88:	4607      	mov	r7, r0
 8007f8a:	d802      	bhi.n	8007f92 <_realloc_r+0x34>
 8007f8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f90:	d812      	bhi.n	8007fb8 <_realloc_r+0x5a>
 8007f92:	4621      	mov	r1, r4
 8007f94:	4640      	mov	r0, r8
 8007f96:	f7fd fee7 	bl	8005d68 <_malloc_r>
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d0ed      	beq.n	8007f7c <_realloc_r+0x1e>
 8007fa0:	42bc      	cmp	r4, r7
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	bf28      	it	cs
 8007fa8:	463a      	movcs	r2, r7
 8007faa:	f7ff fa6d 	bl	8007488 <memcpy>
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	f7fd fe71 	bl	8005c98 <_free_r>
 8007fb6:	e7e1      	b.n	8007f7c <_realloc_r+0x1e>
 8007fb8:	4635      	mov	r5, r6
 8007fba:	e7df      	b.n	8007f7c <_realloc_r+0x1e>

08007fbc <__sfputc_r>:
 8007fbc:	6893      	ldr	r3, [r2, #8]
 8007fbe:	b410      	push	{r4}
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	6093      	str	r3, [r2, #8]
 8007fc6:	da07      	bge.n	8007fd8 <__sfputc_r+0x1c>
 8007fc8:	6994      	ldr	r4, [r2, #24]
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	db01      	blt.n	8007fd2 <__sfputc_r+0x16>
 8007fce:	290a      	cmp	r1, #10
 8007fd0:	d102      	bne.n	8007fd8 <__sfputc_r+0x1c>
 8007fd2:	bc10      	pop	{r4}
 8007fd4:	f000 b94a 	b.w	800826c <__swbuf_r>
 8007fd8:	6813      	ldr	r3, [r2, #0]
 8007fda:	1c58      	adds	r0, r3, #1
 8007fdc:	6010      	str	r0, [r2, #0]
 8007fde:	7019      	strb	r1, [r3, #0]
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	bc10      	pop	{r4}
 8007fe4:	4770      	bx	lr

08007fe6 <__sfputs_r>:
 8007fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	4614      	mov	r4, r2
 8007fee:	18d5      	adds	r5, r2, r3
 8007ff0:	42ac      	cmp	r4, r5
 8007ff2:	d101      	bne.n	8007ff8 <__sfputs_r+0x12>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	e007      	b.n	8008008 <__sfputs_r+0x22>
 8007ff8:	463a      	mov	r2, r7
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008000:	f7ff ffdc 	bl	8007fbc <__sfputc_r>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d1f3      	bne.n	8007ff0 <__sfputs_r+0xa>
 8008008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800800c <_vfiprintf_r>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	460d      	mov	r5, r1
 8008012:	4614      	mov	r4, r2
 8008014:	4698      	mov	r8, r3
 8008016:	4606      	mov	r6, r0
 8008018:	b09d      	sub	sp, #116	; 0x74
 800801a:	b118      	cbz	r0, 8008024 <_vfiprintf_r+0x18>
 800801c:	6983      	ldr	r3, [r0, #24]
 800801e:	b90b      	cbnz	r3, 8008024 <_vfiprintf_r+0x18>
 8008020:	f000 fb10 	bl	8008644 <__sinit>
 8008024:	4b89      	ldr	r3, [pc, #548]	; (800824c <_vfiprintf_r+0x240>)
 8008026:	429d      	cmp	r5, r3
 8008028:	d11b      	bne.n	8008062 <_vfiprintf_r+0x56>
 800802a:	6875      	ldr	r5, [r6, #4]
 800802c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800802e:	07d9      	lsls	r1, r3, #31
 8008030:	d405      	bmi.n	800803e <_vfiprintf_r+0x32>
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	059a      	lsls	r2, r3, #22
 8008036:	d402      	bmi.n	800803e <_vfiprintf_r+0x32>
 8008038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803a:	f7ff ff62 	bl	8007f02 <__retarget_lock_acquire_recursive>
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	071b      	lsls	r3, r3, #28
 8008042:	d501      	bpl.n	8008048 <_vfiprintf_r+0x3c>
 8008044:	692b      	ldr	r3, [r5, #16]
 8008046:	b9eb      	cbnz	r3, 8008084 <_vfiprintf_r+0x78>
 8008048:	4629      	mov	r1, r5
 800804a:	4630      	mov	r0, r6
 800804c:	f000 f96e 	bl	800832c <__swsetup_r>
 8008050:	b1c0      	cbz	r0, 8008084 <_vfiprintf_r+0x78>
 8008052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008054:	07dc      	lsls	r4, r3, #31
 8008056:	d50e      	bpl.n	8008076 <_vfiprintf_r+0x6a>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	b01d      	add	sp, #116	; 0x74
 800805e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008062:	4b7b      	ldr	r3, [pc, #492]	; (8008250 <_vfiprintf_r+0x244>)
 8008064:	429d      	cmp	r5, r3
 8008066:	d101      	bne.n	800806c <_vfiprintf_r+0x60>
 8008068:	68b5      	ldr	r5, [r6, #8]
 800806a:	e7df      	b.n	800802c <_vfiprintf_r+0x20>
 800806c:	4b79      	ldr	r3, [pc, #484]	; (8008254 <_vfiprintf_r+0x248>)
 800806e:	429d      	cmp	r5, r3
 8008070:	bf08      	it	eq
 8008072:	68f5      	ldreq	r5, [r6, #12]
 8008074:	e7da      	b.n	800802c <_vfiprintf_r+0x20>
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	0598      	lsls	r0, r3, #22
 800807a:	d4ed      	bmi.n	8008058 <_vfiprintf_r+0x4c>
 800807c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800807e:	f7ff ff41 	bl	8007f04 <__retarget_lock_release_recursive>
 8008082:	e7e9      	b.n	8008058 <_vfiprintf_r+0x4c>
 8008084:	2300      	movs	r3, #0
 8008086:	9309      	str	r3, [sp, #36]	; 0x24
 8008088:	2320      	movs	r3, #32
 800808a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800808e:	2330      	movs	r3, #48	; 0x30
 8008090:	f04f 0901 	mov.w	r9, #1
 8008094:	f8cd 800c 	str.w	r8, [sp, #12]
 8008098:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008258 <_vfiprintf_r+0x24c>
 800809c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080a0:	4623      	mov	r3, r4
 80080a2:	469a      	mov	sl, r3
 80080a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080a8:	b10a      	cbz	r2, 80080ae <_vfiprintf_r+0xa2>
 80080aa:	2a25      	cmp	r2, #37	; 0x25
 80080ac:	d1f9      	bne.n	80080a2 <_vfiprintf_r+0x96>
 80080ae:	ebba 0b04 	subs.w	fp, sl, r4
 80080b2:	d00b      	beq.n	80080cc <_vfiprintf_r+0xc0>
 80080b4:	465b      	mov	r3, fp
 80080b6:	4622      	mov	r2, r4
 80080b8:	4629      	mov	r1, r5
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7ff ff93 	bl	8007fe6 <__sfputs_r>
 80080c0:	3001      	adds	r0, #1
 80080c2:	f000 80aa 	beq.w	800821a <_vfiprintf_r+0x20e>
 80080c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080c8:	445a      	add	r2, fp
 80080ca:	9209      	str	r2, [sp, #36]	; 0x24
 80080cc:	f89a 3000 	ldrb.w	r3, [sl]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80a2 	beq.w	800821a <_vfiprintf_r+0x20e>
 80080d6:	2300      	movs	r3, #0
 80080d8:	f04f 32ff 	mov.w	r2, #4294967295
 80080dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e0:	f10a 0a01 	add.w	sl, sl, #1
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	9307      	str	r3, [sp, #28]
 80080e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ec:	931a      	str	r3, [sp, #104]	; 0x68
 80080ee:	4654      	mov	r4, sl
 80080f0:	2205      	movs	r2, #5
 80080f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f6:	4858      	ldr	r0, [pc, #352]	; (8008258 <_vfiprintf_r+0x24c>)
 80080f8:	f7ff f9b8 	bl	800746c <memchr>
 80080fc:	9a04      	ldr	r2, [sp, #16]
 80080fe:	b9d8      	cbnz	r0, 8008138 <_vfiprintf_r+0x12c>
 8008100:	06d1      	lsls	r1, r2, #27
 8008102:	bf44      	itt	mi
 8008104:	2320      	movmi	r3, #32
 8008106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800810a:	0713      	lsls	r3, r2, #28
 800810c:	bf44      	itt	mi
 800810e:	232b      	movmi	r3, #43	; 0x2b
 8008110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008114:	f89a 3000 	ldrb.w	r3, [sl]
 8008118:	2b2a      	cmp	r3, #42	; 0x2a
 800811a:	d015      	beq.n	8008148 <_vfiprintf_r+0x13c>
 800811c:	4654      	mov	r4, sl
 800811e:	2000      	movs	r0, #0
 8008120:	f04f 0c0a 	mov.w	ip, #10
 8008124:	9a07      	ldr	r2, [sp, #28]
 8008126:	4621      	mov	r1, r4
 8008128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800812c:	3b30      	subs	r3, #48	; 0x30
 800812e:	2b09      	cmp	r3, #9
 8008130:	d94e      	bls.n	80081d0 <_vfiprintf_r+0x1c4>
 8008132:	b1b0      	cbz	r0, 8008162 <_vfiprintf_r+0x156>
 8008134:	9207      	str	r2, [sp, #28]
 8008136:	e014      	b.n	8008162 <_vfiprintf_r+0x156>
 8008138:	eba0 0308 	sub.w	r3, r0, r8
 800813c:	fa09 f303 	lsl.w	r3, r9, r3
 8008140:	4313      	orrs	r3, r2
 8008142:	46a2      	mov	sl, r4
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	e7d2      	b.n	80080ee <_vfiprintf_r+0xe2>
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	1d19      	adds	r1, r3, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	9103      	str	r1, [sp, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	bfbb      	ittet	lt
 8008154:	425b      	neglt	r3, r3
 8008156:	f042 0202 	orrlt.w	r2, r2, #2
 800815a:	9307      	strge	r3, [sp, #28]
 800815c:	9307      	strlt	r3, [sp, #28]
 800815e:	bfb8      	it	lt
 8008160:	9204      	strlt	r2, [sp, #16]
 8008162:	7823      	ldrb	r3, [r4, #0]
 8008164:	2b2e      	cmp	r3, #46	; 0x2e
 8008166:	d10c      	bne.n	8008182 <_vfiprintf_r+0x176>
 8008168:	7863      	ldrb	r3, [r4, #1]
 800816a:	2b2a      	cmp	r3, #42	; 0x2a
 800816c:	d135      	bne.n	80081da <_vfiprintf_r+0x1ce>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	3402      	adds	r4, #2
 8008172:	1d1a      	adds	r2, r3, #4
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	9203      	str	r2, [sp, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	bfb8      	it	lt
 800817c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008180:	9305      	str	r3, [sp, #20]
 8008182:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800825c <_vfiprintf_r+0x250>
 8008186:	2203      	movs	r2, #3
 8008188:	4650      	mov	r0, sl
 800818a:	7821      	ldrb	r1, [r4, #0]
 800818c:	f7ff f96e 	bl	800746c <memchr>
 8008190:	b140      	cbz	r0, 80081a4 <_vfiprintf_r+0x198>
 8008192:	2340      	movs	r3, #64	; 0x40
 8008194:	eba0 000a 	sub.w	r0, r0, sl
 8008198:	fa03 f000 	lsl.w	r0, r3, r0
 800819c:	9b04      	ldr	r3, [sp, #16]
 800819e:	3401      	adds	r4, #1
 80081a0:	4303      	orrs	r3, r0
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	2206      	movs	r2, #6
 80081aa:	482d      	ldr	r0, [pc, #180]	; (8008260 <_vfiprintf_r+0x254>)
 80081ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081b0:	f7ff f95c 	bl	800746c <memchr>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d03f      	beq.n	8008238 <_vfiprintf_r+0x22c>
 80081b8:	4b2a      	ldr	r3, [pc, #168]	; (8008264 <_vfiprintf_r+0x258>)
 80081ba:	bb1b      	cbnz	r3, 8008204 <_vfiprintf_r+0x1f8>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	3307      	adds	r3, #7
 80081c0:	f023 0307 	bic.w	r3, r3, #7
 80081c4:	3308      	adds	r3, #8
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ca:	443b      	add	r3, r7
 80081cc:	9309      	str	r3, [sp, #36]	; 0x24
 80081ce:	e767      	b.n	80080a0 <_vfiprintf_r+0x94>
 80081d0:	460c      	mov	r4, r1
 80081d2:	2001      	movs	r0, #1
 80081d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d8:	e7a5      	b.n	8008126 <_vfiprintf_r+0x11a>
 80081da:	2300      	movs	r3, #0
 80081dc:	f04f 0c0a 	mov.w	ip, #10
 80081e0:	4619      	mov	r1, r3
 80081e2:	3401      	adds	r4, #1
 80081e4:	9305      	str	r3, [sp, #20]
 80081e6:	4620      	mov	r0, r4
 80081e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ec:	3a30      	subs	r2, #48	; 0x30
 80081ee:	2a09      	cmp	r2, #9
 80081f0:	d903      	bls.n	80081fa <_vfiprintf_r+0x1ee>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0c5      	beq.n	8008182 <_vfiprintf_r+0x176>
 80081f6:	9105      	str	r1, [sp, #20]
 80081f8:	e7c3      	b.n	8008182 <_vfiprintf_r+0x176>
 80081fa:	4604      	mov	r4, r0
 80081fc:	2301      	movs	r3, #1
 80081fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008202:	e7f0      	b.n	80081e6 <_vfiprintf_r+0x1da>
 8008204:	ab03      	add	r3, sp, #12
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	462a      	mov	r2, r5
 800820a:	4630      	mov	r0, r6
 800820c:	4b16      	ldr	r3, [pc, #88]	; (8008268 <_vfiprintf_r+0x25c>)
 800820e:	a904      	add	r1, sp, #16
 8008210:	f7fd febc 	bl	8005f8c <_printf_float>
 8008214:	4607      	mov	r7, r0
 8008216:	1c78      	adds	r0, r7, #1
 8008218:	d1d6      	bne.n	80081c8 <_vfiprintf_r+0x1bc>
 800821a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800821c:	07d9      	lsls	r1, r3, #31
 800821e:	d405      	bmi.n	800822c <_vfiprintf_r+0x220>
 8008220:	89ab      	ldrh	r3, [r5, #12]
 8008222:	059a      	lsls	r2, r3, #22
 8008224:	d402      	bmi.n	800822c <_vfiprintf_r+0x220>
 8008226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008228:	f7ff fe6c 	bl	8007f04 <__retarget_lock_release_recursive>
 800822c:	89ab      	ldrh	r3, [r5, #12]
 800822e:	065b      	lsls	r3, r3, #25
 8008230:	f53f af12 	bmi.w	8008058 <_vfiprintf_r+0x4c>
 8008234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008236:	e711      	b.n	800805c <_vfiprintf_r+0x50>
 8008238:	ab03      	add	r3, sp, #12
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	462a      	mov	r2, r5
 800823e:	4630      	mov	r0, r6
 8008240:	4b09      	ldr	r3, [pc, #36]	; (8008268 <_vfiprintf_r+0x25c>)
 8008242:	a904      	add	r1, sp, #16
 8008244:	f7fe f93e 	bl	80064c4 <_printf_i>
 8008248:	e7e4      	b.n	8008214 <_vfiprintf_r+0x208>
 800824a:	bf00      	nop
 800824c:	08008e6c 	.word	0x08008e6c
 8008250:	08008e8c 	.word	0x08008e8c
 8008254:	08008e4c 	.word	0x08008e4c
 8008258:	08008cf4 	.word	0x08008cf4
 800825c:	08008cfa 	.word	0x08008cfa
 8008260:	08008cfe 	.word	0x08008cfe
 8008264:	08005f8d 	.word	0x08005f8d
 8008268:	08007fe7 	.word	0x08007fe7

0800826c <__swbuf_r>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	460e      	mov	r6, r1
 8008270:	4614      	mov	r4, r2
 8008272:	4605      	mov	r5, r0
 8008274:	b118      	cbz	r0, 800827e <__swbuf_r+0x12>
 8008276:	6983      	ldr	r3, [r0, #24]
 8008278:	b90b      	cbnz	r3, 800827e <__swbuf_r+0x12>
 800827a:	f000 f9e3 	bl	8008644 <__sinit>
 800827e:	4b21      	ldr	r3, [pc, #132]	; (8008304 <__swbuf_r+0x98>)
 8008280:	429c      	cmp	r4, r3
 8008282:	d12b      	bne.n	80082dc <__swbuf_r+0x70>
 8008284:	686c      	ldr	r4, [r5, #4]
 8008286:	69a3      	ldr	r3, [r4, #24]
 8008288:	60a3      	str	r3, [r4, #8]
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	071a      	lsls	r2, r3, #28
 800828e:	d52f      	bpl.n	80082f0 <__swbuf_r+0x84>
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	b36b      	cbz	r3, 80082f0 <__swbuf_r+0x84>
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	6820      	ldr	r0, [r4, #0]
 8008298:	b2f6      	uxtb	r6, r6
 800829a:	1ac0      	subs	r0, r0, r3
 800829c:	6963      	ldr	r3, [r4, #20]
 800829e:	4637      	mov	r7, r6
 80082a0:	4283      	cmp	r3, r0
 80082a2:	dc04      	bgt.n	80082ae <__swbuf_r+0x42>
 80082a4:	4621      	mov	r1, r4
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 f938 	bl	800851c <_fflush_r>
 80082ac:	bb30      	cbnz	r0, 80082fc <__swbuf_r+0x90>
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	3001      	adds	r0, #1
 80082b2:	3b01      	subs	r3, #1
 80082b4:	60a3      	str	r3, [r4, #8]
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	6022      	str	r2, [r4, #0]
 80082bc:	701e      	strb	r6, [r3, #0]
 80082be:	6963      	ldr	r3, [r4, #20]
 80082c0:	4283      	cmp	r3, r0
 80082c2:	d004      	beq.n	80082ce <__swbuf_r+0x62>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	07db      	lsls	r3, r3, #31
 80082c8:	d506      	bpl.n	80082d8 <__swbuf_r+0x6c>
 80082ca:	2e0a      	cmp	r6, #10
 80082cc:	d104      	bne.n	80082d8 <__swbuf_r+0x6c>
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f000 f923 	bl	800851c <_fflush_r>
 80082d6:	b988      	cbnz	r0, 80082fc <__swbuf_r+0x90>
 80082d8:	4638      	mov	r0, r7
 80082da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <__swbuf_r+0x9c>)
 80082de:	429c      	cmp	r4, r3
 80082e0:	d101      	bne.n	80082e6 <__swbuf_r+0x7a>
 80082e2:	68ac      	ldr	r4, [r5, #8]
 80082e4:	e7cf      	b.n	8008286 <__swbuf_r+0x1a>
 80082e6:	4b09      	ldr	r3, [pc, #36]	; (800830c <__swbuf_r+0xa0>)
 80082e8:	429c      	cmp	r4, r3
 80082ea:	bf08      	it	eq
 80082ec:	68ec      	ldreq	r4, [r5, #12]
 80082ee:	e7ca      	b.n	8008286 <__swbuf_r+0x1a>
 80082f0:	4621      	mov	r1, r4
 80082f2:	4628      	mov	r0, r5
 80082f4:	f000 f81a 	bl	800832c <__swsetup_r>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d0cb      	beq.n	8008294 <__swbuf_r+0x28>
 80082fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008300:	e7ea      	b.n	80082d8 <__swbuf_r+0x6c>
 8008302:	bf00      	nop
 8008304:	08008e6c 	.word	0x08008e6c
 8008308:	08008e8c 	.word	0x08008e8c
 800830c:	08008e4c 	.word	0x08008e4c

08008310 <__ascii_wctomb>:
 8008310:	4603      	mov	r3, r0
 8008312:	4608      	mov	r0, r1
 8008314:	b141      	cbz	r1, 8008328 <__ascii_wctomb+0x18>
 8008316:	2aff      	cmp	r2, #255	; 0xff
 8008318:	d904      	bls.n	8008324 <__ascii_wctomb+0x14>
 800831a:	228a      	movs	r2, #138	; 0x8a
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	4770      	bx	lr
 8008324:	2001      	movs	r0, #1
 8008326:	700a      	strb	r2, [r1, #0]
 8008328:	4770      	bx	lr
	...

0800832c <__swsetup_r>:
 800832c:	4b32      	ldr	r3, [pc, #200]	; (80083f8 <__swsetup_r+0xcc>)
 800832e:	b570      	push	{r4, r5, r6, lr}
 8008330:	681d      	ldr	r5, [r3, #0]
 8008332:	4606      	mov	r6, r0
 8008334:	460c      	mov	r4, r1
 8008336:	b125      	cbz	r5, 8008342 <__swsetup_r+0x16>
 8008338:	69ab      	ldr	r3, [r5, #24]
 800833a:	b913      	cbnz	r3, 8008342 <__swsetup_r+0x16>
 800833c:	4628      	mov	r0, r5
 800833e:	f000 f981 	bl	8008644 <__sinit>
 8008342:	4b2e      	ldr	r3, [pc, #184]	; (80083fc <__swsetup_r+0xd0>)
 8008344:	429c      	cmp	r4, r3
 8008346:	d10f      	bne.n	8008368 <__swsetup_r+0x3c>
 8008348:	686c      	ldr	r4, [r5, #4]
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008350:	0719      	lsls	r1, r3, #28
 8008352:	d42c      	bmi.n	80083ae <__swsetup_r+0x82>
 8008354:	06dd      	lsls	r5, r3, #27
 8008356:	d411      	bmi.n	800837c <__swsetup_r+0x50>
 8008358:	2309      	movs	r3, #9
 800835a:	6033      	str	r3, [r6, #0]
 800835c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	e03e      	b.n	80083e6 <__swsetup_r+0xba>
 8008368:	4b25      	ldr	r3, [pc, #148]	; (8008400 <__swsetup_r+0xd4>)
 800836a:	429c      	cmp	r4, r3
 800836c:	d101      	bne.n	8008372 <__swsetup_r+0x46>
 800836e:	68ac      	ldr	r4, [r5, #8]
 8008370:	e7eb      	b.n	800834a <__swsetup_r+0x1e>
 8008372:	4b24      	ldr	r3, [pc, #144]	; (8008404 <__swsetup_r+0xd8>)
 8008374:	429c      	cmp	r4, r3
 8008376:	bf08      	it	eq
 8008378:	68ec      	ldreq	r4, [r5, #12]
 800837a:	e7e6      	b.n	800834a <__swsetup_r+0x1e>
 800837c:	0758      	lsls	r0, r3, #29
 800837e:	d512      	bpl.n	80083a6 <__swsetup_r+0x7a>
 8008380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008382:	b141      	cbz	r1, 8008396 <__swsetup_r+0x6a>
 8008384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008388:	4299      	cmp	r1, r3
 800838a:	d002      	beq.n	8008392 <__swsetup_r+0x66>
 800838c:	4630      	mov	r0, r6
 800838e:	f7fd fc83 	bl	8005c98 <_free_r>
 8008392:	2300      	movs	r3, #0
 8008394:	6363      	str	r3, [r4, #52]	; 0x34
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	2300      	movs	r3, #0
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f043 0308 	orr.w	r3, r3, #8
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	b94b      	cbnz	r3, 80083c6 <__swsetup_r+0x9a>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083bc:	d003      	beq.n	80083c6 <__swsetup_r+0x9a>
 80083be:	4621      	mov	r1, r4
 80083c0:	4630      	mov	r0, r6
 80083c2:	f000 fa01 	bl	80087c8 <__smakebuf_r>
 80083c6:	89a0      	ldrh	r0, [r4, #12]
 80083c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083cc:	f010 0301 	ands.w	r3, r0, #1
 80083d0:	d00a      	beq.n	80083e8 <__swsetup_r+0xbc>
 80083d2:	2300      	movs	r3, #0
 80083d4:	60a3      	str	r3, [r4, #8]
 80083d6:	6963      	ldr	r3, [r4, #20]
 80083d8:	425b      	negs	r3, r3
 80083da:	61a3      	str	r3, [r4, #24]
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	b943      	cbnz	r3, 80083f2 <__swsetup_r+0xc6>
 80083e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083e4:	d1ba      	bne.n	800835c <__swsetup_r+0x30>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	0781      	lsls	r1, r0, #30
 80083ea:	bf58      	it	pl
 80083ec:	6963      	ldrpl	r3, [r4, #20]
 80083ee:	60a3      	str	r3, [r4, #8]
 80083f0:	e7f4      	b.n	80083dc <__swsetup_r+0xb0>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e7f7      	b.n	80083e6 <__swsetup_r+0xba>
 80083f6:	bf00      	nop
 80083f8:	20000010 	.word	0x20000010
 80083fc:	08008e6c 	.word	0x08008e6c
 8008400:	08008e8c 	.word	0x08008e8c
 8008404:	08008e4c 	.word	0x08008e4c

08008408 <abort>:
 8008408:	2006      	movs	r0, #6
 800840a:	b508      	push	{r3, lr}
 800840c:	f000 fa4c 	bl	80088a8 <raise>
 8008410:	2001      	movs	r0, #1
 8008412:	f7f9 fd9c 	bl	8001f4e <_exit>
	...

08008418 <__sflush_r>:
 8008418:	898a      	ldrh	r2, [r1, #12]
 800841a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841c:	4605      	mov	r5, r0
 800841e:	0710      	lsls	r0, r2, #28
 8008420:	460c      	mov	r4, r1
 8008422:	d457      	bmi.n	80084d4 <__sflush_r+0xbc>
 8008424:	684b      	ldr	r3, [r1, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	dc04      	bgt.n	8008434 <__sflush_r+0x1c>
 800842a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	dc01      	bgt.n	8008434 <__sflush_r+0x1c>
 8008430:	2000      	movs	r0, #0
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008436:	2e00      	cmp	r6, #0
 8008438:	d0fa      	beq.n	8008430 <__sflush_r+0x18>
 800843a:	2300      	movs	r3, #0
 800843c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008440:	682f      	ldr	r7, [r5, #0]
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	d032      	beq.n	80084ac <__sflush_r+0x94>
 8008446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	075a      	lsls	r2, r3, #29
 800844c:	d505      	bpl.n	800845a <__sflush_r+0x42>
 800844e:	6863      	ldr	r3, [r4, #4]
 8008450:	1ac0      	subs	r0, r0, r3
 8008452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008454:	b10b      	cbz	r3, 800845a <__sflush_r+0x42>
 8008456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008458:	1ac0      	subs	r0, r0, r3
 800845a:	2300      	movs	r3, #0
 800845c:	4602      	mov	r2, r0
 800845e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008460:	4628      	mov	r0, r5
 8008462:	6a21      	ldr	r1, [r4, #32]
 8008464:	47b0      	blx	r6
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	d106      	bne.n	800847a <__sflush_r+0x62>
 800846c:	6829      	ldr	r1, [r5, #0]
 800846e:	291d      	cmp	r1, #29
 8008470:	d82c      	bhi.n	80084cc <__sflush_r+0xb4>
 8008472:	4a29      	ldr	r2, [pc, #164]	; (8008518 <__sflush_r+0x100>)
 8008474:	40ca      	lsrs	r2, r1
 8008476:	07d6      	lsls	r6, r2, #31
 8008478:	d528      	bpl.n	80084cc <__sflush_r+0xb4>
 800847a:	2200      	movs	r2, #0
 800847c:	6062      	str	r2, [r4, #4]
 800847e:	6922      	ldr	r2, [r4, #16]
 8008480:	04d9      	lsls	r1, r3, #19
 8008482:	6022      	str	r2, [r4, #0]
 8008484:	d504      	bpl.n	8008490 <__sflush_r+0x78>
 8008486:	1c42      	adds	r2, r0, #1
 8008488:	d101      	bne.n	800848e <__sflush_r+0x76>
 800848a:	682b      	ldr	r3, [r5, #0]
 800848c:	b903      	cbnz	r3, 8008490 <__sflush_r+0x78>
 800848e:	6560      	str	r0, [r4, #84]	; 0x54
 8008490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008492:	602f      	str	r7, [r5, #0]
 8008494:	2900      	cmp	r1, #0
 8008496:	d0cb      	beq.n	8008430 <__sflush_r+0x18>
 8008498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800849c:	4299      	cmp	r1, r3
 800849e:	d002      	beq.n	80084a6 <__sflush_r+0x8e>
 80084a0:	4628      	mov	r0, r5
 80084a2:	f7fd fbf9 	bl	8005c98 <_free_r>
 80084a6:	2000      	movs	r0, #0
 80084a8:	6360      	str	r0, [r4, #52]	; 0x34
 80084aa:	e7c2      	b.n	8008432 <__sflush_r+0x1a>
 80084ac:	6a21      	ldr	r1, [r4, #32]
 80084ae:	2301      	movs	r3, #1
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b0      	blx	r6
 80084b4:	1c41      	adds	r1, r0, #1
 80084b6:	d1c7      	bne.n	8008448 <__sflush_r+0x30>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0c4      	beq.n	8008448 <__sflush_r+0x30>
 80084be:	2b1d      	cmp	r3, #29
 80084c0:	d001      	beq.n	80084c6 <__sflush_r+0xae>
 80084c2:	2b16      	cmp	r3, #22
 80084c4:	d101      	bne.n	80084ca <__sflush_r+0xb2>
 80084c6:	602f      	str	r7, [r5, #0]
 80084c8:	e7b2      	b.n	8008430 <__sflush_r+0x18>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d0:	81a3      	strh	r3, [r4, #12]
 80084d2:	e7ae      	b.n	8008432 <__sflush_r+0x1a>
 80084d4:	690f      	ldr	r7, [r1, #16]
 80084d6:	2f00      	cmp	r7, #0
 80084d8:	d0aa      	beq.n	8008430 <__sflush_r+0x18>
 80084da:	0793      	lsls	r3, r2, #30
 80084dc:	bf18      	it	ne
 80084de:	2300      	movne	r3, #0
 80084e0:	680e      	ldr	r6, [r1, #0]
 80084e2:	bf08      	it	eq
 80084e4:	694b      	ldreq	r3, [r1, #20]
 80084e6:	1bf6      	subs	r6, r6, r7
 80084e8:	600f      	str	r7, [r1, #0]
 80084ea:	608b      	str	r3, [r1, #8]
 80084ec:	2e00      	cmp	r6, #0
 80084ee:	dd9f      	ble.n	8008430 <__sflush_r+0x18>
 80084f0:	4633      	mov	r3, r6
 80084f2:	463a      	mov	r2, r7
 80084f4:	4628      	mov	r0, r5
 80084f6:	6a21      	ldr	r1, [r4, #32]
 80084f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80084fc:	47e0      	blx	ip
 80084fe:	2800      	cmp	r0, #0
 8008500:	dc06      	bgt.n	8008510 <__sflush_r+0xf8>
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f04f 30ff 	mov.w	r0, #4294967295
 8008508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	e790      	b.n	8008432 <__sflush_r+0x1a>
 8008510:	4407      	add	r7, r0
 8008512:	1a36      	subs	r6, r6, r0
 8008514:	e7ea      	b.n	80084ec <__sflush_r+0xd4>
 8008516:	bf00      	nop
 8008518:	20400001 	.word	0x20400001

0800851c <_fflush_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	690b      	ldr	r3, [r1, #16]
 8008520:	4605      	mov	r5, r0
 8008522:	460c      	mov	r4, r1
 8008524:	b913      	cbnz	r3, 800852c <_fflush_r+0x10>
 8008526:	2500      	movs	r5, #0
 8008528:	4628      	mov	r0, r5
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	b118      	cbz	r0, 8008536 <_fflush_r+0x1a>
 800852e:	6983      	ldr	r3, [r0, #24]
 8008530:	b90b      	cbnz	r3, 8008536 <_fflush_r+0x1a>
 8008532:	f000 f887 	bl	8008644 <__sinit>
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <_fflush_r+0x6c>)
 8008538:	429c      	cmp	r4, r3
 800853a:	d11b      	bne.n	8008574 <_fflush_r+0x58>
 800853c:	686c      	ldr	r4, [r5, #4]
 800853e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0ef      	beq.n	8008526 <_fflush_r+0xa>
 8008546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008548:	07d0      	lsls	r0, r2, #31
 800854a:	d404      	bmi.n	8008556 <_fflush_r+0x3a>
 800854c:	0599      	lsls	r1, r3, #22
 800854e:	d402      	bmi.n	8008556 <_fflush_r+0x3a>
 8008550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008552:	f7ff fcd6 	bl	8007f02 <__retarget_lock_acquire_recursive>
 8008556:	4628      	mov	r0, r5
 8008558:	4621      	mov	r1, r4
 800855a:	f7ff ff5d 	bl	8008418 <__sflush_r>
 800855e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008560:	4605      	mov	r5, r0
 8008562:	07da      	lsls	r2, r3, #31
 8008564:	d4e0      	bmi.n	8008528 <_fflush_r+0xc>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	059b      	lsls	r3, r3, #22
 800856a:	d4dd      	bmi.n	8008528 <_fflush_r+0xc>
 800856c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800856e:	f7ff fcc9 	bl	8007f04 <__retarget_lock_release_recursive>
 8008572:	e7d9      	b.n	8008528 <_fflush_r+0xc>
 8008574:	4b05      	ldr	r3, [pc, #20]	; (800858c <_fflush_r+0x70>)
 8008576:	429c      	cmp	r4, r3
 8008578:	d101      	bne.n	800857e <_fflush_r+0x62>
 800857a:	68ac      	ldr	r4, [r5, #8]
 800857c:	e7df      	b.n	800853e <_fflush_r+0x22>
 800857e:	4b04      	ldr	r3, [pc, #16]	; (8008590 <_fflush_r+0x74>)
 8008580:	429c      	cmp	r4, r3
 8008582:	bf08      	it	eq
 8008584:	68ec      	ldreq	r4, [r5, #12]
 8008586:	e7da      	b.n	800853e <_fflush_r+0x22>
 8008588:	08008e6c 	.word	0x08008e6c
 800858c:	08008e8c 	.word	0x08008e8c
 8008590:	08008e4c 	.word	0x08008e4c

08008594 <std>:
 8008594:	2300      	movs	r3, #0
 8008596:	b510      	push	{r4, lr}
 8008598:	4604      	mov	r4, r0
 800859a:	e9c0 3300 	strd	r3, r3, [r0]
 800859e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085a2:	6083      	str	r3, [r0, #8]
 80085a4:	8181      	strh	r1, [r0, #12]
 80085a6:	6643      	str	r3, [r0, #100]	; 0x64
 80085a8:	81c2      	strh	r2, [r0, #14]
 80085aa:	6183      	str	r3, [r0, #24]
 80085ac:	4619      	mov	r1, r3
 80085ae:	2208      	movs	r2, #8
 80085b0:	305c      	adds	r0, #92	; 0x5c
 80085b2:	f7fd fb69 	bl	8005c88 <memset>
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x38>)
 80085b8:	6224      	str	r4, [r4, #32]
 80085ba:	6263      	str	r3, [r4, #36]	; 0x24
 80085bc:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <std+0x3c>)
 80085be:	62a3      	str	r3, [r4, #40]	; 0x28
 80085c0:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <std+0x40>)
 80085c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085c4:	4b04      	ldr	r3, [pc, #16]	; (80085d8 <std+0x44>)
 80085c6:	6323      	str	r3, [r4, #48]	; 0x30
 80085c8:	bd10      	pop	{r4, pc}
 80085ca:	bf00      	nop
 80085cc:	080088e1 	.word	0x080088e1
 80085d0:	08008903 	.word	0x08008903
 80085d4:	0800893b 	.word	0x0800893b
 80085d8:	0800895f 	.word	0x0800895f

080085dc <_cleanup_r>:
 80085dc:	4901      	ldr	r1, [pc, #4]	; (80085e4 <_cleanup_r+0x8>)
 80085de:	f000 b8af 	b.w	8008740 <_fwalk_reent>
 80085e2:	bf00      	nop
 80085e4:	0800851d 	.word	0x0800851d

080085e8 <__sfmoreglue>:
 80085e8:	2268      	movs	r2, #104	; 0x68
 80085ea:	b570      	push	{r4, r5, r6, lr}
 80085ec:	1e4d      	subs	r5, r1, #1
 80085ee:	4355      	muls	r5, r2
 80085f0:	460e      	mov	r6, r1
 80085f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085f6:	f7fd fbb7 	bl	8005d68 <_malloc_r>
 80085fa:	4604      	mov	r4, r0
 80085fc:	b140      	cbz	r0, 8008610 <__sfmoreglue+0x28>
 80085fe:	2100      	movs	r1, #0
 8008600:	e9c0 1600 	strd	r1, r6, [r0]
 8008604:	300c      	adds	r0, #12
 8008606:	60a0      	str	r0, [r4, #8]
 8008608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800860c:	f7fd fb3c 	bl	8005c88 <memset>
 8008610:	4620      	mov	r0, r4
 8008612:	bd70      	pop	{r4, r5, r6, pc}

08008614 <__sfp_lock_acquire>:
 8008614:	4801      	ldr	r0, [pc, #4]	; (800861c <__sfp_lock_acquire+0x8>)
 8008616:	f7ff bc74 	b.w	8007f02 <__retarget_lock_acquire_recursive>
 800861a:	bf00      	nop
 800861c:	200004c9 	.word	0x200004c9

08008620 <__sfp_lock_release>:
 8008620:	4801      	ldr	r0, [pc, #4]	; (8008628 <__sfp_lock_release+0x8>)
 8008622:	f7ff bc6f 	b.w	8007f04 <__retarget_lock_release_recursive>
 8008626:	bf00      	nop
 8008628:	200004c9 	.word	0x200004c9

0800862c <__sinit_lock_acquire>:
 800862c:	4801      	ldr	r0, [pc, #4]	; (8008634 <__sinit_lock_acquire+0x8>)
 800862e:	f7ff bc68 	b.w	8007f02 <__retarget_lock_acquire_recursive>
 8008632:	bf00      	nop
 8008634:	200004ca 	.word	0x200004ca

08008638 <__sinit_lock_release>:
 8008638:	4801      	ldr	r0, [pc, #4]	; (8008640 <__sinit_lock_release+0x8>)
 800863a:	f7ff bc63 	b.w	8007f04 <__retarget_lock_release_recursive>
 800863e:	bf00      	nop
 8008640:	200004ca 	.word	0x200004ca

08008644 <__sinit>:
 8008644:	b510      	push	{r4, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	f7ff fff0 	bl	800862c <__sinit_lock_acquire>
 800864c:	69a3      	ldr	r3, [r4, #24]
 800864e:	b11b      	cbz	r3, 8008658 <__sinit+0x14>
 8008650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008654:	f7ff bff0 	b.w	8008638 <__sinit_lock_release>
 8008658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800865c:	6523      	str	r3, [r4, #80]	; 0x50
 800865e:	4b13      	ldr	r3, [pc, #76]	; (80086ac <__sinit+0x68>)
 8008660:	4a13      	ldr	r2, [pc, #76]	; (80086b0 <__sinit+0x6c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	62a2      	str	r2, [r4, #40]	; 0x28
 8008666:	42a3      	cmp	r3, r4
 8008668:	bf08      	it	eq
 800866a:	2301      	moveq	r3, #1
 800866c:	4620      	mov	r0, r4
 800866e:	bf08      	it	eq
 8008670:	61a3      	streq	r3, [r4, #24]
 8008672:	f000 f81f 	bl	80086b4 <__sfp>
 8008676:	6060      	str	r0, [r4, #4]
 8008678:	4620      	mov	r0, r4
 800867a:	f000 f81b 	bl	80086b4 <__sfp>
 800867e:	60a0      	str	r0, [r4, #8]
 8008680:	4620      	mov	r0, r4
 8008682:	f000 f817 	bl	80086b4 <__sfp>
 8008686:	2200      	movs	r2, #0
 8008688:	2104      	movs	r1, #4
 800868a:	60e0      	str	r0, [r4, #12]
 800868c:	6860      	ldr	r0, [r4, #4]
 800868e:	f7ff ff81 	bl	8008594 <std>
 8008692:	2201      	movs	r2, #1
 8008694:	2109      	movs	r1, #9
 8008696:	68a0      	ldr	r0, [r4, #8]
 8008698:	f7ff ff7c 	bl	8008594 <std>
 800869c:	2202      	movs	r2, #2
 800869e:	2112      	movs	r1, #18
 80086a0:	68e0      	ldr	r0, [r4, #12]
 80086a2:	f7ff ff77 	bl	8008594 <std>
 80086a6:	2301      	movs	r3, #1
 80086a8:	61a3      	str	r3, [r4, #24]
 80086aa:	e7d1      	b.n	8008650 <__sinit+0xc>
 80086ac:	08008ad4 	.word	0x08008ad4
 80086b0:	080085dd 	.word	0x080085dd

080086b4 <__sfp>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	4607      	mov	r7, r0
 80086b8:	f7ff ffac 	bl	8008614 <__sfp_lock_acquire>
 80086bc:	4b1e      	ldr	r3, [pc, #120]	; (8008738 <__sfp+0x84>)
 80086be:	681e      	ldr	r6, [r3, #0]
 80086c0:	69b3      	ldr	r3, [r6, #24]
 80086c2:	b913      	cbnz	r3, 80086ca <__sfp+0x16>
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff ffbd 	bl	8008644 <__sinit>
 80086ca:	3648      	adds	r6, #72	; 0x48
 80086cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	d503      	bpl.n	80086dc <__sfp+0x28>
 80086d4:	6833      	ldr	r3, [r6, #0]
 80086d6:	b30b      	cbz	r3, 800871c <__sfp+0x68>
 80086d8:	6836      	ldr	r6, [r6, #0]
 80086da:	e7f7      	b.n	80086cc <__sfp+0x18>
 80086dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086e0:	b9d5      	cbnz	r5, 8008718 <__sfp+0x64>
 80086e2:	4b16      	ldr	r3, [pc, #88]	; (800873c <__sfp+0x88>)
 80086e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086e8:	60e3      	str	r3, [r4, #12]
 80086ea:	6665      	str	r5, [r4, #100]	; 0x64
 80086ec:	f7ff fc08 	bl	8007f00 <__retarget_lock_init_recursive>
 80086f0:	f7ff ff96 	bl	8008620 <__sfp_lock_release>
 80086f4:	2208      	movs	r2, #8
 80086f6:	4629      	mov	r1, r5
 80086f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008700:	6025      	str	r5, [r4, #0]
 8008702:	61a5      	str	r5, [r4, #24]
 8008704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008708:	f7fd fabe 	bl	8005c88 <memset>
 800870c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008714:	4620      	mov	r0, r4
 8008716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008718:	3468      	adds	r4, #104	; 0x68
 800871a:	e7d9      	b.n	80086d0 <__sfp+0x1c>
 800871c:	2104      	movs	r1, #4
 800871e:	4638      	mov	r0, r7
 8008720:	f7ff ff62 	bl	80085e8 <__sfmoreglue>
 8008724:	4604      	mov	r4, r0
 8008726:	6030      	str	r0, [r6, #0]
 8008728:	2800      	cmp	r0, #0
 800872a:	d1d5      	bne.n	80086d8 <__sfp+0x24>
 800872c:	f7ff ff78 	bl	8008620 <__sfp_lock_release>
 8008730:	230c      	movs	r3, #12
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	e7ee      	b.n	8008714 <__sfp+0x60>
 8008736:	bf00      	nop
 8008738:	08008ad4 	.word	0x08008ad4
 800873c:	ffff0001 	.word	0xffff0001

08008740 <_fwalk_reent>:
 8008740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008744:	4606      	mov	r6, r0
 8008746:	4688      	mov	r8, r1
 8008748:	2700      	movs	r7, #0
 800874a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800874e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008752:	f1b9 0901 	subs.w	r9, r9, #1
 8008756:	d505      	bpl.n	8008764 <_fwalk_reent+0x24>
 8008758:	6824      	ldr	r4, [r4, #0]
 800875a:	2c00      	cmp	r4, #0
 800875c:	d1f7      	bne.n	800874e <_fwalk_reent+0xe>
 800875e:	4638      	mov	r0, r7
 8008760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008764:	89ab      	ldrh	r3, [r5, #12]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d907      	bls.n	800877a <_fwalk_reent+0x3a>
 800876a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800876e:	3301      	adds	r3, #1
 8008770:	d003      	beq.n	800877a <_fwalk_reent+0x3a>
 8008772:	4629      	mov	r1, r5
 8008774:	4630      	mov	r0, r6
 8008776:	47c0      	blx	r8
 8008778:	4307      	orrs	r7, r0
 800877a:	3568      	adds	r5, #104	; 0x68
 800877c:	e7e9      	b.n	8008752 <_fwalk_reent+0x12>

0800877e <__swhatbuf_r>:
 800877e:	b570      	push	{r4, r5, r6, lr}
 8008780:	460e      	mov	r6, r1
 8008782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008786:	4614      	mov	r4, r2
 8008788:	2900      	cmp	r1, #0
 800878a:	461d      	mov	r5, r3
 800878c:	b096      	sub	sp, #88	; 0x58
 800878e:	da08      	bge.n	80087a2 <__swhatbuf_r+0x24>
 8008790:	2200      	movs	r2, #0
 8008792:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008796:	602a      	str	r2, [r5, #0]
 8008798:	061a      	lsls	r2, r3, #24
 800879a:	d410      	bmi.n	80087be <__swhatbuf_r+0x40>
 800879c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a0:	e00e      	b.n	80087c0 <__swhatbuf_r+0x42>
 80087a2:	466a      	mov	r2, sp
 80087a4:	f000 f902 	bl	80089ac <_fstat_r>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dbf1      	blt.n	8008790 <__swhatbuf_r+0x12>
 80087ac:	9a01      	ldr	r2, [sp, #4]
 80087ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087b6:	425a      	negs	r2, r3
 80087b8:	415a      	adcs	r2, r3
 80087ba:	602a      	str	r2, [r5, #0]
 80087bc:	e7ee      	b.n	800879c <__swhatbuf_r+0x1e>
 80087be:	2340      	movs	r3, #64	; 0x40
 80087c0:	2000      	movs	r0, #0
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	b016      	add	sp, #88	; 0x58
 80087c6:	bd70      	pop	{r4, r5, r6, pc}

080087c8 <__smakebuf_r>:
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087cc:	079d      	lsls	r5, r3, #30
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	d507      	bpl.n	80087e4 <__smakebuf_r+0x1c>
 80087d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	2301      	movs	r3, #1
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	b002      	add	sp, #8
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	466a      	mov	r2, sp
 80087e6:	ab01      	add	r3, sp, #4
 80087e8:	f7ff ffc9 	bl	800877e <__swhatbuf_r>
 80087ec:	9900      	ldr	r1, [sp, #0]
 80087ee:	4605      	mov	r5, r0
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7fd fab9 	bl	8005d68 <_malloc_r>
 80087f6:	b948      	cbnz	r0, 800880c <__smakebuf_r+0x44>
 80087f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fc:	059a      	lsls	r2, r3, #22
 80087fe:	d4ef      	bmi.n	80087e0 <__smakebuf_r+0x18>
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	f043 0302 	orr.w	r3, r3, #2
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	e7e3      	b.n	80087d4 <__smakebuf_r+0xc>
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <__smakebuf_r+0x7c>)
 800880e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	6120      	str	r0, [r4, #16]
 800881e:	6163      	str	r3, [r4, #20]
 8008820:	9b01      	ldr	r3, [sp, #4]
 8008822:	b15b      	cbz	r3, 800883c <__smakebuf_r+0x74>
 8008824:	4630      	mov	r0, r6
 8008826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800882a:	f000 f8d1 	bl	80089d0 <_isatty_r>
 800882e:	b128      	cbz	r0, 800883c <__smakebuf_r+0x74>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	f043 0301 	orr.w	r3, r3, #1
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	89a0      	ldrh	r0, [r4, #12]
 800883e:	4305      	orrs	r5, r0
 8008840:	81a5      	strh	r5, [r4, #12]
 8008842:	e7cd      	b.n	80087e0 <__smakebuf_r+0x18>
 8008844:	080085dd 	.word	0x080085dd

08008848 <_malloc_usable_size_r>:
 8008848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884c:	1f18      	subs	r0, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	bfbc      	itt	lt
 8008852:	580b      	ldrlt	r3, [r1, r0]
 8008854:	18c0      	addlt	r0, r0, r3
 8008856:	4770      	bx	lr

08008858 <_raise_r>:
 8008858:	291f      	cmp	r1, #31
 800885a:	b538      	push	{r3, r4, r5, lr}
 800885c:	4604      	mov	r4, r0
 800885e:	460d      	mov	r5, r1
 8008860:	d904      	bls.n	800886c <_raise_r+0x14>
 8008862:	2316      	movs	r3, #22
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	f04f 30ff 	mov.w	r0, #4294967295
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800886e:	b112      	cbz	r2, 8008876 <_raise_r+0x1e>
 8008870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008874:	b94b      	cbnz	r3, 800888a <_raise_r+0x32>
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f830 	bl	80088dc <_getpid_r>
 800887c:	462a      	mov	r2, r5
 800887e:	4601      	mov	r1, r0
 8008880:	4620      	mov	r0, r4
 8008882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008886:	f000 b817 	b.w	80088b8 <_kill_r>
 800888a:	2b01      	cmp	r3, #1
 800888c:	d00a      	beq.n	80088a4 <_raise_r+0x4c>
 800888e:	1c59      	adds	r1, r3, #1
 8008890:	d103      	bne.n	800889a <_raise_r+0x42>
 8008892:	2316      	movs	r3, #22
 8008894:	6003      	str	r3, [r0, #0]
 8008896:	2001      	movs	r0, #1
 8008898:	e7e7      	b.n	800886a <_raise_r+0x12>
 800889a:	2400      	movs	r4, #0
 800889c:	4628      	mov	r0, r5
 800889e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088a2:	4798      	blx	r3
 80088a4:	2000      	movs	r0, #0
 80088a6:	e7e0      	b.n	800886a <_raise_r+0x12>

080088a8 <raise>:
 80088a8:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <raise+0xc>)
 80088aa:	4601      	mov	r1, r0
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	f7ff bfd3 	b.w	8008858 <_raise_r>
 80088b2:	bf00      	nop
 80088b4:	20000010 	.word	0x20000010

080088b8 <_kill_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	2300      	movs	r3, #0
 80088bc:	4d06      	ldr	r5, [pc, #24]	; (80088d8 <_kill_r+0x20>)
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	f7f9 fb32 	bl	8001f2e <_kill>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d102      	bne.n	80088d4 <_kill_r+0x1c>
 80088ce:	682b      	ldr	r3, [r5, #0]
 80088d0:	b103      	cbz	r3, 80088d4 <_kill_r+0x1c>
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	bf00      	nop
 80088d8:	200004c4 	.word	0x200004c4

080088dc <_getpid_r>:
 80088dc:	f7f9 bb20 	b.w	8001f20 <_getpid>

080088e0 <__sread>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	460c      	mov	r4, r1
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	f000 f894 	bl	8008a14 <_read_r>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	bfab      	itete	ge
 80088f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088f2:	89a3      	ldrhlt	r3, [r4, #12]
 80088f4:	181b      	addge	r3, r3, r0
 80088f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088fa:	bfac      	ite	ge
 80088fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088fe:	81a3      	strhlt	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__swrite>:
 8008902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	461f      	mov	r7, r3
 8008908:	898b      	ldrh	r3, [r1, #12]
 800890a:	4605      	mov	r5, r0
 800890c:	05db      	lsls	r3, r3, #23
 800890e:	460c      	mov	r4, r1
 8008910:	4616      	mov	r6, r2
 8008912:	d505      	bpl.n	8008920 <__swrite+0x1e>
 8008914:	2302      	movs	r3, #2
 8008916:	2200      	movs	r2, #0
 8008918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891c:	f000 f868 	bl	80089f0 <_lseek_r>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	4632      	mov	r2, r6
 8008924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	4628      	mov	r0, r5
 800892c:	463b      	mov	r3, r7
 800892e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	f000 b817 	b.w	8008968 <_write_r>

0800893a <__sseek>:
 800893a:	b510      	push	{r4, lr}
 800893c:	460c      	mov	r4, r1
 800893e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008942:	f000 f855 	bl	80089f0 <_lseek_r>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	bf15      	itete	ne
 800894c:	6560      	strne	r0, [r4, #84]	; 0x54
 800894e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008956:	81a3      	strheq	r3, [r4, #12]
 8008958:	bf18      	it	ne
 800895a:	81a3      	strhne	r3, [r4, #12]
 800895c:	bd10      	pop	{r4, pc}

0800895e <__sclose>:
 800895e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008962:	f000 b813 	b.w	800898c <_close_r>
	...

08008968 <_write_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	4611      	mov	r1, r2
 8008970:	2200      	movs	r2, #0
 8008972:	4d05      	ldr	r5, [pc, #20]	; (8008988 <_write_r+0x20>)
 8008974:	602a      	str	r2, [r5, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	f7f9 fb10 	bl	8001f9c <_write>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_write_r+0x1e>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_write_r+0x1e>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	200004c4 	.word	0x200004c4

0800898c <_close_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	2300      	movs	r3, #0
 8008990:	4d05      	ldr	r5, [pc, #20]	; (80089a8 <_close_r+0x1c>)
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	f7f9 fb1c 	bl	8001fd4 <_close>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_close_r+0x1a>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_close_r+0x1a>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	200004c4 	.word	0x200004c4

080089ac <_fstat_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	2300      	movs	r3, #0
 80089b0:	4d06      	ldr	r5, [pc, #24]	; (80089cc <_fstat_r+0x20>)
 80089b2:	4604      	mov	r4, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	4611      	mov	r1, r2
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	f7f9 fb16 	bl	8001fea <_fstat>
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	d102      	bne.n	80089c8 <_fstat_r+0x1c>
 80089c2:	682b      	ldr	r3, [r5, #0]
 80089c4:	b103      	cbz	r3, 80089c8 <_fstat_r+0x1c>
 80089c6:	6023      	str	r3, [r4, #0]
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	200004c4 	.word	0x200004c4

080089d0 <_isatty_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	2300      	movs	r3, #0
 80089d4:	4d05      	ldr	r5, [pc, #20]	; (80089ec <_isatty_r+0x1c>)
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7f9 fb14 	bl	8002008 <_isatty>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_isatty_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_isatty_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	200004c4 	.word	0x200004c4

080089f0 <_lseek_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	4611      	mov	r1, r2
 80089f8:	2200      	movs	r2, #0
 80089fa:	4d05      	ldr	r5, [pc, #20]	; (8008a10 <_lseek_r+0x20>)
 80089fc:	602a      	str	r2, [r5, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f7f9 fb0c 	bl	800201c <_lseek>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_lseek_r+0x1e>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_lseek_r+0x1e>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	200004c4 	.word	0x200004c4

08008a14 <_read_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4d05      	ldr	r5, [pc, #20]	; (8008a34 <_read_r+0x20>)
 8008a20:	602a      	str	r2, [r5, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f7f9 fa9d 	bl	8001f62 <_read>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_read_r+0x1e>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_read_r+0x1e>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	200004c4 	.word	0x200004c4

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
