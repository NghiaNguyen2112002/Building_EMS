
Node_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080078f0  080078f0  000178f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d0c  08007d0c  000202a8  2**0
                  CONTENTS
  4 .ARM          00000000  08007d0c  08007d0c  000202a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d0c  08007d0c  000202a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  08007d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200002a8  08007fbc  000202a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08007fbc  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013961  00000000  00000000  000202d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f4  00000000  00000000  00033c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00036e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00038110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a907  00000000  00000000  000392b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016be8  00000000  00000000  00053bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a57  00000000  00000000  0006a79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe1f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e30  00000000  00000000  000fe248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a8 	.word	0x200002a8
 800012c:	00000000 	.word	0x00000000
 8000130:	080078d4 	.word	0x080078d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002ac 	.word	0x200002ac
 800014c:	080078d4 	.word	0x080078d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <SetPinOut>:
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
}

void SetPinOut(DHT_Name* DHT){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	889b      	ldrh	r3, [r3, #4]
 8000aa2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2302      	movs	r3, #2
 8000aae:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f107 0208 	add.w	r2, r7, #8
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 f8fa 	bl	8002cb4 <HAL_GPIO_Init>
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <WritePin>:

static void WritePin(DHT_Name* DHT, uint8_t value){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->DHT_port, DHT->DHT_pin, value);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	889b      	ldrh	r3, [r3, #4]
 8000adc:	78fa      	ldrb	r2, [r7, #3]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f002 fa6c 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <DHT_Init>:
static uint8_t ReadPin(DHT_Name* DHT){
	return HAL_GPIO_ReadPin(DHT->DHT_port, DHT->DHT_pin);
}

//===========================HIGH LEVEL FUNCTION===========================//
void DHT_Init(DHT_Name* DHT, GPIO_TypeDef* DHT_port, uint16_t DHT_pin, TIM_HandleTypeDef* timer){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	80fb      	strh	r3, [r7, #6]
	DHT->DHT_port = DHT_port;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	601a      	str	r2, [r3, #0]
	DHT->DHT_pin = DHT_pin;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	809a      	strh	r2, [r3, #4]
	DHT->timer = timer;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	609a      	str	r2, [r3, #8]

	DHT->humi = DHT->temp = 0;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f04f 0200 	mov.w	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

	SetPinOut(DHT);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff ffb2 	bl	8000a88 <SetPinOut>
	WritePin(DHT, 1);
 8000b24:	2101      	movs	r1, #1
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff ffce 	bl	8000ac8 <WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <DHT_GetTemp>:

	SetPinOut(DHT);
	WritePin(DHT, 1);
}

float DHT_GetTemp(DHT_Name* DHT){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	return 30.4;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <DHT_GetTemp+0x14>)
	return DHT->temp;
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	41f33333 	.word	0x41f33333

08000b4c <DHT_GetHumi>:

float DHT_GetHumi(DHT_Name* DHT){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	return 50.1;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <DHT_GetHumi+0x14>)
	return DHT->humi;
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	42486666 	.word	0x42486666

08000b64 <FSM_SystemControl>:

//==================HIGH LEVEL FUNCTION==================//
void FSM_Init(void){
	mode = INIT;
}
void FSM_SystemControl(void){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	switch(mode){
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <FSM_SystemControl+0xe4>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d865      	bhi.n	8000c3c <FSM_SystemControl+0xd8>
 8000b70:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <FSM_SystemControl+0x14>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	08000b91 	.word	0x08000b91
 8000b80:	08000b99 	.word	0x08000b99
 8000b84:	08000c23 	.word	0x08000c23
	case INIT:
//		_time_read_data = TIME_READ_DATA;
		mode = IDLING;
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <FSM_SystemControl+0xe4>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
		break;
 8000b8e:	e059      	b.n	8000c44 <FSM_SystemControl+0xe0>
	case IDLING:
//		if(_time_read_data < 5) mode = READ_DATA;

		mode = READ_DATA;
 8000b90:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <FSM_SystemControl+0xe4>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	701a      	strb	r2, [r3, #0]
		break;
 8000b96:	e055      	b.n	8000c44 <FSM_SystemControl+0xe0>
	case READ_DATA:
		CLCD_PrintStringBuffer(0, 0, "READ DATA");
 8000b98:	4a2c      	ldr	r2, [pc, #176]	; (8000c4c <FSM_SystemControl+0xe8>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 f9fb 	bl	8000f98 <CLCD_PrintStringBuffer>
//		DHT_Read(&_dht0);
//		DHT_Read(&_dht1);
//		DHT_Read(&_dht2);
//		DHT_Read(&_dht3);

		_data.temp_0 = DHT_GetTemp(&_dht0);
 8000ba2:	482b      	ldr	r0, [pc, #172]	; (8000c50 <FSM_SystemControl+0xec>)
 8000ba4:	f7ff ffc6 	bl	8000b34 <DHT_GetTemp>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a2a      	ldr	r2, [pc, #168]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000bac:	6053      	str	r3, [r2, #4]
		_data.humid_0 = DHT_GetHumi(&_dht0);
 8000bae:	4828      	ldr	r0, [pc, #160]	; (8000c50 <FSM_SystemControl+0xec>)
 8000bb0:	f7ff ffcc 	bl	8000b4c <DHT_GetHumi>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000bb8:	6093      	str	r3, [r2, #8]

		_data.temp_1 = DHT_GetTemp(&_dht1);
 8000bba:	4827      	ldr	r0, [pc, #156]	; (8000c58 <FSM_SystemControl+0xf4>)
 8000bbc:	f7ff ffba 	bl	8000b34 <DHT_GetTemp>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000bc4:	60d3      	str	r3, [r2, #12]
		_data.humid_1 = DHT_GetHumi(&_dht1);
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <FSM_SystemControl+0xf4>)
 8000bc8:	f7ff ffc0 	bl	8000b4c <DHT_GetHumi>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000bd0:	6113      	str	r3, [r2, #16]

		_data.temp_2 = DHT_GetTemp(&_dht2);
 8000bd2:	4822      	ldr	r0, [pc, #136]	; (8000c5c <FSM_SystemControl+0xf8>)
 8000bd4:	f7ff ffae 	bl	8000b34 <DHT_GetTemp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000bdc:	6153      	str	r3, [r2, #20]
		_data.humid_2 = DHT_GetHumi(&_dht2);
 8000bde:	481f      	ldr	r0, [pc, #124]	; (8000c5c <FSM_SystemControl+0xf8>)
 8000be0:	f7ff ffb4 	bl	8000b4c <DHT_GetHumi>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000be8:	6193      	str	r3, [r2, #24]

		_data.temp_3 = DHT_GetTemp(&_dht3);
 8000bea:	481d      	ldr	r0, [pc, #116]	; (8000c60 <FSM_SystemControl+0xfc>)
 8000bec:	f7ff ffa2 	bl	8000b34 <DHT_GetTemp>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000bf4:	61d3      	str	r3, [r2, #28]
		_data.humid_3 = DHT_GetHumi(&_dht3);
 8000bf6:	481a      	ldr	r0, [pc, #104]	; (8000c60 <FSM_SystemControl+0xfc>)
 8000bf8:	f7ff ffa8 	bl	8000b4c <DHT_GetHumi>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000c00:	6213      	str	r3, [r2, #32]

		_data.gas = IN_GetValue_Gas();
 8000c02:	f000 f847 	bl	8000c94 <IN_GetValue_Gas>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000c0c:	849a      	strh	r2, [r3, #36]	; 0x24
		_data.smoke = IN_GetValue_Smoke();
 8000c0e:	f000 f84b 	bl	8000ca8 <IN_GetValue_Smoke>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <FSM_SystemControl+0xf0>)
 8000c18:	84da      	strh	r2, [r3, #38]	; 0x26

		mode = SEND_DATA;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <FSM_SystemControl+0xe4>)
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	701a      	strb	r2, [r3, #0]
		break;
 8000c20:	e010      	b.n	8000c44 <FSM_SystemControl+0xe0>
	case SEND_DATA:
		CLCD_PrintStringBuffer(0, 0, "SEND DATA");
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <FSM_SystemControl+0x100>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f9b6 	bl	8000f98 <CLCD_PrintStringBuffer>

		ZB_SendMsg(json_str, 150);
 8000c2c:	2196      	movs	r1, #150	; 0x96
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <FSM_SystemControl+0x104>)
 8000c30:	f000 ffe2 	bl	8001bf8 <ZB_SendMsg>

//		ZB_SendMsg(json_str, ConvertToJsonString());

//		_time_read_data = TIME_READ_DATA;
		mode = IDLING;
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <FSM_SystemControl+0xe4>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
		break;
 8000c3a:	e003      	b.n	8000c44 <FSM_SystemControl+0xe0>
	default:
		mode = INIT;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <FSM_SystemControl+0xe4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
	}
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200002c4 	.word	0x200002c4
 8000c4c:	080078f0 	.word	0x080078f0
 8000c50:	200002f0 	.word	0x200002f0
 8000c54:	200002c8 	.word	0x200002c8
 8000c58:	20000304 	.word	0x20000304
 8000c5c:	20000318 	.word	0x20000318
 8000c60:	2000032c 	.word	0x2000032c
 8000c64:	080078fc 	.word	0x080078fc
 8000c68:	20000000 	.word	0x20000000

08000c6c <IN_Init>:
ADC_HandleTypeDef* adc;
uint16_t ADC_value[2];


//===========================HIGH LEVEL FUNCTION===========================//
void IN_Init(ADC_HandleTypeDef* hadc){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	adc = hadc;
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <IN_Init+0x20>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(hadc, (uint32_t*) ADC_value, 2);
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4904      	ldr	r1, [pc, #16]	; (8000c90 <IN_Init+0x24>)
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f001 f954 	bl	8001f2c <HAL_ADC_Start_DMA>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000344 	.word	0x20000344
 8000c90:	20000348 	.word	0x20000348

08000c94 <IN_GetValue_Gas>:


uint16_t IN_GetValue_Gas(void){
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	return ADC_value[1];
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <IN_GetValue_Gas+0x10>)
 8000c9a:	885b      	ldrh	r3, [r3, #2]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	20000348 	.word	0x20000348

08000ca8 <IN_GetValue_Smoke>:

uint16_t IN_GetValue_Smoke(void){
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	return ADC_value[0];
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <IN_GetValue_Smoke+0x10>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000348 	.word	0x20000348

08000cbc <Delay>:

CLCD_I2C_Name LCD;

uint8_t currentCol, currentRow;

static void Delay(uint16_t time){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 f833 	bl	8001d34 <HAL_Delay>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <WriteI2C>:


static void WriteI2C(uint8_t data, uint8_t mode){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f023 030f 	bic.w	r3, r3, #15
 8000cee:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <WriteI2C+0x90>)
 8000cf8:	7adb      	ldrb	r3, [r3, #11]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d007      	beq.n	8000d0e <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d107      	bne.n	8000d24 <WriteI2C+0x4c>
		dataH |= LCD_RS;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 8000d3c:	7bbb      	ldrb	r3, [r7, #14]
 8000d3e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <WriteI2C+0x90>)
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <WriteI2C+0x90>)
 8000d46:	791b      	ldrb	r3, [r3, #4]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	f107 0208 	add.w	r2, r7, #8
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2304      	movs	r3, #4
 8000d5a:	f002 faa5 	bl	80032a8 <HAL_I2C_Master_Transmit>
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000350 	.word	0x20000350

08000d6c <CLCD_Init>:



//===========================HIGH LEVEL FUNCTION===========================//
void CLCD_Init(I2C_HandleTypeDef* I2C, uint8_t address, uint8_t row, uint8_t col){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	70fb      	strb	r3, [r7, #3]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70bb      	strb	r3, [r7, #2]
 8000d82:	4613      	mov	r3, r2
 8000d84:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	LCD.I2C = I2C;
 8000d86:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <CLCD_Init+0x144>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6013      	str	r3, [r2, #0]
	LCD.ADDRESS = address;
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <CLCD_Init+0x144>)
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	7113      	strb	r3, [r2, #4]
	LCD.COL = col;
 8000d92:	4a47      	ldr	r2, [pc, #284]	; (8000eb0 <CLCD_Init+0x144>)
 8000d94:	787b      	ldrb	r3, [r7, #1]
 8000d96:	7153      	strb	r3, [r2, #5]
	LCD.ROW = row;
 8000d98:	4a45      	ldr	r2, [pc, #276]	; (8000eb0 <CLCD_Init+0x144>)
 8000d9a:	78bb      	ldrb	r3, [r7, #2]
 8000d9c:	7193      	strb	r3, [r2, #6]

	LCD.FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8000d9e:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <CLCD_Init+0x144>)
 8000da0:	2228      	movs	r2, #40	; 0x28
 8000da2:	721a      	strb	r2, [r3, #8]
	LCD.ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000da4:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <CLCD_Init+0x144>)
 8000da6:	2206      	movs	r2, #6
 8000da8:	71da      	strb	r2, [r3, #7]
	LCD.DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <CLCD_Init+0x144>)
 8000dac:	220c      	movs	r2, #12
 8000dae:	725a      	strb	r2, [r3, #9]
	LCD.CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <CLCD_Init+0x144>)
 8000db2:	2214      	movs	r2, #20
 8000db4:	729a      	strb	r2, [r3, #10]
	LCD.BACKLIGHT = LCD_BACKLIGHT;
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <CLCD_Init+0x144>)
 8000db8:	2208      	movs	r2, #8
 8000dba:	72da      	strb	r2, [r3, #11]

	Delay(50);
 8000dbc:	2032      	movs	r0, #50	; 0x32
 8000dbe:	f7ff ff7d 	bl	8000cbc <Delay>

	if(Lcd_buffer != NULL) free(Lcd_buffer);
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <CLCD_Init+0x148>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <CLCD_Init+0x68>
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <CLCD_Init+0x148>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 f86e 	bl	8004eb0 <free>
	Lcd_buffer = (uint8_t*)malloc(row * col * 8);
 8000dd4:	78bb      	ldrb	r3, [r7, #2]
 8000dd6:	787a      	ldrb	r2, [r7, #1]
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 f85e 	bl	8004ea0 <malloc>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <CLCD_Init+0x148>)
 8000dea:	601a      	str	r2, [r3, #0]

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e008      	b.n	8000e04 <CLCD_Init+0x98>
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <CLCD_Init+0x148>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	3301      	adds	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <CLCD_Init+0x144>)
 8000e08:	799b      	ldrb	r3, [r3, #6]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <CLCD_Init+0x144>)
 8000e0e:	795b      	ldrb	r3, [r3, #5]
 8000e10:	fb01 f303 	mul.w	r3, r1, r3
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbec      	blt.n	8000df2 <CLCD_Init+0x86>

	WriteI2C(0x33, LCD_COMMAND);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2033      	movs	r0, #51	; 0x33
 8000e1c:	f7ff ff5c 	bl	8000cd8 <WriteI2C>
//	Delay(5);
	WriteI2C(0x33, LCD_COMMAND);
 8000e20:	2100      	movs	r1, #0
 8000e22:	2033      	movs	r0, #51	; 0x33
 8000e24:	f7ff ff58 	bl	8000cd8 <WriteI2C>
	Delay(5);
 8000e28:	2005      	movs	r0, #5
 8000e2a:	f7ff ff47 	bl	8000cbc <Delay>
	WriteI2C(0x32, LCD_COMMAND);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2032      	movs	r0, #50	; 0x32
 8000e32:	f7ff ff51 	bl	8000cd8 <WriteI2C>
	Delay(5);
 8000e36:	2005      	movs	r0, #5
 8000e38:	f7ff ff40 	bl	8000cbc <Delay>
	WriteI2C(0x20, LCD_COMMAND);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2020      	movs	r0, #32
 8000e40:	f7ff ff4a 	bl	8000cd8 <WriteI2C>
	Delay(5);
 8000e44:	2005      	movs	r0, #5
 8000e46:	f7ff ff39 	bl	8000cbc <Delay>

//	config lcd
	WriteI2C(LCD.ENTRYMODE, LCD_COMMAND);
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <CLCD_Init+0x144>)
 8000e4c:	79db      	ldrb	r3, [r3, #7]
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff41 	bl	8000cd8 <WriteI2C>
	Delay(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff ff30 	bl	8000cbc <Delay>
	WriteI2C(LCD.DISPLAYCTRL, LCD_COMMAND);
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <CLCD_Init+0x144>)
 8000e5e:	7a5b      	ldrb	r3, [r3, #9]
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff38 	bl	8000cd8 <WriteI2C>
	Delay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ff27 	bl	8000cbc <Delay>
	WriteI2C(LCD.CURSORSHIFT, LCD_COMMAND);
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <CLCD_Init+0x144>)
 8000e70:	7a9b      	ldrb	r3, [r3, #10]
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff2f 	bl	8000cd8 <WriteI2C>
	Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff ff1e 	bl	8000cbc <Delay>
	WriteI2C(LCD.FUNCTIONSET, LCD_COMMAND);
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <CLCD_Init+0x144>)
 8000e82:	7a1b      	ldrb	r3, [r3, #8]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff26 	bl	8000cd8 <WriteI2C>
	Delay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff ff15 	bl	8000cbc <Delay>

	WriteI2C(LCD_CLEARDISPLAY, LCD_COMMAND);
 8000e92:	2100      	movs	r1, #0
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff ff1f 	bl	8000cd8 <WriteI2C>
	Delay(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff ff0e 	bl	8000cbc <Delay>

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f7ff ff18 	bl	8000cd8 <WriteI2C>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000350 	.word	0x20000350
 8000eb4:	2000034c 	.word	0x2000034c

08000eb8 <SetCursor>:

void SetCursor(uint8_t row, uint8_t col){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <SetCursor+0x8c>)
 8000ece:	799a      	ldrb	r2, [r3, #6]
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ed6:	fb01 f202 	mul.w	r2, r1, r2
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <SetCursor+0x8c>)
 8000ee0:	795a      	ldrb	r2, [r3, #5]
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ee8:	fb01 f202 	mul.w	r2, r1, r2
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]

	switch(row){
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d819      	bhi.n	8000f2a <SetCursor+0x72>
 8000ef6:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <SetCursor+0x44>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	08000f0d 	.word	0x08000f0d
 8000f00:	08000f13 	.word	0x08000f13
 8000f04:	08000f1b 	.word	0x08000f1b
 8000f08:	08000f23 	.word	0x08000f23
	case 0:
		address_dram = 0x00 + col;
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	73fb      	strb	r3, [r7, #15]
		break;
 8000f10:	e00b      	b.n	8000f2a <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	3340      	adds	r3, #64	; 0x40
 8000f16:	73fb      	strb	r3, [r7, #15]
		break;
 8000f18:	e007      	b.n	8000f2a <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 8000f1a:	79bb      	ldrb	r3, [r7, #6]
 8000f1c:	3314      	adds	r3, #20
 8000f1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000f20:	e003      	b.n	8000f2a <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	3354      	adds	r3, #84	; 0x54
 8000f26:	73fb      	strb	r3, [r7, #15]
		break;
 8000f28:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fecf 	bl	8000cd8 <WriteI2C>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000350 	.word	0x20000350

08000f48 <UpdateCharBuffer>:
void CLCD_BackLight(uint8_t is_on){
	LCD.BACKLIGHT = is_on ? LCD_BACKLIGHT : LCD_NOBACKLIGHT;
}


void UpdateCharBuffer(uint8_t c){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <UpdateCharBuffer+0x40>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <UpdateCharBuffer+0x44>)
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <UpdateCharBuffer+0x48>)
 8000f5e:	7952      	ldrb	r2, [r2, #5]
 8000f60:	fb01 f202 	mul.w	r2, r1, r2
 8000f64:	490b      	ldr	r1, [pc, #44]	; (8000f94 <UpdateCharBuffer+0x4c>)
 8000f66:	7809      	ldrb	r1, [r1, #0]
 8000f68:	440a      	add	r2, r1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	701a      	strb	r2, [r3, #0]
	currentCol++;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <UpdateCharBuffer+0x4c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <UpdateCharBuffer+0x4c>)
 8000f7a:	701a      	strb	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000034c 	.word	0x2000034c
 8000f8c:	2000035d 	.word	0x2000035d
 8000f90:	20000350 	.word	0x20000350
 8000f94:	2000035c 	.word	0x2000035c

08000f98 <CLCD_PrintStringBuffer>:
	currentRow = row % LCD.ROW;
	currentCol = col % LCD.COL;
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
}

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	603a      	str	r2, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <CLCD_PrintStringBuffer+0x60>)
 8000faa:	799a      	ldrb	r2, [r3, #6]
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fb2:	fb01 f202 	mul.w	r2, r1, r2
 8000fb6:	1a9b      	subs	r3, r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <CLCD_PrintStringBuffer+0x64>)
 8000fbc:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <CLCD_PrintStringBuffer+0x60>)
 8000fc0:	795a      	ldrb	r2, [r3, #5]
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fc8:	fb01 f202 	mul.w	r2, r1, r2
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <CLCD_PrintStringBuffer+0x68>)
 8000fd2:	701a      	strb	r2, [r3, #0]
	while(*str){
 8000fd4:	e006      	b.n	8000fe4 <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	603a      	str	r2, [r7, #0]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffb2 	bl	8000f48 <UpdateCharBuffer>
	while(*str){
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f4      	bne.n	8000fd6 <CLCD_PrintStringBuffer+0x3e>
	}
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000350 	.word	0x20000350
 8000ffc:	2000035d 	.word	0x2000035d
 8001000:	2000035c 	.word	0x2000035c

08001004 <CLCD_ClearBuffer>:
    UpdateCharBuffer('.');
    UpdateCharBuffer(decimal_part % 10 + '0');
}


void CLCD_ClearBuffer(void){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e008      	b.n	8001022 <CLCD_ClearBuffer+0x1e>
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <CLCD_ClearBuffer+0x40>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4413      	add	r3, r2
 8001018:	2220      	movs	r2, #32
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	3301      	adds	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <CLCD_ClearBuffer+0x44>)
 8001026:	799b      	ldrb	r3, [r3, #6]
 8001028:	4619      	mov	r1, r3
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <CLCD_ClearBuffer+0x44>)
 800102c:	795b      	ldrb	r3, [r3, #5]
 800102e:	fb01 f303 	mul.w	r3, r1, r3
 8001032:	429a      	cmp	r2, r3
 8001034:	dbec      	blt.n	8001010 <CLCD_ClearBuffer+0xc>
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2000034c 	.word	0x2000034c
 8001048:	20000350 	.word	0x20000350

0800104c <CLCD_DisplayScreen>:

void CLCD_DisplayScreen(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 8001052:	2300      	movs	r3, #0
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e021      	b.n	800109c <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff2b 	bl	8000eb8 <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 8001062:	2300      	movs	r3, #0
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	e011      	b.n	800108c <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <CLCD_DisplayScreen+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	4911      	ldr	r1, [pc, #68]	; (80010b4 <CLCD_DisplayScreen+0x68>)
 8001070:	7949      	ldrb	r1, [r1, #5]
 8001072:	fb02 f101 	mul.w	r1, r2, r1
 8001076:	79ba      	ldrb	r2, [r7, #6]
 8001078:	440a      	add	r2, r1
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2101      	movs	r1, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fe29 	bl	8000cd8 <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	3301      	adds	r3, #1
 800108a:	71bb      	strb	r3, [r7, #6]
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <CLCD_DisplayScreen+0x68>)
 800108e:	795b      	ldrb	r3, [r3, #5]
 8001090:	79ba      	ldrb	r2, [r7, #6]
 8001092:	429a      	cmp	r2, r3
 8001094:	d3e8      	bcc.n	8001068 <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	3301      	adds	r3, #1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <CLCD_DisplayScreen+0x68>)
 800109e:	799b      	ldrb	r3, [r3, #6]
 80010a0:	79fa      	ldrb	r2, [r7, #7]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3d8      	bcc.n	8001058 <CLCD_DisplayScreen+0xc>
		}
	}
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000034c 	.word	0x2000034c
 80010b4:	20000350 	.word	0x20000350

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010bc:	f000 fdd8 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c0:	f000 f872 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c4:	f000 fa1e 	bl	8001504 <MX_GPIO_Init>
  MX_DMA_Init();
 80010c8:	f000 f9fe 	bl	80014c8 <MX_DMA_Init>
  MX_TIM2_Init();
 80010cc:	f000 f938 	bl	8001340 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010d0:	f000 f982 	bl	80013d8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80010d4:	f000 f8b8 	bl	8001248 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010d8:	f000 f904 	bl	80012e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010dc:	f000 f9ca 	bl	8001474 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010e0:	4825      	ldr	r0, [pc, #148]	; (8001178 <main+0xc0>)
 80010e2:	f003 f951 	bl	8004388 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80010e6:	4825      	ldr	r0, [pc, #148]	; (800117c <main+0xc4>)
 80010e8:	f003 f904 	bl	80042f4 <HAL_TIM_Base_Start>

  TM_Init(&htim2);
 80010ec:	4822      	ldr	r0, [pc, #136]	; (8001178 <main+0xc0>)
 80010ee:	f000 fd21 	bl	8001b34 <TM_Init>
  TM_SetTime_ms(3000);
 80010f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010f6:	f000 fd3d 	bl	8001b74 <TM_SetTime_ms>

  IN_Init(&hadc1);
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <main+0xc8>)
 80010fc:	f7ff fdb6 	bl	8000c6c <IN_Init>
  DHT_Init(&_dht0, DHT0_GPIO_Port, DHT0_Pin, &htim3);
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <main+0xc4>)
 8001102:	2208      	movs	r2, #8
 8001104:	491f      	ldr	r1, [pc, #124]	; (8001184 <main+0xcc>)
 8001106:	4820      	ldr	r0, [pc, #128]	; (8001188 <main+0xd0>)
 8001108:	f7ff fcf0 	bl	8000aec <DHT_Init>
  DHT_Init(&_dht1, DHT1_GPIO_Port, DHT1_Pin, &htim3);
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <main+0xc4>)
 800110e:	2210      	movs	r2, #16
 8001110:	491c      	ldr	r1, [pc, #112]	; (8001184 <main+0xcc>)
 8001112:	481e      	ldr	r0, [pc, #120]	; (800118c <main+0xd4>)
 8001114:	f7ff fcea 	bl	8000aec <DHT_Init>
  DHT_Init(&_dht2, DHT2_GPIO_Port, DHT2_Pin, &htim3);
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <main+0xc4>)
 800111a:	2220      	movs	r2, #32
 800111c:	4919      	ldr	r1, [pc, #100]	; (8001184 <main+0xcc>)
 800111e:	481c      	ldr	r0, [pc, #112]	; (8001190 <main+0xd8>)
 8001120:	f7ff fce4 	bl	8000aec <DHT_Init>
  DHT_Init(&_dht3, DHT3_GPIO_Port, DHT3_Pin, &htim3);
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <main+0xc4>)
 8001126:	2240      	movs	r2, #64	; 0x40
 8001128:	4916      	ldr	r1, [pc, #88]	; (8001184 <main+0xcc>)
 800112a:	481a      	ldr	r0, [pc, #104]	; (8001194 <main+0xdc>)
 800112c:	f7ff fcde 	bl	8000aec <DHT_Init>

  ZB_Init(&huart1);
 8001130:	4819      	ldr	r0, [pc, #100]	; (8001198 <main+0xe0>)
 8001132:	f000 fd53 	bl	8001bdc <ZB_Init>

  CLCD_Init(&hi2c1, 0x27, 2, 16);
 8001136:	2310      	movs	r3, #16
 8001138:	2202      	movs	r2, #2
 800113a:	2127      	movs	r1, #39	; 0x27
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <main+0xe4>)
 800113e:	f7ff fe15 	bl	8000d6c <CLCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(TM_IsFlag()){
 8001142:	f000 fd39 	bl	8001bb8 <TM_IsFlag>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0fa      	beq.n	8001142 <main+0x8a>

		  if(_time_read_data >= 5) _time_read_data -= 5;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <main+0xe8>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d905      	bls.n	8001160 <main+0xa8>
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <main+0xe8>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	3b05      	subs	r3, #5
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <main+0xe8>)
 800115e:	801a      	strh	r2, [r3, #0]

		  CLCD_ClearBuffer();
 8001160:	f7ff ff50 	bl	8001004 <CLCD_ClearBuffer>
//		  DHT_Read(&_dht0);
//		  x = DHT_GetHumi(&_dht0);

//		  CLCD_PrintNumBuffer(0, 0, IN_GetValue_MP2());
//		  CLCD_PrintNumBuffer(1, 0, IN_GetValue_MQ2());
		  FSM_SystemControl();
 8001164:	f7ff fcfe 	bl	8000b64 <FSM_SystemControl>

		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <main+0xec>)
 800116e:	f001 ff3d 	bl	8002fec <HAL_GPIO_TogglePin>

		  CLCD_DisplayScreen();
 8001172:	f7ff ff6b 	bl	800104c <CLCD_DisplayScreen>
	  if(TM_IsFlag()){
 8001176:	e7e4      	b.n	8001142 <main+0x8a>
 8001178:	20000428 	.word	0x20000428
 800117c:	20000470 	.word	0x20000470
 8001180:	20000360 	.word	0x20000360
 8001184:	40010800 	.word	0x40010800
 8001188:	200002f0 	.word	0x200002f0
 800118c:	20000304 	.word	0x20000304
 8001190:	20000318 	.word	0x20000318
 8001194:	2000032c 	.word	0x2000032c
 8001198:	200004b8 	.word	0x200004b8
 800119c:	200003d4 	.word	0x200003d4
 80011a0:	20000340 	.word	0x20000340
 80011a4:	40011000 	.word	0x40011000

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	; 0x50
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b2:	2228      	movs	r2, #40	; 0x28
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fe82 	bl	8004ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2310      	movs	r3, #16
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fb61 	bl	80038b4 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80011f8:	f000 f9f0 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fdce 	bl	8003db8 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001222:	f000 f9db 	bl	80015dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001226:	2302      	movs	r3, #2
 8001228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f002 ff59 	bl	80040e8 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800123c:	f000 f9ce 	bl	80015dc <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3750      	adds	r7, #80	; 0x50
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_ADC1_Init+0x94>)
 800125a:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <MX_ADC1_Init+0x98>)
 800125c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_ADC1_Init+0x94>)
 8001260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001264:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_ADC1_Init+0x94>)
 8001268:	2201      	movs	r2, #1
 800126a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_ADC1_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_ADC1_Init+0x94>)
 8001274:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001278:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_ADC1_Init+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_ADC1_Init+0x94>)
 8001282:	2202      	movs	r2, #2
 8001284:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <MX_ADC1_Init+0x94>)
 8001288:	f000 fd78 	bl	8001d7c <HAL_ADC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001292:	f000 f9a3 	bl	80015dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800129a:	2301      	movs	r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800129e:	2307      	movs	r3, #7
 80012a0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_ADC1_Init+0x94>)
 80012a8:	f001 f806 	bl	80022b8 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f000 f993 	bl	80015dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_ADC1_Init+0x94>)
 80012c4:	f000 fff8 	bl	80022b8 <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012ce:	f000 f985 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000360 	.word	0x20000360
 80012e0:	40012400 	.word	0x40012400

080012e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C1_Init+0x50>)
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <MX_I2C1_Init+0x54>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_I2C1_Init+0x50>)
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_I2C1_Init+0x58>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_I2C1_Init+0x50>)
 8001302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_I2C1_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_I2C1_Init+0x50>)
 8001322:	f001 fe7d 	bl	8003020 <HAL_I2C_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 f956 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200003d4 	.word	0x200003d4
 8001338:	40005400 	.word	0x40005400
 800133c:	000186a0 	.word	0x000186a0

08001340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_TIM2_Init+0x94>)
 800135e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000 - 1;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001366:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800136a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_TIM2_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001374:	2231      	movs	r2, #49	; 0x31
 8001376:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_TIM2_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001386:	f002 ff65 	bl	8004254 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001390:	f000 f924 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_TIM2_Init+0x94>)
 80013a2:	f003 f94b 	bl	800463c <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013ac:	f000 f916 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_TIM2_Init+0x94>)
 80013be:	f003 fb1d 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f000 f908 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000428 	.word	0x20000428

080013d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM3_Init+0x94>)
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <MX_TIM3_Init+0x98>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8 - 1;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_TIM3_Init+0x94>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_TIM3_Init+0x94>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM3_Init+0x94>)
 8001408:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800140c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_TIM3_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_TIM3_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141a:	4814      	ldr	r0, [pc, #80]	; (800146c <MX_TIM3_Init+0x94>)
 800141c:	f002 ff1a 	bl	8004254 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001426:	f000 f8d9 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4619      	mov	r1, r3
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_TIM3_Init+0x94>)
 8001438:	f003 f900 	bl	800463c <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001442:	f000 f8cb 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_TIM3_Init+0x94>)
 8001454:	f003 fad2 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800145e:	f000 f8bd 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000470 	.word	0x20000470
 8001470:	40000400 	.word	0x40000400

08001474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART1_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 8001480:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART1_UART_Init+0x4c>)
 80014ac:	f003 fb16 	bl	8004adc <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f000 f891 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200004b8 	.word	0x200004b8
 80014c4:	40013800 	.word	0x40013800

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_DMA_Init+0x38>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <MX_DMA_Init+0x38>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_DMA_Init+0x38>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	200b      	movs	r0, #11
 80014ec:	f001 f9bd 	bl	800286a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f0:	200b      	movs	r0, #11
 80014f2:	f001 f9d6 	bl	80028a2 <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_GPIO_Init+0xcc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a2c      	ldr	r2, [pc, #176]	; (80015d0 <MX_GPIO_Init+0xcc>)
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_GPIO_Init+0xcc>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MX_GPIO_Init+0xcc>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <MX_GPIO_Init+0xcc>)
 8001536:	f043 0320 	orr.w	r3, r3, #32
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <MX_GPIO_Init+0xcc>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_GPIO_Init+0xcc>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <MX_GPIO_Init+0xcc>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_GPIO_Init+0xcc>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_GPIO_Init+0xcc>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <MX_GPIO_Init+0xcc>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_GPIO_Init+0xcc>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157e:	4815      	ldr	r0, [pc, #84]	; (80015d4 <MX_GPIO_Init+0xd0>)
 8001580:	f001 fd1c 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT0_Pin|DHT1_Pin|DHT2_Pin|DHT3_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2178      	movs	r1, #120	; 0x78
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <MX_GPIO_Init+0xd4>)
 800158a:	f001 fd17 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800158e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2302      	movs	r3, #2
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <MX_GPIO_Init+0xd0>)
 80015a8:	f001 fb84 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT0_Pin DHT1_Pin DHT2_Pin DHT3_Pin */
  GPIO_InitStruct.Pin = DHT0_Pin|DHT1_Pin|DHT2_Pin|DHT3_Pin;
 80015ac:	2378      	movs	r3, #120	; 0x78
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_GPIO_Init+0xd4>)
 80015c4:	f001 fb76 	bl	8002cb4 <HAL_GPIO_Init>

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40010800 	.word	0x40010800

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_MspInit+0x5c>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_MspInit+0x5c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_MspInit+0x5c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_MspInit+0x5c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_MspInit+0x5c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_MspInit+0x5c>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_MspInit+0x60>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_MspInit+0x60>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a2c      	ldr	r2, [pc, #176]	; (8001718 <HAL_ADC_MspInit+0xcc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d151      	bne.n	8001710 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_ADC_MspInit+0xd0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a2a      	ldr	r2, [pc, #168]	; (800171c <HAL_ADC_MspInit+0xd0>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_ADC_MspInit+0xd0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <HAL_ADC_MspInit+0xd0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_ADC_MspInit+0xd0>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_ADC_MspInit+0xd0>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GAS_Pin|SMOKE_Pin;
 800169c:	2303      	movs	r3, #3
 800169e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a0:	2303      	movs	r3, #3
 80016a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	481d      	ldr	r0, [pc, #116]	; (8001720 <HAL_ADC_MspInit+0xd4>)
 80016ac:	f001 fb02 	bl	8002cb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_ADC_MspInit+0xdc>)
 80016b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016da:	2220      	movs	r2, #32
 80016dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016e4:	480f      	ldr	r0, [pc, #60]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016e6:	f001 f8f7 	bl	80028d8 <HAL_DMA_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80016f0:	f7ff ff74 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016f8:	621a      	str	r2, [r3, #32]
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_ADC_MspInit+0xd8>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2012      	movs	r0, #18
 8001706:	f001 f8b0 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800170a:	2012      	movs	r0, #18
 800170c:	f001 f8c9 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40012400 	.word	0x40012400
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800
 8001724:	20000390 	.word	0x20000390
 8001728:	40020008 	.word	0x40020008

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <HAL_I2C_MspInit+0x70>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d123      	bne.n	8001794 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_I2C_MspInit+0x74>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_I2C_MspInit+0x74>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_I2C_MspInit+0x74>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001764:	23c0      	movs	r3, #192	; 0xc0
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001768:	2312      	movs	r3, #18
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	480b      	ldr	r0, [pc, #44]	; (80017a4 <HAL_I2C_MspInit+0x78>)
 8001778:	f001 fa9c 	bl	8002cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_I2C_MspInit+0x74>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_I2C_MspInit+0x74>)
 8001782:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001786:	61d3      	str	r3, [r2, #28]
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_I2C_MspInit+0x74>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40005400 	.word	0x40005400
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d114      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_TIM_Base_MspInit+0x68>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_TIM_Base_MspInit+0x68>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_TIM_Base_MspInit+0x68>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201c      	movs	r0, #28
 80017d8:	f001 f847 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017dc:	201c      	movs	r0, #28
 80017de:	f001 f860 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017e2:	e010      	b.n	8001806 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_TIM_Base_MspInit+0x6c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10b      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_TIM_Base_MspInit+0x68>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_TIM_Base_MspInit+0x68>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_TIM_Base_MspInit+0x68>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	40000400 	.word	0x40000400

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <HAL_UART_MspInit+0x8c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d131      	bne.n	800189c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_UART_MspInit+0x90>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <HAL_UART_MspInit+0x90>)
 800183e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_UART_MspInit+0x90>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_UART_MspInit+0x90>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <HAL_UART_MspInit+0x90>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_UART_MspInit+0x90>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800186c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4619      	mov	r1, r3
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <HAL_UART_MspInit+0x94>)
 800187e:	f001 fa19 	bl	8002cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_UART_MspInit+0x94>)
 8001898:	f001 fa0c 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010800 	.word	0x40010800

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f6:	f000 fa01 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <DMA1_Channel1_IRQHandler+0x10>)
 8001906:	f001 f8a1 	bl	8002a4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000390 	.word	0x20000390

08001914 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <ADC1_2_IRQHandler+0x10>)
 800191a:	f000 fbe5 	bl	80020e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000360 	.word	0x20000360

08001928 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <TIM2_IRQHandler+0x10>)
 800192e:	f002 fd7d 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000428 	.word	0x20000428

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <_kill>:

int _kill(int pid, int sig)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001954:	f003 fa7a 	bl	8004e4c <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	2216      	movs	r2, #22
 800195c:	601a      	str	r2, [r3, #0]
  return -1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_exit>:

void _exit (int status)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001972:	f04f 31ff 	mov.w	r1, #4294967295
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffe7 	bl	800194a <_kill>
  while (1) {}    /* Make sure we hang here */
 800197c:	e7fe      	b.n	800197c <_exit+0x12>

0800197e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e00a      	b.n	80019a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001990:	f3af 8000 	nop.w
 8001994:	4601      	mov	r1, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	60ba      	str	r2, [r7, #8]
 800199c:	b2ca      	uxtb	r2, r1
 800199e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbf0      	blt.n	8001990 <_read+0x12>
  }

  return len;
 80019ae:	687b      	ldr	r3, [r7, #4]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e009      	b.n	80019de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	60ba      	str	r2, [r7, #8]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	dbf1      	blt.n	80019ca <_write+0x12>
  }
  return len;
 80019e6:	687b      	ldr	r3, [r7, #4]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_close>:

int _close(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a16:	605a      	str	r2, [r3, #4]
  return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <_isatty>:

int _isatty(int file)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <_sbrk+0x5c>)
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <_sbrk+0x60>)
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <_sbrk+0x64>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <_sbrk+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d207      	bcs.n	8001a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a80:	f003 f9e4 	bl	8004e4c <__errno>
 8001a84:	4603      	mov	r3, r0
 8001a86:	220c      	movs	r2, #12
 8001a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	e009      	b.n	8001aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <_sbrk+0x64>)
 8001aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20005000 	.word	0x20005000
 8001ab0:	00000400 	.word	0x00000400
 8001ab4:	200004fc 	.word	0x200004fc
 8001ab8:	20000520 	.word	0x20000520

08001abc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <RunSoftwareTimer>:

static uint8_t MUL_timer		= 1;
static uint8_t flag_timer		= 0;
static uint8_t counter_timer 	= 0;

void RunSoftwareTimer(void){
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	if(counter_timer > 0){
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <RunSoftwareTimer+0x38>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <RunSoftwareTimer+0x2e>
		counter_timer--;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <RunSoftwareTimer+0x38>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <RunSoftwareTimer+0x38>)
 8001ade:	701a      	strb	r2, [r3, #0]
		if(counter_timer == 0){
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <RunSoftwareTimer+0x38>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <RunSoftwareTimer+0x2e>
			counter_timer = MUL_timer;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <RunSoftwareTimer+0x3c>)
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <RunSoftwareTimer+0x38>)
 8001aee:	701a      	strb	r2, [r3, #0]
			flag_timer = 1;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <RunSoftwareTimer+0x40>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000505 	.word	0x20000505
 8001b04:	200000cd 	.word	0x200000cd
 8001b08:	20000504 	.word	0x20000504

08001b0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stimer->Instance) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 8001b22:	f7ff ffd1 	bl	8001ac8 <RunSoftwareTimer>
	}
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000500 	.word	0x20000500

08001b34 <TM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void TM_Init(TIM_HandleTypeDef* htim){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	stimer = htim;
 8001b3c:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <TM_Init+0x30>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
	counter_timer = MUL_timer;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <TM_Init+0x34>)
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <TM_Init+0x38>)
 8001b48:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <TM_Init+0x3c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(stimer);
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <TM_Init+0x30>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fc17 	bl	8004388 <HAL_TIM_Base_Start_IT>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000500 	.word	0x20000500
 8001b68:	200000cd 	.word	0x200000cd
 8001b6c:	20000505 	.word	0x20000505
 8001b70:	20000504 	.word	0x20000504

08001b74 <TM_SetTime_ms>:

void TM_SetTime_ms(uint16_t duration){
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
	MUL_timer = duration / TIME_CYCLE;
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <TM_SetTime_ms+0x34>)
 8001b82:	7812      	ldrb	r2, [r2, #0]
 8001b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <TM_SetTime_ms+0x38>)
 8001b8c:	701a      	strb	r2, [r3, #0]
	counter_timer = MUL_timer;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <TM_SetTime_ms+0x38>)
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <TM_SetTime_ms+0x3c>)
 8001b94:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <TM_SetTime_ms+0x40>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200000cc 	.word	0x200000cc
 8001bac:	200000cd 	.word	0x200000cd
 8001bb0:	20000505 	.word	0x20000505
 8001bb4:	20000504 	.word	0x20000504

08001bb8 <TM_IsFlag>:

uint8_t TM_IsFlag(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	if(flag_timer) {
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <TM_IsFlag+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <TM_IsFlag+0x16>
		flag_timer = 0;
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <TM_IsFlag+0x20>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
		return 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <TM_IsFlag+0x18>
	}
	return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000504 	.word	0x20000504

08001bdc <ZB_Init>:
	}

}

//==================HIGH LEVEL FUNCTION==================//
void ZB_Init(UART_HandleTypeDef* huart){
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	uart_zigbee = huart;
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <ZB_Init+0x18>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]

}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000508 	.word	0x20000508

08001bf8 <ZB_SendMsg>:

void ZB_SendMsg(char* msg, uint8_t length){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uart_zigbee, msg, length, 1000);
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <ZB_SendMsg+0x28>)
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	f002 ffb0 	bl	8004b76 <HAL_UART_Transmit>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000508 	.word	0x20000508

08001c24 <Reset_Handler>:
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <LoopFillZerobss+0x12>)
 8001c26:	490d      	ldr	r1, [pc, #52]	; (8001c5c <LoopFillZerobss+0x16>)
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <LoopFillZerobss+0x1a>)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:
 8001c2e:	58d4      	ldr	r4, [r2, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:
 8001c34:	18c4      	adds	r4, r0, r3
 8001c36:	428c      	cmp	r4, r1
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <LoopFillZerobss+0x1e>)
 8001c3c:	4c0a      	ldr	r4, [pc, #40]	; (8001c68 <LoopFillZerobss+0x22>)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:
 8001c46:	42a2      	cmp	r2, r4
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>
 8001c4a:	f7ff ff37 	bl	8001abc <SystemInit>
 8001c4e:	f003 f903 	bl	8004e58 <__libc_init_array>
 8001c52:	f7ff fa31 	bl	80010b8 <main>
 8001c56:	4770      	bx	lr
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	200002a8 	.word	0x200002a8
 8001c60:	08007d14 	.word	0x08007d14
 8001c64:	200002a8 	.word	0x200002a8
 8001c68:	20000520 	.word	0x20000520

08001c6c <CAN1_RX1_IRQHandler>:
 8001c6c:	e7fe      	b.n	8001c6c <CAN1_RX1_IRQHandler>
	...

08001c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_Init+0x28>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_Init+0x28>)
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 fde7 	bl	8002854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c86:	200f      	movs	r0, #15
 8001c88:	f000 f808 	bl	8001c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8c:	f7ff fcac 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x54>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x58>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fdff 	bl	80028be <HAL_SYSTICK_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00e      	b.n	8001ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d80a      	bhi.n	8001ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 fdc7 	bl	800286a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cdc:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <HAL_InitTick+0x5c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200000c8 	.word	0x200000c8
 8001cf4:	200000d4 	.word	0x200000d4
 8001cf8:	200000d0 	.word	0x200000d0

08001cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_IncTick+0x1c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_IncTick+0x20>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <HAL_IncTick+0x20>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	200000d4 	.word	0x200000d4
 8001d1c:	2000050c 	.word	0x2000050c

08001d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_GetTick+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	2000050c 	.word	0x2000050c

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff fff0 	bl	8001d20 <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d5a:	bf00      	nop
 8001d5c:	f7ff ffe0 	bl	8001d20 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200000d4 	.word	0x200000d4

08001d7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0be      	b.n	8001f1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc46 	bl	800164c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fbcb 	bl	800255c <ADC_ConversionStop_Disable>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 8099 	bne.w	8001f0a <HAL_ADC_Init+0x18e>
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 8095 	bne.w	8001f0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001de8:	f023 0302 	bic.w	r3, r3, #2
 8001dec:	f043 0202 	orr.w	r2, r3, #2
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dfc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7b1b      	ldrb	r3, [r3, #12]
 8001e02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e14:	d003      	beq.n	8001e1e <HAL_ADC_Init+0xa2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_ADC_Init+0xa8>
 8001e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e22:	e000      	b.n	8001e26 <HAL_ADC_Init+0xaa>
 8001e24:	2300      	movs	r3, #0
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7d1b      	ldrb	r3, [r3, #20]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d119      	bne.n	8001e68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7b1b      	ldrb	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	035a      	lsls	r2, r3, #13
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e00b      	b.n	8001e68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <HAL_ADC_Init+0x1a8>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e98:	d003      	beq.n	8001ea2 <HAL_ADC_Init+0x126>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d104      	bne.n	8001eac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	051b      	lsls	r3, r3, #20
 8001eaa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_ADC_Init+0x1ac>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d10b      	bne.n	8001ee8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	f023 0303 	bic.w	r3, r3, #3
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee6:	e018      	b.n	8001f1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	f023 0312 	bic.w	r3, r3, #18
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f08:	e007      	b.n	8001f1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	f043 0210 	orr.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	ffe1f7fd 	.word	0xffe1f7fd
 8001f28:	ff1f0efe 	.word	0xff1f0efe

08001f2c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a64      	ldr	r2, [pc, #400]	; (80020d4 <HAL_ADC_Start_DMA+0x1a8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_ADC_Start_DMA+0x24>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a63      	ldr	r2, [pc, #396]	; (80020d8 <HAL_ADC_Start_DMA+0x1ac>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d106      	bne.n	8001f5e <HAL_ADC_Start_DMA+0x32>
 8001f50:	4b60      	ldr	r3, [pc, #384]	; (80020d4 <HAL_ADC_Start_DMA+0x1a8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 80b3 	bne.w	80020c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_Start_DMA+0x40>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e0ae      	b.n	80020ca <HAL_ADC_Start_DMA+0x19e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fa97 	bl	80024a8 <ADC_Enable>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 809a 	bne.w	80020ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <HAL_ADC_Start_DMA+0x1ac>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d105      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x84>
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <HAL_ADC_Start_DMA+0x1a8>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d115      	bne.n	8001fdc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d026      	beq.n	8002018 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fda:	e01d      	b.n	8002018 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a39      	ldr	r2, [pc, #228]	; (80020d4 <HAL_ADC_Start_DMA+0x1a8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_ADC_Start_DMA+0xd0>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a38      	ldr	r2, [pc, #224]	; (80020d8 <HAL_ADC_Start_DMA+0x1ac>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d10d      	bne.n	8002018 <HAL_ADC_Start_DMA+0xec>
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <HAL_ADC_Start_DMA+0x1a8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002010:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	f023 0206 	bic.w	r2, r3, #6
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002030:	e002      	b.n	8002038 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a25      	ldr	r2, [pc, #148]	; (80020dc <HAL_ADC_Start_DMA+0x1b0>)
 8002046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <HAL_ADC_Start_DMA+0x1b4>)
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <HAL_ADC_Start_DMA+0x1b8>)
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0202 	mvn.w	r2, #2
 8002060:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002070:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a18      	ldr	r0, [r3, #32]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	334c      	adds	r3, #76	; 0x4c
 800207c:	4619      	mov	r1, r3
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f000 fc83 	bl	800298c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002090:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002094:	d108      	bne.n	80020a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80020a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020a6:	e00f      	b.n	80020c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020b8:	e006      	b.n	80020c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80020c2:	e001      	b.n	80020c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40012400 	.word	0x40012400
 80020d8:	40012800 	.word	0x40012800
 80020dc:	080025df 	.word	0x080025df
 80020e0:	0800265b 	.word	0x0800265b
 80020e4:	08002677 	.word	0x08002677

080020e8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d140      	bne.n	8002180 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d139      	bne.n	8002180 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800212e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002132:	d11d      	bne.n	8002170 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002138:	2b00      	cmp	r3, #0
 800213a:	d119      	bne.n	8002170 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0220 	bic.w	r2, r2, #32
 800214a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f87c 	bl	800226e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f06f 0212 	mvn.w	r2, #18
 800217e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b80      	cmp	r3, #128	; 0x80
 800218c:	d14f      	bne.n	800222e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d148      	bne.n	800222e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80021be:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80021c2:	d012      	beq.n	80021ea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d125      	bne.n	800221e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021e0:	d11d      	bne.n	800221e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d119      	bne.n	800221e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa43 	bl	80026aa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 020c 	mvn.w	r2, #12
 800222c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d114      	bne.n	8002266 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10d      	bne.n	8002266 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f81b 	bl	8002292 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0201 	mvn.w	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x20>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e0dc      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1da>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d81c      	bhi.n	8002322 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b05      	subs	r3, #5
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b05      	subs	r3, #5
 8002314:	fa00 f203 	lsl.w	r2, r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	635a      	str	r2, [r3, #52]	; 0x34
 8002320:	e03c      	b.n	800239c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d81c      	bhi.n	8002364 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b23      	subs	r3, #35	; 0x23
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	4019      	ands	r1, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b23      	subs	r3, #35	; 0x23
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
 8002362:	e01b      	b.n	800239c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b41      	subs	r3, #65	; 0x41
 8002376:	221f      	movs	r2, #31
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	4019      	ands	r1, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b41      	subs	r3, #65	; 0x41
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	d91c      	bls.n	80023de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b1e      	subs	r3, #30
 80023b6:	2207      	movs	r2, #7
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	4019      	ands	r1, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6898      	ldr	r0, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	3b1e      	subs	r3, #30
 80023d0:	fa00 f203 	lsl.w	r2, r0, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	e019      	b.n	8002412 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6919      	ldr	r1, [r3, #16]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4019      	ands	r1, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6898      	ldr	r0, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	fa00 f203 	lsl.w	r2, r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d003      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800241e:	2b11      	cmp	r3, #17
 8002420:	d132      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_ADC_ConfigChannel+0x1e4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d125      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d126      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002448:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b10      	cmp	r3, #16
 8002450:	d11a      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9a      	lsrs	r2, r3, #18
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002468:	e002      	b.n	8002470 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <HAL_ADC_ConfigChannel+0x1b2>
 8002476:	e007      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f043 0220 	orr.w	r2, r3, #32
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012400 	.word	0x40012400
 80024a0:	200000c8 	.word	0x200000c8
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d040      	beq.n	8002548 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <ADC_Enable+0xac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <ADC_Enable+0xb0>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e4:	e002      	b.n	80024ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f2:	f7ff fc15 	bl	8001d20 <HAL_GetTick>
 80024f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024f8:	e01f      	b.n	800253a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fa:	f7ff fc11 	bl	8001d20 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d918      	bls.n	800253a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d011      	beq.n	800253a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e007      	b.n	800254a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d1d8      	bne.n	80024fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200000c8 	.word	0x200000c8
 8002558:	431bde83 	.word	0x431bde83

0800255c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d12e      	bne.n	80025d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002586:	f7ff fbcb 	bl	8001d20 <HAL_GetTick>
 800258a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800258c:	e01b      	b.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800258e:	f7ff fbc7 	bl	8001d20 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d914      	bls.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10d      	bne.n	80025c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d0dc      	beq.n	800258e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d127      	bne.n	8002648 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800260e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002612:	d115      	bne.n	8002640 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002618:	2b00      	cmp	r3, #0
 800261a:	d111      	bne.n	8002640 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fe14 	bl	800226e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002646:	e004      	b.n	8002652 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff fe09 	bl	8002280 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fe01 	bl	80022a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4906      	ldr	r1, [pc, #24]	; (8002754 <__NVIC_EnableIRQ+0x34>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	; (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	; (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002820:	d301      	bcc.n	8002826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002822:	2301      	movs	r3, #1
 8002824:	e00f      	b.n	8002846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <SysTick_Config+0x40>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282e:	210f      	movs	r1, #15
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f7ff ff90 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <SysTick_Config+0x40>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <SysTick_Config+0x40>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010

08002854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff2d 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff42 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff90 	bl	80027ac <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5f 	bl	8002758 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff35 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffa2 	bl	8002810 <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e043      	b.n	8002976 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_DMA_Init+0xa8>)
 80028f6:	4413      	add	r3, r2
 80028f8:	4a22      	ldr	r2, [pc, #136]	; (8002984 <HAL_DMA_Init+0xac>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	009a      	lsls	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_DMA_Init+0xb0>)
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002922:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002926:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	bffdfff8 	.word	0xbffdfff8
 8002984:	cccccccd 	.word	0xcccccccd
 8002988:	40020000 	.word	0x40020000

0800298c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_DMA_Start_IT+0x20>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e04a      	b.n	8002a42 <HAL_DMA_Start_IT+0xb6>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d13a      	bne.n	8002a34 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f938 	bl	8002c58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 020e 	orr.w	r2, r2, #14
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e00f      	b.n	8002a22 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0204 	bic.w	r2, r2, #4
 8002a10:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 020a 	orr.w	r2, r2, #10
 8002a20:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e005      	b.n	8002a40 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	2204      	movs	r2, #4
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d04f      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xc8>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d04a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0204 	bic.w	r2, r2, #4
 8002a9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a66      	ldr	r2, [pc, #408]	; (8002c3c <HAL_DMA_IRQHandler+0x1f0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d029      	beq.n	8002afa <HAL_DMA_IRQHandler+0xae>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a65      	ldr	r2, [pc, #404]	; (8002c40 <HAL_DMA_IRQHandler+0x1f4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xaa>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a63      	ldr	r2, [pc, #396]	; (8002c44 <HAL_DMA_IRQHandler+0x1f8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01a      	beq.n	8002af0 <HAL_DMA_IRQHandler+0xa4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a62      	ldr	r2, [pc, #392]	; (8002c48 <HAL_DMA_IRQHandler+0x1fc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d012      	beq.n	8002aea <HAL_DMA_IRQHandler+0x9e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a60      	ldr	r2, [pc, #384]	; (8002c4c <HAL_DMA_IRQHandler+0x200>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00a      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x98>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a5f      	ldr	r2, [pc, #380]	; (8002c50 <HAL_DMA_IRQHandler+0x204>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d102      	bne.n	8002ade <HAL_DMA_IRQHandler+0x92>
 8002ad8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002adc:	e00e      	b.n	8002afc <HAL_DMA_IRQHandler+0xb0>
 8002ade:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ae2:	e00b      	b.n	8002afc <HAL_DMA_IRQHandler+0xb0>
 8002ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ae8:	e008      	b.n	8002afc <HAL_DMA_IRQHandler+0xb0>
 8002aea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aee:	e005      	b.n	8002afc <HAL_DMA_IRQHandler+0xb0>
 8002af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af4:	e002      	b.n	8002afc <HAL_DMA_IRQHandler+0xb0>
 8002af6:	2340      	movs	r3, #64	; 0x40
 8002af8:	e000      	b.n	8002afc <HAL_DMA_IRQHandler+0xb0>
 8002afa:	2304      	movs	r3, #4
 8002afc:	4a55      	ldr	r2, [pc, #340]	; (8002c54 <HAL_DMA_IRQHandler+0x208>)
 8002afe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 8094 	beq.w	8002c32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b12:	e08e      	b.n	8002c32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2202      	movs	r2, #2
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d056      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x186>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d051      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 020a 	bic.w	r2, r2, #10
 8002b4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a38      	ldr	r2, [pc, #224]	; (8002c3c <HAL_DMA_IRQHandler+0x1f0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d029      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x166>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <HAL_DMA_IRQHandler+0x1f4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d022      	beq.n	8002bae <HAL_DMA_IRQHandler+0x162>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a35      	ldr	r2, [pc, #212]	; (8002c44 <HAL_DMA_IRQHandler+0x1f8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01a      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x15c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <HAL_DMA_IRQHandler+0x1fc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d012      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x156>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a32      	ldr	r2, [pc, #200]	; (8002c4c <HAL_DMA_IRQHandler+0x200>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00a      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x150>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <HAL_DMA_IRQHandler+0x204>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d102      	bne.n	8002b96 <HAL_DMA_IRQHandler+0x14a>
 8002b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b94:	e00e      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x168>
 8002b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b9a:	e00b      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x168>
 8002b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba0:	e008      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x168>
 8002ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba6:	e005      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x168>
 8002ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bac:	e002      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x168>
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e000      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x168>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_DMA_IRQHandler+0x208>)
 8002bb6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d034      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bd0:	e02f      	b.n	8002c32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d028      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x1e8>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d023      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 020e 	bic.w	r2, r2, #14
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
    }
  }
  return;
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
}
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40020008 	.word	0x40020008
 8002c40:	4002001c 	.word	0x4002001c
 8002c44:	40020030 	.word	0x40020030
 8002c48:	40020044 	.word	0x40020044
 8002c4c:	40020058 	.word	0x40020058
 8002c50:	4002006c 	.word	0x4002006c
 8002c54:	40020000 	.word	0x40020000

08002c58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f202 	lsl.w	r2, r1, r2
 8002c74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d108      	bne.n	8002c98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c96:	e007      	b.n	8002ca8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b08b      	sub	sp, #44	; 0x2c
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc6:	e169      	b.n	8002f9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	f040 8158 	bne.w	8002f96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4a9a      	ldr	r2, [pc, #616]	; (8002f54 <HAL_GPIO_Init+0x2a0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d05e      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002cf0:	4a98      	ldr	r2, [pc, #608]	; (8002f54 <HAL_GPIO_Init+0x2a0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d875      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002cf6:	4a98      	ldr	r2, [pc, #608]	; (8002f58 <HAL_GPIO_Init+0x2a4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d058      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002cfc:	4a96      	ldr	r2, [pc, #600]	; (8002f58 <HAL_GPIO_Init+0x2a4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d86f      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d02:	4a96      	ldr	r2, [pc, #600]	; (8002f5c <HAL_GPIO_Init+0x2a8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d052      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002d08:	4a94      	ldr	r2, [pc, #592]	; (8002f5c <HAL_GPIO_Init+0x2a8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d869      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d0e:	4a94      	ldr	r2, [pc, #592]	; (8002f60 <HAL_GPIO_Init+0x2ac>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d04c      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002d14:	4a92      	ldr	r2, [pc, #584]	; (8002f60 <HAL_GPIO_Init+0x2ac>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d863      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d1a:	4a92      	ldr	r2, [pc, #584]	; (8002f64 <HAL_GPIO_Init+0x2b0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d046      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002d20:	4a90      	ldr	r2, [pc, #576]	; (8002f64 <HAL_GPIO_Init+0x2b0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d85d      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d26:	2b12      	cmp	r3, #18
 8002d28:	d82a      	bhi.n	8002d80 <HAL_GPIO_Init+0xcc>
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d859      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d2e:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_GPIO_Init+0x80>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002daf 	.word	0x08002daf
 8002d38:	08002d89 	.word	0x08002d89
 8002d3c:	08002d9b 	.word	0x08002d9b
 8002d40:	08002ddd 	.word	0x08002ddd
 8002d44:	08002de3 	.word	0x08002de3
 8002d48:	08002de3 	.word	0x08002de3
 8002d4c:	08002de3 	.word	0x08002de3
 8002d50:	08002de3 	.word	0x08002de3
 8002d54:	08002de3 	.word	0x08002de3
 8002d58:	08002de3 	.word	0x08002de3
 8002d5c:	08002de3 	.word	0x08002de3
 8002d60:	08002de3 	.word	0x08002de3
 8002d64:	08002de3 	.word	0x08002de3
 8002d68:	08002de3 	.word	0x08002de3
 8002d6c:	08002de3 	.word	0x08002de3
 8002d70:	08002de3 	.word	0x08002de3
 8002d74:	08002de3 	.word	0x08002de3
 8002d78:	08002d91 	.word	0x08002d91
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	4a79      	ldr	r2, [pc, #484]	; (8002f68 <HAL_GPIO_Init+0x2b4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d86:	e02c      	b.n	8002de2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	623b      	str	r3, [r7, #32]
          break;
 8002d8e:	e029      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	3304      	adds	r3, #4
 8002d96:	623b      	str	r3, [r7, #32]
          break;
 8002d98:	e024      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	3308      	adds	r3, #8
 8002da0:	623b      	str	r3, [r7, #32]
          break;
 8002da2:	e01f      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	330c      	adds	r3, #12
 8002daa:	623b      	str	r3, [r7, #32]
          break;
 8002dac:	e01a      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002db6:	2304      	movs	r3, #4
 8002db8:	623b      	str	r3, [r7, #32]
          break;
 8002dba:	e013      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	611a      	str	r2, [r3, #16]
          break;
 8002dce:	e009      	b.n	8002de4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	615a      	str	r2, [r3, #20]
          break;
 8002dda:	e003      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
          break;
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          break;
 8002de2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2bff      	cmp	r3, #255	; 0xff
 8002de8:	d801      	bhi.n	8002dee <HAL_GPIO_Init+0x13a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	e001      	b.n	8002df2 <HAL_GPIO_Init+0x13e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2bff      	cmp	r3, #255	; 0xff
 8002df8:	d802      	bhi.n	8002e00 <HAL_GPIO_Init+0x14c>
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	e002      	b.n	8002e06 <HAL_GPIO_Init+0x152>
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	3b08      	subs	r3, #8
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	210f      	movs	r1, #15
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	401a      	ands	r2, r3
 8002e18:	6a39      	ldr	r1, [r7, #32]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	431a      	orrs	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80b1 	beq.w	8002f96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e34:	4b4d      	ldr	r3, [pc, #308]	; (8002f6c <HAL_GPIO_Init+0x2b8>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_GPIO_Init+0x2b8>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6193      	str	r3, [r2, #24]
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_GPIO_Init+0x2b8>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e4c:	4a48      	ldr	r2, [pc, #288]	; (8002f70 <HAL_GPIO_Init+0x2bc>)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	3302      	adds	r3, #2
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220f      	movs	r2, #15
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a40      	ldr	r2, [pc, #256]	; (8002f74 <HAL_GPIO_Init+0x2c0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_GPIO_Init+0x1ec>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3f      	ldr	r2, [pc, #252]	; (8002f78 <HAL_GPIO_Init+0x2c4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00d      	beq.n	8002e9c <HAL_GPIO_Init+0x1e8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3e      	ldr	r2, [pc, #248]	; (8002f7c <HAL_GPIO_Init+0x2c8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <HAL_GPIO_Init+0x1e4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3d      	ldr	r2, [pc, #244]	; (8002f80 <HAL_GPIO_Init+0x2cc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_GPIO_Init+0x1e0>
 8002e90:	2303      	movs	r3, #3
 8002e92:	e006      	b.n	8002ea2 <HAL_GPIO_Init+0x1ee>
 8002e94:	2304      	movs	r3, #4
 8002e96:	e004      	b.n	8002ea2 <HAL_GPIO_Init+0x1ee>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e002      	b.n	8002ea2 <HAL_GPIO_Init+0x1ee>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_GPIO_Init+0x1ee>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea4:	f002 0203 	and.w	r2, r2, #3
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	4093      	lsls	r3, r2
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eb2:	492f      	ldr	r1, [pc, #188]	; (8002f70 <HAL_GPIO_Init+0x2bc>)
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	492c      	ldr	r1, [pc, #176]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4928      	ldr	r1, [pc, #160]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ef4:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4922      	ldr	r1, [pc, #136]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
 8002f00:	e006      	b.n	8002f10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	491e      	ldr	r1, [pc, #120]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4918      	ldr	r1, [pc, #96]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	4914      	ldr	r1, [pc, #80]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d021      	beq.n	8002f88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	490e      	ldr	r1, [pc, #56]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60cb      	str	r3, [r1, #12]
 8002f50:	e021      	b.n	8002f96 <HAL_GPIO_Init+0x2e2>
 8002f52:	bf00      	nop
 8002f54:	10320000 	.word	0x10320000
 8002f58:	10310000 	.word	0x10310000
 8002f5c:	10220000 	.word	0x10220000
 8002f60:	10210000 	.word	0x10210000
 8002f64:	10120000 	.word	0x10120000
 8002f68:	10110000 	.word	0x10110000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40010800 	.word	0x40010800
 8002f78:	40010c00 	.word	0x40010c00
 8002f7c:	40011000 	.word	0x40011000
 8002f80:	40011400 	.word	0x40011400
 8002f84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	4909      	ldr	r1, [pc, #36]	; (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	3301      	adds	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f47f ae8e 	bne.w	8002cc8 <HAL_GPIO_Init+0x14>
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	372c      	adds	r7, #44	; 0x2c
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fd8:	e003      	b.n	8002fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	041a      	lsls	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	611a      	str	r2, [r3, #16]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4013      	ands	r3, r2
 8003004:	041a      	lsls	r2, r3, #16
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	43d9      	mvns	r1, r3
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	400b      	ands	r3, r1
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	611a      	str	r2, [r3, #16]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
	...

08003020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e12b      	b.n	800328a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fb70 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	; 0x24
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003084:	f000 ffea 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 8003088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4a81      	ldr	r2, [pc, #516]	; (8003294 <HAL_I2C_Init+0x274>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d807      	bhi.n	80030a4 <HAL_I2C_Init+0x84>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a80      	ldr	r2, [pc, #512]	; (8003298 <HAL_I2C_Init+0x278>)
 8003098:	4293      	cmp	r3, r2
 800309a:	bf94      	ite	ls
 800309c:	2301      	movls	r3, #1
 800309e:	2300      	movhi	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e006      	b.n	80030b2 <HAL_I2C_Init+0x92>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a7d      	ldr	r2, [pc, #500]	; (800329c <HAL_I2C_Init+0x27c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0e7      	b.n	800328a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a78      	ldr	r2, [pc, #480]	; (80032a0 <HAL_I2C_Init+0x280>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a6a      	ldr	r2, [pc, #424]	; (8003294 <HAL_I2C_Init+0x274>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d802      	bhi.n	80030f4 <HAL_I2C_Init+0xd4>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3301      	adds	r3, #1
 80030f2:	e009      	b.n	8003108 <HAL_I2C_Init+0xe8>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <HAL_I2C_Init+0x284>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	3301      	adds	r3, #1
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	430b      	orrs	r3, r1
 800310e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800311a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	495c      	ldr	r1, [pc, #368]	; (8003294 <HAL_I2C_Init+0x274>)
 8003124:	428b      	cmp	r3, r1
 8003126:	d819      	bhi.n	800315c <HAL_I2C_Init+0x13c>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e59      	subs	r1, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fbb1 f3f3 	udiv	r3, r1, r3
 8003136:	1c59      	adds	r1, r3, #1
 8003138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800313c:	400b      	ands	r3, r1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_I2C_Init+0x138>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e59      	subs	r1, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003150:	3301      	adds	r3, #1
 8003152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003156:	e051      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 8003158:	2304      	movs	r3, #4
 800315a:	e04f      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d111      	bne.n	8003188 <HAL_I2C_Init+0x168>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	440b      	add	r3, r1
 8003172:	fbb0 f3f3 	udiv	r3, r0, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e012      	b.n	80031ae <HAL_I2C_Init+0x18e>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	0099      	lsls	r1, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	fbb0 f3f3 	udiv	r3, r0, r3
 800319e:	3301      	adds	r3, #1
 80031a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Init+0x196>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e022      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10e      	bne.n	80031dc <HAL_I2C_Init+0x1bc>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1e58      	subs	r0, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	440b      	add	r3, r1
 80031cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031da:	e00f      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	0099      	lsls	r1, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	6809      	ldr	r1, [r1, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800322a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6911      	ldr	r1, [r2, #16]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68d2      	ldr	r2, [r2, #12]
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	430b      	orrs	r3, r1
 800323e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	000186a0 	.word	0x000186a0
 8003298:	001e847f 	.word	0x001e847f
 800329c:	003d08ff 	.word	0x003d08ff
 80032a0:	431bde83 	.word	0x431bde83
 80032a4:	10624dd3 	.word	0x10624dd3

080032a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	461a      	mov	r2, r3
 80032b4:	460b      	mov	r3, r1
 80032b6:	817b      	strh	r3, [r7, #10]
 80032b8:	4613      	mov	r3, r2
 80032ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7fe fd30 	bl	8001d20 <HAL_GetTick>
 80032c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	f040 80e0 	bne.w	8003490 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2319      	movs	r3, #25
 80032d6:	2201      	movs	r2, #1
 80032d8:	4970      	ldr	r1, [pc, #448]	; (800349c <HAL_I2C_Master_Transmit+0x1f4>)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f964 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	e0d3      	b.n	8003492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_I2C_Master_Transmit+0x50>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e0cc      	b.n	8003492 <HAL_I2C_Master_Transmit+0x1ea>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d007      	beq.n	800331e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800332c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2221      	movs	r2, #33	; 0x21
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2210      	movs	r2, #16
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	893a      	ldrh	r2, [r7, #8]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a50      	ldr	r2, [pc, #320]	; (80034a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003360:	8979      	ldrh	r1, [r7, #10]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f89c 	bl	80034a4 <I2C_MasterRequestWrite>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e08d      	b.n	8003492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800338c:	e066      	b.n	800345c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	6a39      	ldr	r1, [r7, #32]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f9de 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d107      	bne.n	80033b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e06b      	b.n	8003492 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d11b      	bne.n	8003430 <HAL_I2C_Master_Transmit+0x188>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d017      	beq.n	8003430 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	6a39      	ldr	r1, [r7, #32]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f9ce 	bl	80037d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b04      	cmp	r3, #4
 8003446:	d107      	bne.n	8003458 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e01a      	b.n	8003492 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d194      	bne.n	800338e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e000      	b.n	8003492 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003490:	2302      	movs	r3, #2
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	00100002 	.word	0x00100002
 80034a0:	ffff0000 	.word	0xffff0000

080034a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	460b      	mov	r3, r1
 80034b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d006      	beq.n	80034ce <I2C_MasterRequestWrite+0x2a>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d003      	beq.n	80034ce <I2C_MasterRequestWrite+0x2a>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034cc:	d108      	bne.n	80034e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00b      	b.n	80034f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	2b12      	cmp	r3, #18
 80034e6:	d107      	bne.n	80034f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f84f 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351e:	d103      	bne.n	8003528 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e035      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003534:	d108      	bne.n	8003548 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003544:	611a      	str	r2, [r3, #16]
 8003546:	e01b      	b.n	8003580 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003548:	897b      	ldrh	r3, [r7, #10]
 800354a:	11db      	asrs	r3, r3, #7
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f003 0306 	and.w	r3, r3, #6
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f063 030f 	orn	r3, r3, #15
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	490e      	ldr	r1, [pc, #56]	; (80035a0 <I2C_MasterRequestWrite+0xfc>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f875 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e010      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <I2C_MasterRequestWrite+0x100>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f865 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	00010008 	.word	0x00010008
 80035a4:	00010002 	.word	0x00010002

080035a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b8:	e025      	b.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d021      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe fbad 	bl	8001d20 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d116      	bne.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e023      	b.n	800364e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10d      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	e00c      	b.n	8003646 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	429a      	cmp	r2, r3
 800364a:	d0b6      	beq.n	80035ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003664:	e051      	b.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d123      	bne.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e046      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d021      	beq.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fe fb2b 	bl	8001d20 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d116      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e020      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d10c      	bne.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e00b      	b.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d18d      	bne.n	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	e02d      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f878 	bl	8003858 <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02d      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d021      	beq.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fad1 	bl	8001d20 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d116      	bne.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d1ca      	bne.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e2:	e02d      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f837 	bl	8003858 <I2C_IsAcknowledgeFailed>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e02d      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d021      	beq.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7fe fa90 	bl	8001d20 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e007      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d1ca      	bne.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d11b      	bne.n	80038a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003878:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e272      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8087 	beq.w	80039e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d4:	4b92      	ldr	r3, [pc, #584]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d00c      	beq.n	80038fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038e0:	4b8f      	ldr	r3, [pc, #572]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d112      	bne.n	8003912 <HAL_RCC_OscConfig+0x5e>
 80038ec:	4b8c      	ldr	r3, [pc, #560]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f8:	d10b      	bne.n	8003912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fa:	4b89      	ldr	r3, [pc, #548]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d06c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x12c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d168      	bne.n	80039e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e24c      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x76>
 800391c:	4b80      	ldr	r3, [pc, #512]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a7f      	ldr	r2, [pc, #508]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e02e      	b.n	8003988 <HAL_RCC_OscConfig+0xd4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x98>
 8003932:	4b7b      	ldr	r3, [pc, #492]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a7a      	ldr	r2, [pc, #488]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b78      	ldr	r3, [pc, #480]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a77      	ldr	r2, [pc, #476]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e01d      	b.n	8003988 <HAL_RCC_OscConfig+0xd4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0xbc>
 8003956:	4b72      	ldr	r3, [pc, #456]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a71      	ldr	r2, [pc, #452]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 800395c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b6f      	ldr	r3, [pc, #444]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6e      	ldr	r2, [pc, #440]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e00b      	b.n	8003988 <HAL_RCC_OscConfig+0xd4>
 8003970:	4b6b      	ldr	r3, [pc, #428]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a6a      	ldr	r2, [pc, #424]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b68      	ldr	r3, [pc, #416]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a67      	ldr	r2, [pc, #412]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d013      	beq.n	80039b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe f9c6 	bl	8001d20 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe f9c2 	bl	8001d20 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e200      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b5d      	ldr	r3, [pc, #372]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0xe4>
 80039b6:	e014      	b.n	80039e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe f9b2 	bl	8001d20 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe f9ae 	bl	8001d20 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1ec      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x10c>
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d063      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ee:	4b4c      	ldr	r3, [pc, #304]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039fa:	4b49      	ldr	r3, [pc, #292]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d11c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x18c>
 8003a06:	4b46      	ldr	r3, [pc, #280]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d116      	bne.n	8003a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCC_OscConfig+0x176>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e1c0      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4939      	ldr	r1, [pc, #228]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3e:	e03a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a48:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe f967 	bl	8001d20 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a56:	f7fe f963 	bl	8001d20 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e1a1      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4927      	ldr	r1, [pc, #156]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
 8003a88:	e015      	b.n	8003ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fe f946 	bl	8001d20 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a98:	f7fe f942 	bl	8001d20 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e180      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d03a      	beq.n	8003b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aca:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <HAL_RCC_OscConfig+0x274>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad0:	f7fe f926 	bl	8001d20 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fe f922 	bl	8001d20 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e160      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003af6:	2001      	movs	r0, #1
 8003af8:	f000 fad8 	bl	80040ac <RCC_Delay>
 8003afc:	e01c      	b.n	8003b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_RCC_OscConfig+0x274>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b04:	f7fe f90c 	bl	8001d20 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0a:	e00f      	b.n	8003b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7fe f908 	bl	8001d20 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d908      	bls.n	8003b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e146      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	42420000 	.word	0x42420000
 8003b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	4b92      	ldr	r3, [pc, #584]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e9      	bne.n	8003b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80a6 	beq.w	8003c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4a:	4b8b      	ldr	r3, [pc, #556]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10d      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	4b88      	ldr	r3, [pc, #544]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4a87      	ldr	r2, [pc, #540]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b60:	61d3      	str	r3, [r2, #28]
 8003b62:	4b85      	ldr	r3, [pc, #532]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b82      	ldr	r3, [pc, #520]	; (8003d7c <HAL_RCC_OscConfig+0x4c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d118      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7e:	4b7f      	ldr	r3, [pc, #508]	; (8003d7c <HAL_RCC_OscConfig+0x4c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7e      	ldr	r2, [pc, #504]	; (8003d7c <HAL_RCC_OscConfig+0x4c8>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8a:	f7fe f8c9 	bl	8001d20 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fe f8c5 	bl	8001d20 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e103      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	4b75      	ldr	r3, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x4c8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x312>
 8003bb8:	4b6f      	ldr	r3, [pc, #444]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4a6e      	ldr	r2, [pc, #440]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6213      	str	r3, [r2, #32]
 8003bc4:	e02d      	b.n	8003c22 <HAL_RCC_OscConfig+0x36e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x334>
 8003bce:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4a69      	ldr	r2, [pc, #420]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	6213      	str	r3, [r2, #32]
 8003bda:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4a66      	ldr	r2, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	6213      	str	r3, [r2, #32]
 8003be6:	e01c      	b.n	8003c22 <HAL_RCC_OscConfig+0x36e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x356>
 8003bf0:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a60      	ldr	r2, [pc, #384]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6213      	str	r3, [r2, #32]
 8003bfc:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6213      	str	r3, [r2, #32]
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x36e>
 8003c0a:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4a5a      	ldr	r2, [pc, #360]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6213      	str	r3, [r2, #32]
 8003c16:	4b58      	ldr	r3, [pc, #352]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	4a57      	ldr	r2, [pc, #348]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d015      	beq.n	8003c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2a:	f7fe f879 	bl	8001d20 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe f875 	bl	8001d20 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0b1      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCC_OscConfig+0x37e>
 8003c54:	e014      	b.n	8003c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c56:	f7fe f863 	bl	8001d20 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe f85f 	bl	8001d20 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e09b      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c74:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d105      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c86:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8087 	beq.w	8003daa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c9c:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d061      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d146      	bne.n	8003d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_RCC_OscConfig+0x4cc>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe f833 	bl	8001d20 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe f82f 	bl	8001d20 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e06d      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd0:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce4:	d108      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4921      	ldr	r1, [pc, #132]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a19      	ldr	r1, [r3, #32]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x4cc>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fe f803 	bl	8001d20 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd ffff 	bl	8001d20 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e03d      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x46a>
 8003d3c:	e035      	b.n	8003daa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x4cc>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd ffec 	bl	8001d20 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fd ffe8 	bl	8001d20 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e026      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x498>
 8003d6a:	e01e      	b.n	8003daa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e019      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_OscConfig+0x500>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000

08003db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0d0      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d910      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 0207 	bic.w	r2, r3, #7
 8003de2:	4965      	ldr	r1, [pc, #404]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b8      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e14:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a52      	ldr	r2, [pc, #328]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	494d      	ldr	r1, [pc, #308]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d040      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d115      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e07f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e073      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06b      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4936      	ldr	r1, [pc, #216]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd ff3a 	bl	8001d20 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd ff36 	bl	8001d20 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e053      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d210      	bcs.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 0207 	bic.w	r2, r3, #7
 8003eee:	4922      	ldr	r1, [pc, #136]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e032      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4916      	ldr	r1, [pc, #88]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	490e      	ldr	r1, [pc, #56]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f46:	f000 f821 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	490a      	ldr	r1, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	5ccb      	ldrb	r3, [r1, r3]
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1cc>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1d0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fe98 	bl	8001c9c <HAL_InitTick>

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08007918 	.word	0x08007918
 8003f84:	200000c8 	.word	0x200000c8
 8003f88:	200000d0 	.word	0x200000d0

08003f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b490      	push	{r4, r7}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f92:	4b29      	ldr	r3, [pc, #164]	; (8004038 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f94:	1d3c      	adds	r4, r7, #4
 8003f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f9c:	f240 2301 	movw	r3, #513	; 0x201
 8003fa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x40>
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8003fca:	e02b      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fcc:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fce:	623b      	str	r3, [r7, #32]
      break;
 8003fd0:	e02b      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	0c9b      	lsrs	r3, r3, #18
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	3328      	adds	r3, #40	; 0x28
 8003fdc:	443b      	add	r3, r7
 8003fde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fe2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d012      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0c5b      	lsrs	r3, r3, #17
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	3328      	adds	r3, #40	; 0x28
 8003ffa:	443b      	add	r3, r7
 8003ffc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004000:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004006:	fb03 f202 	mul.w	r2, r3, r2
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
 8004012:	e004      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4a0b      	ldr	r2, [pc, #44]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	623b      	str	r3, [r7, #32]
      break;
 8004022:	e002      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004026:	623b      	str	r3, [r7, #32]
      break;
 8004028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402a:	6a3b      	ldr	r3, [r7, #32]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3728      	adds	r7, #40	; 0x28
 8004030:	46bd      	mov	sp, r7
 8004032:	bc90      	pop	{r4, r7}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	08007908 	.word	0x08007908
 800403c:	40021000 	.word	0x40021000
 8004040:	007a1200 	.word	0x007a1200
 8004044:	003d0900 	.word	0x003d0900

08004048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800404c:	4b02      	ldr	r3, [pc, #8]	; (8004058 <HAL_RCC_GetHCLKFreq+0x10>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	200000c8 	.word	0x200000c8

0800405c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004060:	f7ff fff2 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	08007928 	.word	0x08007928

08004084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004088:	f7ff ffde 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	0adb      	lsrs	r3, r3, #11
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4903      	ldr	r1, [pc, #12]	; (80040a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	08007928 	.word	0x08007928

080040ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <RCC_Delay+0x34>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <RCC_Delay+0x38>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0a5b      	lsrs	r3, r3, #9
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040c8:	bf00      	nop
  }
  while (Delay --);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	60fa      	str	r2, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f9      	bne.n	80040c8 <RCC_Delay+0x1c>
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	200000c8 	.word	0x200000c8
 80040e4:	10624dd3 	.word	0x10624dd3

080040e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d07d      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004108:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004114:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	4a4b      	ldr	r2, [pc, #300]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	61d3      	str	r3, [r2, #28]
 8004120:	4b49      	ldr	r3, [pc, #292]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004130:	4b46      	ldr	r3, [pc, #280]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d118      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413c:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a42      	ldr	r2, [pc, #264]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004148:	f7fd fdea 	bl	8001d20 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414e:	e008      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004150:	f7fd fde6 	bl	8001d20 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e06d      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004162:	4b3a      	ldr	r3, [pc, #232]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800416e:	4b36      	ldr	r3, [pc, #216]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d02e      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d027      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418c:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004196:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800419c:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041a2:	4a29      	ldr	r2, [pc, #164]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d014      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fd fdb5 	bl	8001d20 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fd fdb1 	bl	8001d20 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e036      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4917      	ldr	r1, [pc, #92]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	490b      	ldr	r1, [pc, #44]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4904      	ldr	r1, [pc, #16]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	40007000 	.word	0x40007000
 8004250:	42420440 	.word	0x42420440

08004254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e041      	b.n	80042ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd fa94 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f000 faba 	bl	800480c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_TIM_Base_Start+0x88>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_TIM_Base_Start+0x48>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d009      	beq.n	800433c <HAL_TIM_Base_Start+0x48>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a14      	ldr	r2, [pc, #80]	; (8004380 <HAL_TIM_Base_Start+0x8c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_TIM_Base_Start+0x48>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a13      	ldr	r2, [pc, #76]	; (8004384 <HAL_TIM_Base_Start+0x90>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d111      	bne.n	8004360 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b06      	cmp	r3, #6
 800434c:	d010      	beq.n	8004370 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435e:	e007      	b.n	8004370 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800

08004388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e03a      	b.n	8004416 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a18      	ldr	r2, [pc, #96]	; (8004420 <HAL_TIM_Base_Start_IT+0x98>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00e      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x58>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ca:	d009      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x58>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a14      	ldr	r2, [pc, #80]	; (8004424 <HAL_TIM_Base_Start_IT+0x9c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x58>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a13      	ldr	r2, [pc, #76]	; (8004428 <HAL_TIM_Base_Start_IT+0xa0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d111      	bne.n	8004404 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d010      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004402:	e007      	b.n	8004414 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800

0800442c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9b1 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9a4 	bl	80047c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f9b3 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d122      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0204 	mvn.w	r2, #4
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f987 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f97a 	bl	80047c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f989 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d122      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d11b      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0208 	mvn.w	r2, #8
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f95d 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f950 	bl	80047c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f95f 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f933 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f926 	bl	80047c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f935 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0201 	mvn.w	r2, #1
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd faae 	bl	8001b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa77 	bl	8004aca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8f9 	bl	80047fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa42 	bl	8004ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIM_ConfigClockSource+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e0b3      	b.n	80047bc <HAL_TIM_ConfigClockSource+0x180>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468c:	d03e      	beq.n	800470c <HAL_TIM_ConfigClockSource+0xd0>
 800468e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004692:	f200 8087 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	f000 8085 	beq.w	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d87f      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046a4:	2b70      	cmp	r3, #112	; 0x70
 80046a6:	d01a      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xa2>
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d87b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d050      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x116>
 80046b0:	2b60      	cmp	r3, #96	; 0x60
 80046b2:	d877      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046b4:	2b50      	cmp	r3, #80	; 0x50
 80046b6:	d03c      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0xf6>
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d873      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d058      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x136>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d86f      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046c4:	2b30      	cmp	r3, #48	; 0x30
 80046c6:	d064      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x156>
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d86b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d060      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x156>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d867      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05c      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x156>
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d05a      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046dc:	e062      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f000 f966 	bl	80049be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004700:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	609a      	str	r2, [r3, #8]
      break;
 800470a:	e04e      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6899      	ldr	r1, [r3, #8]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f000 f94f 	bl	80049be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472e:	609a      	str	r2, [r3, #8]
      break;
 8004730:	e03b      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	461a      	mov	r2, r3
 8004740:	f000 f8c6 	bl	80048d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2150      	movs	r1, #80	; 0x50
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f91d 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8004750:	e02b      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	461a      	mov	r2, r3
 8004760:	f000 f8e4 	bl	800492c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2160      	movs	r1, #96	; 0x60
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f90d 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8004770:	e01b      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	f000 f8a6 	bl	80048d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f8fd 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8004790:	e00b      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f000 f8f4 	bl	800498a <TIM_ITRx_SetConfig>
        break;
 80047a2:	e002      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <TIM_Base_SetConfig+0xb8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00b      	beq.n	800483c <TIM_Base_SetConfig+0x30>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482a:	d007      	beq.n	800483c <TIM_Base_SetConfig+0x30>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <TIM_Base_SetConfig+0xbc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_Base_SetConfig+0x30>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a25      	ldr	r2, [pc, #148]	; (80048cc <TIM_Base_SetConfig+0xc0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d108      	bne.n	800484e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <TIM_Base_SetConfig+0xb8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00b      	beq.n	800486e <TIM_Base_SetConfig+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485c:	d007      	beq.n	800486e <TIM_Base_SetConfig+0x62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <TIM_Base_SetConfig+0xbc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_Base_SetConfig+0x62>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <TIM_Base_SetConfig+0xc0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <TIM_Base_SetConfig+0xb8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d103      	bne.n	80048b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	615a      	str	r2, [r3, #20]
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800

080048d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f023 030a 	bic.w	r3, r3, #10
 800490c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f023 0210 	bic.w	r2, r3, #16
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004956:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	031b      	lsls	r3, r3, #12
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004968:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	621a      	str	r2, [r3, #32]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f043 0307 	orr.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049be:	b480      	push	{r7}
 80049c0:	b087      	sub	sp, #28
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	021a      	lsls	r2, r3, #8
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	609a      	str	r2, [r3, #8]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e046      	b.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a16      	ldr	r2, [pc, #88]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d009      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a10      	ldr	r2, [pc, #64]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d10c      	bne.n	8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800

08004ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e03f      	b.n	8004b6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fc fe88 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2224      	movs	r2, #36	; 0x24
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f905 	bl	8004d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08a      	sub	sp, #40	; 0x28
 8004b7a:	af02      	add	r7, sp, #8
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d17c      	bne.n	8004c90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_UART_Transmit+0x2c>
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e075      	b.n	8004c92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Transmit+0x3e>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e06e      	b.n	8004c92 <HAL_UART_Transmit+0x11c>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2221      	movs	r2, #33	; 0x21
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bca:	f7fd f8a9 	bl	8001d20 <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be4:	d108      	bne.n	8004bf8 <HAL_UART_Transmit+0x82>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	e003      	b.n	8004c00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c08:	e02a      	b.n	8004c60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2180      	movs	r1, #128	; 0x80
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f840 	bl	8004c9a <UART_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e036      	b.n	8004c92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	e007      	b.n	8004c52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1cf      	bne.n	8004c0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2200      	movs	r2, #0
 8004c72:	2140      	movs	r1, #64	; 0x40
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f810 	bl	8004c9a <UART_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e006      	b.n	8004c92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
  }
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004caa:	e02c      	b.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d028      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0x30>
 8004cba:	f7fd f831 	bl	8001d20 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d21d      	bcs.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cd8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e00f      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	bf0c      	ite	eq
 8004d16:	2301      	moveq	r3, #1
 8004d18:	2300      	movne	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d0c3      	beq.n	8004cac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d6a:	f023 030c 	bic.w	r3, r3, #12
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2c      	ldr	r2, [pc, #176]	; (8004e44 <UART_SetConfig+0x114>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d103      	bne.n	8004da0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d98:	f7ff f974 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	e002      	b.n	8004da6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004da0:	f7ff f95c 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 8004da4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009a      	lsls	r2, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <UART_SetConfig+0x118>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	0119      	lsls	r1, r3, #4
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009a      	lsls	r2, r3, #2
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <UART_SetConfig+0x118>)
 8004dde:	fba3 0302 	umull	r0, r3, r3, r2
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2064      	movs	r0, #100	; 0x64
 8004de6:	fb00 f303 	mul.w	r3, r0, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	3332      	adds	r3, #50	; 0x32
 8004df0:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <UART_SetConfig+0x118>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dfc:	4419      	add	r1, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009a      	lsls	r2, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <UART_SetConfig+0x118>)
 8004e16:	fba3 0302 	umull	r0, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2064      	movs	r0, #100	; 0x64
 8004e1e:	fb00 f303 	mul.w	r3, r0, r3
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	3332      	adds	r3, #50	; 0x32
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <UART_SetConfig+0x118>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	f003 020f 	and.w	r2, r3, #15
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	440a      	add	r2, r1
 8004e3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40013800 	.word	0x40013800
 8004e48:	51eb851f 	.word	0x51eb851f

08004e4c <__errno>:
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <__errno+0x8>)
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	200000d8 	.word	0x200000d8

08004e58 <__libc_init_array>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	4d0c      	ldr	r5, [pc, #48]	; (8004e90 <__libc_init_array+0x38>)
 8004e5e:	4c0d      	ldr	r4, [pc, #52]	; (8004e94 <__libc_init_array+0x3c>)
 8004e60:	1b64      	subs	r4, r4, r5
 8004e62:	10a4      	asrs	r4, r4, #2
 8004e64:	42a6      	cmp	r6, r4
 8004e66:	d109      	bne.n	8004e7c <__libc_init_array+0x24>
 8004e68:	f002 fd34 	bl	80078d4 <_init>
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	4d0a      	ldr	r5, [pc, #40]	; (8004e98 <__libc_init_array+0x40>)
 8004e70:	4c0a      	ldr	r4, [pc, #40]	; (8004e9c <__libc_init_array+0x44>)
 8004e72:	1b64      	subs	r4, r4, r5
 8004e74:	10a4      	asrs	r4, r4, #2
 8004e76:	42a6      	cmp	r6, r4
 8004e78:	d105      	bne.n	8004e86 <__libc_init_array+0x2e>
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e80:	4798      	blx	r3
 8004e82:	3601      	adds	r6, #1
 8004e84:	e7ee      	b.n	8004e64 <__libc_init_array+0xc>
 8004e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8a:	4798      	blx	r3
 8004e8c:	3601      	adds	r6, #1
 8004e8e:	e7f2      	b.n	8004e76 <__libc_init_array+0x1e>
 8004e90:	08007d0c 	.word	0x08007d0c
 8004e94:	08007d0c 	.word	0x08007d0c
 8004e98:	08007d0c 	.word	0x08007d0c
 8004e9c:	08007d10 	.word	0x08007d10

08004ea0 <malloc>:
 8004ea0:	4b02      	ldr	r3, [pc, #8]	; (8004eac <malloc+0xc>)
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	f000 b87b 	b.w	8004fa0 <_malloc_r>
 8004eaa:	bf00      	nop
 8004eac:	200000d8 	.word	0x200000d8

08004eb0 <free>:
 8004eb0:	4b02      	ldr	r3, [pc, #8]	; (8004ebc <free+0xc>)
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	f000 b80b 	b.w	8004ed0 <_free_r>
 8004eba:	bf00      	nop
 8004ebc:	200000d8 	.word	0x200000d8

08004ec0 <memset>:
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4402      	add	r2, r0
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d100      	bne.n	8004eca <memset+0xa>
 8004ec8:	4770      	bx	lr
 8004eca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ece:	e7f9      	b.n	8004ec4 <memset+0x4>

08004ed0 <_free_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d040      	beq.n	8004f5a <_free_r+0x8a>
 8004ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004edc:	1f0c      	subs	r4, r1, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bfb8      	it	lt
 8004ee2:	18e4      	addlt	r4, r4, r3
 8004ee4:	f001 fbda 	bl	800669c <__malloc_lock>
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <_free_r+0x8c>)
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	b933      	cbnz	r3, 8004efc <_free_r+0x2c>
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	6014      	str	r4, [r2, #0]
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ef8:	f001 bbd6 	b.w	80066a8 <__malloc_unlock>
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	d908      	bls.n	8004f12 <_free_r+0x42>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	1821      	adds	r1, r4, r0
 8004f04:	428b      	cmp	r3, r1
 8004f06:	bf01      	itttt	eq
 8004f08:	6819      	ldreq	r1, [r3, #0]
 8004f0a:	685b      	ldreq	r3, [r3, #4]
 8004f0c:	1809      	addeq	r1, r1, r0
 8004f0e:	6021      	streq	r1, [r4, #0]
 8004f10:	e7ed      	b.n	8004eee <_free_r+0x1e>
 8004f12:	461a      	mov	r2, r3
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	b10b      	cbz	r3, 8004f1c <_free_r+0x4c>
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d9fa      	bls.n	8004f12 <_free_r+0x42>
 8004f1c:	6811      	ldr	r1, [r2, #0]
 8004f1e:	1850      	adds	r0, r2, r1
 8004f20:	42a0      	cmp	r0, r4
 8004f22:	d10b      	bne.n	8004f3c <_free_r+0x6c>
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	4401      	add	r1, r0
 8004f28:	1850      	adds	r0, r2, r1
 8004f2a:	4283      	cmp	r3, r0
 8004f2c:	6011      	str	r1, [r2, #0]
 8004f2e:	d1e0      	bne.n	8004ef2 <_free_r+0x22>
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4401      	add	r1, r0
 8004f36:	6011      	str	r1, [r2, #0]
 8004f38:	6053      	str	r3, [r2, #4]
 8004f3a:	e7da      	b.n	8004ef2 <_free_r+0x22>
 8004f3c:	d902      	bls.n	8004f44 <_free_r+0x74>
 8004f3e:	230c      	movs	r3, #12
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	e7d6      	b.n	8004ef2 <_free_r+0x22>
 8004f44:	6820      	ldr	r0, [r4, #0]
 8004f46:	1821      	adds	r1, r4, r0
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	bf01      	itttt	eq
 8004f4c:	6819      	ldreq	r1, [r3, #0]
 8004f4e:	685b      	ldreq	r3, [r3, #4]
 8004f50:	1809      	addeq	r1, r1, r0
 8004f52:	6021      	streq	r1, [r4, #0]
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	6054      	str	r4, [r2, #4]
 8004f58:	e7cb      	b.n	8004ef2 <_free_r+0x22>
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	20000510 	.word	0x20000510

08004f60 <sbrk_aligned>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	4e0e      	ldr	r6, [pc, #56]	; (8004f9c <sbrk_aligned+0x3c>)
 8004f64:	460c      	mov	r4, r1
 8004f66:	6831      	ldr	r1, [r6, #0]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	b911      	cbnz	r1, 8004f72 <sbrk_aligned+0x12>
 8004f6c:	f000 fcec 	bl	8005948 <_sbrk_r>
 8004f70:	6030      	str	r0, [r6, #0]
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 fce7 	bl	8005948 <_sbrk_r>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d00a      	beq.n	8004f94 <sbrk_aligned+0x34>
 8004f7e:	1cc4      	adds	r4, r0, #3
 8004f80:	f024 0403 	bic.w	r4, r4, #3
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	d007      	beq.n	8004f98 <sbrk_aligned+0x38>
 8004f88:	1a21      	subs	r1, r4, r0
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fcdc 	bl	8005948 <_sbrk_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d101      	bne.n	8004f98 <sbrk_aligned+0x38>
 8004f94:	f04f 34ff 	mov.w	r4, #4294967295
 8004f98:	4620      	mov	r0, r4
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	20000514 	.word	0x20000514

08004fa0 <_malloc_r>:
 8004fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa4:	1ccd      	adds	r5, r1, #3
 8004fa6:	f025 0503 	bic.w	r5, r5, #3
 8004faa:	3508      	adds	r5, #8
 8004fac:	2d0c      	cmp	r5, #12
 8004fae:	bf38      	it	cc
 8004fb0:	250c      	movcc	r5, #12
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	db01      	blt.n	8004fbc <_malloc_r+0x1c>
 8004fb8:	42a9      	cmp	r1, r5
 8004fba:	d905      	bls.n	8004fc8 <_malloc_r+0x28>
 8004fbc:	230c      	movs	r3, #12
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc8:	4e2e      	ldr	r6, [pc, #184]	; (8005084 <_malloc_r+0xe4>)
 8004fca:	f001 fb67 	bl	800669c <__malloc_lock>
 8004fce:	6833      	ldr	r3, [r6, #0]
 8004fd0:	461c      	mov	r4, r3
 8004fd2:	bb34      	cbnz	r4, 8005022 <_malloc_r+0x82>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7ff ffc2 	bl	8004f60 <sbrk_aligned>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	4604      	mov	r4, r0
 8004fe0:	d14d      	bne.n	800507e <_malloc_r+0xde>
 8004fe2:	6834      	ldr	r4, [r6, #0]
 8004fe4:	4626      	mov	r6, r4
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	d140      	bne.n	800506c <_malloc_r+0xcc>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	4631      	mov	r1, r6
 8004fee:	4638      	mov	r0, r7
 8004ff0:	eb04 0803 	add.w	r8, r4, r3
 8004ff4:	f000 fca8 	bl	8005948 <_sbrk_r>
 8004ff8:	4580      	cmp	r8, r0
 8004ffa:	d13a      	bne.n	8005072 <_malloc_r+0xd2>
 8004ffc:	6821      	ldr	r1, [r4, #0]
 8004ffe:	3503      	adds	r5, #3
 8005000:	1a6d      	subs	r5, r5, r1
 8005002:	f025 0503 	bic.w	r5, r5, #3
 8005006:	3508      	adds	r5, #8
 8005008:	2d0c      	cmp	r5, #12
 800500a:	bf38      	it	cc
 800500c:	250c      	movcc	r5, #12
 800500e:	4638      	mov	r0, r7
 8005010:	4629      	mov	r1, r5
 8005012:	f7ff ffa5 	bl	8004f60 <sbrk_aligned>
 8005016:	3001      	adds	r0, #1
 8005018:	d02b      	beq.n	8005072 <_malloc_r+0xd2>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	442b      	add	r3, r5
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	e00e      	b.n	8005040 <_malloc_r+0xa0>
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	1b52      	subs	r2, r2, r5
 8005026:	d41e      	bmi.n	8005066 <_malloc_r+0xc6>
 8005028:	2a0b      	cmp	r2, #11
 800502a:	d916      	bls.n	800505a <_malloc_r+0xba>
 800502c:	1961      	adds	r1, r4, r5
 800502e:	42a3      	cmp	r3, r4
 8005030:	6025      	str	r5, [r4, #0]
 8005032:	bf18      	it	ne
 8005034:	6059      	strne	r1, [r3, #4]
 8005036:	6863      	ldr	r3, [r4, #4]
 8005038:	bf08      	it	eq
 800503a:	6031      	streq	r1, [r6, #0]
 800503c:	5162      	str	r2, [r4, r5]
 800503e:	604b      	str	r3, [r1, #4]
 8005040:	4638      	mov	r0, r7
 8005042:	f104 060b 	add.w	r6, r4, #11
 8005046:	f001 fb2f 	bl	80066a8 <__malloc_unlock>
 800504a:	f026 0607 	bic.w	r6, r6, #7
 800504e:	1d23      	adds	r3, r4, #4
 8005050:	1af2      	subs	r2, r6, r3
 8005052:	d0b6      	beq.n	8004fc2 <_malloc_r+0x22>
 8005054:	1b9b      	subs	r3, r3, r6
 8005056:	50a3      	str	r3, [r4, r2]
 8005058:	e7b3      	b.n	8004fc2 <_malloc_r+0x22>
 800505a:	6862      	ldr	r2, [r4, #4]
 800505c:	42a3      	cmp	r3, r4
 800505e:	bf0c      	ite	eq
 8005060:	6032      	streq	r2, [r6, #0]
 8005062:	605a      	strne	r2, [r3, #4]
 8005064:	e7ec      	b.n	8005040 <_malloc_r+0xa0>
 8005066:	4623      	mov	r3, r4
 8005068:	6864      	ldr	r4, [r4, #4]
 800506a:	e7b2      	b.n	8004fd2 <_malloc_r+0x32>
 800506c:	4634      	mov	r4, r6
 800506e:	6876      	ldr	r6, [r6, #4]
 8005070:	e7b9      	b.n	8004fe6 <_malloc_r+0x46>
 8005072:	230c      	movs	r3, #12
 8005074:	4638      	mov	r0, r7
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	f001 fb16 	bl	80066a8 <__malloc_unlock>
 800507c:	e7a1      	b.n	8004fc2 <_malloc_r+0x22>
 800507e:	6025      	str	r5, [r4, #0]
 8005080:	e7de      	b.n	8005040 <_malloc_r+0xa0>
 8005082:	bf00      	nop
 8005084:	20000510 	.word	0x20000510

08005088 <__cvt>:
 8005088:	2b00      	cmp	r3, #0
 800508a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508e:	461f      	mov	r7, r3
 8005090:	bfbb      	ittet	lt
 8005092:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005096:	461f      	movlt	r7, r3
 8005098:	2300      	movge	r3, #0
 800509a:	232d      	movlt	r3, #45	; 0x2d
 800509c:	b088      	sub	sp, #32
 800509e:	4614      	mov	r4, r2
 80050a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050a4:	7013      	strb	r3, [r2, #0]
 80050a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050ac:	f023 0820 	bic.w	r8, r3, #32
 80050b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050b4:	d005      	beq.n	80050c2 <__cvt+0x3a>
 80050b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050ba:	d100      	bne.n	80050be <__cvt+0x36>
 80050bc:	3501      	adds	r5, #1
 80050be:	2302      	movs	r3, #2
 80050c0:	e000      	b.n	80050c4 <__cvt+0x3c>
 80050c2:	2303      	movs	r3, #3
 80050c4:	aa07      	add	r2, sp, #28
 80050c6:	9204      	str	r2, [sp, #16]
 80050c8:	aa06      	add	r2, sp, #24
 80050ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050ce:	e9cd 3500 	strd	r3, r5, [sp]
 80050d2:	4622      	mov	r2, r4
 80050d4:	463b      	mov	r3, r7
 80050d6:	f000 fcd3 	bl	8005a80 <_dtoa_r>
 80050da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050de:	4606      	mov	r6, r0
 80050e0:	d102      	bne.n	80050e8 <__cvt+0x60>
 80050e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050e4:	07db      	lsls	r3, r3, #31
 80050e6:	d522      	bpl.n	800512e <__cvt+0xa6>
 80050e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050ec:	eb06 0905 	add.w	r9, r6, r5
 80050f0:	d110      	bne.n	8005114 <__cvt+0x8c>
 80050f2:	7833      	ldrb	r3, [r6, #0]
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d10a      	bne.n	800510e <__cvt+0x86>
 80050f8:	2200      	movs	r2, #0
 80050fa:	2300      	movs	r3, #0
 80050fc:	4620      	mov	r0, r4
 80050fe:	4639      	mov	r1, r7
 8005100:	f7fb fc52 	bl	80009a8 <__aeabi_dcmpeq>
 8005104:	b918      	cbnz	r0, 800510e <__cvt+0x86>
 8005106:	f1c5 0501 	rsb	r5, r5, #1
 800510a:	f8ca 5000 	str.w	r5, [sl]
 800510e:	f8da 3000 	ldr.w	r3, [sl]
 8005112:	4499      	add	r9, r3
 8005114:	2200      	movs	r2, #0
 8005116:	2300      	movs	r3, #0
 8005118:	4620      	mov	r0, r4
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb fc44 	bl	80009a8 <__aeabi_dcmpeq>
 8005120:	b108      	cbz	r0, 8005126 <__cvt+0x9e>
 8005122:	f8cd 901c 	str.w	r9, [sp, #28]
 8005126:	2230      	movs	r2, #48	; 0x30
 8005128:	9b07      	ldr	r3, [sp, #28]
 800512a:	454b      	cmp	r3, r9
 800512c:	d307      	bcc.n	800513e <__cvt+0xb6>
 800512e:	4630      	mov	r0, r6
 8005130:	9b07      	ldr	r3, [sp, #28]
 8005132:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005134:	1b9b      	subs	r3, r3, r6
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	b008      	add	sp, #32
 800513a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	9107      	str	r1, [sp, #28]
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e7f0      	b.n	8005128 <__cvt+0xa0>

08005146 <__exponent>:
 8005146:	4603      	mov	r3, r0
 8005148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800514a:	2900      	cmp	r1, #0
 800514c:	f803 2b02 	strb.w	r2, [r3], #2
 8005150:	bfb6      	itet	lt
 8005152:	222d      	movlt	r2, #45	; 0x2d
 8005154:	222b      	movge	r2, #43	; 0x2b
 8005156:	4249      	neglt	r1, r1
 8005158:	2909      	cmp	r1, #9
 800515a:	7042      	strb	r2, [r0, #1]
 800515c:	dd2b      	ble.n	80051b6 <__exponent+0x70>
 800515e:	f10d 0407 	add.w	r4, sp, #7
 8005162:	46a4      	mov	ip, r4
 8005164:	270a      	movs	r7, #10
 8005166:	fb91 f6f7 	sdiv	r6, r1, r7
 800516a:	460a      	mov	r2, r1
 800516c:	46a6      	mov	lr, r4
 800516e:	fb07 1516 	mls	r5, r7, r6, r1
 8005172:	2a63      	cmp	r2, #99	; 0x63
 8005174:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005178:	4631      	mov	r1, r6
 800517a:	f104 34ff 	add.w	r4, r4, #4294967295
 800517e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005182:	dcf0      	bgt.n	8005166 <__exponent+0x20>
 8005184:	3130      	adds	r1, #48	; 0x30
 8005186:	f1ae 0502 	sub.w	r5, lr, #2
 800518a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800518e:	4629      	mov	r1, r5
 8005190:	1c44      	adds	r4, r0, #1
 8005192:	4561      	cmp	r1, ip
 8005194:	d30a      	bcc.n	80051ac <__exponent+0x66>
 8005196:	f10d 0209 	add.w	r2, sp, #9
 800519a:	eba2 020e 	sub.w	r2, r2, lr
 800519e:	4565      	cmp	r5, ip
 80051a0:	bf88      	it	hi
 80051a2:	2200      	movhi	r2, #0
 80051a4:	4413      	add	r3, r2
 80051a6:	1a18      	subs	r0, r3, r0
 80051a8:	b003      	add	sp, #12
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051b0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051b4:	e7ed      	b.n	8005192 <__exponent+0x4c>
 80051b6:	2330      	movs	r3, #48	; 0x30
 80051b8:	3130      	adds	r1, #48	; 0x30
 80051ba:	7083      	strb	r3, [r0, #2]
 80051bc:	70c1      	strb	r1, [r0, #3]
 80051be:	1d03      	adds	r3, r0, #4
 80051c0:	e7f1      	b.n	80051a6 <__exponent+0x60>
	...

080051c4 <_printf_float>:
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	b091      	sub	sp, #68	; 0x44
 80051ca:	460c      	mov	r4, r1
 80051cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051d0:	4616      	mov	r6, r2
 80051d2:	461f      	mov	r7, r3
 80051d4:	4605      	mov	r5, r0
 80051d6:	f001 fa41 	bl	800665c <_localeconv_r>
 80051da:	6803      	ldr	r3, [r0, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	9309      	str	r3, [sp, #36]	; 0x24
 80051e0:	f7fa ffb6 	bl	8000150 <strlen>
 80051e4:	2300      	movs	r3, #0
 80051e6:	930e      	str	r3, [sp, #56]	; 0x38
 80051e8:	f8d8 3000 	ldr.w	r3, [r8]
 80051ec:	900a      	str	r0, [sp, #40]	; 0x28
 80051ee:	3307      	adds	r3, #7
 80051f0:	f023 0307 	bic.w	r3, r3, #7
 80051f4:	f103 0208 	add.w	r2, r3, #8
 80051f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051fc:	f8d4 b000 	ldr.w	fp, [r4]
 8005200:	f8c8 2000 	str.w	r2, [r8]
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800520c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005210:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005214:	930b      	str	r3, [sp, #44]	; 0x2c
 8005216:	f04f 32ff 	mov.w	r2, #4294967295
 800521a:	4640      	mov	r0, r8
 800521c:	4b9c      	ldr	r3, [pc, #624]	; (8005490 <_printf_float+0x2cc>)
 800521e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005220:	f7fb fbf4 	bl	8000a0c <__aeabi_dcmpun>
 8005224:	bb70      	cbnz	r0, 8005284 <_printf_float+0xc0>
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	4640      	mov	r0, r8
 800522c:	4b98      	ldr	r3, [pc, #608]	; (8005490 <_printf_float+0x2cc>)
 800522e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005230:	f7fb fbce 	bl	80009d0 <__aeabi_dcmple>
 8005234:	bb30      	cbnz	r0, 8005284 <_printf_float+0xc0>
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	4640      	mov	r0, r8
 800523c:	4651      	mov	r1, sl
 800523e:	f7fb fbbd 	bl	80009bc <__aeabi_dcmplt>
 8005242:	b110      	cbz	r0, 800524a <_printf_float+0x86>
 8005244:	232d      	movs	r3, #45	; 0x2d
 8005246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524a:	4b92      	ldr	r3, [pc, #584]	; (8005494 <_printf_float+0x2d0>)
 800524c:	4892      	ldr	r0, [pc, #584]	; (8005498 <_printf_float+0x2d4>)
 800524e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005252:	bf94      	ite	ls
 8005254:	4698      	movls	r8, r3
 8005256:	4680      	movhi	r8, r0
 8005258:	2303      	movs	r3, #3
 800525a:	f04f 0a00 	mov.w	sl, #0
 800525e:	6123      	str	r3, [r4, #16]
 8005260:	f02b 0304 	bic.w	r3, fp, #4
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	4633      	mov	r3, r6
 8005268:	4621      	mov	r1, r4
 800526a:	4628      	mov	r0, r5
 800526c:	9700      	str	r7, [sp, #0]
 800526e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005270:	f000 f9d4 	bl	800561c <_printf_common>
 8005274:	3001      	adds	r0, #1
 8005276:	f040 8090 	bne.w	800539a <_printf_float+0x1d6>
 800527a:	f04f 30ff 	mov.w	r0, #4294967295
 800527e:	b011      	add	sp, #68	; 0x44
 8005280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	4642      	mov	r2, r8
 8005286:	4653      	mov	r3, sl
 8005288:	4640      	mov	r0, r8
 800528a:	4651      	mov	r1, sl
 800528c:	f7fb fbbe 	bl	8000a0c <__aeabi_dcmpun>
 8005290:	b148      	cbz	r0, 80052a6 <_printf_float+0xe2>
 8005292:	f1ba 0f00 	cmp.w	sl, #0
 8005296:	bfb8      	it	lt
 8005298:	232d      	movlt	r3, #45	; 0x2d
 800529a:	4880      	ldr	r0, [pc, #512]	; (800549c <_printf_float+0x2d8>)
 800529c:	bfb8      	it	lt
 800529e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052a2:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <_printf_float+0x2dc>)
 80052a4:	e7d3      	b.n	800524e <_printf_float+0x8a>
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	d142      	bne.n	8005336 <_printf_float+0x172>
 80052b0:	2306      	movs	r3, #6
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	9206      	str	r2, [sp, #24]
 80052b8:	aa0e      	add	r2, sp, #56	; 0x38
 80052ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052be:	aa0d      	add	r2, sp, #52	; 0x34
 80052c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052c4:	9203      	str	r2, [sp, #12]
 80052c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	6863      	ldr	r3, [r4, #4]
 80052d2:	4642      	mov	r2, r8
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4628      	mov	r0, r5
 80052d8:	4653      	mov	r3, sl
 80052da:	910b      	str	r1, [sp, #44]	; 0x2c
 80052dc:	f7ff fed4 	bl	8005088 <__cvt>
 80052e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052e2:	4680      	mov	r8, r0
 80052e4:	2947      	cmp	r1, #71	; 0x47
 80052e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052e8:	d108      	bne.n	80052fc <_printf_float+0x138>
 80052ea:	1cc8      	adds	r0, r1, #3
 80052ec:	db02      	blt.n	80052f4 <_printf_float+0x130>
 80052ee:	6863      	ldr	r3, [r4, #4]
 80052f0:	4299      	cmp	r1, r3
 80052f2:	dd40      	ble.n	8005376 <_printf_float+0x1b2>
 80052f4:	f1a9 0902 	sub.w	r9, r9, #2
 80052f8:	fa5f f989 	uxtb.w	r9, r9
 80052fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005300:	d81f      	bhi.n	8005342 <_printf_float+0x17e>
 8005302:	464a      	mov	r2, r9
 8005304:	3901      	subs	r1, #1
 8005306:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800530a:	910d      	str	r1, [sp, #52]	; 0x34
 800530c:	f7ff ff1b 	bl	8005146 <__exponent>
 8005310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005312:	4682      	mov	sl, r0
 8005314:	1813      	adds	r3, r2, r0
 8005316:	2a01      	cmp	r2, #1
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	dc02      	bgt.n	8005322 <_printf_float+0x15e>
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	07d2      	lsls	r2, r2, #31
 8005320:	d501      	bpl.n	8005326 <_printf_float+0x162>
 8005322:	3301      	adds	r3, #1
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800532a:	2b00      	cmp	r3, #0
 800532c:	d09b      	beq.n	8005266 <_printf_float+0xa2>
 800532e:	232d      	movs	r3, #45	; 0x2d
 8005330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005334:	e797      	b.n	8005266 <_printf_float+0xa2>
 8005336:	2947      	cmp	r1, #71	; 0x47
 8005338:	d1bc      	bne.n	80052b4 <_printf_float+0xf0>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ba      	bne.n	80052b4 <_printf_float+0xf0>
 800533e:	2301      	movs	r3, #1
 8005340:	e7b7      	b.n	80052b2 <_printf_float+0xee>
 8005342:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005346:	d118      	bne.n	800537a <_printf_float+0x1b6>
 8005348:	2900      	cmp	r1, #0
 800534a:	6863      	ldr	r3, [r4, #4]
 800534c:	dd0b      	ble.n	8005366 <_printf_float+0x1a2>
 800534e:	6121      	str	r1, [r4, #16]
 8005350:	b913      	cbnz	r3, 8005358 <_printf_float+0x194>
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	07d0      	lsls	r0, r2, #31
 8005356:	d502      	bpl.n	800535e <_printf_float+0x19a>
 8005358:	3301      	adds	r3, #1
 800535a:	440b      	add	r3, r1
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	f04f 0a00 	mov.w	sl, #0
 8005362:	65a1      	str	r1, [r4, #88]	; 0x58
 8005364:	e7df      	b.n	8005326 <_printf_float+0x162>
 8005366:	b913      	cbnz	r3, 800536e <_printf_float+0x1aa>
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	07d2      	lsls	r2, r2, #31
 800536c:	d501      	bpl.n	8005372 <_printf_float+0x1ae>
 800536e:	3302      	adds	r3, #2
 8005370:	e7f4      	b.n	800535c <_printf_float+0x198>
 8005372:	2301      	movs	r3, #1
 8005374:	e7f2      	b.n	800535c <_printf_float+0x198>
 8005376:	f04f 0967 	mov.w	r9, #103	; 0x67
 800537a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800537c:	4299      	cmp	r1, r3
 800537e:	db05      	blt.n	800538c <_printf_float+0x1c8>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	6121      	str	r1, [r4, #16]
 8005384:	07d8      	lsls	r0, r3, #31
 8005386:	d5ea      	bpl.n	800535e <_printf_float+0x19a>
 8005388:	1c4b      	adds	r3, r1, #1
 800538a:	e7e7      	b.n	800535c <_printf_float+0x198>
 800538c:	2900      	cmp	r1, #0
 800538e:	bfcc      	ite	gt
 8005390:	2201      	movgt	r2, #1
 8005392:	f1c1 0202 	rsble	r2, r1, #2
 8005396:	4413      	add	r3, r2
 8005398:	e7e0      	b.n	800535c <_printf_float+0x198>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	055a      	lsls	r2, r3, #21
 800539e:	d407      	bmi.n	80053b0 <_printf_float+0x1ec>
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	4642      	mov	r2, r8
 80053a4:	4631      	mov	r1, r6
 80053a6:	4628      	mov	r0, r5
 80053a8:	47b8      	blx	r7
 80053aa:	3001      	adds	r0, #1
 80053ac:	d12b      	bne.n	8005406 <_printf_float+0x242>
 80053ae:	e764      	b.n	800527a <_printf_float+0xb6>
 80053b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053b4:	f240 80dd 	bls.w	8005572 <_printf_float+0x3ae>
 80053b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	f7fb faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d033      	beq.n	8005430 <_printf_float+0x26c>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	4a35      	ldr	r2, [pc, #212]	; (80054a4 <_printf_float+0x2e0>)
 80053d0:	47b8      	blx	r7
 80053d2:	3001      	adds	r0, #1
 80053d4:	f43f af51 	beq.w	800527a <_printf_float+0xb6>
 80053d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053dc:	429a      	cmp	r2, r3
 80053de:	db02      	blt.n	80053e6 <_printf_float+0x222>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	07d8      	lsls	r0, r3, #31
 80053e4:	d50f      	bpl.n	8005406 <_printf_float+0x242>
 80053e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f af42 	beq.w	800527a <_printf_float+0xb6>
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	f104 091a 	add.w	r9, r4, #26
 80053fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005400:	3b01      	subs	r3, #1
 8005402:	4543      	cmp	r3, r8
 8005404:	dc09      	bgt.n	800541a <_printf_float+0x256>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	079b      	lsls	r3, r3, #30
 800540a:	f100 8102 	bmi.w	8005612 <_printf_float+0x44e>
 800540e:	68e0      	ldr	r0, [r4, #12]
 8005410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005412:	4298      	cmp	r0, r3
 8005414:	bfb8      	it	lt
 8005416:	4618      	movlt	r0, r3
 8005418:	e731      	b.n	800527e <_printf_float+0xba>
 800541a:	2301      	movs	r3, #1
 800541c:	464a      	mov	r2, r9
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f af28 	beq.w	800527a <_printf_float+0xb6>
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	e7e6      	b.n	80053fe <_printf_float+0x23a>
 8005430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005432:	2b00      	cmp	r3, #0
 8005434:	dc38      	bgt.n	80054a8 <_printf_float+0x2e4>
 8005436:	2301      	movs	r3, #1
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	4a19      	ldr	r2, [pc, #100]	; (80054a4 <_printf_float+0x2e0>)
 800543e:	47b8      	blx	r7
 8005440:	3001      	adds	r0, #1
 8005442:	f43f af1a 	beq.w	800527a <_printf_float+0xb6>
 8005446:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800544a:	4313      	orrs	r3, r2
 800544c:	d102      	bne.n	8005454 <_printf_float+0x290>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	07d9      	lsls	r1, r3, #31
 8005452:	d5d8      	bpl.n	8005406 <_printf_float+0x242>
 8005454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f af0b 	beq.w	800527a <_printf_float+0xb6>
 8005464:	f04f 0900 	mov.w	r9, #0
 8005468:	f104 0a1a 	add.w	sl, r4, #26
 800546c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800546e:	425b      	negs	r3, r3
 8005470:	454b      	cmp	r3, r9
 8005472:	dc01      	bgt.n	8005478 <_printf_float+0x2b4>
 8005474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005476:	e794      	b.n	80053a2 <_printf_float+0x1de>
 8005478:	2301      	movs	r3, #1
 800547a:	4652      	mov	r2, sl
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f aef9 	beq.w	800527a <_printf_float+0xb6>
 8005488:	f109 0901 	add.w	r9, r9, #1
 800548c:	e7ee      	b.n	800546c <_printf_float+0x2a8>
 800548e:	bf00      	nop
 8005490:	7fefffff 	.word	0x7fefffff
 8005494:	08007934 	.word	0x08007934
 8005498:	08007938 	.word	0x08007938
 800549c:	08007940 	.word	0x08007940
 80054a0:	0800793c 	.word	0x0800793c
 80054a4:	08007944 	.word	0x08007944
 80054a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054ac:	429a      	cmp	r2, r3
 80054ae:	bfa8      	it	ge
 80054b0:	461a      	movge	r2, r3
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	4691      	mov	r9, r2
 80054b6:	dc37      	bgt.n	8005528 <_printf_float+0x364>
 80054b8:	f04f 0b00 	mov.w	fp, #0
 80054bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054c0:	f104 021a 	add.w	r2, r4, #26
 80054c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054c8:	ebaa 0309 	sub.w	r3, sl, r9
 80054cc:	455b      	cmp	r3, fp
 80054ce:	dc33      	bgt.n	8005538 <_printf_float+0x374>
 80054d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054d4:	429a      	cmp	r2, r3
 80054d6:	db3b      	blt.n	8005550 <_printf_float+0x38c>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	07da      	lsls	r2, r3, #31
 80054dc:	d438      	bmi.n	8005550 <_printf_float+0x38c>
 80054de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054e2:	eba3 020a 	sub.w	r2, r3, sl
 80054e6:	eba3 0901 	sub.w	r9, r3, r1
 80054ea:	4591      	cmp	r9, r2
 80054ec:	bfa8      	it	ge
 80054ee:	4691      	movge	r9, r2
 80054f0:	f1b9 0f00 	cmp.w	r9, #0
 80054f4:	dc34      	bgt.n	8005560 <_printf_float+0x39c>
 80054f6:	f04f 0800 	mov.w	r8, #0
 80054fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054fe:	f104 0a1a 	add.w	sl, r4, #26
 8005502:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	eba3 0309 	sub.w	r3, r3, r9
 800550c:	4543      	cmp	r3, r8
 800550e:	f77f af7a 	ble.w	8005406 <_printf_float+0x242>
 8005512:	2301      	movs	r3, #1
 8005514:	4652      	mov	r2, sl
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f aeac 	beq.w	800527a <_printf_float+0xb6>
 8005522:	f108 0801 	add.w	r8, r8, #1
 8005526:	e7ec      	b.n	8005502 <_printf_float+0x33e>
 8005528:	4613      	mov	r3, r2
 800552a:	4631      	mov	r1, r6
 800552c:	4642      	mov	r2, r8
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	d1c0      	bne.n	80054b8 <_printf_float+0x2f4>
 8005536:	e6a0      	b.n	800527a <_printf_float+0xb6>
 8005538:	2301      	movs	r3, #1
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	f43f ae99 	beq.w	800527a <_printf_float+0xb6>
 8005548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800554a:	f10b 0b01 	add.w	fp, fp, #1
 800554e:	e7b9      	b.n	80054c4 <_printf_float+0x300>
 8005550:	4631      	mov	r1, r6
 8005552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	d1bf      	bne.n	80054de <_printf_float+0x31a>
 800555e:	e68c      	b.n	800527a <_printf_float+0xb6>
 8005560:	464b      	mov	r3, r9
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	eb08 020a 	add.w	r2, r8, sl
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	d1c2      	bne.n	80054f6 <_printf_float+0x332>
 8005570:	e683      	b.n	800527a <_printf_float+0xb6>
 8005572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005574:	2a01      	cmp	r2, #1
 8005576:	dc01      	bgt.n	800557c <_printf_float+0x3b8>
 8005578:	07db      	lsls	r3, r3, #31
 800557a:	d537      	bpl.n	80055ec <_printf_float+0x428>
 800557c:	2301      	movs	r3, #1
 800557e:	4642      	mov	r2, r8
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f ae77 	beq.w	800527a <_printf_float+0xb6>
 800558c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005590:	4631      	mov	r1, r6
 8005592:	4628      	mov	r0, r5
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	f43f ae6f 	beq.w	800527a <_printf_float+0xb6>
 800559c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055a0:	2200      	movs	r2, #0
 80055a2:	2300      	movs	r3, #0
 80055a4:	f7fb fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80055a8:	b9d8      	cbnz	r0, 80055e2 <_printf_float+0x41e>
 80055aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ac:	f108 0201 	add.w	r2, r8, #1
 80055b0:	3b01      	subs	r3, #1
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	d10e      	bne.n	80055da <_printf_float+0x416>
 80055bc:	e65d      	b.n	800527a <_printf_float+0xb6>
 80055be:	2301      	movs	r3, #1
 80055c0:	464a      	mov	r2, r9
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	f43f ae56 	beq.w	800527a <_printf_float+0xb6>
 80055ce:	f108 0801 	add.w	r8, r8, #1
 80055d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d4:	3b01      	subs	r3, #1
 80055d6:	4543      	cmp	r3, r8
 80055d8:	dcf1      	bgt.n	80055be <_printf_float+0x3fa>
 80055da:	4653      	mov	r3, sl
 80055dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055e0:	e6e0      	b.n	80053a4 <_printf_float+0x1e0>
 80055e2:	f04f 0800 	mov.w	r8, #0
 80055e6:	f104 091a 	add.w	r9, r4, #26
 80055ea:	e7f2      	b.n	80055d2 <_printf_float+0x40e>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4642      	mov	r2, r8
 80055f0:	e7df      	b.n	80055b2 <_printf_float+0x3ee>
 80055f2:	2301      	movs	r3, #1
 80055f4:	464a      	mov	r2, r9
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	f43f ae3c 	beq.w	800527a <_printf_float+0xb6>
 8005602:	f108 0801 	add.w	r8, r8, #1
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800560a:	1a5b      	subs	r3, r3, r1
 800560c:	4543      	cmp	r3, r8
 800560e:	dcf0      	bgt.n	80055f2 <_printf_float+0x42e>
 8005610:	e6fd      	b.n	800540e <_printf_float+0x24a>
 8005612:	f04f 0800 	mov.w	r8, #0
 8005616:	f104 0919 	add.w	r9, r4, #25
 800561a:	e7f4      	b.n	8005606 <_printf_float+0x442>

0800561c <_printf_common>:
 800561c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	4616      	mov	r6, r2
 8005622:	4699      	mov	r9, r3
 8005624:	688a      	ldr	r2, [r1, #8]
 8005626:	690b      	ldr	r3, [r1, #16]
 8005628:	4607      	mov	r7, r0
 800562a:	4293      	cmp	r3, r2
 800562c:	bfb8      	it	lt
 800562e:	4613      	movlt	r3, r2
 8005630:	6033      	str	r3, [r6, #0]
 8005632:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005636:	460c      	mov	r4, r1
 8005638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800563c:	b10a      	cbz	r2, 8005642 <_printf_common+0x26>
 800563e:	3301      	adds	r3, #1
 8005640:	6033      	str	r3, [r6, #0]
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	0699      	lsls	r1, r3, #26
 8005646:	bf42      	ittt	mi
 8005648:	6833      	ldrmi	r3, [r6, #0]
 800564a:	3302      	addmi	r3, #2
 800564c:	6033      	strmi	r3, [r6, #0]
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	f015 0506 	ands.w	r5, r5, #6
 8005654:	d106      	bne.n	8005664 <_printf_common+0x48>
 8005656:	f104 0a19 	add.w	sl, r4, #25
 800565a:	68e3      	ldr	r3, [r4, #12]
 800565c:	6832      	ldr	r2, [r6, #0]
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	42ab      	cmp	r3, r5
 8005662:	dc28      	bgt.n	80056b6 <_printf_common+0x9a>
 8005664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005668:	1e13      	subs	r3, r2, #0
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	bf18      	it	ne
 800566e:	2301      	movne	r3, #1
 8005670:	0692      	lsls	r2, r2, #26
 8005672:	d42d      	bmi.n	80056d0 <_printf_common+0xb4>
 8005674:	4649      	mov	r1, r9
 8005676:	4638      	mov	r0, r7
 8005678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800567c:	47c0      	blx	r8
 800567e:	3001      	adds	r0, #1
 8005680:	d020      	beq.n	80056c4 <_printf_common+0xa8>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	68e5      	ldr	r5, [r4, #12]
 8005686:	f003 0306 	and.w	r3, r3, #6
 800568a:	2b04      	cmp	r3, #4
 800568c:	bf18      	it	ne
 800568e:	2500      	movne	r5, #0
 8005690:	6832      	ldr	r2, [r6, #0]
 8005692:	f04f 0600 	mov.w	r6, #0
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	bf08      	it	eq
 800569a:	1aad      	subeq	r5, r5, r2
 800569c:	6922      	ldr	r2, [r4, #16]
 800569e:	bf08      	it	eq
 80056a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a4:	4293      	cmp	r3, r2
 80056a6:	bfc4      	itt	gt
 80056a8:	1a9b      	subgt	r3, r3, r2
 80056aa:	18ed      	addgt	r5, r5, r3
 80056ac:	341a      	adds	r4, #26
 80056ae:	42b5      	cmp	r5, r6
 80056b0:	d11a      	bne.n	80056e8 <_printf_common+0xcc>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e008      	b.n	80056c8 <_printf_common+0xac>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4652      	mov	r2, sl
 80056ba:	4649      	mov	r1, r9
 80056bc:	4638      	mov	r0, r7
 80056be:	47c0      	blx	r8
 80056c0:	3001      	adds	r0, #1
 80056c2:	d103      	bne.n	80056cc <_printf_common+0xb0>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	3501      	adds	r5, #1
 80056ce:	e7c4      	b.n	800565a <_printf_common+0x3e>
 80056d0:	2030      	movs	r0, #48	; 0x30
 80056d2:	18e1      	adds	r1, r4, r3
 80056d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056de:	4422      	add	r2, r4
 80056e0:	3302      	adds	r3, #2
 80056e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e6:	e7c5      	b.n	8005674 <_printf_common+0x58>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4622      	mov	r2, r4
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d0e6      	beq.n	80056c4 <_printf_common+0xa8>
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7d9      	b.n	80056ae <_printf_common+0x92>
	...

080056fc <_printf_i>:
 80056fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	7e0f      	ldrb	r7, [r1, #24]
 8005702:	4691      	mov	r9, r2
 8005704:	2f78      	cmp	r7, #120	; 0x78
 8005706:	4680      	mov	r8, r0
 8005708:	460c      	mov	r4, r1
 800570a:	469a      	mov	sl, r3
 800570c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800570e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005712:	d807      	bhi.n	8005724 <_printf_i+0x28>
 8005714:	2f62      	cmp	r7, #98	; 0x62
 8005716:	d80a      	bhi.n	800572e <_printf_i+0x32>
 8005718:	2f00      	cmp	r7, #0
 800571a:	f000 80d9 	beq.w	80058d0 <_printf_i+0x1d4>
 800571e:	2f58      	cmp	r7, #88	; 0x58
 8005720:	f000 80a4 	beq.w	800586c <_printf_i+0x170>
 8005724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800572c:	e03a      	b.n	80057a4 <_printf_i+0xa8>
 800572e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005732:	2b15      	cmp	r3, #21
 8005734:	d8f6      	bhi.n	8005724 <_printf_i+0x28>
 8005736:	a101      	add	r1, pc, #4	; (adr r1, 800573c <_printf_i+0x40>)
 8005738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800573c:	08005795 	.word	0x08005795
 8005740:	080057a9 	.word	0x080057a9
 8005744:	08005725 	.word	0x08005725
 8005748:	08005725 	.word	0x08005725
 800574c:	08005725 	.word	0x08005725
 8005750:	08005725 	.word	0x08005725
 8005754:	080057a9 	.word	0x080057a9
 8005758:	08005725 	.word	0x08005725
 800575c:	08005725 	.word	0x08005725
 8005760:	08005725 	.word	0x08005725
 8005764:	08005725 	.word	0x08005725
 8005768:	080058b7 	.word	0x080058b7
 800576c:	080057d9 	.word	0x080057d9
 8005770:	08005899 	.word	0x08005899
 8005774:	08005725 	.word	0x08005725
 8005778:	08005725 	.word	0x08005725
 800577c:	080058d9 	.word	0x080058d9
 8005780:	08005725 	.word	0x08005725
 8005784:	080057d9 	.word	0x080057d9
 8005788:	08005725 	.word	0x08005725
 800578c:	08005725 	.word	0x08005725
 8005790:	080058a1 	.word	0x080058a1
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	602a      	str	r2, [r5, #0]
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0a4      	b.n	80058f2 <_printf_i+0x1f6>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	6829      	ldr	r1, [r5, #0]
 80057ac:	0606      	lsls	r6, r0, #24
 80057ae:	f101 0304 	add.w	r3, r1, #4
 80057b2:	d50a      	bpl.n	80057ca <_printf_i+0xce>
 80057b4:	680e      	ldr	r6, [r1, #0]
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	da03      	bge.n	80057c4 <_printf_i+0xc8>
 80057bc:	232d      	movs	r3, #45	; 0x2d
 80057be:	4276      	negs	r6, r6
 80057c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c4:	230a      	movs	r3, #10
 80057c6:	485e      	ldr	r0, [pc, #376]	; (8005940 <_printf_i+0x244>)
 80057c8:	e019      	b.n	80057fe <_printf_i+0x102>
 80057ca:	680e      	ldr	r6, [r1, #0]
 80057cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	bf18      	it	ne
 80057d4:	b236      	sxthne	r6, r6
 80057d6:	e7ef      	b.n	80057b8 <_printf_i+0xbc>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	6820      	ldr	r0, [r4, #0]
 80057dc:	1d19      	adds	r1, r3, #4
 80057de:	6029      	str	r1, [r5, #0]
 80057e0:	0601      	lsls	r1, r0, #24
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0xec>
 80057e4:	681e      	ldr	r6, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0xf2>
 80057e8:	0646      	lsls	r6, r0, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0xe8>
 80057ec:	881e      	ldrh	r6, [r3, #0]
 80057ee:	2f6f      	cmp	r7, #111	; 0x6f
 80057f0:	bf0c      	ite	eq
 80057f2:	2308      	moveq	r3, #8
 80057f4:	230a      	movne	r3, #10
 80057f6:	4852      	ldr	r0, [pc, #328]	; (8005940 <_printf_i+0x244>)
 80057f8:	2100      	movs	r1, #0
 80057fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057fe:	6865      	ldr	r5, [r4, #4]
 8005800:	2d00      	cmp	r5, #0
 8005802:	bfa8      	it	ge
 8005804:	6821      	ldrge	r1, [r4, #0]
 8005806:	60a5      	str	r5, [r4, #8]
 8005808:	bfa4      	itt	ge
 800580a:	f021 0104 	bicge.w	r1, r1, #4
 800580e:	6021      	strge	r1, [r4, #0]
 8005810:	b90e      	cbnz	r6, 8005816 <_printf_i+0x11a>
 8005812:	2d00      	cmp	r5, #0
 8005814:	d04d      	beq.n	80058b2 <_printf_i+0x1b6>
 8005816:	4615      	mov	r5, r2
 8005818:	fbb6 f1f3 	udiv	r1, r6, r3
 800581c:	fb03 6711 	mls	r7, r3, r1, r6
 8005820:	5dc7      	ldrb	r7, [r0, r7]
 8005822:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005826:	4637      	mov	r7, r6
 8005828:	42bb      	cmp	r3, r7
 800582a:	460e      	mov	r6, r1
 800582c:	d9f4      	bls.n	8005818 <_printf_i+0x11c>
 800582e:	2b08      	cmp	r3, #8
 8005830:	d10b      	bne.n	800584a <_printf_i+0x14e>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	07de      	lsls	r6, r3, #31
 8005836:	d508      	bpl.n	800584a <_printf_i+0x14e>
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	6861      	ldr	r1, [r4, #4]
 800583c:	4299      	cmp	r1, r3
 800583e:	bfde      	ittt	le
 8005840:	2330      	movle	r3, #48	; 0x30
 8005842:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005846:	f105 35ff 	addle.w	r5, r5, #4294967295
 800584a:	1b52      	subs	r2, r2, r5
 800584c:	6122      	str	r2, [r4, #16]
 800584e:	464b      	mov	r3, r9
 8005850:	4621      	mov	r1, r4
 8005852:	4640      	mov	r0, r8
 8005854:	f8cd a000 	str.w	sl, [sp]
 8005858:	aa03      	add	r2, sp, #12
 800585a:	f7ff fedf 	bl	800561c <_printf_common>
 800585e:	3001      	adds	r0, #1
 8005860:	d14c      	bne.n	80058fc <_printf_i+0x200>
 8005862:	f04f 30ff 	mov.w	r0, #4294967295
 8005866:	b004      	add	sp, #16
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	4834      	ldr	r0, [pc, #208]	; (8005940 <_printf_i+0x244>)
 800586e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005872:	6829      	ldr	r1, [r5, #0]
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	f851 6b04 	ldr.w	r6, [r1], #4
 800587a:	6029      	str	r1, [r5, #0]
 800587c:	061d      	lsls	r5, r3, #24
 800587e:	d514      	bpl.n	80058aa <_printf_i+0x1ae>
 8005880:	07df      	lsls	r7, r3, #31
 8005882:	bf44      	itt	mi
 8005884:	f043 0320 	orrmi.w	r3, r3, #32
 8005888:	6023      	strmi	r3, [r4, #0]
 800588a:	b91e      	cbnz	r6, 8005894 <_printf_i+0x198>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	f023 0320 	bic.w	r3, r3, #32
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	2310      	movs	r3, #16
 8005896:	e7af      	b.n	80057f8 <_printf_i+0xfc>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	f043 0320 	orr.w	r3, r3, #32
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	2378      	movs	r3, #120	; 0x78
 80058a2:	4828      	ldr	r0, [pc, #160]	; (8005944 <_printf_i+0x248>)
 80058a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058a8:	e7e3      	b.n	8005872 <_printf_i+0x176>
 80058aa:	0659      	lsls	r1, r3, #25
 80058ac:	bf48      	it	mi
 80058ae:	b2b6      	uxthmi	r6, r6
 80058b0:	e7e6      	b.n	8005880 <_printf_i+0x184>
 80058b2:	4615      	mov	r5, r2
 80058b4:	e7bb      	b.n	800582e <_printf_i+0x132>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	6826      	ldr	r6, [r4, #0]
 80058ba:	1d18      	adds	r0, r3, #4
 80058bc:	6961      	ldr	r1, [r4, #20]
 80058be:	6028      	str	r0, [r5, #0]
 80058c0:	0635      	lsls	r5, r6, #24
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	d501      	bpl.n	80058ca <_printf_i+0x1ce>
 80058c6:	6019      	str	r1, [r3, #0]
 80058c8:	e002      	b.n	80058d0 <_printf_i+0x1d4>
 80058ca:	0670      	lsls	r0, r6, #25
 80058cc:	d5fb      	bpl.n	80058c6 <_printf_i+0x1ca>
 80058ce:	8019      	strh	r1, [r3, #0]
 80058d0:	2300      	movs	r3, #0
 80058d2:	4615      	mov	r5, r2
 80058d4:	6123      	str	r3, [r4, #16]
 80058d6:	e7ba      	b.n	800584e <_printf_i+0x152>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	2100      	movs	r1, #0
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	602a      	str	r2, [r5, #0]
 80058e0:	681d      	ldr	r5, [r3, #0]
 80058e2:	6862      	ldr	r2, [r4, #4]
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 febd 	bl	8006664 <memchr>
 80058ea:	b108      	cbz	r0, 80058f0 <_printf_i+0x1f4>
 80058ec:	1b40      	subs	r0, r0, r5
 80058ee:	6060      	str	r0, [r4, #4]
 80058f0:	6863      	ldr	r3, [r4, #4]
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	2300      	movs	r3, #0
 80058f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fa:	e7a8      	b.n	800584e <_printf_i+0x152>
 80058fc:	462a      	mov	r2, r5
 80058fe:	4649      	mov	r1, r9
 8005900:	4640      	mov	r0, r8
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	47d0      	blx	sl
 8005906:	3001      	adds	r0, #1
 8005908:	d0ab      	beq.n	8005862 <_printf_i+0x166>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	079b      	lsls	r3, r3, #30
 800590e:	d413      	bmi.n	8005938 <_printf_i+0x23c>
 8005910:	68e0      	ldr	r0, [r4, #12]
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	4298      	cmp	r0, r3
 8005916:	bfb8      	it	lt
 8005918:	4618      	movlt	r0, r3
 800591a:	e7a4      	b.n	8005866 <_printf_i+0x16a>
 800591c:	2301      	movs	r3, #1
 800591e:	4632      	mov	r2, r6
 8005920:	4649      	mov	r1, r9
 8005922:	4640      	mov	r0, r8
 8005924:	47d0      	blx	sl
 8005926:	3001      	adds	r0, #1
 8005928:	d09b      	beq.n	8005862 <_printf_i+0x166>
 800592a:	3501      	adds	r5, #1
 800592c:	68e3      	ldr	r3, [r4, #12]
 800592e:	9903      	ldr	r1, [sp, #12]
 8005930:	1a5b      	subs	r3, r3, r1
 8005932:	42ab      	cmp	r3, r5
 8005934:	dcf2      	bgt.n	800591c <_printf_i+0x220>
 8005936:	e7eb      	b.n	8005910 <_printf_i+0x214>
 8005938:	2500      	movs	r5, #0
 800593a:	f104 0619 	add.w	r6, r4, #25
 800593e:	e7f5      	b.n	800592c <_printf_i+0x230>
 8005940:	08007946 	.word	0x08007946
 8005944:	08007957 	.word	0x08007957

08005948 <_sbrk_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	2300      	movs	r3, #0
 800594c:	4d05      	ldr	r5, [pc, #20]	; (8005964 <_sbrk_r+0x1c>)
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	602b      	str	r3, [r5, #0]
 8005954:	f7fc f87c 	bl	8001a50 <_sbrk>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_sbrk_r+0x1a>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_sbrk_r+0x1a>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	20000518 	.word	0x20000518

08005968 <quorem>:
 8005968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	6903      	ldr	r3, [r0, #16]
 800596e:	690c      	ldr	r4, [r1, #16]
 8005970:	4607      	mov	r7, r0
 8005972:	42a3      	cmp	r3, r4
 8005974:	f2c0 8082 	blt.w	8005a7c <quorem+0x114>
 8005978:	3c01      	subs	r4, #1
 800597a:	f100 0514 	add.w	r5, r0, #20
 800597e:	f101 0814 	add.w	r8, r1, #20
 8005982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800598c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005990:	3301      	adds	r3, #1
 8005992:	429a      	cmp	r2, r3
 8005994:	fbb2 f6f3 	udiv	r6, r2, r3
 8005998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800599c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059a0:	d331      	bcc.n	8005a06 <quorem+0x9e>
 80059a2:	f04f 0e00 	mov.w	lr, #0
 80059a6:	4640      	mov	r0, r8
 80059a8:	46ac      	mov	ip, r5
 80059aa:	46f2      	mov	sl, lr
 80059ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80059b0:	b293      	uxth	r3, r2
 80059b2:	fb06 e303 	mla	r3, r6, r3, lr
 80059b6:	0c12      	lsrs	r2, r2, #16
 80059b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059bc:	b29b      	uxth	r3, r3
 80059be:	fb06 e202 	mla	r2, r6, r2, lr
 80059c2:	ebaa 0303 	sub.w	r3, sl, r3
 80059c6:	f8dc a000 	ldr.w	sl, [ip]
 80059ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059ce:	fa1f fa8a 	uxth.w	sl, sl
 80059d2:	4453      	add	r3, sl
 80059d4:	f8dc a000 	ldr.w	sl, [ip]
 80059d8:	b292      	uxth	r2, r2
 80059da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059e8:	4581      	cmp	r9, r0
 80059ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059ee:	f84c 3b04 	str.w	r3, [ip], #4
 80059f2:	d2db      	bcs.n	80059ac <quorem+0x44>
 80059f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80059f8:	b92b      	cbnz	r3, 8005a06 <quorem+0x9e>
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	3b04      	subs	r3, #4
 80059fe:	429d      	cmp	r5, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	d32f      	bcc.n	8005a64 <quorem+0xfc>
 8005a04:	613c      	str	r4, [r7, #16]
 8005a06:	4638      	mov	r0, r7
 8005a08:	f001 f8d2 	bl	8006bb0 <__mcmp>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	db25      	blt.n	8005a5c <quorem+0xf4>
 8005a10:	4628      	mov	r0, r5
 8005a12:	f04f 0c00 	mov.w	ip, #0
 8005a16:	3601      	adds	r6, #1
 8005a18:	f858 1b04 	ldr.w	r1, [r8], #4
 8005a1c:	f8d0 e000 	ldr.w	lr, [r0]
 8005a20:	b28b      	uxth	r3, r1
 8005a22:	ebac 0303 	sub.w	r3, ip, r3
 8005a26:	fa1f f28e 	uxth.w	r2, lr
 8005a2a:	4413      	add	r3, r2
 8005a2c:	0c0a      	lsrs	r2, r1, #16
 8005a2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a3c:	45c1      	cmp	r9, r8
 8005a3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a42:	f840 3b04 	str.w	r3, [r0], #4
 8005a46:	d2e7      	bcs.n	8005a18 <quorem+0xb0>
 8005a48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a50:	b922      	cbnz	r2, 8005a5c <quorem+0xf4>
 8005a52:	3b04      	subs	r3, #4
 8005a54:	429d      	cmp	r5, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	d30a      	bcc.n	8005a70 <quorem+0x108>
 8005a5a:	613c      	str	r4, [r7, #16]
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	b003      	add	sp, #12
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	3b04      	subs	r3, #4
 8005a68:	2a00      	cmp	r2, #0
 8005a6a:	d1cb      	bne.n	8005a04 <quorem+0x9c>
 8005a6c:	3c01      	subs	r4, #1
 8005a6e:	e7c6      	b.n	80059fe <quorem+0x96>
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	3b04      	subs	r3, #4
 8005a74:	2a00      	cmp	r2, #0
 8005a76:	d1f0      	bne.n	8005a5a <quorem+0xf2>
 8005a78:	3c01      	subs	r4, #1
 8005a7a:	e7eb      	b.n	8005a54 <quorem+0xec>
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	e7ee      	b.n	8005a5e <quorem+0xf6>

08005a80 <_dtoa_r>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	4616      	mov	r6, r2
 8005a86:	461f      	mov	r7, r3
 8005a88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a8a:	b099      	sub	sp, #100	; 0x64
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a96:	b974      	cbnz	r4, 8005ab6 <_dtoa_r+0x36>
 8005a98:	2010      	movs	r0, #16
 8005a9a:	f7ff fa01 	bl	8004ea0 <malloc>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	6268      	str	r0, [r5, #36]	; 0x24
 8005aa2:	b920      	cbnz	r0, 8005aae <_dtoa_r+0x2e>
 8005aa4:	21ea      	movs	r1, #234	; 0xea
 8005aa6:	4ba8      	ldr	r3, [pc, #672]	; (8005d48 <_dtoa_r+0x2c8>)
 8005aa8:	48a8      	ldr	r0, [pc, #672]	; (8005d4c <_dtoa_r+0x2cc>)
 8005aaa:	f001 f999 	bl	8006de0 <__assert_func>
 8005aae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ab2:	6004      	str	r4, [r0, #0]
 8005ab4:	60c4      	str	r4, [r0, #12]
 8005ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	b151      	cbz	r1, 8005ad2 <_dtoa_r+0x52>
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4093      	lsls	r3, r2
 8005ac2:	604a      	str	r2, [r1, #4]
 8005ac4:	608b      	str	r3, [r1, #8]
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 fe34 	bl	8006734 <_Bfree>
 8005acc:	2200      	movs	r2, #0
 8005ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	1e3b      	subs	r3, r7, #0
 8005ad4:	bfaf      	iteee	ge
 8005ad6:	2300      	movge	r3, #0
 8005ad8:	2201      	movlt	r2, #1
 8005ada:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ade:	9305      	strlt	r3, [sp, #20]
 8005ae0:	bfa8      	it	ge
 8005ae2:	f8c8 3000 	strge.w	r3, [r8]
 8005ae6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005aea:	4b99      	ldr	r3, [pc, #612]	; (8005d50 <_dtoa_r+0x2d0>)
 8005aec:	bfb8      	it	lt
 8005aee:	f8c8 2000 	strlt.w	r2, [r8]
 8005af2:	ea33 0309 	bics.w	r3, r3, r9
 8005af6:	d119      	bne.n	8005b2c <_dtoa_r+0xac>
 8005af8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005afc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b04:	4333      	orrs	r3, r6
 8005b06:	f000 857f 	beq.w	8006608 <_dtoa_r+0xb88>
 8005b0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b0c:	b953      	cbnz	r3, 8005b24 <_dtoa_r+0xa4>
 8005b0e:	4b91      	ldr	r3, [pc, #580]	; (8005d54 <_dtoa_r+0x2d4>)
 8005b10:	e022      	b.n	8005b58 <_dtoa_r+0xd8>
 8005b12:	4b91      	ldr	r3, [pc, #580]	; (8005d58 <_dtoa_r+0x2d8>)
 8005b14:	9303      	str	r3, [sp, #12]
 8005b16:	3308      	adds	r3, #8
 8005b18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	9803      	ldr	r0, [sp, #12]
 8005b1e:	b019      	add	sp, #100	; 0x64
 8005b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b24:	4b8b      	ldr	r3, [pc, #556]	; (8005d54 <_dtoa_r+0x2d4>)
 8005b26:	9303      	str	r3, [sp, #12]
 8005b28:	3303      	adds	r3, #3
 8005b2a:	e7f5      	b.n	8005b18 <_dtoa_r+0x98>
 8005b2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f7fa ff34 	bl	80009a8 <__aeabi_dcmpeq>
 8005b40:	4680      	mov	r8, r0
 8005b42:	b158      	cbz	r0, 8005b5c <_dtoa_r+0xdc>
 8005b44:	2301      	movs	r3, #1
 8005b46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8558 	beq.w	8006602 <_dtoa_r+0xb82>
 8005b52:	4882      	ldr	r0, [pc, #520]	; (8005d5c <_dtoa_r+0x2dc>)
 8005b54:	6018      	str	r0, [r3, #0]
 8005b56:	1e43      	subs	r3, r0, #1
 8005b58:	9303      	str	r3, [sp, #12]
 8005b5a:	e7df      	b.n	8005b1c <_dtoa_r+0x9c>
 8005b5c:	ab16      	add	r3, sp, #88	; 0x58
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	ab17      	add	r3, sp, #92	; 0x5c
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	4628      	mov	r0, r5
 8005b66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b6a:	f001 f8c9 	bl	8006d00 <__d2b>
 8005b6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b72:	4683      	mov	fp, r0
 8005b74:	2c00      	cmp	r4, #0
 8005b76:	d07f      	beq.n	8005c78 <_dtoa_r+0x1f8>
 8005b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005b8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005b8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005b92:	2200      	movs	r2, #0
 8005b94:	4b72      	ldr	r3, [pc, #456]	; (8005d60 <_dtoa_r+0x2e0>)
 8005b96:	f7fa fae7 	bl	8000168 <__aeabi_dsub>
 8005b9a:	a365      	add	r3, pc, #404	; (adr r3, 8005d30 <_dtoa_r+0x2b0>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa fc9a 	bl	80004d8 <__aeabi_dmul>
 8005ba4:	a364      	add	r3, pc, #400	; (adr r3, 8005d38 <_dtoa_r+0x2b8>)
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f7fa fadf 	bl	800016c <__adddf3>
 8005bae:	4606      	mov	r6, r0
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	460f      	mov	r7, r1
 8005bb4:	f7fa fc26 	bl	8000404 <__aeabi_i2d>
 8005bb8:	a361      	add	r3, pc, #388	; (adr r3, 8005d40 <_dtoa_r+0x2c0>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f7fa fc8b 	bl	80004d8 <__aeabi_dmul>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	4639      	mov	r1, r7
 8005bca:	f7fa facf 	bl	800016c <__adddf3>
 8005bce:	4606      	mov	r6, r0
 8005bd0:	460f      	mov	r7, r1
 8005bd2:	f7fa ff31 	bl	8000a38 <__aeabi_d2iz>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4682      	mov	sl, r0
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	4639      	mov	r1, r7
 8005be0:	f7fa feec 	bl	80009bc <__aeabi_dcmplt>
 8005be4:	b148      	cbz	r0, 8005bfa <_dtoa_r+0x17a>
 8005be6:	4650      	mov	r0, sl
 8005be8:	f7fa fc0c 	bl	8000404 <__aeabi_i2d>
 8005bec:	4632      	mov	r2, r6
 8005bee:	463b      	mov	r3, r7
 8005bf0:	f7fa feda 	bl	80009a8 <__aeabi_dcmpeq>
 8005bf4:	b908      	cbnz	r0, 8005bfa <_dtoa_r+0x17a>
 8005bf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bfa:	f1ba 0f16 	cmp.w	sl, #22
 8005bfe:	d858      	bhi.n	8005cb2 <_dtoa_r+0x232>
 8005c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c04:	4b57      	ldr	r3, [pc, #348]	; (8005d64 <_dtoa_r+0x2e4>)
 8005c06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f7fa fed5 	bl	80009bc <__aeabi_dcmplt>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d04f      	beq.n	8005cb6 <_dtoa_r+0x236>
 8005c16:	2300      	movs	r3, #0
 8005c18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c20:	1b1c      	subs	r4, r3, r4
 8005c22:	1e63      	subs	r3, r4, #1
 8005c24:	9309      	str	r3, [sp, #36]	; 0x24
 8005c26:	bf49      	itett	mi
 8005c28:	f1c4 0301 	rsbmi	r3, r4, #1
 8005c2c:	2300      	movpl	r3, #0
 8005c2e:	9306      	strmi	r3, [sp, #24]
 8005c30:	2300      	movmi	r3, #0
 8005c32:	bf54      	ite	pl
 8005c34:	9306      	strpl	r3, [sp, #24]
 8005c36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c38:	f1ba 0f00 	cmp.w	sl, #0
 8005c3c:	db3d      	blt.n	8005cba <_dtoa_r+0x23a>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005c44:	4453      	add	r3, sl
 8005c46:	9309      	str	r3, [sp, #36]	; 0x24
 8005c48:	2300      	movs	r3, #0
 8005c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c4e:	2b09      	cmp	r3, #9
 8005c50:	f200 808c 	bhi.w	8005d6c <_dtoa_r+0x2ec>
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	bfc4      	itt	gt
 8005c58:	3b04      	subgt	r3, #4
 8005c5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c5e:	bfc8      	it	gt
 8005c60:	2400      	movgt	r4, #0
 8005c62:	f1a3 0302 	sub.w	r3, r3, #2
 8005c66:	bfd8      	it	le
 8005c68:	2401      	movle	r4, #1
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	f200 808a 	bhi.w	8005d84 <_dtoa_r+0x304>
 8005c70:	e8df f003 	tbb	[pc, r3]
 8005c74:	5b4d4f2d 	.word	0x5b4d4f2d
 8005c78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005c7c:	441c      	add	r4, r3
 8005c7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	bfc3      	ittte	gt
 8005c86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c8a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005c8e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005c92:	f1c3 0320 	rsble	r3, r3, #32
 8005c96:	bfc6      	itte	gt
 8005c98:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c9c:	4318      	orrgt	r0, r3
 8005c9e:	fa06 f003 	lslle.w	r0, r6, r3
 8005ca2:	f7fa fb9f 	bl	80003e4 <__aeabi_ui2d>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005cac:	3c01      	subs	r4, #1
 8005cae:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cb0:	e76f      	b.n	8005b92 <_dtoa_r+0x112>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e7b2      	b.n	8005c1c <_dtoa_r+0x19c>
 8005cb6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005cb8:	e7b1      	b.n	8005c1e <_dtoa_r+0x19e>
 8005cba:	9b06      	ldr	r3, [sp, #24]
 8005cbc:	eba3 030a 	sub.w	r3, r3, sl
 8005cc0:	9306      	str	r3, [sp, #24]
 8005cc2:	f1ca 0300 	rsb	r3, sl, #0
 8005cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc8:	2300      	movs	r3, #0
 8005cca:	930e      	str	r3, [sp, #56]	; 0x38
 8005ccc:	e7be      	b.n	8005c4c <_dtoa_r+0x1cc>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	dc58      	bgt.n	8005d8a <_dtoa_r+0x30a>
 8005cd8:	f04f 0901 	mov.w	r9, #1
 8005cdc:	464b      	mov	r3, r9
 8005cde:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ce2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005cea:	6042      	str	r2, [r0, #4]
 8005cec:	2204      	movs	r2, #4
 8005cee:	f102 0614 	add.w	r6, r2, #20
 8005cf2:	429e      	cmp	r6, r3
 8005cf4:	6841      	ldr	r1, [r0, #4]
 8005cf6:	d94e      	bls.n	8005d96 <_dtoa_r+0x316>
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 fcdb 	bl	80066b4 <_Balloc>
 8005cfe:	9003      	str	r0, [sp, #12]
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d14c      	bne.n	8005d9e <_dtoa_r+0x31e>
 8005d04:	4602      	mov	r2, r0
 8005d06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d0a:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <_dtoa_r+0x2e8>)
 8005d0c:	e6cc      	b.n	8005aa8 <_dtoa_r+0x28>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e7de      	b.n	8005cd0 <_dtoa_r+0x250>
 8005d12:	2300      	movs	r3, #0
 8005d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d18:	eb0a 0903 	add.w	r9, sl, r3
 8005d1c:	f109 0301 	add.w	r3, r9, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	9308      	str	r3, [sp, #32]
 8005d24:	bfb8      	it	lt
 8005d26:	2301      	movlt	r3, #1
 8005d28:	e7dd      	b.n	8005ce6 <_dtoa_r+0x266>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e7f2      	b.n	8005d14 <_dtoa_r+0x294>
 8005d2e:	bf00      	nop
 8005d30:	636f4361 	.word	0x636f4361
 8005d34:	3fd287a7 	.word	0x3fd287a7
 8005d38:	8b60c8b3 	.word	0x8b60c8b3
 8005d3c:	3fc68a28 	.word	0x3fc68a28
 8005d40:	509f79fb 	.word	0x509f79fb
 8005d44:	3fd34413 	.word	0x3fd34413
 8005d48:	08007975 	.word	0x08007975
 8005d4c:	0800798c 	.word	0x0800798c
 8005d50:	7ff00000 	.word	0x7ff00000
 8005d54:	08007971 	.word	0x08007971
 8005d58:	08007968 	.word	0x08007968
 8005d5c:	08007945 	.word	0x08007945
 8005d60:	3ff80000 	.word	0x3ff80000
 8005d64:	08007a80 	.word	0x08007a80
 8005d68:	080079e7 	.word	0x080079e7
 8005d6c:	2401      	movs	r4, #1
 8005d6e:	2300      	movs	r3, #0
 8005d70:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d72:	9322      	str	r3, [sp, #136]	; 0x88
 8005d74:	f04f 39ff 	mov.w	r9, #4294967295
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2312      	movs	r3, #18
 8005d7c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d80:	9223      	str	r2, [sp, #140]	; 0x8c
 8005d82:	e7b0      	b.n	8005ce6 <_dtoa_r+0x266>
 8005d84:	2301      	movs	r3, #1
 8005d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d88:	e7f4      	b.n	8005d74 <_dtoa_r+0x2f4>
 8005d8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005d8e:	464b      	mov	r3, r9
 8005d90:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d94:	e7a7      	b.n	8005ce6 <_dtoa_r+0x266>
 8005d96:	3101      	adds	r1, #1
 8005d98:	6041      	str	r1, [r0, #4]
 8005d9a:	0052      	lsls	r2, r2, #1
 8005d9c:	e7a7      	b.n	8005cee <_dtoa_r+0x26e>
 8005d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005da0:	9a03      	ldr	r2, [sp, #12]
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	9b08      	ldr	r3, [sp, #32]
 8005da6:	2b0e      	cmp	r3, #14
 8005da8:	f200 80a8 	bhi.w	8005efc <_dtoa_r+0x47c>
 8005dac:	2c00      	cmp	r4, #0
 8005dae:	f000 80a5 	beq.w	8005efc <_dtoa_r+0x47c>
 8005db2:	f1ba 0f00 	cmp.w	sl, #0
 8005db6:	dd34      	ble.n	8005e22 <_dtoa_r+0x3a2>
 8005db8:	4a9a      	ldr	r2, [pc, #616]	; (8006024 <_dtoa_r+0x5a4>)
 8005dba:	f00a 030f 	and.w	r3, sl, #15
 8005dbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005dc2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005dc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dce:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005dd2:	d016      	beq.n	8005e02 <_dtoa_r+0x382>
 8005dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dd8:	4b93      	ldr	r3, [pc, #588]	; (8006028 <_dtoa_r+0x5a8>)
 8005dda:	2703      	movs	r7, #3
 8005ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005de0:	f7fa fca4 	bl	800072c <__aeabi_ddiv>
 8005de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005de8:	f004 040f 	and.w	r4, r4, #15
 8005dec:	4e8e      	ldr	r6, [pc, #568]	; (8006028 <_dtoa_r+0x5a8>)
 8005dee:	b954      	cbnz	r4, 8005e06 <_dtoa_r+0x386>
 8005df0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005df4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df8:	f7fa fc98 	bl	800072c <__aeabi_ddiv>
 8005dfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e00:	e029      	b.n	8005e56 <_dtoa_r+0x3d6>
 8005e02:	2702      	movs	r7, #2
 8005e04:	e7f2      	b.n	8005dec <_dtoa_r+0x36c>
 8005e06:	07e1      	lsls	r1, r4, #31
 8005e08:	d508      	bpl.n	8005e1c <_dtoa_r+0x39c>
 8005e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e12:	f7fa fb61 	bl	80004d8 <__aeabi_dmul>
 8005e16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e1a:	3701      	adds	r7, #1
 8005e1c:	1064      	asrs	r4, r4, #1
 8005e1e:	3608      	adds	r6, #8
 8005e20:	e7e5      	b.n	8005dee <_dtoa_r+0x36e>
 8005e22:	f000 80a5 	beq.w	8005f70 <_dtoa_r+0x4f0>
 8005e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e2a:	f1ca 0400 	rsb	r4, sl, #0
 8005e2e:	4b7d      	ldr	r3, [pc, #500]	; (8006024 <_dtoa_r+0x5a4>)
 8005e30:	f004 020f 	and.w	r2, r4, #15
 8005e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f7fa fb4c 	bl	80004d8 <__aeabi_dmul>
 8005e40:	2702      	movs	r7, #2
 8005e42:	2300      	movs	r3, #0
 8005e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e48:	4e77      	ldr	r6, [pc, #476]	; (8006028 <_dtoa_r+0x5a8>)
 8005e4a:	1124      	asrs	r4, r4, #4
 8005e4c:	2c00      	cmp	r4, #0
 8005e4e:	f040 8084 	bne.w	8005f5a <_dtoa_r+0x4da>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1d2      	bne.n	8005dfc <_dtoa_r+0x37c>
 8005e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 808b 	beq.w	8005f74 <_dtoa_r+0x4f4>
 8005e5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4b6f      	ldr	r3, [pc, #444]	; (800602c <_dtoa_r+0x5ac>)
 8005e6e:	f7fa fda5 	bl	80009bc <__aeabi_dcmplt>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d07e      	beq.n	8005f74 <_dtoa_r+0x4f4>
 8005e76:	9b08      	ldr	r3, [sp, #32]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d07b      	beq.n	8005f74 <_dtoa_r+0x4f4>
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dd38      	ble.n	8005ef4 <_dtoa_r+0x474>
 8005e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e86:	2200      	movs	r2, #0
 8005e88:	4b69      	ldr	r3, [pc, #420]	; (8006030 <_dtoa_r+0x5b0>)
 8005e8a:	f7fa fb25 	bl	80004d8 <__aeabi_dmul>
 8005e8e:	464c      	mov	r4, r9
 8005e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e94:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005e98:	3701      	adds	r7, #1
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f7fa fab2 	bl	8000404 <__aeabi_i2d>
 8005ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea4:	f7fa fb18 	bl	80004d8 <__aeabi_dmul>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4b62      	ldr	r3, [pc, #392]	; (8006034 <_dtoa_r+0x5b4>)
 8005eac:	f7fa f95e 	bl	800016c <__adddf3>
 8005eb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005eb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eb8:	9611      	str	r6, [sp, #68]	; 0x44
 8005eba:	2c00      	cmp	r4, #0
 8005ebc:	d15d      	bne.n	8005f7a <_dtoa_r+0x4fa>
 8005ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4b5c      	ldr	r3, [pc, #368]	; (8006038 <_dtoa_r+0x5b8>)
 8005ec6:	f7fa f94f 	bl	8000168 <__aeabi_dsub>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ed2:	4633      	mov	r3, r6
 8005ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ed6:	f7fa fd8f 	bl	80009f8 <__aeabi_dcmpgt>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	f040 829c 	bne.w	8006418 <_dtoa_r+0x998>
 8005ee0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ee6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005eea:	f7fa fd67 	bl	80009bc <__aeabi_dcmplt>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f040 8290 	bne.w	8006414 <_dtoa_r+0x994>
 8005ef4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005ef8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f2c0 8152 	blt.w	80061a8 <_dtoa_r+0x728>
 8005f04:	f1ba 0f0e 	cmp.w	sl, #14
 8005f08:	f300 814e 	bgt.w	80061a8 <_dtoa_r+0x728>
 8005f0c:	4b45      	ldr	r3, [pc, #276]	; (8006024 <_dtoa_r+0x5a4>)
 8005f0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f280 80db 	bge.w	80060d8 <_dtoa_r+0x658>
 8005f22:	9b08      	ldr	r3, [sp, #32]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f300 80d7 	bgt.w	80060d8 <_dtoa_r+0x658>
 8005f2a:	f040 8272 	bne.w	8006412 <_dtoa_r+0x992>
 8005f2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f32:	2200      	movs	r2, #0
 8005f34:	4b40      	ldr	r3, [pc, #256]	; (8006038 <_dtoa_r+0x5b8>)
 8005f36:	f7fa facf 	bl	80004d8 <__aeabi_dmul>
 8005f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f3e:	f7fa fd51 	bl	80009e4 <__aeabi_dcmpge>
 8005f42:	9c08      	ldr	r4, [sp, #32]
 8005f44:	4626      	mov	r6, r4
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f040 8248 	bne.w	80063dc <_dtoa_r+0x95c>
 8005f4c:	2331      	movs	r3, #49	; 0x31
 8005f4e:	9f03      	ldr	r7, [sp, #12]
 8005f50:	f10a 0a01 	add.w	sl, sl, #1
 8005f54:	f807 3b01 	strb.w	r3, [r7], #1
 8005f58:	e244      	b.n	80063e4 <_dtoa_r+0x964>
 8005f5a:	07e2      	lsls	r2, r4, #31
 8005f5c:	d505      	bpl.n	8005f6a <_dtoa_r+0x4ea>
 8005f5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f62:	f7fa fab9 	bl	80004d8 <__aeabi_dmul>
 8005f66:	2301      	movs	r3, #1
 8005f68:	3701      	adds	r7, #1
 8005f6a:	1064      	asrs	r4, r4, #1
 8005f6c:	3608      	adds	r6, #8
 8005f6e:	e76d      	b.n	8005e4c <_dtoa_r+0x3cc>
 8005f70:	2702      	movs	r7, #2
 8005f72:	e770      	b.n	8005e56 <_dtoa_r+0x3d6>
 8005f74:	46d0      	mov	r8, sl
 8005f76:	9c08      	ldr	r4, [sp, #32]
 8005f78:	e78f      	b.n	8005e9a <_dtoa_r+0x41a>
 8005f7a:	9903      	ldr	r1, [sp, #12]
 8005f7c:	4b29      	ldr	r3, [pc, #164]	; (8006024 <_dtoa_r+0x5a4>)
 8005f7e:	4421      	add	r1, r4
 8005f80:	9112      	str	r1, [sp, #72]	; 0x48
 8005f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005f8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f90:	2900      	cmp	r1, #0
 8005f92:	d055      	beq.n	8006040 <_dtoa_r+0x5c0>
 8005f94:	2000      	movs	r0, #0
 8005f96:	4929      	ldr	r1, [pc, #164]	; (800603c <_dtoa_r+0x5bc>)
 8005f98:	f7fa fbc8 	bl	800072c <__aeabi_ddiv>
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	4632      	mov	r2, r6
 8005fa0:	f7fa f8e2 	bl	8000168 <__aeabi_dsub>
 8005fa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fa8:	9f03      	ldr	r7, [sp, #12]
 8005faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fae:	f7fa fd43 	bl	8000a38 <__aeabi_d2iz>
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	f7fa fa26 	bl	8000404 <__aeabi_i2d>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fc0:	f7fa f8d2 	bl	8000168 <__aeabi_dsub>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	3430      	adds	r4, #48	; 0x30
 8005fca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fd2:	f807 4b01 	strb.w	r4, [r7], #1
 8005fd6:	f7fa fcf1 	bl	80009bc <__aeabi_dcmplt>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d174      	bne.n	80060c8 <_dtoa_r+0x648>
 8005fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	4911      	ldr	r1, [pc, #68]	; (800602c <_dtoa_r+0x5ac>)
 8005fe6:	f7fa f8bf 	bl	8000168 <__aeabi_dsub>
 8005fea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fee:	f7fa fce5 	bl	80009bc <__aeabi_dcmplt>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	f040 80b7 	bne.w	8006166 <_dtoa_r+0x6e6>
 8005ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ffa:	429f      	cmp	r7, r3
 8005ffc:	f43f af7a 	beq.w	8005ef4 <_dtoa_r+0x474>
 8006000:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006004:	2200      	movs	r2, #0
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <_dtoa_r+0x5b0>)
 8006008:	f7fa fa66 	bl	80004d8 <__aeabi_dmul>
 800600c:	2200      	movs	r2, #0
 800600e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <_dtoa_r+0x5b0>)
 8006018:	f7fa fa5e 	bl	80004d8 <__aeabi_dmul>
 800601c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006020:	e7c3      	b.n	8005faa <_dtoa_r+0x52a>
 8006022:	bf00      	nop
 8006024:	08007a80 	.word	0x08007a80
 8006028:	08007a58 	.word	0x08007a58
 800602c:	3ff00000 	.word	0x3ff00000
 8006030:	40240000 	.word	0x40240000
 8006034:	401c0000 	.word	0x401c0000
 8006038:	40140000 	.word	0x40140000
 800603c:	3fe00000 	.word	0x3fe00000
 8006040:	4630      	mov	r0, r6
 8006042:	4639      	mov	r1, r7
 8006044:	f7fa fa48 	bl	80004d8 <__aeabi_dmul>
 8006048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800604a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800604e:	9c03      	ldr	r4, [sp, #12]
 8006050:	9314      	str	r3, [sp, #80]	; 0x50
 8006052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006056:	f7fa fcef 	bl	8000a38 <__aeabi_d2iz>
 800605a:	9015      	str	r0, [sp, #84]	; 0x54
 800605c:	f7fa f9d2 	bl	8000404 <__aeabi_i2d>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006068:	f7fa f87e 	bl	8000168 <__aeabi_dsub>
 800606c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800606e:	4606      	mov	r6, r0
 8006070:	3330      	adds	r3, #48	; 0x30
 8006072:	f804 3b01 	strb.w	r3, [r4], #1
 8006076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006078:	460f      	mov	r7, r1
 800607a:	429c      	cmp	r4, r3
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	d124      	bne.n	80060cc <_dtoa_r+0x64c>
 8006082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006086:	4bb0      	ldr	r3, [pc, #704]	; (8006348 <_dtoa_r+0x8c8>)
 8006088:	f7fa f870 	bl	800016c <__adddf3>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4630      	mov	r0, r6
 8006092:	4639      	mov	r1, r7
 8006094:	f7fa fcb0 	bl	80009f8 <__aeabi_dcmpgt>
 8006098:	2800      	cmp	r0, #0
 800609a:	d163      	bne.n	8006164 <_dtoa_r+0x6e4>
 800609c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060a0:	2000      	movs	r0, #0
 80060a2:	49a9      	ldr	r1, [pc, #676]	; (8006348 <_dtoa_r+0x8c8>)
 80060a4:	f7fa f860 	bl	8000168 <__aeabi_dsub>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4630      	mov	r0, r6
 80060ae:	4639      	mov	r1, r7
 80060b0:	f7fa fc84 	bl	80009bc <__aeabi_dcmplt>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f43f af1d 	beq.w	8005ef4 <_dtoa_r+0x474>
 80060ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80060bc:	1e7b      	subs	r3, r7, #1
 80060be:	9314      	str	r3, [sp, #80]	; 0x50
 80060c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80060c4:	2b30      	cmp	r3, #48	; 0x30
 80060c6:	d0f8      	beq.n	80060ba <_dtoa_r+0x63a>
 80060c8:	46c2      	mov	sl, r8
 80060ca:	e03b      	b.n	8006144 <_dtoa_r+0x6c4>
 80060cc:	4b9f      	ldr	r3, [pc, #636]	; (800634c <_dtoa_r+0x8cc>)
 80060ce:	f7fa fa03 	bl	80004d8 <__aeabi_dmul>
 80060d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060d6:	e7bc      	b.n	8006052 <_dtoa_r+0x5d2>
 80060d8:	9f03      	ldr	r7, [sp, #12]
 80060da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80060de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060e2:	4640      	mov	r0, r8
 80060e4:	4649      	mov	r1, r9
 80060e6:	f7fa fb21 	bl	800072c <__aeabi_ddiv>
 80060ea:	f7fa fca5 	bl	8000a38 <__aeabi_d2iz>
 80060ee:	4604      	mov	r4, r0
 80060f0:	f7fa f988 	bl	8000404 <__aeabi_i2d>
 80060f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060f8:	f7fa f9ee 	bl	80004d8 <__aeabi_dmul>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4640      	mov	r0, r8
 8006102:	4649      	mov	r1, r9
 8006104:	f7fa f830 	bl	8000168 <__aeabi_dsub>
 8006108:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800610c:	f807 6b01 	strb.w	r6, [r7], #1
 8006110:	9e03      	ldr	r6, [sp, #12]
 8006112:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006116:	1bbe      	subs	r6, r7, r6
 8006118:	45b4      	cmp	ip, r6
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	d136      	bne.n	800618e <_dtoa_r+0x70e>
 8006120:	f7fa f824 	bl	800016c <__adddf3>
 8006124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006128:	4680      	mov	r8, r0
 800612a:	4689      	mov	r9, r1
 800612c:	f7fa fc64 	bl	80009f8 <__aeabi_dcmpgt>
 8006130:	bb58      	cbnz	r0, 800618a <_dtoa_r+0x70a>
 8006132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	f7fa fc35 	bl	80009a8 <__aeabi_dcmpeq>
 800613e:	b108      	cbz	r0, 8006144 <_dtoa_r+0x6c4>
 8006140:	07e1      	lsls	r1, r4, #31
 8006142:	d422      	bmi.n	800618a <_dtoa_r+0x70a>
 8006144:	4628      	mov	r0, r5
 8006146:	4659      	mov	r1, fp
 8006148:	f000 faf4 	bl	8006734 <_Bfree>
 800614c:	2300      	movs	r3, #0
 800614e:	703b      	strb	r3, [r7, #0]
 8006150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006152:	f10a 0001 	add.w	r0, sl, #1
 8006156:	6018      	str	r0, [r3, #0]
 8006158:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800615a:	2b00      	cmp	r3, #0
 800615c:	f43f acde 	beq.w	8005b1c <_dtoa_r+0x9c>
 8006160:	601f      	str	r7, [r3, #0]
 8006162:	e4db      	b.n	8005b1c <_dtoa_r+0x9c>
 8006164:	4627      	mov	r7, r4
 8006166:	463b      	mov	r3, r7
 8006168:	461f      	mov	r7, r3
 800616a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800616e:	2a39      	cmp	r2, #57	; 0x39
 8006170:	d107      	bne.n	8006182 <_dtoa_r+0x702>
 8006172:	9a03      	ldr	r2, [sp, #12]
 8006174:	429a      	cmp	r2, r3
 8006176:	d1f7      	bne.n	8006168 <_dtoa_r+0x6e8>
 8006178:	2230      	movs	r2, #48	; 0x30
 800617a:	9903      	ldr	r1, [sp, #12]
 800617c:	f108 0801 	add.w	r8, r8, #1
 8006180:	700a      	strb	r2, [r1, #0]
 8006182:	781a      	ldrb	r2, [r3, #0]
 8006184:	3201      	adds	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e79e      	b.n	80060c8 <_dtoa_r+0x648>
 800618a:	46d0      	mov	r8, sl
 800618c:	e7eb      	b.n	8006166 <_dtoa_r+0x6e6>
 800618e:	2200      	movs	r2, #0
 8006190:	4b6e      	ldr	r3, [pc, #440]	; (800634c <_dtoa_r+0x8cc>)
 8006192:	f7fa f9a1 	bl	80004d8 <__aeabi_dmul>
 8006196:	2200      	movs	r2, #0
 8006198:	2300      	movs	r3, #0
 800619a:	4680      	mov	r8, r0
 800619c:	4689      	mov	r9, r1
 800619e:	f7fa fc03 	bl	80009a8 <__aeabi_dcmpeq>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d09b      	beq.n	80060de <_dtoa_r+0x65e>
 80061a6:	e7cd      	b.n	8006144 <_dtoa_r+0x6c4>
 80061a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	f000 80d0 	beq.w	8006350 <_dtoa_r+0x8d0>
 80061b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061b2:	2a01      	cmp	r2, #1
 80061b4:	f300 80ae 	bgt.w	8006314 <_dtoa_r+0x894>
 80061b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	f000 80a6 	beq.w	800630c <_dtoa_r+0x88c>
 80061c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061c6:	9f06      	ldr	r7, [sp, #24]
 80061c8:	9a06      	ldr	r2, [sp, #24]
 80061ca:	2101      	movs	r1, #1
 80061cc:	441a      	add	r2, r3
 80061ce:	9206      	str	r2, [sp, #24]
 80061d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d2:	4628      	mov	r0, r5
 80061d4:	441a      	add	r2, r3
 80061d6:	9209      	str	r2, [sp, #36]	; 0x24
 80061d8:	f000 fb62 	bl	80068a0 <__i2b>
 80061dc:	4606      	mov	r6, r0
 80061de:	2f00      	cmp	r7, #0
 80061e0:	dd0c      	ble.n	80061fc <_dtoa_r+0x77c>
 80061e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	dd09      	ble.n	80061fc <_dtoa_r+0x77c>
 80061e8:	42bb      	cmp	r3, r7
 80061ea:	bfa8      	it	ge
 80061ec:	463b      	movge	r3, r7
 80061ee:	9a06      	ldr	r2, [sp, #24]
 80061f0:	1aff      	subs	r7, r7, r3
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	9206      	str	r2, [sp, #24]
 80061f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	9309      	str	r3, [sp, #36]	; 0x24
 80061fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061fe:	b1f3      	cbz	r3, 800623e <_dtoa_r+0x7be>
 8006200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80a8 	beq.w	8006358 <_dtoa_r+0x8d8>
 8006208:	2c00      	cmp	r4, #0
 800620a:	dd10      	ble.n	800622e <_dtoa_r+0x7ae>
 800620c:	4631      	mov	r1, r6
 800620e:	4622      	mov	r2, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f000 fc03 	bl	8006a1c <__pow5mult>
 8006216:	465a      	mov	r2, fp
 8006218:	4601      	mov	r1, r0
 800621a:	4606      	mov	r6, r0
 800621c:	4628      	mov	r0, r5
 800621e:	f000 fb55 	bl	80068cc <__multiply>
 8006222:	4680      	mov	r8, r0
 8006224:	4659      	mov	r1, fp
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fa84 	bl	8006734 <_Bfree>
 800622c:	46c3      	mov	fp, r8
 800622e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006230:	1b1a      	subs	r2, r3, r4
 8006232:	d004      	beq.n	800623e <_dtoa_r+0x7be>
 8006234:	4659      	mov	r1, fp
 8006236:	4628      	mov	r0, r5
 8006238:	f000 fbf0 	bl	8006a1c <__pow5mult>
 800623c:	4683      	mov	fp, r0
 800623e:	2101      	movs	r1, #1
 8006240:	4628      	mov	r0, r5
 8006242:	f000 fb2d 	bl	80068a0 <__i2b>
 8006246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006248:	4604      	mov	r4, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	f340 8086 	ble.w	800635c <_dtoa_r+0x8dc>
 8006250:	461a      	mov	r2, r3
 8006252:	4601      	mov	r1, r0
 8006254:	4628      	mov	r0, r5
 8006256:	f000 fbe1 	bl	8006a1c <__pow5mult>
 800625a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800625c:	4604      	mov	r4, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	dd7f      	ble.n	8006362 <_dtoa_r+0x8e2>
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800626c:	6918      	ldr	r0, [r3, #16]
 800626e:	f000 fac9 	bl	8006804 <__hi0bits>
 8006272:	f1c0 0020 	rsb	r0, r0, #32
 8006276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006278:	4418      	add	r0, r3
 800627a:	f010 001f 	ands.w	r0, r0, #31
 800627e:	f000 8092 	beq.w	80063a6 <_dtoa_r+0x926>
 8006282:	f1c0 0320 	rsb	r3, r0, #32
 8006286:	2b04      	cmp	r3, #4
 8006288:	f340 808a 	ble.w	80063a0 <_dtoa_r+0x920>
 800628c:	f1c0 001c 	rsb	r0, r0, #28
 8006290:	9b06      	ldr	r3, [sp, #24]
 8006292:	4407      	add	r7, r0
 8006294:	4403      	add	r3, r0
 8006296:	9306      	str	r3, [sp, #24]
 8006298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629a:	4403      	add	r3, r0
 800629c:	9309      	str	r3, [sp, #36]	; 0x24
 800629e:	9b06      	ldr	r3, [sp, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	dd05      	ble.n	80062b0 <_dtoa_r+0x830>
 80062a4:	4659      	mov	r1, fp
 80062a6:	461a      	mov	r2, r3
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 fc11 	bl	8006ad0 <__lshift>
 80062ae:	4683      	mov	fp, r0
 80062b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dd05      	ble.n	80062c2 <_dtoa_r+0x842>
 80062b6:	4621      	mov	r1, r4
 80062b8:	461a      	mov	r2, r3
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 fc08 	bl	8006ad0 <__lshift>
 80062c0:	4604      	mov	r4, r0
 80062c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d070      	beq.n	80063aa <_dtoa_r+0x92a>
 80062c8:	4621      	mov	r1, r4
 80062ca:	4658      	mov	r0, fp
 80062cc:	f000 fc70 	bl	8006bb0 <__mcmp>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	da6a      	bge.n	80063aa <_dtoa_r+0x92a>
 80062d4:	2300      	movs	r3, #0
 80062d6:	4659      	mov	r1, fp
 80062d8:	220a      	movs	r2, #10
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 fa4c 	bl	8006778 <__multadd>
 80062e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e2:	4683      	mov	fp, r0
 80062e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8194 	beq.w	8006616 <_dtoa_r+0xb96>
 80062ee:	4631      	mov	r1, r6
 80062f0:	2300      	movs	r3, #0
 80062f2:	220a      	movs	r2, #10
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 fa3f 	bl	8006778 <__multadd>
 80062fa:	f1b9 0f00 	cmp.w	r9, #0
 80062fe:	4606      	mov	r6, r0
 8006300:	f300 8093 	bgt.w	800642a <_dtoa_r+0x9aa>
 8006304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006306:	2b02      	cmp	r3, #2
 8006308:	dc57      	bgt.n	80063ba <_dtoa_r+0x93a>
 800630a:	e08e      	b.n	800642a <_dtoa_r+0x9aa>
 800630c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800630e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006312:	e757      	b.n	80061c4 <_dtoa_r+0x744>
 8006314:	9b08      	ldr	r3, [sp, #32]
 8006316:	1e5c      	subs	r4, r3, #1
 8006318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800631a:	42a3      	cmp	r3, r4
 800631c:	bfb7      	itett	lt
 800631e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006320:	1b1c      	subge	r4, r3, r4
 8006322:	1ae2      	sublt	r2, r4, r3
 8006324:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006326:	bfbe      	ittt	lt
 8006328:	940a      	strlt	r4, [sp, #40]	; 0x28
 800632a:	189b      	addlt	r3, r3, r2
 800632c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800632e:	9b08      	ldr	r3, [sp, #32]
 8006330:	bfb8      	it	lt
 8006332:	2400      	movlt	r4, #0
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfbb      	ittet	lt
 8006338:	9b06      	ldrlt	r3, [sp, #24]
 800633a:	9a08      	ldrlt	r2, [sp, #32]
 800633c:	9f06      	ldrge	r7, [sp, #24]
 800633e:	1a9f      	sublt	r7, r3, r2
 8006340:	bfac      	ite	ge
 8006342:	9b08      	ldrge	r3, [sp, #32]
 8006344:	2300      	movlt	r3, #0
 8006346:	e73f      	b.n	80061c8 <_dtoa_r+0x748>
 8006348:	3fe00000 	.word	0x3fe00000
 800634c:	40240000 	.word	0x40240000
 8006350:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006352:	9f06      	ldr	r7, [sp, #24]
 8006354:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006356:	e742      	b.n	80061de <_dtoa_r+0x75e>
 8006358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800635a:	e76b      	b.n	8006234 <_dtoa_r+0x7b4>
 800635c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800635e:	2b01      	cmp	r3, #1
 8006360:	dc19      	bgt.n	8006396 <_dtoa_r+0x916>
 8006362:	9b04      	ldr	r3, [sp, #16]
 8006364:	b9bb      	cbnz	r3, 8006396 <_dtoa_r+0x916>
 8006366:	9b05      	ldr	r3, [sp, #20]
 8006368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800636c:	b99b      	cbnz	r3, 8006396 <_dtoa_r+0x916>
 800636e:	9b05      	ldr	r3, [sp, #20]
 8006370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006374:	0d1b      	lsrs	r3, r3, #20
 8006376:	051b      	lsls	r3, r3, #20
 8006378:	b183      	cbz	r3, 800639c <_dtoa_r+0x91c>
 800637a:	f04f 0801 	mov.w	r8, #1
 800637e:	9b06      	ldr	r3, [sp, #24]
 8006380:	3301      	adds	r3, #1
 8006382:	9306      	str	r3, [sp, #24]
 8006384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006386:	3301      	adds	r3, #1
 8006388:	9309      	str	r3, [sp, #36]	; 0x24
 800638a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	f47f af6a 	bne.w	8006266 <_dtoa_r+0x7e6>
 8006392:	2001      	movs	r0, #1
 8006394:	e76f      	b.n	8006276 <_dtoa_r+0x7f6>
 8006396:	f04f 0800 	mov.w	r8, #0
 800639a:	e7f6      	b.n	800638a <_dtoa_r+0x90a>
 800639c:	4698      	mov	r8, r3
 800639e:	e7f4      	b.n	800638a <_dtoa_r+0x90a>
 80063a0:	f43f af7d 	beq.w	800629e <_dtoa_r+0x81e>
 80063a4:	4618      	mov	r0, r3
 80063a6:	301c      	adds	r0, #28
 80063a8:	e772      	b.n	8006290 <_dtoa_r+0x810>
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dc36      	bgt.n	800641e <_dtoa_r+0x99e>
 80063b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	dd33      	ble.n	800641e <_dtoa_r+0x99e>
 80063b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063ba:	f1b9 0f00 	cmp.w	r9, #0
 80063be:	d10d      	bne.n	80063dc <_dtoa_r+0x95c>
 80063c0:	4621      	mov	r1, r4
 80063c2:	464b      	mov	r3, r9
 80063c4:	2205      	movs	r2, #5
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 f9d6 	bl	8006778 <__multadd>
 80063cc:	4601      	mov	r1, r0
 80063ce:	4604      	mov	r4, r0
 80063d0:	4658      	mov	r0, fp
 80063d2:	f000 fbed 	bl	8006bb0 <__mcmp>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f73f adb8 	bgt.w	8005f4c <_dtoa_r+0x4cc>
 80063dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063de:	9f03      	ldr	r7, [sp, #12]
 80063e0:	ea6f 0a03 	mvn.w	sl, r3
 80063e4:	f04f 0800 	mov.w	r8, #0
 80063e8:	4621      	mov	r1, r4
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 f9a2 	bl	8006734 <_Bfree>
 80063f0:	2e00      	cmp	r6, #0
 80063f2:	f43f aea7 	beq.w	8006144 <_dtoa_r+0x6c4>
 80063f6:	f1b8 0f00 	cmp.w	r8, #0
 80063fa:	d005      	beq.n	8006408 <_dtoa_r+0x988>
 80063fc:	45b0      	cmp	r8, r6
 80063fe:	d003      	beq.n	8006408 <_dtoa_r+0x988>
 8006400:	4641      	mov	r1, r8
 8006402:	4628      	mov	r0, r5
 8006404:	f000 f996 	bl	8006734 <_Bfree>
 8006408:	4631      	mov	r1, r6
 800640a:	4628      	mov	r0, r5
 800640c:	f000 f992 	bl	8006734 <_Bfree>
 8006410:	e698      	b.n	8006144 <_dtoa_r+0x6c4>
 8006412:	2400      	movs	r4, #0
 8006414:	4626      	mov	r6, r4
 8006416:	e7e1      	b.n	80063dc <_dtoa_r+0x95c>
 8006418:	46c2      	mov	sl, r8
 800641a:	4626      	mov	r6, r4
 800641c:	e596      	b.n	8005f4c <_dtoa_r+0x4cc>
 800641e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80fd 	beq.w	8006624 <_dtoa_r+0xba4>
 800642a:	2f00      	cmp	r7, #0
 800642c:	dd05      	ble.n	800643a <_dtoa_r+0x9ba>
 800642e:	4631      	mov	r1, r6
 8006430:	463a      	mov	r2, r7
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fb4c 	bl	8006ad0 <__lshift>
 8006438:	4606      	mov	r6, r0
 800643a:	f1b8 0f00 	cmp.w	r8, #0
 800643e:	d05c      	beq.n	80064fa <_dtoa_r+0xa7a>
 8006440:	4628      	mov	r0, r5
 8006442:	6871      	ldr	r1, [r6, #4]
 8006444:	f000 f936 	bl	80066b4 <_Balloc>
 8006448:	4607      	mov	r7, r0
 800644a:	b928      	cbnz	r0, 8006458 <_dtoa_r+0x9d8>
 800644c:	4602      	mov	r2, r0
 800644e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006452:	4b7f      	ldr	r3, [pc, #508]	; (8006650 <_dtoa_r+0xbd0>)
 8006454:	f7ff bb28 	b.w	8005aa8 <_dtoa_r+0x28>
 8006458:	6932      	ldr	r2, [r6, #16]
 800645a:	f106 010c 	add.w	r1, r6, #12
 800645e:	3202      	adds	r2, #2
 8006460:	0092      	lsls	r2, r2, #2
 8006462:	300c      	adds	r0, #12
 8006464:	f000 f90c 	bl	8006680 <memcpy>
 8006468:	2201      	movs	r2, #1
 800646a:	4639      	mov	r1, r7
 800646c:	4628      	mov	r0, r5
 800646e:	f000 fb2f 	bl	8006ad0 <__lshift>
 8006472:	46b0      	mov	r8, r6
 8006474:	4606      	mov	r6, r0
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	9308      	str	r3, [sp, #32]
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	444b      	add	r3, r9
 8006480:	930a      	str	r3, [sp, #40]	; 0x28
 8006482:	9b04      	ldr	r3, [sp, #16]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	9309      	str	r3, [sp, #36]	; 0x24
 800648a:	9b08      	ldr	r3, [sp, #32]
 800648c:	4621      	mov	r1, r4
 800648e:	3b01      	subs	r3, #1
 8006490:	4658      	mov	r0, fp
 8006492:	9304      	str	r3, [sp, #16]
 8006494:	f7ff fa68 	bl	8005968 <quorem>
 8006498:	4603      	mov	r3, r0
 800649a:	4641      	mov	r1, r8
 800649c:	3330      	adds	r3, #48	; 0x30
 800649e:	9006      	str	r0, [sp, #24]
 80064a0:	4658      	mov	r0, fp
 80064a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064a4:	f000 fb84 	bl	8006bb0 <__mcmp>
 80064a8:	4632      	mov	r2, r6
 80064aa:	4681      	mov	r9, r0
 80064ac:	4621      	mov	r1, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fb9a 	bl	8006be8 <__mdiff>
 80064b4:	68c2      	ldr	r2, [r0, #12]
 80064b6:	4607      	mov	r7, r0
 80064b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ba:	bb02      	cbnz	r2, 80064fe <_dtoa_r+0xa7e>
 80064bc:	4601      	mov	r1, r0
 80064be:	4658      	mov	r0, fp
 80064c0:	f000 fb76 	bl	8006bb0 <__mcmp>
 80064c4:	4602      	mov	r2, r0
 80064c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c8:	4639      	mov	r1, r7
 80064ca:	4628      	mov	r0, r5
 80064cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80064d0:	f000 f930 	bl	8006734 <_Bfree>
 80064d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064d8:	9f08      	ldr	r7, [sp, #32]
 80064da:	ea43 0102 	orr.w	r1, r3, r2
 80064de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e0:	430b      	orrs	r3, r1
 80064e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e4:	d10d      	bne.n	8006502 <_dtoa_r+0xa82>
 80064e6:	2b39      	cmp	r3, #57	; 0x39
 80064e8:	d029      	beq.n	800653e <_dtoa_r+0xabe>
 80064ea:	f1b9 0f00 	cmp.w	r9, #0
 80064ee:	dd01      	ble.n	80064f4 <_dtoa_r+0xa74>
 80064f0:	9b06      	ldr	r3, [sp, #24]
 80064f2:	3331      	adds	r3, #49	; 0x31
 80064f4:	9a04      	ldr	r2, [sp, #16]
 80064f6:	7013      	strb	r3, [r2, #0]
 80064f8:	e776      	b.n	80063e8 <_dtoa_r+0x968>
 80064fa:	4630      	mov	r0, r6
 80064fc:	e7b9      	b.n	8006472 <_dtoa_r+0x9f2>
 80064fe:	2201      	movs	r2, #1
 8006500:	e7e2      	b.n	80064c8 <_dtoa_r+0xa48>
 8006502:	f1b9 0f00 	cmp.w	r9, #0
 8006506:	db06      	blt.n	8006516 <_dtoa_r+0xa96>
 8006508:	9922      	ldr	r1, [sp, #136]	; 0x88
 800650a:	ea41 0909 	orr.w	r9, r1, r9
 800650e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006510:	ea59 0101 	orrs.w	r1, r9, r1
 8006514:	d120      	bne.n	8006558 <_dtoa_r+0xad8>
 8006516:	2a00      	cmp	r2, #0
 8006518:	ddec      	ble.n	80064f4 <_dtoa_r+0xa74>
 800651a:	4659      	mov	r1, fp
 800651c:	2201      	movs	r2, #1
 800651e:	4628      	mov	r0, r5
 8006520:	9308      	str	r3, [sp, #32]
 8006522:	f000 fad5 	bl	8006ad0 <__lshift>
 8006526:	4621      	mov	r1, r4
 8006528:	4683      	mov	fp, r0
 800652a:	f000 fb41 	bl	8006bb0 <__mcmp>
 800652e:	2800      	cmp	r0, #0
 8006530:	9b08      	ldr	r3, [sp, #32]
 8006532:	dc02      	bgt.n	800653a <_dtoa_r+0xaba>
 8006534:	d1de      	bne.n	80064f4 <_dtoa_r+0xa74>
 8006536:	07da      	lsls	r2, r3, #31
 8006538:	d5dc      	bpl.n	80064f4 <_dtoa_r+0xa74>
 800653a:	2b39      	cmp	r3, #57	; 0x39
 800653c:	d1d8      	bne.n	80064f0 <_dtoa_r+0xa70>
 800653e:	2339      	movs	r3, #57	; 0x39
 8006540:	9a04      	ldr	r2, [sp, #16]
 8006542:	7013      	strb	r3, [r2, #0]
 8006544:	463b      	mov	r3, r7
 8006546:	461f      	mov	r7, r3
 8006548:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800654c:	3b01      	subs	r3, #1
 800654e:	2a39      	cmp	r2, #57	; 0x39
 8006550:	d050      	beq.n	80065f4 <_dtoa_r+0xb74>
 8006552:	3201      	adds	r2, #1
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	e747      	b.n	80063e8 <_dtoa_r+0x968>
 8006558:	2a00      	cmp	r2, #0
 800655a:	dd03      	ble.n	8006564 <_dtoa_r+0xae4>
 800655c:	2b39      	cmp	r3, #57	; 0x39
 800655e:	d0ee      	beq.n	800653e <_dtoa_r+0xabe>
 8006560:	3301      	adds	r3, #1
 8006562:	e7c7      	b.n	80064f4 <_dtoa_r+0xa74>
 8006564:	9a08      	ldr	r2, [sp, #32]
 8006566:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006568:	f802 3c01 	strb.w	r3, [r2, #-1]
 800656c:	428a      	cmp	r2, r1
 800656e:	d02a      	beq.n	80065c6 <_dtoa_r+0xb46>
 8006570:	4659      	mov	r1, fp
 8006572:	2300      	movs	r3, #0
 8006574:	220a      	movs	r2, #10
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f8fe 	bl	8006778 <__multadd>
 800657c:	45b0      	cmp	r8, r6
 800657e:	4683      	mov	fp, r0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	f04f 020a 	mov.w	r2, #10
 8006588:	4641      	mov	r1, r8
 800658a:	4628      	mov	r0, r5
 800658c:	d107      	bne.n	800659e <_dtoa_r+0xb1e>
 800658e:	f000 f8f3 	bl	8006778 <__multadd>
 8006592:	4680      	mov	r8, r0
 8006594:	4606      	mov	r6, r0
 8006596:	9b08      	ldr	r3, [sp, #32]
 8006598:	3301      	adds	r3, #1
 800659a:	9308      	str	r3, [sp, #32]
 800659c:	e775      	b.n	800648a <_dtoa_r+0xa0a>
 800659e:	f000 f8eb 	bl	8006778 <__multadd>
 80065a2:	4631      	mov	r1, r6
 80065a4:	4680      	mov	r8, r0
 80065a6:	2300      	movs	r3, #0
 80065a8:	220a      	movs	r2, #10
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 f8e4 	bl	8006778 <__multadd>
 80065b0:	4606      	mov	r6, r0
 80065b2:	e7f0      	b.n	8006596 <_dtoa_r+0xb16>
 80065b4:	f1b9 0f00 	cmp.w	r9, #0
 80065b8:	bfcc      	ite	gt
 80065ba:	464f      	movgt	r7, r9
 80065bc:	2701      	movle	r7, #1
 80065be:	f04f 0800 	mov.w	r8, #0
 80065c2:	9a03      	ldr	r2, [sp, #12]
 80065c4:	4417      	add	r7, r2
 80065c6:	4659      	mov	r1, fp
 80065c8:	2201      	movs	r2, #1
 80065ca:	4628      	mov	r0, r5
 80065cc:	9308      	str	r3, [sp, #32]
 80065ce:	f000 fa7f 	bl	8006ad0 <__lshift>
 80065d2:	4621      	mov	r1, r4
 80065d4:	4683      	mov	fp, r0
 80065d6:	f000 faeb 	bl	8006bb0 <__mcmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	dcb2      	bgt.n	8006544 <_dtoa_r+0xac4>
 80065de:	d102      	bne.n	80065e6 <_dtoa_r+0xb66>
 80065e0:	9b08      	ldr	r3, [sp, #32]
 80065e2:	07db      	lsls	r3, r3, #31
 80065e4:	d4ae      	bmi.n	8006544 <_dtoa_r+0xac4>
 80065e6:	463b      	mov	r3, r7
 80065e8:	461f      	mov	r7, r3
 80065ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ee:	2a30      	cmp	r2, #48	; 0x30
 80065f0:	d0fa      	beq.n	80065e8 <_dtoa_r+0xb68>
 80065f2:	e6f9      	b.n	80063e8 <_dtoa_r+0x968>
 80065f4:	9a03      	ldr	r2, [sp, #12]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d1a5      	bne.n	8006546 <_dtoa_r+0xac6>
 80065fa:	2331      	movs	r3, #49	; 0x31
 80065fc:	f10a 0a01 	add.w	sl, sl, #1
 8006600:	e779      	b.n	80064f6 <_dtoa_r+0xa76>
 8006602:	4b14      	ldr	r3, [pc, #80]	; (8006654 <_dtoa_r+0xbd4>)
 8006604:	f7ff baa8 	b.w	8005b58 <_dtoa_r+0xd8>
 8006608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800660a:	2b00      	cmp	r3, #0
 800660c:	f47f aa81 	bne.w	8005b12 <_dtoa_r+0x92>
 8006610:	4b11      	ldr	r3, [pc, #68]	; (8006658 <_dtoa_r+0xbd8>)
 8006612:	f7ff baa1 	b.w	8005b58 <_dtoa_r+0xd8>
 8006616:	f1b9 0f00 	cmp.w	r9, #0
 800661a:	dc03      	bgt.n	8006624 <_dtoa_r+0xba4>
 800661c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800661e:	2b02      	cmp	r3, #2
 8006620:	f73f aecb 	bgt.w	80063ba <_dtoa_r+0x93a>
 8006624:	9f03      	ldr	r7, [sp, #12]
 8006626:	4621      	mov	r1, r4
 8006628:	4658      	mov	r0, fp
 800662a:	f7ff f99d 	bl	8005968 <quorem>
 800662e:	9a03      	ldr	r2, [sp, #12]
 8006630:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006634:	f807 3b01 	strb.w	r3, [r7], #1
 8006638:	1aba      	subs	r2, r7, r2
 800663a:	4591      	cmp	r9, r2
 800663c:	ddba      	ble.n	80065b4 <_dtoa_r+0xb34>
 800663e:	4659      	mov	r1, fp
 8006640:	2300      	movs	r3, #0
 8006642:	220a      	movs	r2, #10
 8006644:	4628      	mov	r0, r5
 8006646:	f000 f897 	bl	8006778 <__multadd>
 800664a:	4683      	mov	fp, r0
 800664c:	e7eb      	b.n	8006626 <_dtoa_r+0xba6>
 800664e:	bf00      	nop
 8006650:	080079e7 	.word	0x080079e7
 8006654:	08007944 	.word	0x08007944
 8006658:	08007968 	.word	0x08007968

0800665c <_localeconv_r>:
 800665c:	4800      	ldr	r0, [pc, #0]	; (8006660 <_localeconv_r+0x4>)
 800665e:	4770      	bx	lr
 8006660:	2000022c 	.word	0x2000022c

08006664 <memchr>:
 8006664:	4603      	mov	r3, r0
 8006666:	b510      	push	{r4, lr}
 8006668:	b2c9      	uxtb	r1, r1
 800666a:	4402      	add	r2, r0
 800666c:	4293      	cmp	r3, r2
 800666e:	4618      	mov	r0, r3
 8006670:	d101      	bne.n	8006676 <memchr+0x12>
 8006672:	2000      	movs	r0, #0
 8006674:	e003      	b.n	800667e <memchr+0x1a>
 8006676:	7804      	ldrb	r4, [r0, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	428c      	cmp	r4, r1
 800667c:	d1f6      	bne.n	800666c <memchr+0x8>
 800667e:	bd10      	pop	{r4, pc}

08006680 <memcpy>:
 8006680:	440a      	add	r2, r1
 8006682:	4291      	cmp	r1, r2
 8006684:	f100 33ff 	add.w	r3, r0, #4294967295
 8006688:	d100      	bne.n	800668c <memcpy+0xc>
 800668a:	4770      	bx	lr
 800668c:	b510      	push	{r4, lr}
 800668e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006692:	4291      	cmp	r1, r2
 8006694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006698:	d1f9      	bne.n	800668e <memcpy+0xe>
 800669a:	bd10      	pop	{r4, pc}

0800669c <__malloc_lock>:
 800669c:	4801      	ldr	r0, [pc, #4]	; (80066a4 <__malloc_lock+0x8>)
 800669e:	f000 bbd0 	b.w	8006e42 <__retarget_lock_acquire_recursive>
 80066a2:	bf00      	nop
 80066a4:	2000051c 	.word	0x2000051c

080066a8 <__malloc_unlock>:
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <__malloc_unlock+0x8>)
 80066aa:	f000 bbcb 	b.w	8006e44 <__retarget_lock_release_recursive>
 80066ae:	bf00      	nop
 80066b0:	2000051c 	.word	0x2000051c

080066b4 <_Balloc>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066b8:	4604      	mov	r4, r0
 80066ba:	460d      	mov	r5, r1
 80066bc:	b976      	cbnz	r6, 80066dc <_Balloc+0x28>
 80066be:	2010      	movs	r0, #16
 80066c0:	f7fe fbee 	bl	8004ea0 <malloc>
 80066c4:	4602      	mov	r2, r0
 80066c6:	6260      	str	r0, [r4, #36]	; 0x24
 80066c8:	b920      	cbnz	r0, 80066d4 <_Balloc+0x20>
 80066ca:	2166      	movs	r1, #102	; 0x66
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <_Balloc+0x78>)
 80066ce:	4818      	ldr	r0, [pc, #96]	; (8006730 <_Balloc+0x7c>)
 80066d0:	f000 fb86 	bl	8006de0 <__assert_func>
 80066d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066d8:	6006      	str	r6, [r0, #0]
 80066da:	60c6      	str	r6, [r0, #12]
 80066dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066de:	68f3      	ldr	r3, [r6, #12]
 80066e0:	b183      	cbz	r3, 8006704 <_Balloc+0x50>
 80066e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066ea:	b9b8      	cbnz	r0, 800671c <_Balloc+0x68>
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa01 f605 	lsl.w	r6, r1, r5
 80066f2:	1d72      	adds	r2, r6, #5
 80066f4:	4620      	mov	r0, r4
 80066f6:	0092      	lsls	r2, r2, #2
 80066f8:	f000 fb5e 	bl	8006db8 <_calloc_r>
 80066fc:	b160      	cbz	r0, 8006718 <_Balloc+0x64>
 80066fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006702:	e00e      	b.n	8006722 <_Balloc+0x6e>
 8006704:	2221      	movs	r2, #33	; 0x21
 8006706:	2104      	movs	r1, #4
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fb55 	bl	8006db8 <_calloc_r>
 800670e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006710:	60f0      	str	r0, [r6, #12]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e4      	bne.n	80066e2 <_Balloc+0x2e>
 8006718:	2000      	movs	r0, #0
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	6802      	ldr	r2, [r0, #0]
 800671e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006722:	2300      	movs	r3, #0
 8006724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006728:	e7f7      	b.n	800671a <_Balloc+0x66>
 800672a:	bf00      	nop
 800672c:	08007975 	.word	0x08007975
 8006730:	080079f8 	.word	0x080079f8

08006734 <_Bfree>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006738:	4605      	mov	r5, r0
 800673a:	460c      	mov	r4, r1
 800673c:	b976      	cbnz	r6, 800675c <_Bfree+0x28>
 800673e:	2010      	movs	r0, #16
 8006740:	f7fe fbae 	bl	8004ea0 <malloc>
 8006744:	4602      	mov	r2, r0
 8006746:	6268      	str	r0, [r5, #36]	; 0x24
 8006748:	b920      	cbnz	r0, 8006754 <_Bfree+0x20>
 800674a:	218a      	movs	r1, #138	; 0x8a
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <_Bfree+0x3c>)
 800674e:	4809      	ldr	r0, [pc, #36]	; (8006774 <_Bfree+0x40>)
 8006750:	f000 fb46 	bl	8006de0 <__assert_func>
 8006754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006758:	6006      	str	r6, [r0, #0]
 800675a:	60c6      	str	r6, [r0, #12]
 800675c:	b13c      	cbz	r4, 800676e <_Bfree+0x3a>
 800675e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006760:	6862      	ldr	r2, [r4, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006768:	6021      	str	r1, [r4, #0]
 800676a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	08007975 	.word	0x08007975
 8006774:	080079f8 	.word	0x080079f8

08006778 <__multadd>:
 8006778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677c:	4607      	mov	r7, r0
 800677e:	460c      	mov	r4, r1
 8006780:	461e      	mov	r6, r3
 8006782:	2000      	movs	r0, #0
 8006784:	690d      	ldr	r5, [r1, #16]
 8006786:	f101 0c14 	add.w	ip, r1, #20
 800678a:	f8dc 3000 	ldr.w	r3, [ip]
 800678e:	3001      	adds	r0, #1
 8006790:	b299      	uxth	r1, r3
 8006792:	fb02 6101 	mla	r1, r2, r1, r6
 8006796:	0c1e      	lsrs	r6, r3, #16
 8006798:	0c0b      	lsrs	r3, r1, #16
 800679a:	fb02 3306 	mla	r3, r2, r6, r3
 800679e:	b289      	uxth	r1, r1
 80067a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067a4:	4285      	cmp	r5, r0
 80067a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067aa:	f84c 1b04 	str.w	r1, [ip], #4
 80067ae:	dcec      	bgt.n	800678a <__multadd+0x12>
 80067b0:	b30e      	cbz	r6, 80067f6 <__multadd+0x7e>
 80067b2:	68a3      	ldr	r3, [r4, #8]
 80067b4:	42ab      	cmp	r3, r5
 80067b6:	dc19      	bgt.n	80067ec <__multadd+0x74>
 80067b8:	6861      	ldr	r1, [r4, #4]
 80067ba:	4638      	mov	r0, r7
 80067bc:	3101      	adds	r1, #1
 80067be:	f7ff ff79 	bl	80066b4 <_Balloc>
 80067c2:	4680      	mov	r8, r0
 80067c4:	b928      	cbnz	r0, 80067d2 <__multadd+0x5a>
 80067c6:	4602      	mov	r2, r0
 80067c8:	21b5      	movs	r1, #181	; 0xb5
 80067ca:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <__multadd+0x84>)
 80067cc:	480c      	ldr	r0, [pc, #48]	; (8006800 <__multadd+0x88>)
 80067ce:	f000 fb07 	bl	8006de0 <__assert_func>
 80067d2:	6922      	ldr	r2, [r4, #16]
 80067d4:	f104 010c 	add.w	r1, r4, #12
 80067d8:	3202      	adds	r2, #2
 80067da:	0092      	lsls	r2, r2, #2
 80067dc:	300c      	adds	r0, #12
 80067de:	f7ff ff4f 	bl	8006680 <memcpy>
 80067e2:	4621      	mov	r1, r4
 80067e4:	4638      	mov	r0, r7
 80067e6:	f7ff ffa5 	bl	8006734 <_Bfree>
 80067ea:	4644      	mov	r4, r8
 80067ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067f0:	3501      	adds	r5, #1
 80067f2:	615e      	str	r6, [r3, #20]
 80067f4:	6125      	str	r5, [r4, #16]
 80067f6:	4620      	mov	r0, r4
 80067f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067fc:	080079e7 	.word	0x080079e7
 8006800:	080079f8 	.word	0x080079f8

08006804 <__hi0bits>:
 8006804:	0c02      	lsrs	r2, r0, #16
 8006806:	0412      	lsls	r2, r2, #16
 8006808:	4603      	mov	r3, r0
 800680a:	b9ca      	cbnz	r2, 8006840 <__hi0bits+0x3c>
 800680c:	0403      	lsls	r3, r0, #16
 800680e:	2010      	movs	r0, #16
 8006810:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006814:	bf04      	itt	eq
 8006816:	021b      	lsleq	r3, r3, #8
 8006818:	3008      	addeq	r0, #8
 800681a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800681e:	bf04      	itt	eq
 8006820:	011b      	lsleq	r3, r3, #4
 8006822:	3004      	addeq	r0, #4
 8006824:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006828:	bf04      	itt	eq
 800682a:	009b      	lsleq	r3, r3, #2
 800682c:	3002      	addeq	r0, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	db05      	blt.n	800683e <__hi0bits+0x3a>
 8006832:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006836:	f100 0001 	add.w	r0, r0, #1
 800683a:	bf08      	it	eq
 800683c:	2020      	moveq	r0, #32
 800683e:	4770      	bx	lr
 8006840:	2000      	movs	r0, #0
 8006842:	e7e5      	b.n	8006810 <__hi0bits+0xc>

08006844 <__lo0bits>:
 8006844:	6803      	ldr	r3, [r0, #0]
 8006846:	4602      	mov	r2, r0
 8006848:	f013 0007 	ands.w	r0, r3, #7
 800684c:	d00b      	beq.n	8006866 <__lo0bits+0x22>
 800684e:	07d9      	lsls	r1, r3, #31
 8006850:	d421      	bmi.n	8006896 <__lo0bits+0x52>
 8006852:	0798      	lsls	r0, r3, #30
 8006854:	bf49      	itett	mi
 8006856:	085b      	lsrmi	r3, r3, #1
 8006858:	089b      	lsrpl	r3, r3, #2
 800685a:	2001      	movmi	r0, #1
 800685c:	6013      	strmi	r3, [r2, #0]
 800685e:	bf5c      	itt	pl
 8006860:	2002      	movpl	r0, #2
 8006862:	6013      	strpl	r3, [r2, #0]
 8006864:	4770      	bx	lr
 8006866:	b299      	uxth	r1, r3
 8006868:	b909      	cbnz	r1, 800686e <__lo0bits+0x2a>
 800686a:	2010      	movs	r0, #16
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	b2d9      	uxtb	r1, r3
 8006870:	b909      	cbnz	r1, 8006876 <__lo0bits+0x32>
 8006872:	3008      	adds	r0, #8
 8006874:	0a1b      	lsrs	r3, r3, #8
 8006876:	0719      	lsls	r1, r3, #28
 8006878:	bf04      	itt	eq
 800687a:	091b      	lsreq	r3, r3, #4
 800687c:	3004      	addeq	r0, #4
 800687e:	0799      	lsls	r1, r3, #30
 8006880:	bf04      	itt	eq
 8006882:	089b      	lsreq	r3, r3, #2
 8006884:	3002      	addeq	r0, #2
 8006886:	07d9      	lsls	r1, r3, #31
 8006888:	d403      	bmi.n	8006892 <__lo0bits+0x4e>
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	f100 0001 	add.w	r0, r0, #1
 8006890:	d003      	beq.n	800689a <__lo0bits+0x56>
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	4770      	bx	lr
 8006896:	2000      	movs	r0, #0
 8006898:	4770      	bx	lr
 800689a:	2020      	movs	r0, #32
 800689c:	4770      	bx	lr
	...

080068a0 <__i2b>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	460c      	mov	r4, r1
 80068a4:	2101      	movs	r1, #1
 80068a6:	f7ff ff05 	bl	80066b4 <_Balloc>
 80068aa:	4602      	mov	r2, r0
 80068ac:	b928      	cbnz	r0, 80068ba <__i2b+0x1a>
 80068ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80068b2:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <__i2b+0x24>)
 80068b4:	4804      	ldr	r0, [pc, #16]	; (80068c8 <__i2b+0x28>)
 80068b6:	f000 fa93 	bl	8006de0 <__assert_func>
 80068ba:	2301      	movs	r3, #1
 80068bc:	6144      	str	r4, [r0, #20]
 80068be:	6103      	str	r3, [r0, #16]
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	bf00      	nop
 80068c4:	080079e7 	.word	0x080079e7
 80068c8:	080079f8 	.word	0x080079f8

080068cc <__multiply>:
 80068cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d0:	4691      	mov	r9, r2
 80068d2:	690a      	ldr	r2, [r1, #16]
 80068d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068d8:	460c      	mov	r4, r1
 80068da:	429a      	cmp	r2, r3
 80068dc:	bfbe      	ittt	lt
 80068de:	460b      	movlt	r3, r1
 80068e0:	464c      	movlt	r4, r9
 80068e2:	4699      	movlt	r9, r3
 80068e4:	6927      	ldr	r7, [r4, #16]
 80068e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	6861      	ldr	r1, [r4, #4]
 80068ee:	eb07 060a 	add.w	r6, r7, sl
 80068f2:	42b3      	cmp	r3, r6
 80068f4:	b085      	sub	sp, #20
 80068f6:	bfb8      	it	lt
 80068f8:	3101      	addlt	r1, #1
 80068fa:	f7ff fedb 	bl	80066b4 <_Balloc>
 80068fe:	b930      	cbnz	r0, 800690e <__multiply+0x42>
 8006900:	4602      	mov	r2, r0
 8006902:	f240 115d 	movw	r1, #349	; 0x15d
 8006906:	4b43      	ldr	r3, [pc, #268]	; (8006a14 <__multiply+0x148>)
 8006908:	4843      	ldr	r0, [pc, #268]	; (8006a18 <__multiply+0x14c>)
 800690a:	f000 fa69 	bl	8006de0 <__assert_func>
 800690e:	f100 0514 	add.w	r5, r0, #20
 8006912:	462b      	mov	r3, r5
 8006914:	2200      	movs	r2, #0
 8006916:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800691a:	4543      	cmp	r3, r8
 800691c:	d321      	bcc.n	8006962 <__multiply+0x96>
 800691e:	f104 0314 	add.w	r3, r4, #20
 8006922:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006926:	f109 0314 	add.w	r3, r9, #20
 800692a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800692e:	9202      	str	r2, [sp, #8]
 8006930:	1b3a      	subs	r2, r7, r4
 8006932:	3a15      	subs	r2, #21
 8006934:	f022 0203 	bic.w	r2, r2, #3
 8006938:	3204      	adds	r2, #4
 800693a:	f104 0115 	add.w	r1, r4, #21
 800693e:	428f      	cmp	r7, r1
 8006940:	bf38      	it	cc
 8006942:	2204      	movcc	r2, #4
 8006944:	9201      	str	r2, [sp, #4]
 8006946:	9a02      	ldr	r2, [sp, #8]
 8006948:	9303      	str	r3, [sp, #12]
 800694a:	429a      	cmp	r2, r3
 800694c:	d80c      	bhi.n	8006968 <__multiply+0x9c>
 800694e:	2e00      	cmp	r6, #0
 8006950:	dd03      	ble.n	800695a <__multiply+0x8e>
 8006952:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006956:	2b00      	cmp	r3, #0
 8006958:	d059      	beq.n	8006a0e <__multiply+0x142>
 800695a:	6106      	str	r6, [r0, #16]
 800695c:	b005      	add	sp, #20
 800695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006962:	f843 2b04 	str.w	r2, [r3], #4
 8006966:	e7d8      	b.n	800691a <__multiply+0x4e>
 8006968:	f8b3 a000 	ldrh.w	sl, [r3]
 800696c:	f1ba 0f00 	cmp.w	sl, #0
 8006970:	d023      	beq.n	80069ba <__multiply+0xee>
 8006972:	46a9      	mov	r9, r5
 8006974:	f04f 0c00 	mov.w	ip, #0
 8006978:	f104 0e14 	add.w	lr, r4, #20
 800697c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006980:	f8d9 1000 	ldr.w	r1, [r9]
 8006984:	fa1f fb82 	uxth.w	fp, r2
 8006988:	b289      	uxth	r1, r1
 800698a:	fb0a 110b 	mla	r1, sl, fp, r1
 800698e:	4461      	add	r1, ip
 8006990:	f8d9 c000 	ldr.w	ip, [r9]
 8006994:	0c12      	lsrs	r2, r2, #16
 8006996:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800699a:	fb0a c202 	mla	r2, sl, r2, ip
 800699e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80069a2:	b289      	uxth	r1, r1
 80069a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069a8:	4577      	cmp	r7, lr
 80069aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069ae:	f849 1b04 	str.w	r1, [r9], #4
 80069b2:	d8e3      	bhi.n	800697c <__multiply+0xb0>
 80069b4:	9a01      	ldr	r2, [sp, #4]
 80069b6:	f845 c002 	str.w	ip, [r5, r2]
 80069ba:	9a03      	ldr	r2, [sp, #12]
 80069bc:	3304      	adds	r3, #4
 80069be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80069c2:	f1b9 0f00 	cmp.w	r9, #0
 80069c6:	d020      	beq.n	8006a0a <__multiply+0x13e>
 80069c8:	46ae      	mov	lr, r5
 80069ca:	f04f 0a00 	mov.w	sl, #0
 80069ce:	6829      	ldr	r1, [r5, #0]
 80069d0:	f104 0c14 	add.w	ip, r4, #20
 80069d4:	f8bc b000 	ldrh.w	fp, [ip]
 80069d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069dc:	b289      	uxth	r1, r1
 80069de:	fb09 220b 	mla	r2, r9, fp, r2
 80069e2:	4492      	add	sl, r2
 80069e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80069e8:	f84e 1b04 	str.w	r1, [lr], #4
 80069ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069f0:	f8be 1000 	ldrh.w	r1, [lr]
 80069f4:	0c12      	lsrs	r2, r2, #16
 80069f6:	fb09 1102 	mla	r1, r9, r2, r1
 80069fa:	4567      	cmp	r7, ip
 80069fc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a04:	d8e6      	bhi.n	80069d4 <__multiply+0x108>
 8006a06:	9a01      	ldr	r2, [sp, #4]
 8006a08:	50a9      	str	r1, [r5, r2]
 8006a0a:	3504      	adds	r5, #4
 8006a0c:	e79b      	b.n	8006946 <__multiply+0x7a>
 8006a0e:	3e01      	subs	r6, #1
 8006a10:	e79d      	b.n	800694e <__multiply+0x82>
 8006a12:	bf00      	nop
 8006a14:	080079e7 	.word	0x080079e7
 8006a18:	080079f8 	.word	0x080079f8

08006a1c <__pow5mult>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	4615      	mov	r5, r2
 8006a22:	f012 0203 	ands.w	r2, r2, #3
 8006a26:	4606      	mov	r6, r0
 8006a28:	460f      	mov	r7, r1
 8006a2a:	d007      	beq.n	8006a3c <__pow5mult+0x20>
 8006a2c:	4c25      	ldr	r4, [pc, #148]	; (8006ac4 <__pow5mult+0xa8>)
 8006a2e:	3a01      	subs	r2, #1
 8006a30:	2300      	movs	r3, #0
 8006a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a36:	f7ff fe9f 	bl	8006778 <__multadd>
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	10ad      	asrs	r5, r5, #2
 8006a3e:	d03d      	beq.n	8006abc <__pow5mult+0xa0>
 8006a40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a42:	b97c      	cbnz	r4, 8006a64 <__pow5mult+0x48>
 8006a44:	2010      	movs	r0, #16
 8006a46:	f7fe fa2b 	bl	8004ea0 <malloc>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6270      	str	r0, [r6, #36]	; 0x24
 8006a4e:	b928      	cbnz	r0, 8006a5c <__pow5mult+0x40>
 8006a50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a54:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <__pow5mult+0xac>)
 8006a56:	481d      	ldr	r0, [pc, #116]	; (8006acc <__pow5mult+0xb0>)
 8006a58:	f000 f9c2 	bl	8006de0 <__assert_func>
 8006a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a60:	6004      	str	r4, [r0, #0]
 8006a62:	60c4      	str	r4, [r0, #12]
 8006a64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a6c:	b94c      	cbnz	r4, 8006a82 <__pow5mult+0x66>
 8006a6e:	f240 2171 	movw	r1, #625	; 0x271
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff ff14 	bl	80068a0 <__i2b>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a80:	6003      	str	r3, [r0, #0]
 8006a82:	f04f 0900 	mov.w	r9, #0
 8006a86:	07eb      	lsls	r3, r5, #31
 8006a88:	d50a      	bpl.n	8006aa0 <__pow5mult+0x84>
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7ff ff1c 	bl	80068cc <__multiply>
 8006a94:	4680      	mov	r8, r0
 8006a96:	4639      	mov	r1, r7
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7ff fe4b 	bl	8006734 <_Bfree>
 8006a9e:	4647      	mov	r7, r8
 8006aa0:	106d      	asrs	r5, r5, #1
 8006aa2:	d00b      	beq.n	8006abc <__pow5mult+0xa0>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	b938      	cbnz	r0, 8006ab8 <__pow5mult+0x9c>
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4630      	mov	r0, r6
 8006aae:	f7ff ff0d 	bl	80068cc <__multiply>
 8006ab2:	6020      	str	r0, [r4, #0]
 8006ab4:	f8c0 9000 	str.w	r9, [r0]
 8006ab8:	4604      	mov	r4, r0
 8006aba:	e7e4      	b.n	8006a86 <__pow5mult+0x6a>
 8006abc:	4638      	mov	r0, r7
 8006abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac2:	bf00      	nop
 8006ac4:	08007b48 	.word	0x08007b48
 8006ac8:	08007975 	.word	0x08007975
 8006acc:	080079f8 	.word	0x080079f8

08006ad0 <__lshift>:
 8006ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	4607      	mov	r7, r0
 8006ad8:	4691      	mov	r9, r2
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	6849      	ldr	r1, [r1, #4]
 8006ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ae8:	f108 0601 	add.w	r6, r8, #1
 8006aec:	42b3      	cmp	r3, r6
 8006aee:	db0b      	blt.n	8006b08 <__lshift+0x38>
 8006af0:	4638      	mov	r0, r7
 8006af2:	f7ff fddf 	bl	80066b4 <_Balloc>
 8006af6:	4605      	mov	r5, r0
 8006af8:	b948      	cbnz	r0, 8006b0e <__lshift+0x3e>
 8006afa:	4602      	mov	r2, r0
 8006afc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b00:	4b29      	ldr	r3, [pc, #164]	; (8006ba8 <__lshift+0xd8>)
 8006b02:	482a      	ldr	r0, [pc, #168]	; (8006bac <__lshift+0xdc>)
 8006b04:	f000 f96c 	bl	8006de0 <__assert_func>
 8006b08:	3101      	adds	r1, #1
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	e7ee      	b.n	8006aec <__lshift+0x1c>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f100 0114 	add.w	r1, r0, #20
 8006b14:	f100 0210 	add.w	r2, r0, #16
 8006b18:	4618      	mov	r0, r3
 8006b1a:	4553      	cmp	r3, sl
 8006b1c:	db37      	blt.n	8006b8e <__lshift+0xbe>
 8006b1e:	6920      	ldr	r0, [r4, #16]
 8006b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b24:	f104 0314 	add.w	r3, r4, #20
 8006b28:	f019 091f 	ands.w	r9, r9, #31
 8006b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b34:	d02f      	beq.n	8006b96 <__lshift+0xc6>
 8006b36:	468a      	mov	sl, r1
 8006b38:	f04f 0c00 	mov.w	ip, #0
 8006b3c:	f1c9 0e20 	rsb	lr, r9, #32
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	fa02 f209 	lsl.w	r2, r2, r9
 8006b46:	ea42 020c 	orr.w	r2, r2, ip
 8006b4a:	f84a 2b04 	str.w	r2, [sl], #4
 8006b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b52:	4298      	cmp	r0, r3
 8006b54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b58:	d8f2      	bhi.n	8006b40 <__lshift+0x70>
 8006b5a:	1b03      	subs	r3, r0, r4
 8006b5c:	3b15      	subs	r3, #21
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	3304      	adds	r3, #4
 8006b64:	f104 0215 	add.w	r2, r4, #21
 8006b68:	4290      	cmp	r0, r2
 8006b6a:	bf38      	it	cc
 8006b6c:	2304      	movcc	r3, #4
 8006b6e:	f841 c003 	str.w	ip, [r1, r3]
 8006b72:	f1bc 0f00 	cmp.w	ip, #0
 8006b76:	d001      	beq.n	8006b7c <__lshift+0xac>
 8006b78:	f108 0602 	add.w	r6, r8, #2
 8006b7c:	3e01      	subs	r6, #1
 8006b7e:	4638      	mov	r0, r7
 8006b80:	4621      	mov	r1, r4
 8006b82:	612e      	str	r6, [r5, #16]
 8006b84:	f7ff fdd6 	bl	8006734 <_Bfree>
 8006b88:	4628      	mov	r0, r5
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b92:	3301      	adds	r3, #1
 8006b94:	e7c1      	b.n	8006b1a <__lshift+0x4a>
 8006b96:	3904      	subs	r1, #4
 8006b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b9c:	4298      	cmp	r0, r3
 8006b9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ba2:	d8f9      	bhi.n	8006b98 <__lshift+0xc8>
 8006ba4:	e7ea      	b.n	8006b7c <__lshift+0xac>
 8006ba6:	bf00      	nop
 8006ba8:	080079e7 	.word	0x080079e7
 8006bac:	080079f8 	.word	0x080079f8

08006bb0 <__mcmp>:
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	690a      	ldr	r2, [r1, #16]
 8006bb4:	6900      	ldr	r0, [r0, #16]
 8006bb6:	b530      	push	{r4, r5, lr}
 8006bb8:	1a80      	subs	r0, r0, r2
 8006bba:	d10d      	bne.n	8006bd8 <__mcmp+0x28>
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	3114      	adds	r1, #20
 8006bc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006bc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006bc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006bcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006bd0:	4295      	cmp	r5, r2
 8006bd2:	d002      	beq.n	8006bda <__mcmp+0x2a>
 8006bd4:	d304      	bcc.n	8006be0 <__mcmp+0x30>
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	bd30      	pop	{r4, r5, pc}
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	d3f4      	bcc.n	8006bc8 <__mcmp+0x18>
 8006bde:	e7fb      	b.n	8006bd8 <__mcmp+0x28>
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	e7f8      	b.n	8006bd8 <__mcmp+0x28>
	...

08006be8 <__mdiff>:
 8006be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	460d      	mov	r5, r1
 8006bee:	4607      	mov	r7, r0
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	f7ff ffdb 	bl	8006bb0 <__mcmp>
 8006bfa:	1e06      	subs	r6, r0, #0
 8006bfc:	d111      	bne.n	8006c22 <__mdiff+0x3a>
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4638      	mov	r0, r7
 8006c02:	f7ff fd57 	bl	80066b4 <_Balloc>
 8006c06:	4602      	mov	r2, r0
 8006c08:	b928      	cbnz	r0, 8006c16 <__mdiff+0x2e>
 8006c0a:	f240 2132 	movw	r1, #562	; 0x232
 8006c0e:	4b3a      	ldr	r3, [pc, #232]	; (8006cf8 <__mdiff+0x110>)
 8006c10:	483a      	ldr	r0, [pc, #232]	; (8006cfc <__mdiff+0x114>)
 8006c12:	f000 f8e5 	bl	8006de0 <__assert_func>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c22:	bfa4      	itt	ge
 8006c24:	4623      	movge	r3, r4
 8006c26:	462c      	movge	r4, r5
 8006c28:	4638      	mov	r0, r7
 8006c2a:	6861      	ldr	r1, [r4, #4]
 8006c2c:	bfa6      	itte	ge
 8006c2e:	461d      	movge	r5, r3
 8006c30:	2600      	movge	r6, #0
 8006c32:	2601      	movlt	r6, #1
 8006c34:	f7ff fd3e 	bl	80066b4 <_Balloc>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	b918      	cbnz	r0, 8006c44 <__mdiff+0x5c>
 8006c3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c40:	4b2d      	ldr	r3, [pc, #180]	; (8006cf8 <__mdiff+0x110>)
 8006c42:	e7e5      	b.n	8006c10 <__mdiff+0x28>
 8006c44:	f102 0814 	add.w	r8, r2, #20
 8006c48:	46c2      	mov	sl, r8
 8006c4a:	f04f 0c00 	mov.w	ip, #0
 8006c4e:	6927      	ldr	r7, [r4, #16]
 8006c50:	60c6      	str	r6, [r0, #12]
 8006c52:	692e      	ldr	r6, [r5, #16]
 8006c54:	f104 0014 	add.w	r0, r4, #20
 8006c58:	f105 0914 	add.w	r9, r5, #20
 8006c5c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006c60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c64:	3410      	adds	r4, #16
 8006c66:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006c6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c6e:	fa1f f18b 	uxth.w	r1, fp
 8006c72:	448c      	add	ip, r1
 8006c74:	b299      	uxth	r1, r3
 8006c76:	0c1b      	lsrs	r3, r3, #16
 8006c78:	ebac 0101 	sub.w	r1, ip, r1
 8006c7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c80:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c84:	b289      	uxth	r1, r1
 8006c86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c8a:	454e      	cmp	r6, r9
 8006c8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c90:	f84a 3b04 	str.w	r3, [sl], #4
 8006c94:	d8e7      	bhi.n	8006c66 <__mdiff+0x7e>
 8006c96:	1b73      	subs	r3, r6, r5
 8006c98:	3b15      	subs	r3, #21
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	3515      	adds	r5, #21
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	42ae      	cmp	r6, r5
 8006ca4:	bf38      	it	cc
 8006ca6:	2304      	movcc	r3, #4
 8006ca8:	4418      	add	r0, r3
 8006caa:	4443      	add	r3, r8
 8006cac:	461e      	mov	r6, r3
 8006cae:	4605      	mov	r5, r0
 8006cb0:	4575      	cmp	r5, lr
 8006cb2:	d30e      	bcc.n	8006cd2 <__mdiff+0xea>
 8006cb4:	f10e 0103 	add.w	r1, lr, #3
 8006cb8:	1a09      	subs	r1, r1, r0
 8006cba:	f021 0103 	bic.w	r1, r1, #3
 8006cbe:	3803      	subs	r0, #3
 8006cc0:	4586      	cmp	lr, r0
 8006cc2:	bf38      	it	cc
 8006cc4:	2100      	movcc	r1, #0
 8006cc6:	4419      	add	r1, r3
 8006cc8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ccc:	b18b      	cbz	r3, 8006cf2 <__mdiff+0x10a>
 8006cce:	6117      	str	r7, [r2, #16]
 8006cd0:	e7a4      	b.n	8006c1c <__mdiff+0x34>
 8006cd2:	f855 8b04 	ldr.w	r8, [r5], #4
 8006cd6:	fa1f f188 	uxth.w	r1, r8
 8006cda:	4461      	add	r1, ip
 8006cdc:	140c      	asrs	r4, r1, #16
 8006cde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ce2:	b289      	uxth	r1, r1
 8006ce4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ce8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006cec:	f846 1b04 	str.w	r1, [r6], #4
 8006cf0:	e7de      	b.n	8006cb0 <__mdiff+0xc8>
 8006cf2:	3f01      	subs	r7, #1
 8006cf4:	e7e8      	b.n	8006cc8 <__mdiff+0xe0>
 8006cf6:	bf00      	nop
 8006cf8:	080079e7 	.word	0x080079e7
 8006cfc:	080079f8 	.word	0x080079f8

08006d00 <__d2b>:
 8006d00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d04:	2101      	movs	r1, #1
 8006d06:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006d0a:	4690      	mov	r8, r2
 8006d0c:	461d      	mov	r5, r3
 8006d0e:	f7ff fcd1 	bl	80066b4 <_Balloc>
 8006d12:	4604      	mov	r4, r0
 8006d14:	b930      	cbnz	r0, 8006d24 <__d2b+0x24>
 8006d16:	4602      	mov	r2, r0
 8006d18:	f240 310a 	movw	r1, #778	; 0x30a
 8006d1c:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <__d2b+0xb0>)
 8006d1e:	4825      	ldr	r0, [pc, #148]	; (8006db4 <__d2b+0xb4>)
 8006d20:	f000 f85e 	bl	8006de0 <__assert_func>
 8006d24:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d28:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006d2c:	bb2d      	cbnz	r5, 8006d7a <__d2b+0x7a>
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	f1b8 0300 	subs.w	r3, r8, #0
 8006d34:	d026      	beq.n	8006d84 <__d2b+0x84>
 8006d36:	4668      	mov	r0, sp
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	f7ff fd83 	bl	8006844 <__lo0bits>
 8006d3e:	9900      	ldr	r1, [sp, #0]
 8006d40:	b1f0      	cbz	r0, 8006d80 <__d2b+0x80>
 8006d42:	9a01      	ldr	r2, [sp, #4]
 8006d44:	f1c0 0320 	rsb	r3, r0, #32
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	40c2      	lsrs	r2, r0
 8006d50:	6163      	str	r3, [r4, #20]
 8006d52:	9201      	str	r2, [sp, #4]
 8006d54:	9b01      	ldr	r3, [sp, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bf14      	ite	ne
 8006d5a:	2102      	movne	r1, #2
 8006d5c:	2101      	moveq	r1, #1
 8006d5e:	61a3      	str	r3, [r4, #24]
 8006d60:	6121      	str	r1, [r4, #16]
 8006d62:	b1c5      	cbz	r5, 8006d96 <__d2b+0x96>
 8006d64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d68:	4405      	add	r5, r0
 8006d6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d6e:	603d      	str	r5, [r7, #0]
 8006d70:	6030      	str	r0, [r6, #0]
 8006d72:	4620      	mov	r0, r4
 8006d74:	b002      	add	sp, #8
 8006d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d7e:	e7d6      	b.n	8006d2e <__d2b+0x2e>
 8006d80:	6161      	str	r1, [r4, #20]
 8006d82:	e7e7      	b.n	8006d54 <__d2b+0x54>
 8006d84:	a801      	add	r0, sp, #4
 8006d86:	f7ff fd5d 	bl	8006844 <__lo0bits>
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	6121      	str	r1, [r4, #16]
 8006d90:	6163      	str	r3, [r4, #20]
 8006d92:	3020      	adds	r0, #32
 8006d94:	e7e5      	b.n	8006d62 <__d2b+0x62>
 8006d96:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006d9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d9e:	6038      	str	r0, [r7, #0]
 8006da0:	6918      	ldr	r0, [r3, #16]
 8006da2:	f7ff fd2f 	bl	8006804 <__hi0bits>
 8006da6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006daa:	6031      	str	r1, [r6, #0]
 8006dac:	e7e1      	b.n	8006d72 <__d2b+0x72>
 8006dae:	bf00      	nop
 8006db0:	080079e7 	.word	0x080079e7
 8006db4:	080079f8 	.word	0x080079f8

08006db8 <_calloc_r>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	fba1 5402 	umull	r5, r4, r1, r2
 8006dbe:	b934      	cbnz	r4, 8006dce <_calloc_r+0x16>
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7fe f8ed 	bl	8004fa0 <_malloc_r>
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	b928      	cbnz	r0, 8006dd6 <_calloc_r+0x1e>
 8006dca:	4630      	mov	r0, r6
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
 8006dce:	220c      	movs	r2, #12
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	6002      	str	r2, [r0, #0]
 8006dd4:	e7f9      	b.n	8006dca <_calloc_r+0x12>
 8006dd6:	462a      	mov	r2, r5
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f7fe f871 	bl	8004ec0 <memset>
 8006dde:	e7f4      	b.n	8006dca <_calloc_r+0x12>

08006de0 <__assert_func>:
 8006de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006de2:	4614      	mov	r4, r2
 8006de4:	461a      	mov	r2, r3
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <__assert_func+0x2c>)
 8006de8:	4605      	mov	r5, r0
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68d8      	ldr	r0, [r3, #12]
 8006dee:	b14c      	cbz	r4, 8006e04 <__assert_func+0x24>
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <__assert_func+0x30>)
 8006df2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006df6:	9100      	str	r1, [sp, #0]
 8006df8:	462b      	mov	r3, r5
 8006dfa:	4906      	ldr	r1, [pc, #24]	; (8006e14 <__assert_func+0x34>)
 8006dfc:	f000 f80e 	bl	8006e1c <fiprintf>
 8006e00:	f000 fa58 	bl	80072b4 <abort>
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <__assert_func+0x38>)
 8006e06:	461c      	mov	r4, r3
 8006e08:	e7f3      	b.n	8006df2 <__assert_func+0x12>
 8006e0a:	bf00      	nop
 8006e0c:	200000d8 	.word	0x200000d8
 8006e10:	08007b54 	.word	0x08007b54
 8006e14:	08007b61 	.word	0x08007b61
 8006e18:	08007b8f 	.word	0x08007b8f

08006e1c <fiprintf>:
 8006e1c:	b40e      	push	{r1, r2, r3}
 8006e1e:	b503      	push	{r0, r1, lr}
 8006e20:	4601      	mov	r1, r0
 8006e22:	ab03      	add	r3, sp, #12
 8006e24:	4805      	ldr	r0, [pc, #20]	; (8006e3c <fiprintf+0x20>)
 8006e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	f000 f843 	bl	8006eb8 <_vfiprintf_r>
 8006e32:	b002      	add	sp, #8
 8006e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e38:	b003      	add	sp, #12
 8006e3a:	4770      	bx	lr
 8006e3c:	200000d8 	.word	0x200000d8

08006e40 <__retarget_lock_init_recursive>:
 8006e40:	4770      	bx	lr

08006e42 <__retarget_lock_acquire_recursive>:
 8006e42:	4770      	bx	lr

08006e44 <__retarget_lock_release_recursive>:
 8006e44:	4770      	bx	lr

08006e46 <__ascii_mbtowc>:
 8006e46:	b082      	sub	sp, #8
 8006e48:	b901      	cbnz	r1, 8006e4c <__ascii_mbtowc+0x6>
 8006e4a:	a901      	add	r1, sp, #4
 8006e4c:	b142      	cbz	r2, 8006e60 <__ascii_mbtowc+0x1a>
 8006e4e:	b14b      	cbz	r3, 8006e64 <__ascii_mbtowc+0x1e>
 8006e50:	7813      	ldrb	r3, [r2, #0]
 8006e52:	600b      	str	r3, [r1, #0]
 8006e54:	7812      	ldrb	r2, [r2, #0]
 8006e56:	1e10      	subs	r0, r2, #0
 8006e58:	bf18      	it	ne
 8006e5a:	2001      	movne	r0, #1
 8006e5c:	b002      	add	sp, #8
 8006e5e:	4770      	bx	lr
 8006e60:	4610      	mov	r0, r2
 8006e62:	e7fb      	b.n	8006e5c <__ascii_mbtowc+0x16>
 8006e64:	f06f 0001 	mvn.w	r0, #1
 8006e68:	e7f8      	b.n	8006e5c <__ascii_mbtowc+0x16>

08006e6a <__sfputc_r>:
 8006e6a:	6893      	ldr	r3, [r2, #8]
 8006e6c:	b410      	push	{r4}
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	6093      	str	r3, [r2, #8]
 8006e74:	da07      	bge.n	8006e86 <__sfputc_r+0x1c>
 8006e76:	6994      	ldr	r4, [r2, #24]
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	db01      	blt.n	8006e80 <__sfputc_r+0x16>
 8006e7c:	290a      	cmp	r1, #10
 8006e7e:	d102      	bne.n	8006e86 <__sfputc_r+0x1c>
 8006e80:	bc10      	pop	{r4}
 8006e82:	f000 b949 	b.w	8007118 <__swbuf_r>
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	1c58      	adds	r0, r3, #1
 8006e8a:	6010      	str	r0, [r2, #0]
 8006e8c:	7019      	strb	r1, [r3, #0]
 8006e8e:	4608      	mov	r0, r1
 8006e90:	bc10      	pop	{r4}
 8006e92:	4770      	bx	lr

08006e94 <__sfputs_r>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	4606      	mov	r6, r0
 8006e98:	460f      	mov	r7, r1
 8006e9a:	4614      	mov	r4, r2
 8006e9c:	18d5      	adds	r5, r2, r3
 8006e9e:	42ac      	cmp	r4, r5
 8006ea0:	d101      	bne.n	8006ea6 <__sfputs_r+0x12>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	e007      	b.n	8006eb6 <__sfputs_r+0x22>
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eae:	f7ff ffdc 	bl	8006e6a <__sfputc_r>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	d1f3      	bne.n	8006e9e <__sfputs_r+0xa>
 8006eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006eb8 <_vfiprintf_r>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	4698      	mov	r8, r3
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	b09d      	sub	sp, #116	; 0x74
 8006ec6:	b118      	cbz	r0, 8006ed0 <_vfiprintf_r+0x18>
 8006ec8:	6983      	ldr	r3, [r0, #24]
 8006eca:	b90b      	cbnz	r3, 8006ed0 <_vfiprintf_r+0x18>
 8006ecc:	f000 fb10 	bl	80074f0 <__sinit>
 8006ed0:	4b89      	ldr	r3, [pc, #548]	; (80070f8 <_vfiprintf_r+0x240>)
 8006ed2:	429d      	cmp	r5, r3
 8006ed4:	d11b      	bne.n	8006f0e <_vfiprintf_r+0x56>
 8006ed6:	6875      	ldr	r5, [r6, #4]
 8006ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eda:	07d9      	lsls	r1, r3, #31
 8006edc:	d405      	bmi.n	8006eea <_vfiprintf_r+0x32>
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	059a      	lsls	r2, r3, #22
 8006ee2:	d402      	bmi.n	8006eea <_vfiprintf_r+0x32>
 8006ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ee6:	f7ff ffac 	bl	8006e42 <__retarget_lock_acquire_recursive>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	071b      	lsls	r3, r3, #28
 8006eee:	d501      	bpl.n	8006ef4 <_vfiprintf_r+0x3c>
 8006ef0:	692b      	ldr	r3, [r5, #16]
 8006ef2:	b9eb      	cbnz	r3, 8006f30 <_vfiprintf_r+0x78>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 f96e 	bl	80071d8 <__swsetup_r>
 8006efc:	b1c0      	cbz	r0, 8006f30 <_vfiprintf_r+0x78>
 8006efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f00:	07dc      	lsls	r4, r3, #31
 8006f02:	d50e      	bpl.n	8006f22 <_vfiprintf_r+0x6a>
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	b01d      	add	sp, #116	; 0x74
 8006f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	4b7b      	ldr	r3, [pc, #492]	; (80070fc <_vfiprintf_r+0x244>)
 8006f10:	429d      	cmp	r5, r3
 8006f12:	d101      	bne.n	8006f18 <_vfiprintf_r+0x60>
 8006f14:	68b5      	ldr	r5, [r6, #8]
 8006f16:	e7df      	b.n	8006ed8 <_vfiprintf_r+0x20>
 8006f18:	4b79      	ldr	r3, [pc, #484]	; (8007100 <_vfiprintf_r+0x248>)
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	bf08      	it	eq
 8006f1e:	68f5      	ldreq	r5, [r6, #12]
 8006f20:	e7da      	b.n	8006ed8 <_vfiprintf_r+0x20>
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	0598      	lsls	r0, r3, #22
 8006f26:	d4ed      	bmi.n	8006f04 <_vfiprintf_r+0x4c>
 8006f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f2a:	f7ff ff8b 	bl	8006e44 <__retarget_lock_release_recursive>
 8006f2e:	e7e9      	b.n	8006f04 <_vfiprintf_r+0x4c>
 8006f30:	2300      	movs	r3, #0
 8006f32:	9309      	str	r3, [sp, #36]	; 0x24
 8006f34:	2320      	movs	r3, #32
 8006f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f3a:	2330      	movs	r3, #48	; 0x30
 8006f3c:	f04f 0901 	mov.w	r9, #1
 8006f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f44:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007104 <_vfiprintf_r+0x24c>
 8006f48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	469a      	mov	sl, r3
 8006f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f54:	b10a      	cbz	r2, 8006f5a <_vfiprintf_r+0xa2>
 8006f56:	2a25      	cmp	r2, #37	; 0x25
 8006f58:	d1f9      	bne.n	8006f4e <_vfiprintf_r+0x96>
 8006f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f5e:	d00b      	beq.n	8006f78 <_vfiprintf_r+0xc0>
 8006f60:	465b      	mov	r3, fp
 8006f62:	4622      	mov	r2, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff ff94 	bl	8006e94 <__sfputs_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f000 80aa 	beq.w	80070c6 <_vfiprintf_r+0x20e>
 8006f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f74:	445a      	add	r2, fp
 8006f76:	9209      	str	r2, [sp, #36]	; 0x24
 8006f78:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 80a2 	beq.w	80070c6 <_vfiprintf_r+0x20e>
 8006f82:	2300      	movs	r3, #0
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295
 8006f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f8c:	f10a 0a01 	add.w	sl, sl, #1
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	9307      	str	r3, [sp, #28]
 8006f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f98:	931a      	str	r3, [sp, #104]	; 0x68
 8006f9a:	4654      	mov	r4, sl
 8006f9c:	2205      	movs	r2, #5
 8006f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa2:	4858      	ldr	r0, [pc, #352]	; (8007104 <_vfiprintf_r+0x24c>)
 8006fa4:	f7ff fb5e 	bl	8006664 <memchr>
 8006fa8:	9a04      	ldr	r2, [sp, #16]
 8006faa:	b9d8      	cbnz	r0, 8006fe4 <_vfiprintf_r+0x12c>
 8006fac:	06d1      	lsls	r1, r2, #27
 8006fae:	bf44      	itt	mi
 8006fb0:	2320      	movmi	r3, #32
 8006fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb6:	0713      	lsls	r3, r2, #28
 8006fb8:	bf44      	itt	mi
 8006fba:	232b      	movmi	r3, #43	; 0x2b
 8006fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc6:	d015      	beq.n	8006ff4 <_vfiprintf_r+0x13c>
 8006fc8:	4654      	mov	r4, sl
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f04f 0c0a 	mov.w	ip, #10
 8006fd0:	9a07      	ldr	r2, [sp, #28]
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd8:	3b30      	subs	r3, #48	; 0x30
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	d94e      	bls.n	800707c <_vfiprintf_r+0x1c4>
 8006fde:	b1b0      	cbz	r0, 800700e <_vfiprintf_r+0x156>
 8006fe0:	9207      	str	r2, [sp, #28]
 8006fe2:	e014      	b.n	800700e <_vfiprintf_r+0x156>
 8006fe4:	eba0 0308 	sub.w	r3, r0, r8
 8006fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	46a2      	mov	sl, r4
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	e7d2      	b.n	8006f9a <_vfiprintf_r+0xe2>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	1d19      	adds	r1, r3, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	9103      	str	r1, [sp, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfbb      	ittet	lt
 8007000:	425b      	neglt	r3, r3
 8007002:	f042 0202 	orrlt.w	r2, r2, #2
 8007006:	9307      	strge	r3, [sp, #28]
 8007008:	9307      	strlt	r3, [sp, #28]
 800700a:	bfb8      	it	lt
 800700c:	9204      	strlt	r2, [sp, #16]
 800700e:	7823      	ldrb	r3, [r4, #0]
 8007010:	2b2e      	cmp	r3, #46	; 0x2e
 8007012:	d10c      	bne.n	800702e <_vfiprintf_r+0x176>
 8007014:	7863      	ldrb	r3, [r4, #1]
 8007016:	2b2a      	cmp	r3, #42	; 0x2a
 8007018:	d135      	bne.n	8007086 <_vfiprintf_r+0x1ce>
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	3402      	adds	r4, #2
 800701e:	1d1a      	adds	r2, r3, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	9203      	str	r2, [sp, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	bfb8      	it	lt
 8007028:	f04f 33ff 	movlt.w	r3, #4294967295
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007108 <_vfiprintf_r+0x250>
 8007032:	2203      	movs	r2, #3
 8007034:	4650      	mov	r0, sl
 8007036:	7821      	ldrb	r1, [r4, #0]
 8007038:	f7ff fb14 	bl	8006664 <memchr>
 800703c:	b140      	cbz	r0, 8007050 <_vfiprintf_r+0x198>
 800703e:	2340      	movs	r3, #64	; 0x40
 8007040:	eba0 000a 	sub.w	r0, r0, sl
 8007044:	fa03 f000 	lsl.w	r0, r3, r0
 8007048:	9b04      	ldr	r3, [sp, #16]
 800704a:	3401      	adds	r4, #1
 800704c:	4303      	orrs	r3, r0
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007054:	2206      	movs	r2, #6
 8007056:	482d      	ldr	r0, [pc, #180]	; (800710c <_vfiprintf_r+0x254>)
 8007058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800705c:	f7ff fb02 	bl	8006664 <memchr>
 8007060:	2800      	cmp	r0, #0
 8007062:	d03f      	beq.n	80070e4 <_vfiprintf_r+0x22c>
 8007064:	4b2a      	ldr	r3, [pc, #168]	; (8007110 <_vfiprintf_r+0x258>)
 8007066:	bb1b      	cbnz	r3, 80070b0 <_vfiprintf_r+0x1f8>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	3307      	adds	r3, #7
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	3308      	adds	r3, #8
 8007072:	9303      	str	r3, [sp, #12]
 8007074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007076:	443b      	add	r3, r7
 8007078:	9309      	str	r3, [sp, #36]	; 0x24
 800707a:	e767      	b.n	8006f4c <_vfiprintf_r+0x94>
 800707c:	460c      	mov	r4, r1
 800707e:	2001      	movs	r0, #1
 8007080:	fb0c 3202 	mla	r2, ip, r2, r3
 8007084:	e7a5      	b.n	8006fd2 <_vfiprintf_r+0x11a>
 8007086:	2300      	movs	r3, #0
 8007088:	f04f 0c0a 	mov.w	ip, #10
 800708c:	4619      	mov	r1, r3
 800708e:	3401      	adds	r4, #1
 8007090:	9305      	str	r3, [sp, #20]
 8007092:	4620      	mov	r0, r4
 8007094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007098:	3a30      	subs	r2, #48	; 0x30
 800709a:	2a09      	cmp	r2, #9
 800709c:	d903      	bls.n	80070a6 <_vfiprintf_r+0x1ee>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0c5      	beq.n	800702e <_vfiprintf_r+0x176>
 80070a2:	9105      	str	r1, [sp, #20]
 80070a4:	e7c3      	b.n	800702e <_vfiprintf_r+0x176>
 80070a6:	4604      	mov	r4, r0
 80070a8:	2301      	movs	r3, #1
 80070aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ae:	e7f0      	b.n	8007092 <_vfiprintf_r+0x1da>
 80070b0:	ab03      	add	r3, sp, #12
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	462a      	mov	r2, r5
 80070b6:	4630      	mov	r0, r6
 80070b8:	4b16      	ldr	r3, [pc, #88]	; (8007114 <_vfiprintf_r+0x25c>)
 80070ba:	a904      	add	r1, sp, #16
 80070bc:	f7fe f882 	bl	80051c4 <_printf_float>
 80070c0:	4607      	mov	r7, r0
 80070c2:	1c78      	adds	r0, r7, #1
 80070c4:	d1d6      	bne.n	8007074 <_vfiprintf_r+0x1bc>
 80070c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070c8:	07d9      	lsls	r1, r3, #31
 80070ca:	d405      	bmi.n	80070d8 <_vfiprintf_r+0x220>
 80070cc:	89ab      	ldrh	r3, [r5, #12]
 80070ce:	059a      	lsls	r2, r3, #22
 80070d0:	d402      	bmi.n	80070d8 <_vfiprintf_r+0x220>
 80070d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070d4:	f7ff feb6 	bl	8006e44 <__retarget_lock_release_recursive>
 80070d8:	89ab      	ldrh	r3, [r5, #12]
 80070da:	065b      	lsls	r3, r3, #25
 80070dc:	f53f af12 	bmi.w	8006f04 <_vfiprintf_r+0x4c>
 80070e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070e2:	e711      	b.n	8006f08 <_vfiprintf_r+0x50>
 80070e4:	ab03      	add	r3, sp, #12
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	462a      	mov	r2, r5
 80070ea:	4630      	mov	r0, r6
 80070ec:	4b09      	ldr	r3, [pc, #36]	; (8007114 <_vfiprintf_r+0x25c>)
 80070ee:	a904      	add	r1, sp, #16
 80070f0:	f7fe fb04 	bl	80056fc <_printf_i>
 80070f4:	e7e4      	b.n	80070c0 <_vfiprintf_r+0x208>
 80070f6:	bf00      	nop
 80070f8:	08007ccc 	.word	0x08007ccc
 80070fc:	08007cec 	.word	0x08007cec
 8007100:	08007cac 	.word	0x08007cac
 8007104:	08007b9a 	.word	0x08007b9a
 8007108:	08007ba0 	.word	0x08007ba0
 800710c:	08007ba4 	.word	0x08007ba4
 8007110:	080051c5 	.word	0x080051c5
 8007114:	08006e95 	.word	0x08006e95

08007118 <__swbuf_r>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	460e      	mov	r6, r1
 800711c:	4614      	mov	r4, r2
 800711e:	4605      	mov	r5, r0
 8007120:	b118      	cbz	r0, 800712a <__swbuf_r+0x12>
 8007122:	6983      	ldr	r3, [r0, #24]
 8007124:	b90b      	cbnz	r3, 800712a <__swbuf_r+0x12>
 8007126:	f000 f9e3 	bl	80074f0 <__sinit>
 800712a:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <__swbuf_r+0x98>)
 800712c:	429c      	cmp	r4, r3
 800712e:	d12b      	bne.n	8007188 <__swbuf_r+0x70>
 8007130:	686c      	ldr	r4, [r5, #4]
 8007132:	69a3      	ldr	r3, [r4, #24]
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	071a      	lsls	r2, r3, #28
 800713a:	d52f      	bpl.n	800719c <__swbuf_r+0x84>
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	b36b      	cbz	r3, 800719c <__swbuf_r+0x84>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	6820      	ldr	r0, [r4, #0]
 8007144:	b2f6      	uxtb	r6, r6
 8007146:	1ac0      	subs	r0, r0, r3
 8007148:	6963      	ldr	r3, [r4, #20]
 800714a:	4637      	mov	r7, r6
 800714c:	4283      	cmp	r3, r0
 800714e:	dc04      	bgt.n	800715a <__swbuf_r+0x42>
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f938 	bl	80073c8 <_fflush_r>
 8007158:	bb30      	cbnz	r0, 80071a8 <__swbuf_r+0x90>
 800715a:	68a3      	ldr	r3, [r4, #8]
 800715c:	3001      	adds	r0, #1
 800715e:	3b01      	subs	r3, #1
 8007160:	60a3      	str	r3, [r4, #8]
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	701e      	strb	r6, [r3, #0]
 800716a:	6963      	ldr	r3, [r4, #20]
 800716c:	4283      	cmp	r3, r0
 800716e:	d004      	beq.n	800717a <__swbuf_r+0x62>
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	07db      	lsls	r3, r3, #31
 8007174:	d506      	bpl.n	8007184 <__swbuf_r+0x6c>
 8007176:	2e0a      	cmp	r6, #10
 8007178:	d104      	bne.n	8007184 <__swbuf_r+0x6c>
 800717a:	4621      	mov	r1, r4
 800717c:	4628      	mov	r0, r5
 800717e:	f000 f923 	bl	80073c8 <_fflush_r>
 8007182:	b988      	cbnz	r0, 80071a8 <__swbuf_r+0x90>
 8007184:	4638      	mov	r0, r7
 8007186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <__swbuf_r+0x9c>)
 800718a:	429c      	cmp	r4, r3
 800718c:	d101      	bne.n	8007192 <__swbuf_r+0x7a>
 800718e:	68ac      	ldr	r4, [r5, #8]
 8007190:	e7cf      	b.n	8007132 <__swbuf_r+0x1a>
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <__swbuf_r+0xa0>)
 8007194:	429c      	cmp	r4, r3
 8007196:	bf08      	it	eq
 8007198:	68ec      	ldreq	r4, [r5, #12]
 800719a:	e7ca      	b.n	8007132 <__swbuf_r+0x1a>
 800719c:	4621      	mov	r1, r4
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 f81a 	bl	80071d8 <__swsetup_r>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d0cb      	beq.n	8007140 <__swbuf_r+0x28>
 80071a8:	f04f 37ff 	mov.w	r7, #4294967295
 80071ac:	e7ea      	b.n	8007184 <__swbuf_r+0x6c>
 80071ae:	bf00      	nop
 80071b0:	08007ccc 	.word	0x08007ccc
 80071b4:	08007cec 	.word	0x08007cec
 80071b8:	08007cac 	.word	0x08007cac

080071bc <__ascii_wctomb>:
 80071bc:	4603      	mov	r3, r0
 80071be:	4608      	mov	r0, r1
 80071c0:	b141      	cbz	r1, 80071d4 <__ascii_wctomb+0x18>
 80071c2:	2aff      	cmp	r2, #255	; 0xff
 80071c4:	d904      	bls.n	80071d0 <__ascii_wctomb+0x14>
 80071c6:	228a      	movs	r2, #138	; 0x8a
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	4770      	bx	lr
 80071d0:	2001      	movs	r0, #1
 80071d2:	700a      	strb	r2, [r1, #0]
 80071d4:	4770      	bx	lr
	...

080071d8 <__swsetup_r>:
 80071d8:	4b32      	ldr	r3, [pc, #200]	; (80072a4 <__swsetup_r+0xcc>)
 80071da:	b570      	push	{r4, r5, r6, lr}
 80071dc:	681d      	ldr	r5, [r3, #0]
 80071de:	4606      	mov	r6, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	b125      	cbz	r5, 80071ee <__swsetup_r+0x16>
 80071e4:	69ab      	ldr	r3, [r5, #24]
 80071e6:	b913      	cbnz	r3, 80071ee <__swsetup_r+0x16>
 80071e8:	4628      	mov	r0, r5
 80071ea:	f000 f981 	bl	80074f0 <__sinit>
 80071ee:	4b2e      	ldr	r3, [pc, #184]	; (80072a8 <__swsetup_r+0xd0>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d10f      	bne.n	8007214 <__swsetup_r+0x3c>
 80071f4:	686c      	ldr	r4, [r5, #4]
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071fc:	0719      	lsls	r1, r3, #28
 80071fe:	d42c      	bmi.n	800725a <__swsetup_r+0x82>
 8007200:	06dd      	lsls	r5, r3, #27
 8007202:	d411      	bmi.n	8007228 <__swsetup_r+0x50>
 8007204:	2309      	movs	r3, #9
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	e03e      	b.n	8007292 <__swsetup_r+0xba>
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <__swsetup_r+0xd4>)
 8007216:	429c      	cmp	r4, r3
 8007218:	d101      	bne.n	800721e <__swsetup_r+0x46>
 800721a:	68ac      	ldr	r4, [r5, #8]
 800721c:	e7eb      	b.n	80071f6 <__swsetup_r+0x1e>
 800721e:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <__swsetup_r+0xd8>)
 8007220:	429c      	cmp	r4, r3
 8007222:	bf08      	it	eq
 8007224:	68ec      	ldreq	r4, [r5, #12]
 8007226:	e7e6      	b.n	80071f6 <__swsetup_r+0x1e>
 8007228:	0758      	lsls	r0, r3, #29
 800722a:	d512      	bpl.n	8007252 <__swsetup_r+0x7a>
 800722c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800722e:	b141      	cbz	r1, 8007242 <__swsetup_r+0x6a>
 8007230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007234:	4299      	cmp	r1, r3
 8007236:	d002      	beq.n	800723e <__swsetup_r+0x66>
 8007238:	4630      	mov	r0, r6
 800723a:	f7fd fe49 	bl	8004ed0 <_free_r>
 800723e:	2300      	movs	r3, #0
 8007240:	6363      	str	r3, [r4, #52]	; 0x34
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	2300      	movs	r3, #0
 800724c:	6063      	str	r3, [r4, #4]
 800724e:	6923      	ldr	r3, [r4, #16]
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	f043 0308 	orr.w	r3, r3, #8
 8007258:	81a3      	strh	r3, [r4, #12]
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	b94b      	cbnz	r3, 8007272 <__swsetup_r+0x9a>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007268:	d003      	beq.n	8007272 <__swsetup_r+0x9a>
 800726a:	4621      	mov	r1, r4
 800726c:	4630      	mov	r0, r6
 800726e:	f000 fa01 	bl	8007674 <__smakebuf_r>
 8007272:	89a0      	ldrh	r0, [r4, #12]
 8007274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007278:	f010 0301 	ands.w	r3, r0, #1
 800727c:	d00a      	beq.n	8007294 <__swsetup_r+0xbc>
 800727e:	2300      	movs	r3, #0
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	6963      	ldr	r3, [r4, #20]
 8007284:	425b      	negs	r3, r3
 8007286:	61a3      	str	r3, [r4, #24]
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	b943      	cbnz	r3, 800729e <__swsetup_r+0xc6>
 800728c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007290:	d1ba      	bne.n	8007208 <__swsetup_r+0x30>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	0781      	lsls	r1, r0, #30
 8007296:	bf58      	it	pl
 8007298:	6963      	ldrpl	r3, [r4, #20]
 800729a:	60a3      	str	r3, [r4, #8]
 800729c:	e7f4      	b.n	8007288 <__swsetup_r+0xb0>
 800729e:	2000      	movs	r0, #0
 80072a0:	e7f7      	b.n	8007292 <__swsetup_r+0xba>
 80072a2:	bf00      	nop
 80072a4:	200000d8 	.word	0x200000d8
 80072a8:	08007ccc 	.word	0x08007ccc
 80072ac:	08007cec 	.word	0x08007cec
 80072b0:	08007cac 	.word	0x08007cac

080072b4 <abort>:
 80072b4:	2006      	movs	r0, #6
 80072b6:	b508      	push	{r3, lr}
 80072b8:	f000 fa44 	bl	8007744 <raise>
 80072bc:	2001      	movs	r0, #1
 80072be:	f7fa fb54 	bl	800196a <_exit>
	...

080072c4 <__sflush_r>:
 80072c4:	898a      	ldrh	r2, [r1, #12]
 80072c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c8:	4605      	mov	r5, r0
 80072ca:	0710      	lsls	r0, r2, #28
 80072cc:	460c      	mov	r4, r1
 80072ce:	d457      	bmi.n	8007380 <__sflush_r+0xbc>
 80072d0:	684b      	ldr	r3, [r1, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dc04      	bgt.n	80072e0 <__sflush_r+0x1c>
 80072d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dc01      	bgt.n	80072e0 <__sflush_r+0x1c>
 80072dc:	2000      	movs	r0, #0
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072e2:	2e00      	cmp	r6, #0
 80072e4:	d0fa      	beq.n	80072dc <__sflush_r+0x18>
 80072e6:	2300      	movs	r3, #0
 80072e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072ec:	682f      	ldr	r7, [r5, #0]
 80072ee:	602b      	str	r3, [r5, #0]
 80072f0:	d032      	beq.n	8007358 <__sflush_r+0x94>
 80072f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	075a      	lsls	r2, r3, #29
 80072f8:	d505      	bpl.n	8007306 <__sflush_r+0x42>
 80072fa:	6863      	ldr	r3, [r4, #4]
 80072fc:	1ac0      	subs	r0, r0, r3
 80072fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007300:	b10b      	cbz	r3, 8007306 <__sflush_r+0x42>
 8007302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007304:	1ac0      	subs	r0, r0, r3
 8007306:	2300      	movs	r3, #0
 8007308:	4602      	mov	r2, r0
 800730a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800730c:	4628      	mov	r0, r5
 800730e:	6a21      	ldr	r1, [r4, #32]
 8007310:	47b0      	blx	r6
 8007312:	1c43      	adds	r3, r0, #1
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	d106      	bne.n	8007326 <__sflush_r+0x62>
 8007318:	6829      	ldr	r1, [r5, #0]
 800731a:	291d      	cmp	r1, #29
 800731c:	d82c      	bhi.n	8007378 <__sflush_r+0xb4>
 800731e:	4a29      	ldr	r2, [pc, #164]	; (80073c4 <__sflush_r+0x100>)
 8007320:	40ca      	lsrs	r2, r1
 8007322:	07d6      	lsls	r6, r2, #31
 8007324:	d528      	bpl.n	8007378 <__sflush_r+0xb4>
 8007326:	2200      	movs	r2, #0
 8007328:	6062      	str	r2, [r4, #4]
 800732a:	6922      	ldr	r2, [r4, #16]
 800732c:	04d9      	lsls	r1, r3, #19
 800732e:	6022      	str	r2, [r4, #0]
 8007330:	d504      	bpl.n	800733c <__sflush_r+0x78>
 8007332:	1c42      	adds	r2, r0, #1
 8007334:	d101      	bne.n	800733a <__sflush_r+0x76>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	b903      	cbnz	r3, 800733c <__sflush_r+0x78>
 800733a:	6560      	str	r0, [r4, #84]	; 0x54
 800733c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800733e:	602f      	str	r7, [r5, #0]
 8007340:	2900      	cmp	r1, #0
 8007342:	d0cb      	beq.n	80072dc <__sflush_r+0x18>
 8007344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007348:	4299      	cmp	r1, r3
 800734a:	d002      	beq.n	8007352 <__sflush_r+0x8e>
 800734c:	4628      	mov	r0, r5
 800734e:	f7fd fdbf 	bl	8004ed0 <_free_r>
 8007352:	2000      	movs	r0, #0
 8007354:	6360      	str	r0, [r4, #52]	; 0x34
 8007356:	e7c2      	b.n	80072de <__sflush_r+0x1a>
 8007358:	6a21      	ldr	r1, [r4, #32]
 800735a:	2301      	movs	r3, #1
 800735c:	4628      	mov	r0, r5
 800735e:	47b0      	blx	r6
 8007360:	1c41      	adds	r1, r0, #1
 8007362:	d1c7      	bne.n	80072f4 <__sflush_r+0x30>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0c4      	beq.n	80072f4 <__sflush_r+0x30>
 800736a:	2b1d      	cmp	r3, #29
 800736c:	d001      	beq.n	8007372 <__sflush_r+0xae>
 800736e:	2b16      	cmp	r3, #22
 8007370:	d101      	bne.n	8007376 <__sflush_r+0xb2>
 8007372:	602f      	str	r7, [r5, #0]
 8007374:	e7b2      	b.n	80072dc <__sflush_r+0x18>
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	e7ae      	b.n	80072de <__sflush_r+0x1a>
 8007380:	690f      	ldr	r7, [r1, #16]
 8007382:	2f00      	cmp	r7, #0
 8007384:	d0aa      	beq.n	80072dc <__sflush_r+0x18>
 8007386:	0793      	lsls	r3, r2, #30
 8007388:	bf18      	it	ne
 800738a:	2300      	movne	r3, #0
 800738c:	680e      	ldr	r6, [r1, #0]
 800738e:	bf08      	it	eq
 8007390:	694b      	ldreq	r3, [r1, #20]
 8007392:	1bf6      	subs	r6, r6, r7
 8007394:	600f      	str	r7, [r1, #0]
 8007396:	608b      	str	r3, [r1, #8]
 8007398:	2e00      	cmp	r6, #0
 800739a:	dd9f      	ble.n	80072dc <__sflush_r+0x18>
 800739c:	4633      	mov	r3, r6
 800739e:	463a      	mov	r2, r7
 80073a0:	4628      	mov	r0, r5
 80073a2:	6a21      	ldr	r1, [r4, #32]
 80073a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80073a8:	47e0      	blx	ip
 80073aa:	2800      	cmp	r0, #0
 80073ac:	dc06      	bgt.n	80073bc <__sflush_r+0xf8>
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295
 80073b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	e790      	b.n	80072de <__sflush_r+0x1a>
 80073bc:	4407      	add	r7, r0
 80073be:	1a36      	subs	r6, r6, r0
 80073c0:	e7ea      	b.n	8007398 <__sflush_r+0xd4>
 80073c2:	bf00      	nop
 80073c4:	20400001 	.word	0x20400001

080073c8 <_fflush_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	690b      	ldr	r3, [r1, #16]
 80073cc:	4605      	mov	r5, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	b913      	cbnz	r3, 80073d8 <_fflush_r+0x10>
 80073d2:	2500      	movs	r5, #0
 80073d4:	4628      	mov	r0, r5
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	b118      	cbz	r0, 80073e2 <_fflush_r+0x1a>
 80073da:	6983      	ldr	r3, [r0, #24]
 80073dc:	b90b      	cbnz	r3, 80073e2 <_fflush_r+0x1a>
 80073de:	f000 f887 	bl	80074f0 <__sinit>
 80073e2:	4b14      	ldr	r3, [pc, #80]	; (8007434 <_fflush_r+0x6c>)
 80073e4:	429c      	cmp	r4, r3
 80073e6:	d11b      	bne.n	8007420 <_fflush_r+0x58>
 80073e8:	686c      	ldr	r4, [r5, #4]
 80073ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0ef      	beq.n	80073d2 <_fflush_r+0xa>
 80073f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073f4:	07d0      	lsls	r0, r2, #31
 80073f6:	d404      	bmi.n	8007402 <_fflush_r+0x3a>
 80073f8:	0599      	lsls	r1, r3, #22
 80073fa:	d402      	bmi.n	8007402 <_fflush_r+0x3a>
 80073fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073fe:	f7ff fd20 	bl	8006e42 <__retarget_lock_acquire_recursive>
 8007402:	4628      	mov	r0, r5
 8007404:	4621      	mov	r1, r4
 8007406:	f7ff ff5d 	bl	80072c4 <__sflush_r>
 800740a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800740c:	4605      	mov	r5, r0
 800740e:	07da      	lsls	r2, r3, #31
 8007410:	d4e0      	bmi.n	80073d4 <_fflush_r+0xc>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	059b      	lsls	r3, r3, #22
 8007416:	d4dd      	bmi.n	80073d4 <_fflush_r+0xc>
 8007418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800741a:	f7ff fd13 	bl	8006e44 <__retarget_lock_release_recursive>
 800741e:	e7d9      	b.n	80073d4 <_fflush_r+0xc>
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <_fflush_r+0x70>)
 8007422:	429c      	cmp	r4, r3
 8007424:	d101      	bne.n	800742a <_fflush_r+0x62>
 8007426:	68ac      	ldr	r4, [r5, #8]
 8007428:	e7df      	b.n	80073ea <_fflush_r+0x22>
 800742a:	4b04      	ldr	r3, [pc, #16]	; (800743c <_fflush_r+0x74>)
 800742c:	429c      	cmp	r4, r3
 800742e:	bf08      	it	eq
 8007430:	68ec      	ldreq	r4, [r5, #12]
 8007432:	e7da      	b.n	80073ea <_fflush_r+0x22>
 8007434:	08007ccc 	.word	0x08007ccc
 8007438:	08007cec 	.word	0x08007cec
 800743c:	08007cac 	.word	0x08007cac

08007440 <std>:
 8007440:	2300      	movs	r3, #0
 8007442:	b510      	push	{r4, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	e9c0 3300 	strd	r3, r3, [r0]
 800744a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800744e:	6083      	str	r3, [r0, #8]
 8007450:	8181      	strh	r1, [r0, #12]
 8007452:	6643      	str	r3, [r0, #100]	; 0x64
 8007454:	81c2      	strh	r2, [r0, #14]
 8007456:	6183      	str	r3, [r0, #24]
 8007458:	4619      	mov	r1, r3
 800745a:	2208      	movs	r2, #8
 800745c:	305c      	adds	r0, #92	; 0x5c
 800745e:	f7fd fd2f 	bl	8004ec0 <memset>
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <std+0x38>)
 8007464:	6224      	str	r4, [r4, #32]
 8007466:	6263      	str	r3, [r4, #36]	; 0x24
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <std+0x3c>)
 800746a:	62a3      	str	r3, [r4, #40]	; 0x28
 800746c:	4b04      	ldr	r3, [pc, #16]	; (8007480 <std+0x40>)
 800746e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <std+0x44>)
 8007472:	6323      	str	r3, [r4, #48]	; 0x30
 8007474:	bd10      	pop	{r4, pc}
 8007476:	bf00      	nop
 8007478:	0800777d 	.word	0x0800777d
 800747c:	0800779f 	.word	0x0800779f
 8007480:	080077d7 	.word	0x080077d7
 8007484:	080077fb 	.word	0x080077fb

08007488 <_cleanup_r>:
 8007488:	4901      	ldr	r1, [pc, #4]	; (8007490 <_cleanup_r+0x8>)
 800748a:	f000 b8af 	b.w	80075ec <_fwalk_reent>
 800748e:	bf00      	nop
 8007490:	080073c9 	.word	0x080073c9

08007494 <__sfmoreglue>:
 8007494:	2268      	movs	r2, #104	; 0x68
 8007496:	b570      	push	{r4, r5, r6, lr}
 8007498:	1e4d      	subs	r5, r1, #1
 800749a:	4355      	muls	r5, r2
 800749c:	460e      	mov	r6, r1
 800749e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074a2:	f7fd fd7d 	bl	8004fa0 <_malloc_r>
 80074a6:	4604      	mov	r4, r0
 80074a8:	b140      	cbz	r0, 80074bc <__sfmoreglue+0x28>
 80074aa:	2100      	movs	r1, #0
 80074ac:	e9c0 1600 	strd	r1, r6, [r0]
 80074b0:	300c      	adds	r0, #12
 80074b2:	60a0      	str	r0, [r4, #8]
 80074b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074b8:	f7fd fd02 	bl	8004ec0 <memset>
 80074bc:	4620      	mov	r0, r4
 80074be:	bd70      	pop	{r4, r5, r6, pc}

080074c0 <__sfp_lock_acquire>:
 80074c0:	4801      	ldr	r0, [pc, #4]	; (80074c8 <__sfp_lock_acquire+0x8>)
 80074c2:	f7ff bcbe 	b.w	8006e42 <__retarget_lock_acquire_recursive>
 80074c6:	bf00      	nop
 80074c8:	2000051d 	.word	0x2000051d

080074cc <__sfp_lock_release>:
 80074cc:	4801      	ldr	r0, [pc, #4]	; (80074d4 <__sfp_lock_release+0x8>)
 80074ce:	f7ff bcb9 	b.w	8006e44 <__retarget_lock_release_recursive>
 80074d2:	bf00      	nop
 80074d4:	2000051d 	.word	0x2000051d

080074d8 <__sinit_lock_acquire>:
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__sinit_lock_acquire+0x8>)
 80074da:	f7ff bcb2 	b.w	8006e42 <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	2000051e 	.word	0x2000051e

080074e4 <__sinit_lock_release>:
 80074e4:	4801      	ldr	r0, [pc, #4]	; (80074ec <__sinit_lock_release+0x8>)
 80074e6:	f7ff bcad 	b.w	8006e44 <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	2000051e 	.word	0x2000051e

080074f0 <__sinit>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	4604      	mov	r4, r0
 80074f4:	f7ff fff0 	bl	80074d8 <__sinit_lock_acquire>
 80074f8:	69a3      	ldr	r3, [r4, #24]
 80074fa:	b11b      	cbz	r3, 8007504 <__sinit+0x14>
 80074fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007500:	f7ff bff0 	b.w	80074e4 <__sinit_lock_release>
 8007504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007508:	6523      	str	r3, [r4, #80]	; 0x50
 800750a:	4b13      	ldr	r3, [pc, #76]	; (8007558 <__sinit+0x68>)
 800750c:	4a13      	ldr	r2, [pc, #76]	; (800755c <__sinit+0x6c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	62a2      	str	r2, [r4, #40]	; 0x28
 8007512:	42a3      	cmp	r3, r4
 8007514:	bf08      	it	eq
 8007516:	2301      	moveq	r3, #1
 8007518:	4620      	mov	r0, r4
 800751a:	bf08      	it	eq
 800751c:	61a3      	streq	r3, [r4, #24]
 800751e:	f000 f81f 	bl	8007560 <__sfp>
 8007522:	6060      	str	r0, [r4, #4]
 8007524:	4620      	mov	r0, r4
 8007526:	f000 f81b 	bl	8007560 <__sfp>
 800752a:	60a0      	str	r0, [r4, #8]
 800752c:	4620      	mov	r0, r4
 800752e:	f000 f817 	bl	8007560 <__sfp>
 8007532:	2200      	movs	r2, #0
 8007534:	2104      	movs	r1, #4
 8007536:	60e0      	str	r0, [r4, #12]
 8007538:	6860      	ldr	r0, [r4, #4]
 800753a:	f7ff ff81 	bl	8007440 <std>
 800753e:	2201      	movs	r2, #1
 8007540:	2109      	movs	r1, #9
 8007542:	68a0      	ldr	r0, [r4, #8]
 8007544:	f7ff ff7c 	bl	8007440 <std>
 8007548:	2202      	movs	r2, #2
 800754a:	2112      	movs	r1, #18
 800754c:	68e0      	ldr	r0, [r4, #12]
 800754e:	f7ff ff77 	bl	8007440 <std>
 8007552:	2301      	movs	r3, #1
 8007554:	61a3      	str	r3, [r4, #24]
 8007556:	e7d1      	b.n	80074fc <__sinit+0xc>
 8007558:	08007930 	.word	0x08007930
 800755c:	08007489 	.word	0x08007489

08007560 <__sfp>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	4607      	mov	r7, r0
 8007564:	f7ff ffac 	bl	80074c0 <__sfp_lock_acquire>
 8007568:	4b1e      	ldr	r3, [pc, #120]	; (80075e4 <__sfp+0x84>)
 800756a:	681e      	ldr	r6, [r3, #0]
 800756c:	69b3      	ldr	r3, [r6, #24]
 800756e:	b913      	cbnz	r3, 8007576 <__sfp+0x16>
 8007570:	4630      	mov	r0, r6
 8007572:	f7ff ffbd 	bl	80074f0 <__sinit>
 8007576:	3648      	adds	r6, #72	; 0x48
 8007578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800757c:	3b01      	subs	r3, #1
 800757e:	d503      	bpl.n	8007588 <__sfp+0x28>
 8007580:	6833      	ldr	r3, [r6, #0]
 8007582:	b30b      	cbz	r3, 80075c8 <__sfp+0x68>
 8007584:	6836      	ldr	r6, [r6, #0]
 8007586:	e7f7      	b.n	8007578 <__sfp+0x18>
 8007588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800758c:	b9d5      	cbnz	r5, 80075c4 <__sfp+0x64>
 800758e:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <__sfp+0x88>)
 8007590:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007594:	60e3      	str	r3, [r4, #12]
 8007596:	6665      	str	r5, [r4, #100]	; 0x64
 8007598:	f7ff fc52 	bl	8006e40 <__retarget_lock_init_recursive>
 800759c:	f7ff ff96 	bl	80074cc <__sfp_lock_release>
 80075a0:	2208      	movs	r2, #8
 80075a2:	4629      	mov	r1, r5
 80075a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075ac:	6025      	str	r5, [r4, #0]
 80075ae:	61a5      	str	r5, [r4, #24]
 80075b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075b4:	f7fd fc84 	bl	8004ec0 <memset>
 80075b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075c0:	4620      	mov	r0, r4
 80075c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c4:	3468      	adds	r4, #104	; 0x68
 80075c6:	e7d9      	b.n	800757c <__sfp+0x1c>
 80075c8:	2104      	movs	r1, #4
 80075ca:	4638      	mov	r0, r7
 80075cc:	f7ff ff62 	bl	8007494 <__sfmoreglue>
 80075d0:	4604      	mov	r4, r0
 80075d2:	6030      	str	r0, [r6, #0]
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d1d5      	bne.n	8007584 <__sfp+0x24>
 80075d8:	f7ff ff78 	bl	80074cc <__sfp_lock_release>
 80075dc:	230c      	movs	r3, #12
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	e7ee      	b.n	80075c0 <__sfp+0x60>
 80075e2:	bf00      	nop
 80075e4:	08007930 	.word	0x08007930
 80075e8:	ffff0001 	.word	0xffff0001

080075ec <_fwalk_reent>:
 80075ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f0:	4606      	mov	r6, r0
 80075f2:	4688      	mov	r8, r1
 80075f4:	2700      	movs	r7, #0
 80075f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007602:	d505      	bpl.n	8007610 <_fwalk_reent+0x24>
 8007604:	6824      	ldr	r4, [r4, #0]
 8007606:	2c00      	cmp	r4, #0
 8007608:	d1f7      	bne.n	80075fa <_fwalk_reent+0xe>
 800760a:	4638      	mov	r0, r7
 800760c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007610:	89ab      	ldrh	r3, [r5, #12]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d907      	bls.n	8007626 <_fwalk_reent+0x3a>
 8007616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800761a:	3301      	adds	r3, #1
 800761c:	d003      	beq.n	8007626 <_fwalk_reent+0x3a>
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	47c0      	blx	r8
 8007624:	4307      	orrs	r7, r0
 8007626:	3568      	adds	r5, #104	; 0x68
 8007628:	e7e9      	b.n	80075fe <_fwalk_reent+0x12>

0800762a <__swhatbuf_r>:
 800762a:	b570      	push	{r4, r5, r6, lr}
 800762c:	460e      	mov	r6, r1
 800762e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007632:	4614      	mov	r4, r2
 8007634:	2900      	cmp	r1, #0
 8007636:	461d      	mov	r5, r3
 8007638:	b096      	sub	sp, #88	; 0x58
 800763a:	da08      	bge.n	800764e <__swhatbuf_r+0x24>
 800763c:	2200      	movs	r2, #0
 800763e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007642:	602a      	str	r2, [r5, #0]
 8007644:	061a      	lsls	r2, r3, #24
 8007646:	d410      	bmi.n	800766a <__swhatbuf_r+0x40>
 8007648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800764c:	e00e      	b.n	800766c <__swhatbuf_r+0x42>
 800764e:	466a      	mov	r2, sp
 8007650:	f000 f8fa 	bl	8007848 <_fstat_r>
 8007654:	2800      	cmp	r0, #0
 8007656:	dbf1      	blt.n	800763c <__swhatbuf_r+0x12>
 8007658:	9a01      	ldr	r2, [sp, #4]
 800765a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800765e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007662:	425a      	negs	r2, r3
 8007664:	415a      	adcs	r2, r3
 8007666:	602a      	str	r2, [r5, #0]
 8007668:	e7ee      	b.n	8007648 <__swhatbuf_r+0x1e>
 800766a:	2340      	movs	r3, #64	; 0x40
 800766c:	2000      	movs	r0, #0
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	b016      	add	sp, #88	; 0x58
 8007672:	bd70      	pop	{r4, r5, r6, pc}

08007674 <__smakebuf_r>:
 8007674:	898b      	ldrh	r3, [r1, #12]
 8007676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007678:	079d      	lsls	r5, r3, #30
 800767a:	4606      	mov	r6, r0
 800767c:	460c      	mov	r4, r1
 800767e:	d507      	bpl.n	8007690 <__smakebuf_r+0x1c>
 8007680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	2301      	movs	r3, #1
 800768a:	6163      	str	r3, [r4, #20]
 800768c:	b002      	add	sp, #8
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	466a      	mov	r2, sp
 8007692:	ab01      	add	r3, sp, #4
 8007694:	f7ff ffc9 	bl	800762a <__swhatbuf_r>
 8007698:	9900      	ldr	r1, [sp, #0]
 800769a:	4605      	mov	r5, r0
 800769c:	4630      	mov	r0, r6
 800769e:	f7fd fc7f 	bl	8004fa0 <_malloc_r>
 80076a2:	b948      	cbnz	r0, 80076b8 <__smakebuf_r+0x44>
 80076a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076a8:	059a      	lsls	r2, r3, #22
 80076aa:	d4ef      	bmi.n	800768c <__smakebuf_r+0x18>
 80076ac:	f023 0303 	bic.w	r3, r3, #3
 80076b0:	f043 0302 	orr.w	r3, r3, #2
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	e7e3      	b.n	8007680 <__smakebuf_r+0xc>
 80076b8:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <__smakebuf_r+0x7c>)
 80076ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	6020      	str	r0, [r4, #0]
 80076c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	6120      	str	r0, [r4, #16]
 80076ca:	6163      	str	r3, [r4, #20]
 80076cc:	9b01      	ldr	r3, [sp, #4]
 80076ce:	b15b      	cbz	r3, 80076e8 <__smakebuf_r+0x74>
 80076d0:	4630      	mov	r0, r6
 80076d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076d6:	f000 f8c9 	bl	800786c <_isatty_r>
 80076da:	b128      	cbz	r0, 80076e8 <__smakebuf_r+0x74>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	89a0      	ldrh	r0, [r4, #12]
 80076ea:	4305      	orrs	r5, r0
 80076ec:	81a5      	strh	r5, [r4, #12]
 80076ee:	e7cd      	b.n	800768c <__smakebuf_r+0x18>
 80076f0:	08007489 	.word	0x08007489

080076f4 <_raise_r>:
 80076f4:	291f      	cmp	r1, #31
 80076f6:	b538      	push	{r3, r4, r5, lr}
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	d904      	bls.n	8007708 <_raise_r+0x14>
 80076fe:	2316      	movs	r3, #22
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	f04f 30ff 	mov.w	r0, #4294967295
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800770a:	b112      	cbz	r2, 8007712 <_raise_r+0x1e>
 800770c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007710:	b94b      	cbnz	r3, 8007726 <_raise_r+0x32>
 8007712:	4620      	mov	r0, r4
 8007714:	f000 f830 	bl	8007778 <_getpid_r>
 8007718:	462a      	mov	r2, r5
 800771a:	4601      	mov	r1, r0
 800771c:	4620      	mov	r0, r4
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	f000 b817 	b.w	8007754 <_kill_r>
 8007726:	2b01      	cmp	r3, #1
 8007728:	d00a      	beq.n	8007740 <_raise_r+0x4c>
 800772a:	1c59      	adds	r1, r3, #1
 800772c:	d103      	bne.n	8007736 <_raise_r+0x42>
 800772e:	2316      	movs	r3, #22
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	2001      	movs	r0, #1
 8007734:	e7e7      	b.n	8007706 <_raise_r+0x12>
 8007736:	2400      	movs	r4, #0
 8007738:	4628      	mov	r0, r5
 800773a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800773e:	4798      	blx	r3
 8007740:	2000      	movs	r0, #0
 8007742:	e7e0      	b.n	8007706 <_raise_r+0x12>

08007744 <raise>:
 8007744:	4b02      	ldr	r3, [pc, #8]	; (8007750 <raise+0xc>)
 8007746:	4601      	mov	r1, r0
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	f7ff bfd3 	b.w	80076f4 <_raise_r>
 800774e:	bf00      	nop
 8007750:	200000d8 	.word	0x200000d8

08007754 <_kill_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	2300      	movs	r3, #0
 8007758:	4d06      	ldr	r5, [pc, #24]	; (8007774 <_kill_r+0x20>)
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	f7fa f8f2 	bl	800194a <_kill>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	d102      	bne.n	8007770 <_kill_r+0x1c>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	b103      	cbz	r3, 8007770 <_kill_r+0x1c>
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	bd38      	pop	{r3, r4, r5, pc}
 8007772:	bf00      	nop
 8007774:	20000518 	.word	0x20000518

08007778 <_getpid_r>:
 8007778:	f7fa b8e0 	b.w	800193c <_getpid>

0800777c <__sread>:
 800777c:	b510      	push	{r4, lr}
 800777e:	460c      	mov	r4, r1
 8007780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007784:	f000 f894 	bl	80078b0 <_read_r>
 8007788:	2800      	cmp	r0, #0
 800778a:	bfab      	itete	ge
 800778c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800778e:	89a3      	ldrhlt	r3, [r4, #12]
 8007790:	181b      	addge	r3, r3, r0
 8007792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007796:	bfac      	ite	ge
 8007798:	6563      	strge	r3, [r4, #84]	; 0x54
 800779a:	81a3      	strhlt	r3, [r4, #12]
 800779c:	bd10      	pop	{r4, pc}

0800779e <__swrite>:
 800779e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a2:	461f      	mov	r7, r3
 80077a4:	898b      	ldrh	r3, [r1, #12]
 80077a6:	4605      	mov	r5, r0
 80077a8:	05db      	lsls	r3, r3, #23
 80077aa:	460c      	mov	r4, r1
 80077ac:	4616      	mov	r6, r2
 80077ae:	d505      	bpl.n	80077bc <__swrite+0x1e>
 80077b0:	2302      	movs	r3, #2
 80077b2:	2200      	movs	r2, #0
 80077b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b8:	f000 f868 	bl	800788c <_lseek_r>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	4632      	mov	r2, r6
 80077c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	4628      	mov	r0, r5
 80077c8:	463b      	mov	r3, r7
 80077ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077d2:	f000 b817 	b.w	8007804 <_write_r>

080077d6 <__sseek>:
 80077d6:	b510      	push	{r4, lr}
 80077d8:	460c      	mov	r4, r1
 80077da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077de:	f000 f855 	bl	800788c <_lseek_r>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	bf15      	itete	ne
 80077e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077f2:	81a3      	strheq	r3, [r4, #12]
 80077f4:	bf18      	it	ne
 80077f6:	81a3      	strhne	r3, [r4, #12]
 80077f8:	bd10      	pop	{r4, pc}

080077fa <__sclose>:
 80077fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fe:	f000 b813 	b.w	8007828 <_close_r>
	...

08007804 <_write_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	4611      	mov	r1, r2
 800780c:	2200      	movs	r2, #0
 800780e:	4d05      	ldr	r5, [pc, #20]	; (8007824 <_write_r+0x20>)
 8007810:	602a      	str	r2, [r5, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	f7fa f8d0 	bl	80019b8 <_write>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_write_r+0x1e>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_write_r+0x1e>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20000518 	.word	0x20000518

08007828 <_close_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	2300      	movs	r3, #0
 800782c:	4d05      	ldr	r5, [pc, #20]	; (8007844 <_close_r+0x1c>)
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7fa f8dc 	bl	80019f0 <_close>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_close_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_close_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	20000518 	.word	0x20000518

08007848 <_fstat_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	2300      	movs	r3, #0
 800784c:	4d06      	ldr	r5, [pc, #24]	; (8007868 <_fstat_r+0x20>)
 800784e:	4604      	mov	r4, r0
 8007850:	4608      	mov	r0, r1
 8007852:	4611      	mov	r1, r2
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	f7fa f8d6 	bl	8001a06 <_fstat>
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	d102      	bne.n	8007864 <_fstat_r+0x1c>
 800785e:	682b      	ldr	r3, [r5, #0]
 8007860:	b103      	cbz	r3, 8007864 <_fstat_r+0x1c>
 8007862:	6023      	str	r3, [r4, #0]
 8007864:	bd38      	pop	{r3, r4, r5, pc}
 8007866:	bf00      	nop
 8007868:	20000518 	.word	0x20000518

0800786c <_isatty_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	2300      	movs	r3, #0
 8007870:	4d05      	ldr	r5, [pc, #20]	; (8007888 <_isatty_r+0x1c>)
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7fa f8d4 	bl	8001a24 <_isatty>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_isatty_r+0x1a>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_isatty_r+0x1a>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	20000518 	.word	0x20000518

0800788c <_lseek_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	2200      	movs	r2, #0
 8007896:	4d05      	ldr	r5, [pc, #20]	; (80078ac <_lseek_r+0x20>)
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f7fa f8cc 	bl	8001a38 <_lseek>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_lseek_r+0x1e>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_lseek_r+0x1e>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	20000518 	.word	0x20000518

080078b0 <_read_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	4611      	mov	r1, r2
 80078b8:	2200      	movs	r2, #0
 80078ba:	4d05      	ldr	r5, [pc, #20]	; (80078d0 <_read_r+0x20>)
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f7fa f85d 	bl	800197e <_read>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_read_r+0x1e>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_read_r+0x1e>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20000518 	.word	0x20000518

080078d4 <_init>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr

080078e0 <_fini>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr
