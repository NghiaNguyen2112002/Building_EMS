
Node_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007090  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080071a0  080071a0  000171a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075fc  080075fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080075fc  080075fc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075fc  080075fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007600  08007600  00017600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001dc  080077e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  080077e0  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012001  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e63  00000000  00000000  00032206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00035070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  000362e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acc6  00000000  00000000  00037418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ffb  00000000  00000000  000520de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939e9  00000000  00000000  000680d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e44  00000000  00000000  000fbb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007188 	.word	0x08007188

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007188 	.word	0x08007188

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2uiz>:
 8000d44:	0042      	lsls	r2, r0, #1
 8000d46:	d20e      	bcs.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30b      	bcc.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d409      	bmi.n	8000d6c <__aeabi_f2uiz+0x28>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2uiz+0x32>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d102      	bne.n	8000d7c <__aeabi_f2uiz+0x38>
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	4770      	bx	lr
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <Delay_us>:
 */


#include "DHT.h"

void Delay_us(DHT_Name* DHT, uint16_t duration){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(DHT->timer, 0);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(DHT->timer) < duration){}
 8000d9a:	bf00      	nop
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3f8      	bcc.n	8000d9c <Delay_us+0x18>
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <SetPinIn>:

void SetPinIn(DHT_Name* DHT){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	889b      	ldrh	r3, [r3, #4]
 8000dd0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fba1 	bl	800252c <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <SetPinOut>:

void SetPinOut(DHT_Name* DHT){
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = DHT->DHT_pin;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(DHT->DHT_port, &GPIO_InitStruct);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f107 0208 	add.w	r2, r7, #8
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 fb81 	bl	800252c <HAL_GPIO_Init>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <WritePin>:

static void WritePin(DHT_Name* DHT, uint8_t value){
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->DHT_port, DHT->DHT_pin, value);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	889b      	ldrh	r3, [r3, #4]
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f001 fd0a 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <ReadPin>:

static uint8_t ReadPin(DHT_Name* DHT){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(DHT->DHT_port, DHT->DHT_pin);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f001 fce3 	bl	8002834 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <DHT_Read>:
	SetPinOut(DHT);
	WritePin(DHT, 1);
}


void DHT_Read(DHT_Name* DHT){
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	uint16_t time_out = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	82fb      	strh	r3, [r7, #22]
	uint8_t data[5] = {0, 0, 0, 0, 0};
 8000e84:	4a84      	ldr	r2, [pc, #528]	; (8001098 <DHT_Read+0x220>)
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8e:	6018      	str	r0, [r3, #0]
 8000e90:	3304      	adds	r3, #4
 8000e92:	7019      	strb	r1, [r3, #0]
	data[2] integral Temp
	data[3] decimal Temp
	data[4] SUM
*/

	DHT->humi = DHT->temp = 0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	611a      	str	r2, [r3, #16]

	SetPinOut(DHT);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffa4 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 0);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ffc0 	bl	8000e32 <WritePin>
	HAL_Delay(20);
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	f001 f804 	bl	8001ec0 <HAL_Delay>


	SetPinIn(DHT);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff7c 	bl	8000db6 <SetPinIn>

	Delay_us(DHT, 40);
 8000ebe:	2128      	movs	r1, #40	; 0x28
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff5f 	bl	8000d84 <Delay_us>

	if(!ReadPin(DHT)){
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffc5 	bl	8000e56 <ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <DHT_Read+0x62>
		Delay_us(DHT, 80);
 8000ed2:	2150      	movs	r1, #80	; 0x50
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff55 	bl	8000d84 <Delay_us>
	}

	for(time_out = 0; (time_out < 100) && ReadPin(DHT); time_out++);
 8000eda:	2300      	movs	r3, #0
 8000edc:	82fb      	strh	r3, [r7, #22]
 8000ede:	e002      	b.n	8000ee6 <DHT_Read+0x6e>
 8000ee0:	8afb      	ldrh	r3, [r7, #22]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	82fb      	strh	r3, [r7, #22]
 8000ee6:	8afb      	ldrh	r3, [r7, #22]
 8000ee8:	2b63      	cmp	r3, #99	; 0x63
 8000eea:	d805      	bhi.n	8000ef8 <DHT_Read+0x80>
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ffb2 	bl	8000e56 <ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1f3      	bne.n	8000ee0 <DHT_Read+0x68>

//	start DHT successful => read
	for(uint8_t i = 0; i < 5; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	757b      	strb	r3, [r7, #21]
 8000efc:	e060      	b.n	8000fc0 <DHT_Read+0x148>
		for(uint8_t j = 0; j < 8; j++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	753b      	strb	r3, [r7, #20]
 8000f02:	e057      	b.n	8000fb4 <DHT_Read+0x13c>

			for(time_out = 0; (time_out < 100) && !ReadPin(DHT); time_out++);
 8000f04:	2300      	movs	r3, #0
 8000f06:	82fb      	strh	r3, [r7, #22]
 8000f08:	e002      	b.n	8000f10 <DHT_Read+0x98>
 8000f0a:	8afb      	ldrh	r3, [r7, #22]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	82fb      	strh	r3, [r7, #22]
 8000f10:	8afb      	ldrh	r3, [r7, #22]
 8000f12:	2b63      	cmp	r3, #99	; 0x63
 8000f14:	d805      	bhi.n	8000f22 <DHT_Read+0xaa>
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff9d 	bl	8000e56 <ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f3      	beq.n	8000f0a <DHT_Read+0x92>

			Delay_us(DHT, 40);
 8000f22:	2128      	movs	r1, #40	; 0x28
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff2d 	bl	8000d84 <Delay_us>

			if(!ReadPin(DHT)) data[i] &= (~(1<<(7-j)));
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff93 	bl	8000e56 <ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d117      	bne.n	8000f66 <DHT_Read+0xee>
 8000f36:	7d7b      	ldrb	r3, [r7, #21]
 8000f38:	3318      	adds	r3, #24
 8000f3a:	443b      	add	r3, r7
 8000f3c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	7d3b      	ldrb	r3, [r7, #20]
 8000f44:	f1c3 0307 	rsb	r3, r3, #7
 8000f48:	2101      	movs	r1, #1
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	4013      	ands	r3, r2
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	7d7b      	ldrb	r3, [r7, #21]
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	3318      	adds	r3, #24
 8000f5e:	443b      	add	r3, r7
 8000f60:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000f64:	e014      	b.n	8000f90 <DHT_Read+0x118>
			else data[i] |= (1 << (7-j));
 8000f66:	7d7b      	ldrb	r3, [r7, #21]
 8000f68:	3318      	adds	r3, #24
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	7d3b      	ldrb	r3, [r7, #20]
 8000f74:	f1c3 0307 	rsb	r3, r3, #7
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	7d7b      	ldrb	r3, [r7, #21]
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	3318      	adds	r3, #24
 8000f8a:	443b      	add	r3, r7
 8000f8c:	f803 2c10 	strb.w	r2, [r3, #-16]


			for(time_out = 0; (time_out < 100) && ReadPin(DHT); time_out++);
 8000f90:	2300      	movs	r3, #0
 8000f92:	82fb      	strh	r3, [r7, #22]
 8000f94:	e002      	b.n	8000f9c <DHT_Read+0x124>
 8000f96:	8afb      	ldrh	r3, [r7, #22]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	82fb      	strh	r3, [r7, #22]
 8000f9c:	8afb      	ldrh	r3, [r7, #22]
 8000f9e:	2b63      	cmp	r3, #99	; 0x63
 8000fa0:	d805      	bhi.n	8000fae <DHT_Read+0x136>
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff57 	bl	8000e56 <ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f3      	bne.n	8000f96 <DHT_Read+0x11e>
		for(uint8_t j = 0; j < 8; j++){
 8000fae:	7d3b      	ldrb	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	753b      	strb	r3, [r7, #20]
 8000fb4:	7d3b      	ldrb	r3, [r7, #20]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	d9a4      	bls.n	8000f04 <DHT_Read+0x8c>
	for(uint8_t i = 0; i < 5; i++){
 8000fba:	7d7b      	ldrb	r3, [r7, #21]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	757b      	strb	r3, [r7, #21]
 8000fc0:	7d7b      	ldrb	r3, [r7, #21]
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d99b      	bls.n	8000efe <DHT_Read+0x86>
		}
	}

	if(data[4] != (data[0] + data[1] + data[2] + data[3]))
 8000fc6:	7b3b      	ldrb	r3, [r7, #12]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	7a3b      	ldrb	r3, [r7, #8]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	7a7b      	ldrb	r3, [r7, #9]
 8000fd0:	440b      	add	r3, r1
 8000fd2:	7ab9      	ldrb	r1, [r7, #10]
 8000fd4:	440b      	add	r3, r1
 8000fd6:	7af9      	ldrb	r1, [r7, #11]
 8000fd8:	440b      	add	r3, r1
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d157      	bne.n	800108e <DHT_Read+0x216>
		return;

	humi = (float)(data[0] * 1.0 + data[1] / 10.0);
 8000fde:	7a3b      	ldrb	r3, [r7, #8]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa0f 	bl	8000404 <__aeabi_i2d>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	460d      	mov	r5, r1
 8000fea:	7a7b      	ldrb	r3, [r7, #9]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa09 	bl	8000404 <__aeabi_i2d>
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <DHT_Read+0x224>)
 8000ff8:	f7ff fb98 	bl	800072c <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4620      	mov	r0, r4
 8001002:	4629      	mov	r1, r5
 8001004:	f7ff f8b2 	bl	800016c <__adddf3>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd3a 	bl	8000a88 <__aeabi_d2f>
 8001014:	4603      	mov	r3, r0
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fe94 	bl	8000d44 <__aeabi_f2uiz>
 800101c:	4603      	mov	r3, r0
 800101e:	827b      	strh	r3, [r7, #18]
	temp = (float)(data[2] * 1.0 + data[3] / 10.0);
 8001020:	7abb      	ldrb	r3, [r7, #10]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f9ee 	bl	8000404 <__aeabi_i2d>
 8001028:	4604      	mov	r4, r0
 800102a:	460d      	mov	r5, r1
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f9e8 	bl	8000404 <__aeabi_i2d>
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <DHT_Read+0x224>)
 800103a:	f7ff fb77 	bl	800072c <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4620      	mov	r0, r4
 8001044:	4629      	mov	r1, r5
 8001046:	f7ff f891 	bl	800016c <__adddf3>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd19 	bl	8000a88 <__aeabi_d2f>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe73 	bl	8000d44 <__aeabi_f2uiz>
 800105e:	4603      	mov	r3, r0
 8001060:	823b      	strh	r3, [r7, #16]

	DHT->humi = humi;
 8001062:	8a7b      	ldrh	r3, [r7, #18]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fe15 	bl	8000c94 <__aeabi_ui2f>
 800106a:	4602      	mov	r2, r0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	611a      	str	r2, [r3, #16]
	DHT->temp = temp;
 8001070:	8a3b      	ldrh	r3, [r7, #16]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fe0e 	bl	8000c94 <__aeabi_ui2f>
 8001078:	4602      	mov	r2, r0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60da      	str	r2, [r3, #12]

	SetPinOut(DHT);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff feb7 	bl	8000df2 <SetPinOut>
	WritePin(DHT, 1);
 8001084:	2101      	movs	r1, #1
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fed3 	bl	8000e32 <WritePin>
 800108c:	e000      	b.n	8001090 <DHT_Read+0x218>
		return;
 800108e:	bf00      	nop
}
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bdb0      	pop	{r4, r5, r7, pc}
 8001096:	bf00      	nop
 8001098:	080071a0 	.word	0x080071a0
 800109c:	40240000 	.word	0x40240000

080010a0 <DHT_GetTemp>:

float DHT_GetTemp(DHT_Name* DHT){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
//	return 30.4;
//	return random()%100 + random()%10 / 10.0;
	return DHT->temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <DHT_GetHumi>:

float DHT_GetHumi(DHT_Name* DHT){
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
//	return 50.4;
//	return random()%100 + random()%10 / 10.0;
	return DHT->humi;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <ConvertToJsonString>:

uint8_t mode;
char json_str[200];


uint8_t ConvertToJsonString(void){
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af06      	add	r7, sp, #24
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
										"\"GAS\":%u,\"SMOKE\":%u}#",
										NODE_ID, _data.temp, _data.humid,
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <ConvertToJsonString+0x4c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f9a6 	bl	8000428 <__aeabi_f2d>
 80010dc:	4604      	mov	r4, r0
 80010de:	460d      	mov	r5, r1
										NODE_ID, _data.temp, _data.humid,
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <ConvertToJsonString+0x4c>)
 80010e2:	689b      	ldr	r3, [r3, #8]
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f99f 	bl	8000428 <__aeabi_f2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
										_data.gas, _data.smoke);
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <ConvertToJsonString+0x4c>)
 80010f0:	8989      	ldrh	r1, [r1, #12]
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 80010f2:	4608      	mov	r0, r1
										_data.gas, _data.smoke);
 80010f4:	4908      	ldr	r1, [pc, #32]	; (8001118 <ConvertToJsonString+0x4c>)
 80010f6:	89c9      	ldrh	r1, [r1, #14]
	return sprintf(json_str, "{\"ID\":%u,\"TEMP\":%0.1f,\"HUMI\":%0.1f,"
 80010f8:	9105      	str	r1, [sp, #20]
 80010fa:	9004      	str	r0, [sp, #16]
 80010fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001100:	e9cd 4500 	strd	r4, r5, [sp]
 8001104:	2200      	movs	r2, #0
 8001106:	4905      	ldr	r1, [pc, #20]	; (800111c <ConvertToJsonString+0x50>)
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <ConvertToJsonString+0x54>)
 800110a:	f003 feb9 	bl	8004e80 <siprintf>
 800110e:	4603      	mov	r3, r0
 8001110:	b2db      	uxtb	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	200002c4 	.word	0x200002c4
 800111c:	080071a8 	.word	0x080071a8
 8001120:	200001fc 	.word	0x200001fc

08001124 <FSM_SystemControl>:

//==================HIGH LEVEL FUNCTION==================//
void FSM_Init(void){
	mode = READ_DATA;
}
void FSM_SystemControl(void){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	switch(mode){
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <FSM_SystemControl+0xa4>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d844      	bhi.n	80011ba <FSM_SystemControl+0x96>
 8001130:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <FSM_SystemControl+0x14>)
 8001132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001136:	bf00      	nop
 8001138:	08001149 	.word	0x08001149
 800113c:	08001151 	.word	0x08001151
 8001140:	08001159 	.word	0x08001159
 8001144:	080011b3 	.word	0x080011b3
	case INIT:

//		_time_read_data = TIME_READ_DATA;
		mode = IDLING;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <FSM_SystemControl+0xa4>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
		break;
 800114e:	e038      	b.n	80011c2 <FSM_SystemControl+0x9e>
	case IDLING:
		mode = READ_DATA;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <FSM_SystemControl+0xa4>)
 8001152:	2202      	movs	r2, #2
 8001154:	701a      	strb	r2, [r3, #0]
		break;
 8001156:	e034      	b.n	80011c2 <FSM_SystemControl+0x9e>
	case READ_DATA:
		CLCD_PrintStringBuffer(0, 0, "READ DATA");
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <FSM_SystemControl+0xa8>)
 800115a:	2100      	movs	r1, #0
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f90d 	bl	800137c <CLCD_PrintStringBuffer>

		DHT_Read(&_dht);
 8001162:	481b      	ldr	r0, [pc, #108]	; (80011d0 <FSM_SystemControl+0xac>)
 8001164:	f7ff fe88 	bl	8000e78 <DHT_Read>

		_data.temp = DHT_GetTemp(&_dht);
 8001168:	4819      	ldr	r0, [pc, #100]	; (80011d0 <FSM_SystemControl+0xac>)
 800116a:	f7ff ff99 	bl	80010a0 <DHT_GetTemp>
 800116e:	4603      	mov	r3, r0
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <FSM_SystemControl+0xb0>)
 8001172:	6053      	str	r3, [r2, #4]
		_data.humid = DHT_GetHumi(&_dht);
 8001174:	4816      	ldr	r0, [pc, #88]	; (80011d0 <FSM_SystemControl+0xac>)
 8001176:	f7ff ff9e 	bl	80010b6 <DHT_GetHumi>
 800117a:	4603      	mov	r3, r0
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <FSM_SystemControl+0xb0>)
 800117e:	6093      	str	r3, [r2, #8]

		_data.gas = IN_GetValue_Gas();
 8001180:	f000 f82e 	bl	80011e0 <IN_GetValue_Gas>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <FSM_SystemControl+0xb0>)
 800118a:	819a      	strh	r2, [r3, #12]
		_data.smoke = IN_GetValue_Smoke();
 800118c:	f000 f832 	bl	80011f4 <IN_GetValue_Smoke>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <FSM_SystemControl+0xb0>)
 8001196:	81da      	strh	r2, [r3, #14]
		CLCD_PrintStringBuffer(0, 0, "SEND DATA");
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <FSM_SystemControl+0xb4>)
 800119a:	2100      	movs	r1, #0
 800119c:	2000      	movs	r0, #0
 800119e:	f000 f8ed 	bl	800137c <CLCD_PrintStringBuffer>

				ZB_SendMsg(json_str, ConvertToJsonString());
 80011a2:	f7ff ff93 	bl	80010cc <ConvertToJsonString>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4619      	mov	r1, r3
 80011aa:	480c      	ldr	r0, [pc, #48]	; (80011dc <FSM_SystemControl+0xb8>)
 80011ac:	f000 fde0 	bl	8001d70 <ZB_SendMsg>
//		mode = SEND_DATA;
		break;
 80011b0:	e007      	b.n	80011c2 <FSM_SystemControl+0x9e>
	case SEND_DATA:


//		_time_read_data = TIME_READ_DATA;
		mode = IDLING;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <FSM_SystemControl+0xa4>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
		break;
 80011b8:	e003      	b.n	80011c2 <FSM_SystemControl+0x9e>
	default:
		mode = INIT;
 80011ba:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <FSM_SystemControl+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
	}
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001f8 	.word	0x200001f8
 80011cc:	080071e4 	.word	0x080071e4
 80011d0:	200002d4 	.word	0x200002d4
 80011d4:	200002c4 	.word	0x200002c4
 80011d8:	080071f0 	.word	0x080071f0
 80011dc:	200001fc 	.word	0x200001fc

080011e0 <IN_GetValue_Gas>:

	HAL_ADC_Start_DMA(hadc, (uint32_t*) ADC_value, 2);
}


uint16_t IN_GetValue_Gas(void){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	return ADC_value[1];
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <IN_GetValue_Gas+0x10>)
 80011e6:	885b      	ldrh	r3, [r3, #2]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	200002e8 	.word	0x200002e8

080011f4 <IN_GetValue_Smoke>:

uint16_t IN_GetValue_Smoke(void){
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	return ADC_value[0];
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <IN_GetValue_Smoke+0x10>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	200002e8 	.word	0x200002e8

08001208 <WriteI2C>:
static void Delay(uint16_t time){
	HAL_Delay(time);
}


static void WriteI2C(uint8_t data, uint8_t mode){
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f023 030f 	bic.w	r3, r3, #15
 800121e:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <WriteI2C+0x90>)
 8001228:	7adb      	ldrb	r3, [r3, #11]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d107      	bne.n	8001254 <WriteI2C+0x4c>
		dataH |= LCD_RS;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	b2db      	uxtb	r3, r3
 800125c:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	b2db      	uxtb	r3, r3
 800126a:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <WriteI2C+0x90>)
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <WriteI2C+0x90>)
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	b29b      	uxth	r3, r3
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	b299      	uxth	r1, r3
 800127e:	f107 0208 	add.w	r2, r7, #8
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2304      	movs	r3, #4
 800128a:	f001 fc5f 	bl	8002b4c <HAL_I2C_Master_Transmit>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200002f0 	.word	0x200002f0

0800129c <SetCursor>:
	Delay(1);

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
}

void SetCursor(uint8_t row, uint8_t col){
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	460a      	mov	r2, r1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <SetCursor+0x8c>)
 80012b2:	799a      	ldrb	r2, [r3, #6]
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80012ba:	fb01 f202 	mul.w	r2, r1, r2
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <SetCursor+0x8c>)
 80012c4:	795a      	ldrb	r2, [r3, #5]
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80012cc:	fb01 f202 	mul.w	r2, r1, r2
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]

	switch(row){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d819      	bhi.n	800130e <SetCursor+0x72>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <SetCursor+0x44>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	080012f7 	.word	0x080012f7
 80012e8:	080012ff 	.word	0x080012ff
 80012ec:	08001307 	.word	0x08001307
	case 0:
		address_dram = 0x00 + col;
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	73fb      	strb	r3, [r7, #15]
		break;
 80012f4:	e00b      	b.n	800130e <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	3340      	adds	r3, #64	; 0x40
 80012fa:	73fb      	strb	r3, [r7, #15]
		break;
 80012fc:	e007      	b.n	800130e <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	3314      	adds	r3, #20
 8001302:	73fb      	strb	r3, [r7, #15]
		break;
 8001304:	e003      	b.n	800130e <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	3354      	adds	r3, #84	; 0x54
 800130a:	73fb      	strb	r3, [r7, #15]
		break;
 800130c:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff75 	bl	8001208 <WriteI2C>
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002f0 	.word	0x200002f0

0800132c <UpdateCharBuffer>:
void CLCD_BackLight(uint8_t is_on){
	LCD.BACKLIGHT = is_on ? LCD_BACKLIGHT : LCD_NOBACKLIGHT;
}


void UpdateCharBuffer(uint8_t c){
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <UpdateCharBuffer+0x40>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <UpdateCharBuffer+0x44>)
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	4611      	mov	r1, r2
 8001340:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <UpdateCharBuffer+0x48>)
 8001342:	7952      	ldrb	r2, [r2, #5]
 8001344:	fb01 f202 	mul.w	r2, r1, r2
 8001348:	490b      	ldr	r1, [pc, #44]	; (8001378 <UpdateCharBuffer+0x4c>)
 800134a:	7809      	ldrb	r1, [r1, #0]
 800134c:	440a      	add	r2, r1
 800134e:	4413      	add	r3, r2
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	701a      	strb	r2, [r3, #0]
	currentCol++;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <UpdateCharBuffer+0x4c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <UpdateCharBuffer+0x4c>)
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200002ec 	.word	0x200002ec
 8001370:	200002fd 	.word	0x200002fd
 8001374:	200002f0 	.word	0x200002f0
 8001378:	200002fc 	.word	0x200002fc

0800137c <CLCD_PrintStringBuffer>:
	currentRow = row % LCD.ROW;
	currentCol = col % LCD.COL;
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
}

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	603a      	str	r2, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	460b      	mov	r3, r1
 800138a:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <CLCD_PrintStringBuffer+0x60>)
 800138e:	799a      	ldrb	r2, [r3, #6]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	fbb3 f1f2 	udiv	r1, r3, r2
 8001396:	fb01 f202 	mul.w	r2, r1, r2
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <CLCD_PrintStringBuffer+0x64>)
 80013a0:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <CLCD_PrintStringBuffer+0x60>)
 80013a4:	795a      	ldrb	r2, [r3, #5]
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80013ac:	fb01 f202 	mul.w	r2, r1, r2
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <CLCD_PrintStringBuffer+0x68>)
 80013b6:	701a      	strb	r2, [r3, #0]
	while(*str){
 80013b8:	e006      	b.n	80013c8 <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	603a      	str	r2, [r7, #0]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffb2 	bl	800132c <UpdateCharBuffer>
	while(*str){
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f4      	bne.n	80013ba <CLCD_PrintStringBuffer+0x3e>
	}
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002f0 	.word	0x200002f0
 80013e0:	200002fd 	.word	0x200002fd
 80013e4:	200002fc 	.word	0x200002fc

080013e8 <CLCD_ClearBuffer>:
    UpdateCharBuffer('.');
    UpdateCharBuffer(decimal_part % 10 + '0');
}


void CLCD_ClearBuffer(void){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	e008      	b.n	8001406 <CLCD_ClearBuffer+0x1e>
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <CLCD_ClearBuffer+0x40>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4413      	add	r3, r2
 80013fc:	2220      	movs	r2, #32
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	3301      	adds	r3, #1
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <CLCD_ClearBuffer+0x44>)
 800140a:	799b      	ldrb	r3, [r3, #6]
 800140c:	4619      	mov	r1, r3
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <CLCD_ClearBuffer+0x44>)
 8001410:	795b      	ldrb	r3, [r3, #5]
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	429a      	cmp	r2, r3
 8001418:	dbec      	blt.n	80013f4 <CLCD_ClearBuffer+0xc>
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200002ec 	.word	0x200002ec
 800142c:	200002f0 	.word	0x200002f0

08001430 <CLCD_DisplayScreen>:

void CLCD_DisplayScreen(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	e021      	b.n	8001480 <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff2b 	bl	800129c <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 8001446:	2300      	movs	r3, #0
 8001448:	71bb      	strb	r3, [r7, #6]
 800144a:	e011      	b.n	8001470 <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <CLCD_DisplayScreen+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	79fa      	ldrb	r2, [r7, #7]
 8001452:	4911      	ldr	r1, [pc, #68]	; (8001498 <CLCD_DisplayScreen+0x68>)
 8001454:	7949      	ldrb	r1, [r1, #5]
 8001456:	fb02 f101 	mul.w	r1, r2, r1
 800145a:	79ba      	ldrb	r2, [r7, #6]
 800145c:	440a      	add	r2, r1
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2101      	movs	r1, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fecf 	bl	8001208 <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	3301      	adds	r3, #1
 800146e:	71bb      	strb	r3, [r7, #6]
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <CLCD_DisplayScreen+0x68>)
 8001472:	795b      	ldrb	r3, [r3, #5]
 8001474:	79ba      	ldrb	r2, [r7, #6]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3e8      	bcc.n	800144c <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	3301      	adds	r3, #1
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <CLCD_DisplayScreen+0x68>)
 8001482:	799b      	ldrb	r3, [r3, #6]
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3d8      	bcc.n	800143c <CLCD_DisplayScreen+0xc>
		}
	}
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200002ec 	.word	0x200002ec
 8001498:	200002f0 	.word	0x200002f0

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 fcac 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f82e 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f000 f9c8 	bl	800183c <MX_GPIO_Init>
  MX_TIM2_Init();
 80014ac:	f000 f900 	bl	80016b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014b0:	f000 f94c 	bl	800174c <MX_TIM3_Init>
  MX_ADC1_Init();
 80014b4:	f000 f880 	bl	80015b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80014b8:	f000 f8cc 	bl	8001654 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014bc:	f000 f994 	bl	80017e8 <MX_USART1_UART_Init>
//  CLCD_Init(&hi2c1, 0x27, 2, 16);
//
//  FSM_Init();

  //	  Config for sleep mode
  	  HAL_SuspendTick();	//stop systick
 80014c0:	f000 fd22 	bl	8001f08 <HAL_SuspendTick>
  	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014c4:	2101      	movs	r1, #1
 80014c6:	2000      	movs	r0, #0
 80014c8:	f001 fe46 	bl	8003158 <HAL_PWR_EnterSLEEPMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ResumeTick();
 80014cc:	f000 fd2a 	bl	8001f24 <HAL_ResumeTick>

	  if(TM_IsFlag()){
 80014d0:	f000 fc3c 	bl	8001d4c <TM_IsFlag>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00a      	beq.n	80014f0 <main+0x54>
		  CLCD_ClearBuffer();
 80014da:	f7ff ff85 	bl	80013e8 <CLCD_ClearBuffer>
//		  x = DHT_GetHumi(&_dht0);

//		  CLCD_PrintNumBuffer(0, 0, IN_GetValue_MP2());
//		  CLCD_PrintNumBuffer(1, 0, IN_GetValue_MQ2());

		  FSM_SystemControl();
 80014de:	f7ff fe21 	bl	8001124 <FSM_SystemControl>

		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80014e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <main+0x64>)
 80014e8:	f001 f9d3 	bl	8002892 <HAL_GPIO_TogglePin>

		  CLCD_DisplayScreen();
 80014ec:	f7ff ffa0 	bl	8001430 <CLCD_DisplayScreen>


	  }

//	  Config for sleep mode
	  HAL_SuspendTick();	//stop systick
 80014f0:	f000 fd0a 	bl	8001f08 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014f4:	2101      	movs	r1, #1
 80014f6:	2000      	movs	r0, #0
 80014f8:	f001 fe2e 	bl	8003158 <HAL_PWR_EnterSLEEPMode>
	  HAL_ResumeTick();
 80014fc:	e7e6      	b.n	80014cc <main+0x30>
 80014fe:	bf00      	nop
 8001500:	40011000 	.word	0x40011000

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	2228      	movs	r2, #40	; 0x28
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f002 ff60 	bl	80043d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	2301      	movs	r3, #1
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001550:	2300      	movs	r3, #0
 8001552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fe19 	bl	8003190 <HAL_RCC_OscConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001564:	f000 f9d6 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	230f      	movs	r3, #15
 800156a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001578:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f002 f885 	bl	8003694 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001590:	f000 f9c0 	bl	8001914 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001594:	2302      	movs	r3, #2
 8001596:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fa10 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015aa:	f000 f9b3 	bl	8001914 <Error_Handler>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3750      	adds	r7, #80	; 0x50
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_ADC1_Init+0x94>)
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <MX_ADC1_Init+0x98>)
 80015cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_ADC1_Init+0x94>)
 80015d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_ADC1_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_ADC1_Init+0x94>)
 80015de:	2200      	movs	r2, #0
 80015e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_ADC1_Init+0x94>)
 80015e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_ADC1_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_ADC1_Init+0x94>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f6:	4815      	ldr	r0, [pc, #84]	; (800164c <MX_ADC1_Init+0x94>)
 80015f8:	f000 fca2 	bl	8001f40 <HAL_ADC_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001602:	f000 f987 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800160a:	2301      	movs	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800160e:	2307      	movs	r3, #7
 8001610:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_ADC1_Init+0x94>)
 8001618:	f000 fd6a 	bl	80020f0 <HAL_ADC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001622:	f000 f977 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001626:	2301      	movs	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800162a:	2302      	movs	r3, #2
 800162c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_ADC1_Init+0x94>)
 8001634:	f000 fd5c 	bl	80020f0 <HAL_ADC_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800163e:	f000 f969 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000300 	.word	0x20000300
 8001650:	40012400 	.word	0x40012400

08001654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_I2C1_Init+0x50>)
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <MX_I2C1_Init+0x54>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_I2C1_Init+0x50>)
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <MX_I2C1_Init+0x58>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_I2C1_Init+0x50>)
 8001672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_I2C1_Init+0x50>)
 8001692:	f001 f917 	bl	80028c4 <HAL_I2C_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800169c:	f000 f93a 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000330 	.word	0x20000330
 80016a8:	40005400 	.word	0x40005400
 80016ac:	000186a0 	.word	0x000186a0

080016b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_TIM2_Init+0x98>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <MX_TIM2_Init+0x98>)
 80016d6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80016da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_TIM2_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <MX_TIM2_Init+0x98>)
 80016e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_TIM2_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <MX_TIM2_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <MX_TIM2_Init+0x98>)
 80016f8:	f002 fa1a 	bl	8003b30 <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001702:	f000 f907 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4619      	mov	r1, r3
 8001712:	480d      	ldr	r0, [pc, #52]	; (8001748 <MX_TIM2_Init+0x98>)
 8001714:	f002 fa5b 	bl	8003bce <HAL_TIM_ConfigClockSource>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800171e:	f000 f8f9 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001722:	2320      	movs	r3, #32
 8001724:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <MX_TIM2_Init+0x98>)
 8001730:	f002 fc0a 	bl	8003f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800173a:	f000 f8eb 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000384 	.word	0x20000384

0800174c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_TIM3_Init+0x94>)
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <MX_TIM3_Init+0x98>)
 800176c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_TIM3_Init+0x94>)
 8001770:	220f      	movs	r2, #15
 8001772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_TIM3_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_TIM3_Init+0x94>)
 800177c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001780:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_TIM3_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_TIM3_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800178e:	4814      	ldr	r0, [pc, #80]	; (80017e0 <MX_TIM3_Init+0x94>)
 8001790:	f002 f9ce 	bl	8003b30 <HAL_TIM_Base_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800179a:	f000 f8bb 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	4619      	mov	r1, r3
 80017aa:	480d      	ldr	r0, [pc, #52]	; (80017e0 <MX_TIM3_Init+0x94>)
 80017ac:	f002 fa0f 	bl	8003bce <HAL_TIM_ConfigClockSource>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80017b6:	f000 f8ad 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <MX_TIM3_Init+0x94>)
 80017c8:	f002 fbbe 	bl	8003f48 <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017d2:	f000 f89f 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200003cc 	.word	0x200003cc
 80017e4:	40000400 	.word	0x40000400

080017e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <MX_USART1_UART_Init+0x50>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 80017f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_USART1_UART_Init+0x4c>)
 8001820:	f002 fbf0 	bl	8004004 <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800182a:	f000 f873 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000414 	.word	0x20000414
 8001838:	40013800 	.word	0x40013800

0800183c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <MX_GPIO_Init+0xcc>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a2c      	ldr	r2, [pc, #176]	; (8001908 <MX_GPIO_Init+0xcc>)
 8001856:	f043 0310 	orr.w	r3, r3, #16
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <MX_GPIO_Init+0xcc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <MX_GPIO_Init+0xcc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <MX_GPIO_Init+0xcc>)
 800186e:	f043 0320 	orr.w	r3, r3, #32
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <MX_GPIO_Init+0xcc>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0320 	and.w	r3, r3, #32
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <MX_GPIO_Init+0xcc>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a20      	ldr	r2, [pc, #128]	; (8001908 <MX_GPIO_Init+0xcc>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <MX_GPIO_Init+0xcc>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <MX_GPIO_Init+0xcc>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <MX_GPIO_Init+0xcc>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <MX_GPIO_Init+0xcc>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <MX_GPIO_Init+0xd0>)
 80018b8:	f000 ffd3 	bl	8002862 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	2108      	movs	r1, #8
 80018c0:	4813      	ldr	r0, [pc, #76]	; (8001910 <MX_GPIO_Init+0xd4>)
 80018c2:	f000 ffce 	bl	8002862 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <MX_GPIO_Init+0xd0>)
 80018e0:	f000 fe24 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 80018e4:	2308      	movs	r3, #8
 80018e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_GPIO_Init+0xd4>)
 80018fc:	f000 fe16 	bl	800252c <HAL_GPIO_Init>

}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	40011000 	.word	0x40011000
 8001910:	40010800 	.word	0x40010800

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_MspInit+0x5c>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_MspInit+0x5c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6193      	str	r3, [r2, #24]
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_MspInit+0x5c>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x5c>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_MspInit+0x5c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_MspInit+0x5c>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_MspInit+0x60>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_MspInit+0x60>)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000

08001984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <HAL_ADC_MspInit+0x6c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d121      	bne.n	80019e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_ADC_MspInit+0x70>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <HAL_ADC_MspInit+0x70>)
 80019aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_ADC_MspInit+0x70>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_ADC_MspInit+0x70>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <HAL_ADC_MspInit+0x70>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_ADC_MspInit+0x70>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GAS_Pin|SMOKE_Pin;
 80019d4:	2303      	movs	r3, #3
 80019d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d8:	2303      	movs	r3, #3
 80019da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_ADC_MspInit+0x74>)
 80019e4:	f000 fda2 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40012400 	.word	0x40012400
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010800 	.word	0x40010800

080019fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <HAL_I2C_MspInit+0x70>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d123      	bne.n	8001a64 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_I2C_MspInit+0x74>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <HAL_I2C_MspInit+0x74>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_I2C_MspInit+0x74>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a34:	23c0      	movs	r3, #192	; 0xc0
 8001a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a38:	2312      	movs	r3, #18
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4619      	mov	r1, r3
 8001a46:	480b      	ldr	r0, [pc, #44]	; (8001a74 <HAL_I2C_MspInit+0x78>)
 8001a48:	f000 fd70 	bl	800252c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_I2C_MspInit+0x74>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_I2C_MspInit+0x74>)
 8001a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a56:	61d3      	str	r3, [r2, #28]
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_I2C_MspInit+0x74>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010c00 	.word	0x40010c00

08001a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_TIM_Base_MspInit+0x58>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_TIM_Base_MspInit+0x58>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_TIM_Base_MspInit+0x58>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aa2:	e010      	b.n	8001ac6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10b      	bne.n	8001ac6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_TIM_Base_MspInit+0x58>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_TIM_Base_MspInit+0x58>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_TIM_Base_MspInit+0x58>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <HAL_UART_MspInit+0x8c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d131      	bne.n	8001b5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_UART_MspInit+0x90>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_UART_MspInit+0x90>)
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_UART_MspInit+0x90>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_UART_MspInit+0x90>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0x90>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_UART_MspInit+0x90>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <HAL_UART_MspInit+0x94>)
 8001b3e:	f000 fcf5 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <HAL_UART_MspInit+0x94>)
 8001b58:	f000 fce8 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010800 	.word	0x40010800

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <NMI_Handler+0x4>

08001b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <MemManage_Handler+0x4>

08001b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler+0x4>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <UsageFault_Handler+0x4>

08001b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb6:	f000 f967 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <_kill>:

int _kill(int pid, int sig)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd6:	f002 fbcd 	bl	8004374 <__errno>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2216      	movs	r2, #22
 8001bde:	601a      	str	r2, [r3, #0]
  return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_exit>:

void _exit (int status)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ffe7 	bl	8001bcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfe:	e7fe      	b.n	8001bfe <_exit+0x12>

08001c00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e00a      	b.n	8001c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c12:	f3af 8000 	nop.w
 8001c16:	4601      	mov	r1, r0
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	b2ca      	uxtb	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbf0      	blt.n	8001c12 <_read+0x12>
  }

  return len;
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e009      	b.n	8001c60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf1      	blt.n	8001c4c <_write+0x12>
  }
  return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_close>:

int _close(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c98:	605a      	str	r2, [r3, #4]
  return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <_isatty>:

int _isatty(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f002 fb36 	bl	8004374 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20005000 	.word	0x20005000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	20000458 	.word	0x20000458
 8001d3c:	20000478 	.word	0x20000478

08001d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <TM_IsFlag>:
	MUL_timer = duration / TIME_CYCLE;
	counter_timer = MUL_timer;
	flag_timer = 0;
}

uint8_t TM_IsFlag(void){
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
	if(flag_timer) {
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <TM_IsFlag+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <TM_IsFlag+0x16>
		flag_timer = 0;
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <TM_IsFlag+0x20>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
		return 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <TM_IsFlag+0x18>
	}
	return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	2000045c 	.word	0x2000045c

08001d70 <ZB_SendMsg>:
void ZB_Init(UART_HandleTypeDef* huart){
	uart_zigbee = huart;

}

void ZB_SendMsg(char* msg, uint8_t length){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i = 0; i < length; i++){
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e00b      	b.n	8001d9a <ZB_SendMsg+0x2a>
		HAL_UART_Transmit(uart_zigbee, msg + i, 1, 100);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <ZB_SendMsg+0x3c>)
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	18d1      	adds	r1, r2, r3
 8001d8c:	2364      	movs	r3, #100	; 0x64
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f002 f985 	bl	800409e <HAL_UART_Transmit>
	for(i = 0; i < length; i++){
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	3301      	adds	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3ef      	bcc.n	8001d82 <ZB_SendMsg+0x12>
	}

//	HAL_UART_Transmit(uart_zigbee, (uint8_t*)msg, length, 2000);


}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000460 	.word	0x20000460

08001db0 <Reset_Handler>:
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <LoopFillZerobss+0x12>)
 8001db2:	490d      	ldr	r1, [pc, #52]	; (8001de8 <LoopFillZerobss+0x16>)
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <LoopFillZerobss+0x1a>)
 8001db6:	2300      	movs	r3, #0
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:
 8001dba:	58d4      	ldr	r4, [r2, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:
 8001dc0:	18c4      	adds	r4, r0, r3
 8001dc2:	428c      	cmp	r4, r1
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <LoopFillZerobss+0x1e>)
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <LoopFillZerobss+0x22>)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:
 8001dd2:	42a2      	cmp	r2, r4
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>
 8001dd6:	f7ff ffb3 	bl	8001d40 <SystemInit>
 8001dda:	f002 fad1 	bl	8004380 <__libc_init_array>
 8001dde:	f7ff fb5d 	bl	800149c <main>
 8001de2:	4770      	bx	lr
 8001de4:	20000000 	.word	0x20000000
 8001de8:	200001dc 	.word	0x200001dc
 8001dec:	08007604 	.word	0x08007604
 8001df0:	200001dc 	.word	0x200001dc
 8001df4:	20000478 	.word	0x20000478

08001df8 <ADC1_2_IRQHandler>:
 8001df8:	e7fe      	b.n	8001df8 <ADC1_2_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_Init+0x28>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x28>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 fb59 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	200f      	movs	r0, #15
 8001e14:	f000 f808 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fd82 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fb63 	bl	8002512 <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f000 fb39 	bl	80024da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_IncTick+0x1c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000464 	.word	0x20000464

08001eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <HAL_GetTick+0x10>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	20000464 	.word	0x20000464

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff fff0 	bl	8001eac <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffe0 	bl	8001eac <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008

08001f08 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_SuspendTick+0x18>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_SuspendTick+0x18>)
 8001f12:	f023 0302 	bic.w	r3, r3, #2
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_ResumeTick+0x18>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_ResumeTick+0x18>)
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0be      	b.n	80020e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fd00 	bl	8001984 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f9ab 	bl	80022e0 <ADC_ConversionStop_Disable>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 8099 	bne.w	80020ce <HAL_ADC_Init+0x18e>
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8095 	bne.w	80020ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fac:	f023 0302 	bic.w	r3, r3, #2
 8001fb0:	f043 0202 	orr.w	r2, r3, #2
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7b1b      	ldrb	r3, [r3, #12]
 8001fc6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fc8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd8:	d003      	beq.n	8001fe2 <HAL_ADC_Init+0xa2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <HAL_ADC_Init+0xa8>
 8001fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe6:	e000      	b.n	8001fea <HAL_ADC_Init+0xaa>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7d1b      	ldrb	r3, [r3, #20]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d119      	bne.n	800202c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7b1b      	ldrb	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	3b01      	subs	r3, #1
 8002006:	035a      	lsls	r2, r3, #13
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e00b      	b.n	800202c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_ADC_Init+0x1a8>)
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	430b      	orrs	r3, r1
 8002052:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800205c:	d003      	beq.n	8002066 <HAL_ADC_Init+0x126>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d104      	bne.n	8002070 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	3b01      	subs	r3, #1
 800206c:	051b      	lsls	r3, r3, #20
 800206e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	430a      	orrs	r2, r1
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_ADC_Init+0x1ac>)
 800208c:	4013      	ands	r3, r2
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	429a      	cmp	r2, r3
 8002092:	d10b      	bne.n	80020ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020aa:	e018      	b.n	80020de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f023 0312 	bic.w	r3, r3, #18
 80020b4:	f043 0210 	orr.w	r2, r3, #16
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020cc:	e007      	b.n	80020de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	ffe1f7fd 	.word	0xffe1f7fd
 80020ec:	ff1f0efe 	.word	0xff1f0efe

080020f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x20>
 800210c:	2302      	movs	r3, #2
 800210e:	e0dc      	b.n	80022ca <HAL_ADC_ConfigChannel+0x1da>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b06      	cmp	r3, #6
 800211e:	d81c      	bhi.n	800215a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b05      	subs	r3, #5
 8002132:	221f      	movs	r2, #31
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	4019      	ands	r1, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b05      	subs	r3, #5
 800214c:	fa00 f203 	lsl.w	r2, r0, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	635a      	str	r2, [r3, #52]	; 0x34
 8002158:	e03c      	b.n	80021d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d81c      	bhi.n	800219c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3b23      	subs	r3, #35	; 0x23
 8002174:	221f      	movs	r2, #31
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	4019      	ands	r1, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	3b23      	subs	r3, #35	; 0x23
 800218e:	fa00 f203 	lsl.w	r2, r0, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
 800219a:	e01b      	b.n	80021d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b41      	subs	r3, #65	; 0x41
 80021ae:	221f      	movs	r2, #31
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4019      	ands	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b41      	subs	r3, #65	; 0x41
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b09      	cmp	r3, #9
 80021da:	d91c      	bls.n	8002216 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68d9      	ldr	r1, [r3, #12]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	3b1e      	subs	r3, #30
 80021ee:	2207      	movs	r2, #7
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4019      	ands	r1, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6898      	ldr	r0, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	3b1e      	subs	r3, #30
 8002208:	fa00 f203 	lsl.w	r2, r0, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	e019      	b.n	800224a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6919      	ldr	r1, [r3, #16]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	2207      	movs	r2, #7
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	4019      	ands	r1, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6898      	ldr	r0, [r3, #8]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b10      	cmp	r3, #16
 8002250:	d003      	beq.n	800225a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002256:	2b11      	cmp	r3, #17
 8002258:	d132      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d125      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d126      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002280:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b10      	cmp	r3, #16
 8002288:	d11a      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	0c9a      	lsrs	r2, r3, #18
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x1b2>
 80022ae:	e007      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	40012400 	.word	0x40012400
 80022d8:	20000000 	.word	0x20000000
 80022dc:	431bde83 	.word	0x431bde83

080022e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d12e      	bne.n	8002358 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800230a:	f7ff fdcf 	bl	8001eac <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002310:	e01b      	b.n	800234a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002312:	f7ff fdcb 	bl	8001eac <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d914      	bls.n	800234a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d10d      	bne.n	800234a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	f043 0210 	orr.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e007      	b.n	800235a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d0dc      	beq.n	8002312 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f7ff ff90 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff49 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff5e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff90 	bl	800241c <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5f 	bl	80023c8 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffb0 	bl	8002480 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b08b      	sub	sp, #44	; 0x2c
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	e169      	b.n	8002814 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002540:	2201      	movs	r2, #1
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 8158 	bne.w	800280e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a9a      	ldr	r2, [pc, #616]	; (80027cc <HAL_GPIO_Init+0x2a0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d05e      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002568:	4a98      	ldr	r2, [pc, #608]	; (80027cc <HAL_GPIO_Init+0x2a0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d875      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800256e:	4a98      	ldr	r2, [pc, #608]	; (80027d0 <HAL_GPIO_Init+0x2a4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d058      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002574:	4a96      	ldr	r2, [pc, #600]	; (80027d0 <HAL_GPIO_Init+0x2a4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d86f      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800257a:	4a96      	ldr	r2, [pc, #600]	; (80027d4 <HAL_GPIO_Init+0x2a8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d052      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002580:	4a94      	ldr	r2, [pc, #592]	; (80027d4 <HAL_GPIO_Init+0x2a8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d869      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002586:	4a94      	ldr	r2, [pc, #592]	; (80027d8 <HAL_GPIO_Init+0x2ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04c      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 800258c:	4a92      	ldr	r2, [pc, #584]	; (80027d8 <HAL_GPIO_Init+0x2ac>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d863      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002592:	4a92      	ldr	r2, [pc, #584]	; (80027dc <HAL_GPIO_Init+0x2b0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d046      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002598:	4a90      	ldr	r2, [pc, #576]	; (80027dc <HAL_GPIO_Init+0x2b0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d85d      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800259e:	2b12      	cmp	r3, #18
 80025a0:	d82a      	bhi.n	80025f8 <HAL_GPIO_Init+0xcc>
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d859      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <HAL_GPIO_Init+0x80>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002601 	.word	0x08002601
 80025b4:	08002613 	.word	0x08002613
 80025b8:	08002655 	.word	0x08002655
 80025bc:	0800265b 	.word	0x0800265b
 80025c0:	0800265b 	.word	0x0800265b
 80025c4:	0800265b 	.word	0x0800265b
 80025c8:	0800265b 	.word	0x0800265b
 80025cc:	0800265b 	.word	0x0800265b
 80025d0:	0800265b 	.word	0x0800265b
 80025d4:	0800265b 	.word	0x0800265b
 80025d8:	0800265b 	.word	0x0800265b
 80025dc:	0800265b 	.word	0x0800265b
 80025e0:	0800265b 	.word	0x0800265b
 80025e4:	0800265b 	.word	0x0800265b
 80025e8:	0800265b 	.word	0x0800265b
 80025ec:	0800265b 	.word	0x0800265b
 80025f0:	08002609 	.word	0x08002609
 80025f4:	0800261d 	.word	0x0800261d
 80025f8:	4a79      	ldr	r2, [pc, #484]	; (80027e0 <HAL_GPIO_Init+0x2b4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025fe:	e02c      	b.n	800265a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	623b      	str	r3, [r7, #32]
          break;
 8002606:	e029      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	3304      	adds	r3, #4
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e024      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	3308      	adds	r3, #8
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e01f      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	330c      	adds	r3, #12
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e01a      	b.n	800265c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800262e:	2304      	movs	r3, #4
 8002630:	623b      	str	r3, [r7, #32]
          break;
 8002632:	e013      	b.n	800265c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800263c:	2308      	movs	r3, #8
 800263e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	611a      	str	r2, [r3, #16]
          break;
 8002646:	e009      	b.n	800265c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002648:	2308      	movs	r3, #8
 800264a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	615a      	str	r2, [r3, #20]
          break;
 8002652:	e003      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
          break;
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x130>
          break;
 800265a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d801      	bhi.n	8002666 <HAL_GPIO_Init+0x13a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e001      	b.n	800266a <HAL_GPIO_Init+0x13e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2bff      	cmp	r3, #255	; 0xff
 8002670:	d802      	bhi.n	8002678 <HAL_GPIO_Init+0x14c>
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	e002      	b.n	800267e <HAL_GPIO_Init+0x152>
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	3b08      	subs	r3, #8
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	210f      	movs	r1, #15
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	6a39      	ldr	r1, [r7, #32]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80b1 	beq.w	800280e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026c4:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <HAL_GPIO_Init+0x2bc>)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a40      	ldr	r2, [pc, #256]	; (80027ec <HAL_GPIO_Init+0x2c0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_GPIO_Init+0x1ec>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <HAL_GPIO_Init+0x2c4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00d      	beq.n	8002714 <HAL_GPIO_Init+0x1e8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3e      	ldr	r2, [pc, #248]	; (80027f4 <HAL_GPIO_Init+0x2c8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_Init+0x1e4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3d      	ldr	r2, [pc, #244]	; (80027f8 <HAL_GPIO_Init+0x2cc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_GPIO_Init+0x1e0>
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 800270c:	2304      	movs	r3, #4
 800270e:	e004      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002710:	2302      	movs	r3, #2
 8002712:	e002      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002718:	2300      	movs	r3, #0
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	f002 0203 	and.w	r2, r2, #3
 8002720:	0092      	lsls	r2, r2, #2
 8002722:	4093      	lsls	r3, r2
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800272a:	492f      	ldr	r1, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x2bc>)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	492c      	ldr	r1, [pc, #176]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	43db      	mvns	r3, r3
 800275a:	4928      	ldr	r1, [pc, #160]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800275c:	4013      	ands	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4922      	ldr	r1, [pc, #136]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	43db      	mvns	r3, r3
 8002782:	491e      	ldr	r1, [pc, #120]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002784:	4013      	ands	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	4918      	ldr	r1, [pc, #96]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4914      	ldr	r1, [pc, #80]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d021      	beq.n	8002800 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e021      	b.n	800280e <HAL_GPIO_Init+0x2e2>
 80027ca:	bf00      	nop
 80027cc:	10320000 	.word	0x10320000
 80027d0:	10310000 	.word	0x10310000
 80027d4:	10220000 	.word	0x10220000
 80027d8:	10210000 	.word	0x10210000
 80027dc:	10120000 	.word	0x10120000
 80027e0:	10110000 	.word	0x10110000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40010800 	.word	0x40010800
 80027f0:	40010c00 	.word	0x40010c00
 80027f4:	40011000 	.word	0x40011000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_GPIO_Init+0x304>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	43db      	mvns	r3, r3
 8002808:	4909      	ldr	r1, [pc, #36]	; (8002830 <HAL_GPIO_Init+0x304>)
 800280a:	4013      	ands	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	3301      	adds	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f ae8e 	bne.w	8002540 <HAL_GPIO_Init+0x14>
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	372c      	adds	r7, #44	; 0x2c
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]
 800286e:	4613      	mov	r3, r2
 8002870:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002872:	787b      	ldrb	r3, [r7, #1]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002878:	887a      	ldrh	r2, [r7, #2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800287e:	e003      	b.n	8002888 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	041a      	lsls	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	611a      	str	r2, [r3, #16]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a4:	887a      	ldrh	r2, [r7, #2]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	041a      	lsls	r2, r3, #16
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	400b      	ands	r3, r1
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	611a      	str	r2, [r3, #16]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e12b      	b.n	8002b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff f886 	bl	80019fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002928:	f001 f806 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 800292c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a81      	ldr	r2, [pc, #516]	; (8002b38 <HAL_I2C_Init+0x274>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d807      	bhi.n	8002948 <HAL_I2C_Init+0x84>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a80      	ldr	r2, [pc, #512]	; (8002b3c <HAL_I2C_Init+0x278>)
 800293c:	4293      	cmp	r3, r2
 800293e:	bf94      	ite	ls
 8002940:	2301      	movls	r3, #1
 8002942:	2300      	movhi	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e006      	b.n	8002956 <HAL_I2C_Init+0x92>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a7d      	ldr	r2, [pc, #500]	; (8002b40 <HAL_I2C_Init+0x27c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0e7      	b.n	8002b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a78      	ldr	r2, [pc, #480]	; (8002b44 <HAL_I2C_Init+0x280>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9b      	lsrs	r3, r3, #18
 8002968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <HAL_I2C_Init+0x274>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d802      	bhi.n	8002998 <HAL_I2C_Init+0xd4>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3301      	adds	r3, #1
 8002996:	e009      	b.n	80029ac <HAL_I2C_Init+0xe8>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	4a69      	ldr	r2, [pc, #420]	; (8002b48 <HAL_I2C_Init+0x284>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	3301      	adds	r3, #1
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	495c      	ldr	r1, [pc, #368]	; (8002b38 <HAL_I2C_Init+0x274>)
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d819      	bhi.n	8002a00 <HAL_I2C_Init+0x13c>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e59      	subs	r1, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029da:	1c59      	adds	r1, r3, #1
 80029dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029e0:	400b      	ands	r3, r1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_I2C_Init+0x138>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e59      	subs	r1, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fa:	e051      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e04f      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d111      	bne.n	8002a2c <HAL_I2C_Init+0x168>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	440b      	add	r3, r1
 8002a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e012      	b.n	8002a52 <HAL_I2C_Init+0x18e>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Init+0x196>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e022      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10e      	bne.n	8002a80 <HAL_I2C_Init+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1e58      	subs	r0, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	440b      	add	r3, r1
 8002a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7e:	e00f      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	0099      	lsls	r1, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	6809      	ldr	r1, [r1, #0]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6911      	ldr	r1, [r2, #16]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68d2      	ldr	r2, [r2, #12]
 8002ada:	4311      	orrs	r1, r2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	000186a0 	.word	0x000186a0
 8002b3c:	001e847f 	.word	0x001e847f
 8002b40:	003d08ff 	.word	0x003d08ff
 8002b44:	431bde83 	.word	0x431bde83
 8002b48:	10624dd3 	.word	0x10624dd3

08002b4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	460b      	mov	r3, r1
 8002b5a:	817b      	strh	r3, [r7, #10]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b60:	f7ff f9a4 	bl	8001eac <HAL_GetTick>
 8002b64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	f040 80e0 	bne.w	8002d34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2319      	movs	r3, #25
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4970      	ldr	r1, [pc, #448]	; (8002d40 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f964 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0d3      	b.n	8002d36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_I2C_Master_Transmit+0x50>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e0cc      	b.n	8002d36 <HAL_I2C_Master_Transmit+0x1ea>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d007      	beq.n	8002bc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2221      	movs	r2, #33	; 0x21
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	893a      	ldrh	r2, [r7, #8]
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a50      	ldr	r2, [pc, #320]	; (8002d44 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c04:	8979      	ldrh	r1, [r7, #10]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f89c 	bl	8002d48 <I2C_MasterRequestWrite>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e08d      	b.n	8002d36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c30:	e066      	b.n	8002d00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	6a39      	ldr	r1, [r7, #32]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f9de 	bl	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d107      	bne.n	8002c5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06b      	b.n	8002d36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_I2C_Master_Transmit+0x188>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d017      	beq.n	8002cd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	6a39      	ldr	r1, [r7, #32]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f9ce 	bl	800307a <I2C_WaitOnBTFFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d107      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e01a      	b.n	8002d36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d194      	bne.n	8002c32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	00100002 	.word	0x00100002
 8002d44:	ffff0000 	.word	0xffff0000

08002d48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	460b      	mov	r3, r1
 8002d56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d006      	beq.n	8002d72 <I2C_MasterRequestWrite+0x2a>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d003      	beq.n	8002d72 <I2C_MasterRequestWrite+0x2a>
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d70:	d108      	bne.n	8002d84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e00b      	b.n	8002d9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	2b12      	cmp	r3, #18
 8002d8a:	d107      	bne.n	8002d9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f84f 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00d      	beq.n	8002dd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc2:	d103      	bne.n	8002dcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e035      	b.n	8002e3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd8:	d108      	bne.n	8002dec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dda:	897b      	ldrh	r3, [r7, #10]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	e01b      	b.n	8002e24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dec:	897b      	ldrh	r3, [r7, #10]
 8002dee:	11db      	asrs	r3, r3, #7
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 0306 	and.w	r3, r3, #6
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f063 030f 	orn	r3, r3, #15
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	490e      	ldr	r1, [pc, #56]	; (8002e44 <I2C_MasterRequestWrite+0xfc>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f875 	bl	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e010      	b.n	8002e3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e1a:	897b      	ldrh	r3, [r7, #10]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4907      	ldr	r1, [pc, #28]	; (8002e48 <I2C_MasterRequestWrite+0x100>)
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f865 	bl	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	00010008 	.word	0x00010008
 8002e48:	00010002 	.word	0x00010002

08002e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5c:	e025      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d021      	beq.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7ff f821 	bl	8001eac <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e023      	b.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10d      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	e00c      	b.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4013      	ands	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d0b6      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f08:	e051      	b.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	d123      	bne.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0204 	orr.w	r2, r3, #4
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e046      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d021      	beq.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe ff9f 	bl	8001eac <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e020      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10c      	bne.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e00b      	b.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d18d      	bne.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003004:	e02d      	b.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f878 	bl	80030fc <I2C_IsAcknowledgeFailed>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e02d      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d021      	beq.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7fe ff45 	bl	8001eac <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d116      	bne.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b80      	cmp	r3, #128	; 0x80
 800306e:	d1ca      	bne.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003086:	e02d      	b.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f837 	bl	80030fc <I2C_IsAcknowledgeFailed>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e02d      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d021      	beq.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a0:	f7fe ff04 	bl	8001eac <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d1ca      	bne.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d11b      	bne.n	800314c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_PWR_EnterSLEEPMode+0x34>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <HAL_PWR_EnterSLEEPMode+0x34>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003176:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003178:	e002      	b.n	8003180 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800317a:	bf40      	sev
    __WFE();
 800317c:	bf20      	wfe
    __WFE();
 800317e:	bf20      	wfe
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e272      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8087 	beq.w	80032be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b0:	4b92      	ldr	r3, [pc, #584]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d00c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031bc:	4b8f      	ldr	r3, [pc, #572]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d112      	bne.n	80031ee <HAL_RCC_OscConfig+0x5e>
 80031c8:	4b8c      	ldr	r3, [pc, #560]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d10b      	bne.n	80031ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d6:	4b89      	ldr	r3, [pc, #548]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d06c      	beq.n	80032bc <HAL_RCC_OscConfig+0x12c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d168      	bne.n	80032bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e24c      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x76>
 80031f8:	4b80      	ldr	r3, [pc, #512]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7f      	ldr	r2, [pc, #508]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e02e      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x98>
 800320e:	4b7b      	ldr	r3, [pc, #492]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7a      	ldr	r2, [pc, #488]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b78      	ldr	r3, [pc, #480]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a77      	ldr	r2, [pc, #476]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0xbc>
 8003232:	4b72      	ldr	r3, [pc, #456]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a71      	ldr	r2, [pc, #452]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6e      	ldr	r2, [pc, #440]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 800324c:	4b6b      	ldr	r3, [pc, #428]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6a      	ldr	r2, [pc, #424]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b68      	ldr	r3, [pc, #416]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a67      	ldr	r2, [pc, #412]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fe1e 	bl	8001eac <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe fe1a 	bl	8001eac <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e200      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b5d      	ldr	r3, [pc, #372]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xe4>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fe0a 	bl	8001eac <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe fe06 	bl	8001eac <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1ec      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x10c>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ca:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032d6:	4b49      	ldr	r3, [pc, #292]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x18c>
 80032e2:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b43      	ldr	r3, [pc, #268]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x176>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c0      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4939      	ldr	r1, [pc, #228]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_OscConfig+0x270>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fe fdbf 	bl	8001eac <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7fe fdbb 	bl	8001eac <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a1      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4927      	ldr	r1, [pc, #156]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_RCC_OscConfig+0x270>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fd9e 	bl	8001eac <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003374:	f7fe fd9a 	bl	8001eac <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e180      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d03a      	beq.n	8003414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d019      	beq.n	80033da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ac:	f7fe fd7e 	bl	8001eac <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fe fd7a 	bl	8001eac <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e160      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033d2:	2001      	movs	r0, #1
 80033d4:	f000 fad8 	bl	8003988 <RCC_Delay>
 80033d8:	e01c      	b.n	8003414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe fd64 	bl	8001eac <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e6:	e00f      	b.n	8003408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe fd60 	bl	8001eac <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d908      	bls.n	8003408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e146      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	42420000 	.word	0x42420000
 8003404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b92      	ldr	r3, [pc, #584]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e9      	bne.n	80033e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a6 	beq.w	800356e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b8b      	ldr	r3, [pc, #556]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10d      	bne.n	800344e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b88      	ldr	r3, [pc, #544]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	4a87      	ldr	r2, [pc, #540]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343c:	61d3      	str	r3, [r2, #28]
 800343e:	4b85      	ldr	r3, [pc, #532]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b82      	ldr	r3, [pc, #520]	; (8003658 <HAL_RCC_OscConfig+0x4c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d118      	bne.n	800348c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345a:	4b7f      	ldr	r3, [pc, #508]	; (8003658 <HAL_RCC_OscConfig+0x4c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a7e      	ldr	r2, [pc, #504]	; (8003658 <HAL_RCC_OscConfig+0x4c8>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003466:	f7fe fd21 	bl	8001eac <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fe fd1d 	bl	8001eac <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b64      	cmp	r3, #100	; 0x64
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e103      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	4b75      	ldr	r3, [pc, #468]	; (8003658 <HAL_RCC_OscConfig+0x4c8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x312>
 8003494:	4b6f      	ldr	r3, [pc, #444]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4a6e      	ldr	r2, [pc, #440]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6213      	str	r3, [r2, #32]
 80034a0:	e02d      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x334>
 80034aa:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4a69      	ldr	r2, [pc, #420]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6213      	str	r3, [r2, #32]
 80034b6:	4b67      	ldr	r3, [pc, #412]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a66      	ldr	r2, [pc, #408]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	e01c      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x356>
 80034cc:	4b61      	ldr	r3, [pc, #388]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a60      	ldr	r2, [pc, #384]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	4b5e      	ldr	r3, [pc, #376]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a5d      	ldr	r2, [pc, #372]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	e00b      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034e6:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a5a      	ldr	r2, [pc, #360]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b58      	ldr	r3, [pc, #352]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a57      	ldr	r2, [pc, #348]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d015      	beq.n	8003532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7fe fcd1 	bl	8001eac <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fe fccd 	bl	8001eac <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0b1      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ee      	beq.n	800350e <HAL_RCC_OscConfig+0x37e>
 8003530:	e014      	b.n	800355c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fe fcbb 	bl	8001eac <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe fcb7 	bl	8001eac <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e09b      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003550:	4b40      	ldr	r3, [pc, #256]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ee      	bne.n	800353a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003562:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4a3b      	ldr	r2, [pc, #236]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8087 	beq.w	8003686 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d061      	beq.n	8003648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d146      	bne.n	800361a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358c:	4b33      	ldr	r3, [pc, #204]	; (800365c <HAL_RCC_OscConfig+0x4cc>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003592:	f7fe fc8b 	bl	8001eac <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7fe fc87 	bl	8001eac <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e06d      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d108      	bne.n	80035d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	4921      	ldr	r1, [pc, #132]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d4:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a19      	ldr	r1, [r3, #32]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	430b      	orrs	r3, r1
 80035e6:	491b      	ldr	r1, [pc, #108]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ec:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_RCC_OscConfig+0x4cc>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fe fc5b 	bl	8001eac <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fa:	f7fe fc57 	bl	8001eac <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e03d      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x46a>
 8003618:	e035      	b.n	8003686 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_RCC_OscConfig+0x4cc>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fc44 	bl	8001eac <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7fe fc40 	bl	8001eac <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e026      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x498>
 8003646:	e01e      	b.n	8003686 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d107      	bne.n	8003660 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e019      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
 800365c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_OscConfig+0x500>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	429a      	cmp	r2, r3
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000

08003694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0d0      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b6a      	ldr	r3, [pc, #424]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d910      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b67      	ldr	r3, [pc, #412]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 0207 	bic.w	r2, r3, #7
 80036be:	4965      	ldr	r1, [pc, #404]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0b8      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f0:	4b59      	ldr	r3, [pc, #356]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a58      	ldr	r2, [pc, #352]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a52      	ldr	r2, [pc, #328]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b50      	ldr	r3, [pc, #320]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	494d      	ldr	r1, [pc, #308]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d040      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d115      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07f      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e073      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06b      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4936      	ldr	r1, [pc, #216]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003784:	f7fe fb92 	bl	8001eac <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fe fb8e 	bl	8001eac <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e053      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d210      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4922      	ldr	r1, [pc, #136]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e032      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4916      	ldr	r1, [pc, #88]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	490e      	ldr	r1, [pc, #56]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003822:	f000 f821 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003826:	4602      	mov	r2, r0
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	490a      	ldr	r1, [pc, #40]	; (800385c <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1cc>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1d0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe faf0 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40022000 	.word	0x40022000
 8003858:	40021000 	.word	0x40021000
 800385c:	0800720c 	.word	0x0800720c
 8003860:	20000000 	.word	0x20000000
 8003864:	20000004 	.word	0x20000004

08003868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b490      	push	{r4, r7}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800386e:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_RCC_GetSysClockFreq+0xac>)
 8003870:	1d3c      	adds	r4, r7, #4
 8003872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003878:	f240 2301 	movw	r3, #513	; 0x201
 800387c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d002      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x40>
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x46>
 80038a6:	e02b      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a8:	4b1c      	ldr	r3, [pc, #112]	; (800391c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038aa:	623b      	str	r3, [r7, #32]
      break;
 80038ac:	e02b      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	0c9b      	lsrs	r3, r3, #18
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	3328      	adds	r3, #40	; 0x28
 80038b8:	443b      	add	r3, r7
 80038ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0c5b      	lsrs	r3, r3, #17
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	3328      	adds	r3, #40	; 0x28
 80038d6:	443b      	add	r3, r7
 80038d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	e004      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	623b      	str	r3, [r7, #32]
      break;
 80038fe:	e002      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003902:	623b      	str	r3, [r7, #32]
      break;
 8003904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003906:	6a3b      	ldr	r3, [r7, #32]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3728      	adds	r7, #40	; 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bc90      	pop	{r4, r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	080071fc 	.word	0x080071fc
 8003918:	40021000 	.word	0x40021000
 800391c:	007a1200 	.word	0x007a1200
 8003920:	003d0900 	.word	0x003d0900

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <HAL_RCC_GetHCLKFreq+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff2 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	0800721c 	.word	0x0800721c

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003964:	f7ff ffde 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0adb      	lsrs	r3, r3, #11
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	0800721c 	.word	0x0800721c

08003988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <RCC_Delay+0x34>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <RCC_Delay+0x38>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0a5b      	lsrs	r3, r3, #9
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039a4:	bf00      	nop
  }
  while (Delay --);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1e5a      	subs	r2, r3, #1
 80039aa:	60fa      	str	r2, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f9      	bne.n	80039a4 <RCC_Delay+0x1c>
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	20000000 	.word	0x20000000
 80039c0:	10624dd3 	.word	0x10624dd3

080039c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d07d      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039e0:	2300      	movs	r3, #0
 80039e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e4:	4b4f      	ldr	r3, [pc, #316]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10d      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4a4b      	ldr	r2, [pc, #300]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fa:	61d3      	str	r3, [r2, #28]
 80039fc:	4b49      	ldr	r3, [pc, #292]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d118      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a18:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a42      	ldr	r2, [pc, #264]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a24:	f7fe fa42 	bl	8001eac <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	e008      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2c:	f7fe fa3e 	bl	8001eac <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e06d      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a4a:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02e      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d027      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a68:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a78:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a7e:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d014      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7fe fa0d 	bl	8001eac <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fe fa09 	bl	8001eac <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e036      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ee      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4917      	ldr	r1, [pc, #92]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad0:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ada:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	490b      	ldr	r1, [pc, #44]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4904      	ldr	r1, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	42420440 	.word	0x42420440

08003b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e041      	b.n	8003bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd ff8e 	bl	8001a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f000 f8f2 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_ConfigClockSource+0x18>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b3      	b.n	8003d4e <HAL_TIM_ConfigClockSource+0x180>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1e:	d03e      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0xd0>
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c24:	f200 8087 	bhi.w	8003d36 <HAL_TIM_ConfigClockSource+0x168>
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2c:	f000 8085 	beq.w	8003d3a <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d87f      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0x168>
 8003c36:	2b70      	cmp	r3, #112	; 0x70
 8003c38:	d01a      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0xa2>
 8003c3a:	2b70      	cmp	r3, #112	; 0x70
 8003c3c:	d87b      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0x168>
 8003c3e:	2b60      	cmp	r3, #96	; 0x60
 8003c40:	d050      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0x116>
 8003c42:	2b60      	cmp	r3, #96	; 0x60
 8003c44:	d877      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0x168>
 8003c46:	2b50      	cmp	r3, #80	; 0x50
 8003c48:	d03c      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0xf6>
 8003c4a:	2b50      	cmp	r3, #80	; 0x50
 8003c4c:	d873      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0x168>
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d058      	beq.n	8003d04 <HAL_TIM_ConfigClockSource+0x136>
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d86f      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0x168>
 8003c56:	2b30      	cmp	r3, #48	; 0x30
 8003c58:	d064      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0x156>
 8003c5a:	2b30      	cmp	r3, #48	; 0x30
 8003c5c:	d86b      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0x168>
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d060      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0x156>
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d867      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0x168>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d05c      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0x156>
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d05a      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c6e:	e062      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f000 f943 	bl	8003f0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	609a      	str	r2, [r3, #8]
      break;
 8003c9c:	e04e      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f000 f92c 	bl	8003f0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc0:	609a      	str	r2, [r3, #8]
      break;
 8003cc2:	e03b      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f000 f8a3 	bl	8003e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2150      	movs	r1, #80	; 0x50
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f8fa 	bl	8003ed6 <TIM_ITRx_SetConfig>
      break;
 8003ce2:	e02b      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f000 f8c1 	bl	8003e78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2160      	movs	r1, #96	; 0x60
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f8ea 	bl	8003ed6 <TIM_ITRx_SetConfig>
      break;
 8003d02:	e01b      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	461a      	mov	r2, r3
 8003d12:	f000 f883 	bl	8003e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2140      	movs	r1, #64	; 0x40
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f8da 	bl	8003ed6 <TIM_ITRx_SetConfig>
      break;
 8003d22:	e00b      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f000 f8d1 	bl	8003ed6 <TIM_ITRx_SetConfig>
        break;
 8003d34:	e002      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <TIM_Base_SetConfig+0xbc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <TIM_Base_SetConfig+0xc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <TIM_Base_SetConfig+0xbc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <TIM_Base_SetConfig+0xc0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d103      	bne.n	8003e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	615a      	str	r2, [r3, #20]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f023 0201 	bic.w	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f023 030a 	bic.w	r3, r3, #10
 8003e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	621a      	str	r2, [r3, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f023 0210 	bic.w	r2, r3, #16
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ea2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	031b      	lsls	r3, r3, #12
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	621a      	str	r2, [r3, #32]
}
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f043 0307 	orr.w	r3, r3, #7
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b087      	sub	sp, #28
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
 8003f16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	021a      	lsls	r2, r3, #8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	609a      	str	r2, [r3, #8]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e046      	b.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d009      	beq.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a10      	ldr	r2, [pc, #64]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10c      	bne.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800

08004004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e03f      	b.n	8004096 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd fd54 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	; 0x24
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f905 	bl	8004258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800405c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800406c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800407c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b08a      	sub	sp, #40	; 0x28
 80040a2:	af02      	add	r7, sp, #8
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d17c      	bne.n	80041b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_UART_Transmit+0x2c>
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e075      	b.n	80041ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_UART_Transmit+0x3e>
 80040d8:	2302      	movs	r3, #2
 80040da:	e06e      	b.n	80041ba <HAL_UART_Transmit+0x11c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2221      	movs	r2, #33	; 0x21
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f2:	f7fd fedb 	bl	8001eac <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410c:	d108      	bne.n	8004120 <HAL_UART_Transmit+0x82>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e003      	b.n	8004128 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004130:	e02a      	b.n	8004188 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f840 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e036      	b.n	80041ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	3302      	adds	r3, #2
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e007      	b.n	800417a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1cf      	bne.n	8004132 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	2140      	movs	r1, #64	; 0x40
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f810 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e006      	b.n	80041ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	e02c      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d028      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041e2:	f7fd fe63 	bl	8001eac <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d21d      	bcs.n	800422e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004200:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e00f      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	429a      	cmp	r2, r3
 800424a:	d0c3      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004292:	f023 030c 	bic.w	r3, r3, #12
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	430b      	orrs	r3, r1
 800429e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2c      	ldr	r2, [pc, #176]	; (800436c <UART_SetConfig+0x114>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d103      	bne.n	80042c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7ff fb4e 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	e002      	b.n	80042ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7ff fb36 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80042cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009a      	lsls	r2, r3, #2
 80042d8:	441a      	add	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	4a22      	ldr	r2, [pc, #136]	; (8004370 <UART_SetConfig+0x118>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	0119      	lsls	r1, r3, #4
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009a      	lsls	r2, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	fbb2 f2f3 	udiv	r2, r2, r3
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <UART_SetConfig+0x118>)
 8004306:	fba3 0302 	umull	r0, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	2064      	movs	r0, #100	; 0x64
 800430e:	fb00 f303 	mul.w	r3, r0, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	3332      	adds	r3, #50	; 0x32
 8004318:	4a15      	ldr	r2, [pc, #84]	; (8004370 <UART_SetConfig+0x118>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004324:	4419      	add	r1, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009a      	lsls	r2, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fbb2 f2f3 	udiv	r2, r2, r3
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <UART_SetConfig+0x118>)
 800433e:	fba3 0302 	umull	r0, r3, r3, r2
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2064      	movs	r0, #100	; 0x64
 8004346:	fb00 f303 	mul.w	r3, r0, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	3332      	adds	r3, #50	; 0x32
 8004350:	4a07      	ldr	r2, [pc, #28]	; (8004370 <UART_SetConfig+0x118>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	440a      	add	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40013800 	.word	0x40013800
 8004370:	51eb851f 	.word	0x51eb851f

08004374 <__errno>:
 8004374:	4b01      	ldr	r3, [pc, #4]	; (800437c <__errno+0x8>)
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	2000000c 	.word	0x2000000c

08004380 <__libc_init_array>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	2600      	movs	r6, #0
 8004384:	4d0c      	ldr	r5, [pc, #48]	; (80043b8 <__libc_init_array+0x38>)
 8004386:	4c0d      	ldr	r4, [pc, #52]	; (80043bc <__libc_init_array+0x3c>)
 8004388:	1b64      	subs	r4, r4, r5
 800438a:	10a4      	asrs	r4, r4, #2
 800438c:	42a6      	cmp	r6, r4
 800438e:	d109      	bne.n	80043a4 <__libc_init_array+0x24>
 8004390:	f002 fefa 	bl	8007188 <_init>
 8004394:	2600      	movs	r6, #0
 8004396:	4d0a      	ldr	r5, [pc, #40]	; (80043c0 <__libc_init_array+0x40>)
 8004398:	4c0a      	ldr	r4, [pc, #40]	; (80043c4 <__libc_init_array+0x44>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	42a6      	cmp	r6, r4
 80043a0:	d105      	bne.n	80043ae <__libc_init_array+0x2e>
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a8:	4798      	blx	r3
 80043aa:	3601      	adds	r6, #1
 80043ac:	e7ee      	b.n	800438c <__libc_init_array+0xc>
 80043ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b2:	4798      	blx	r3
 80043b4:	3601      	adds	r6, #1
 80043b6:	e7f2      	b.n	800439e <__libc_init_array+0x1e>
 80043b8:	080075fc 	.word	0x080075fc
 80043bc:	080075fc 	.word	0x080075fc
 80043c0:	080075fc 	.word	0x080075fc
 80043c4:	08007600 	.word	0x08007600

080043c8 <malloc>:
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <malloc+0xc>)
 80043ca:	4601      	mov	r1, r0
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	f000 b873 	b.w	80044b8 <_malloc_r>
 80043d2:	bf00      	nop
 80043d4:	2000000c 	.word	0x2000000c

080043d8 <memset>:
 80043d8:	4603      	mov	r3, r0
 80043da:	4402      	add	r2, r0
 80043dc:	4293      	cmp	r3, r2
 80043de:	d100      	bne.n	80043e2 <memset+0xa>
 80043e0:	4770      	bx	lr
 80043e2:	f803 1b01 	strb.w	r1, [r3], #1
 80043e6:	e7f9      	b.n	80043dc <memset+0x4>

080043e8 <_free_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4605      	mov	r5, r0
 80043ec:	2900      	cmp	r1, #0
 80043ee:	d040      	beq.n	8004472 <_free_r+0x8a>
 80043f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f4:	1f0c      	subs	r4, r1, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfb8      	it	lt
 80043fa:	18e4      	addlt	r4, r4, r3
 80043fc:	f001 fbfa 	bl	8005bf4 <__malloc_lock>
 8004400:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <_free_r+0x8c>)
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	b933      	cbnz	r3, 8004414 <_free_r+0x2c>
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	6014      	str	r4, [r2, #0]
 800440a:	4628      	mov	r0, r5
 800440c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004410:	f001 bbf6 	b.w	8005c00 <__malloc_unlock>
 8004414:	42a3      	cmp	r3, r4
 8004416:	d908      	bls.n	800442a <_free_r+0x42>
 8004418:	6820      	ldr	r0, [r4, #0]
 800441a:	1821      	adds	r1, r4, r0
 800441c:	428b      	cmp	r3, r1
 800441e:	bf01      	itttt	eq
 8004420:	6819      	ldreq	r1, [r3, #0]
 8004422:	685b      	ldreq	r3, [r3, #4]
 8004424:	1809      	addeq	r1, r1, r0
 8004426:	6021      	streq	r1, [r4, #0]
 8004428:	e7ed      	b.n	8004406 <_free_r+0x1e>
 800442a:	461a      	mov	r2, r3
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	b10b      	cbz	r3, 8004434 <_free_r+0x4c>
 8004430:	42a3      	cmp	r3, r4
 8004432:	d9fa      	bls.n	800442a <_free_r+0x42>
 8004434:	6811      	ldr	r1, [r2, #0]
 8004436:	1850      	adds	r0, r2, r1
 8004438:	42a0      	cmp	r0, r4
 800443a:	d10b      	bne.n	8004454 <_free_r+0x6c>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	4401      	add	r1, r0
 8004440:	1850      	adds	r0, r2, r1
 8004442:	4283      	cmp	r3, r0
 8004444:	6011      	str	r1, [r2, #0]
 8004446:	d1e0      	bne.n	800440a <_free_r+0x22>
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4401      	add	r1, r0
 800444e:	6011      	str	r1, [r2, #0]
 8004450:	6053      	str	r3, [r2, #4]
 8004452:	e7da      	b.n	800440a <_free_r+0x22>
 8004454:	d902      	bls.n	800445c <_free_r+0x74>
 8004456:	230c      	movs	r3, #12
 8004458:	602b      	str	r3, [r5, #0]
 800445a:	e7d6      	b.n	800440a <_free_r+0x22>
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	1821      	adds	r1, r4, r0
 8004460:	428b      	cmp	r3, r1
 8004462:	bf01      	itttt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	1809      	addeq	r1, r1, r0
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	6063      	str	r3, [r4, #4]
 800446e:	6054      	str	r4, [r2, #4]
 8004470:	e7cb      	b.n	800440a <_free_r+0x22>
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	20000468 	.word	0x20000468

08004478 <sbrk_aligned>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4e0e      	ldr	r6, [pc, #56]	; (80044b4 <sbrk_aligned+0x3c>)
 800447c:	460c      	mov	r4, r1
 800447e:	6831      	ldr	r1, [r6, #0]
 8004480:	4605      	mov	r5, r0
 8004482:	b911      	cbnz	r1, 800448a <sbrk_aligned+0x12>
 8004484:	f000 fcec 	bl	8004e60 <_sbrk_r>
 8004488:	6030      	str	r0, [r6, #0]
 800448a:	4621      	mov	r1, r4
 800448c:	4628      	mov	r0, r5
 800448e:	f000 fce7 	bl	8004e60 <_sbrk_r>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	d00a      	beq.n	80044ac <sbrk_aligned+0x34>
 8004496:	1cc4      	adds	r4, r0, #3
 8004498:	f024 0403 	bic.w	r4, r4, #3
 800449c:	42a0      	cmp	r0, r4
 800449e:	d007      	beq.n	80044b0 <sbrk_aligned+0x38>
 80044a0:	1a21      	subs	r1, r4, r0
 80044a2:	4628      	mov	r0, r5
 80044a4:	f000 fcdc 	bl	8004e60 <_sbrk_r>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d101      	bne.n	80044b0 <sbrk_aligned+0x38>
 80044ac:	f04f 34ff 	mov.w	r4, #4294967295
 80044b0:	4620      	mov	r0, r4
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	2000046c 	.word	0x2000046c

080044b8 <_malloc_r>:
 80044b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044bc:	1ccd      	adds	r5, r1, #3
 80044be:	f025 0503 	bic.w	r5, r5, #3
 80044c2:	3508      	adds	r5, #8
 80044c4:	2d0c      	cmp	r5, #12
 80044c6:	bf38      	it	cc
 80044c8:	250c      	movcc	r5, #12
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	4607      	mov	r7, r0
 80044ce:	db01      	blt.n	80044d4 <_malloc_r+0x1c>
 80044d0:	42a9      	cmp	r1, r5
 80044d2:	d905      	bls.n	80044e0 <_malloc_r+0x28>
 80044d4:	230c      	movs	r3, #12
 80044d6:	2600      	movs	r6, #0
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4630      	mov	r0, r6
 80044dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e0:	4e2e      	ldr	r6, [pc, #184]	; (800459c <_malloc_r+0xe4>)
 80044e2:	f001 fb87 	bl	8005bf4 <__malloc_lock>
 80044e6:	6833      	ldr	r3, [r6, #0]
 80044e8:	461c      	mov	r4, r3
 80044ea:	bb34      	cbnz	r4, 800453a <_malloc_r+0x82>
 80044ec:	4629      	mov	r1, r5
 80044ee:	4638      	mov	r0, r7
 80044f0:	f7ff ffc2 	bl	8004478 <sbrk_aligned>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	4604      	mov	r4, r0
 80044f8:	d14d      	bne.n	8004596 <_malloc_r+0xde>
 80044fa:	6834      	ldr	r4, [r6, #0]
 80044fc:	4626      	mov	r6, r4
 80044fe:	2e00      	cmp	r6, #0
 8004500:	d140      	bne.n	8004584 <_malloc_r+0xcc>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	4631      	mov	r1, r6
 8004506:	4638      	mov	r0, r7
 8004508:	eb04 0803 	add.w	r8, r4, r3
 800450c:	f000 fca8 	bl	8004e60 <_sbrk_r>
 8004510:	4580      	cmp	r8, r0
 8004512:	d13a      	bne.n	800458a <_malloc_r+0xd2>
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	3503      	adds	r5, #3
 8004518:	1a6d      	subs	r5, r5, r1
 800451a:	f025 0503 	bic.w	r5, r5, #3
 800451e:	3508      	adds	r5, #8
 8004520:	2d0c      	cmp	r5, #12
 8004522:	bf38      	it	cc
 8004524:	250c      	movcc	r5, #12
 8004526:	4638      	mov	r0, r7
 8004528:	4629      	mov	r1, r5
 800452a:	f7ff ffa5 	bl	8004478 <sbrk_aligned>
 800452e:	3001      	adds	r0, #1
 8004530:	d02b      	beq.n	800458a <_malloc_r+0xd2>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	442b      	add	r3, r5
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	e00e      	b.n	8004558 <_malloc_r+0xa0>
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	1b52      	subs	r2, r2, r5
 800453e:	d41e      	bmi.n	800457e <_malloc_r+0xc6>
 8004540:	2a0b      	cmp	r2, #11
 8004542:	d916      	bls.n	8004572 <_malloc_r+0xba>
 8004544:	1961      	adds	r1, r4, r5
 8004546:	42a3      	cmp	r3, r4
 8004548:	6025      	str	r5, [r4, #0]
 800454a:	bf18      	it	ne
 800454c:	6059      	strne	r1, [r3, #4]
 800454e:	6863      	ldr	r3, [r4, #4]
 8004550:	bf08      	it	eq
 8004552:	6031      	streq	r1, [r6, #0]
 8004554:	5162      	str	r2, [r4, r5]
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	4638      	mov	r0, r7
 800455a:	f104 060b 	add.w	r6, r4, #11
 800455e:	f001 fb4f 	bl	8005c00 <__malloc_unlock>
 8004562:	f026 0607 	bic.w	r6, r6, #7
 8004566:	1d23      	adds	r3, r4, #4
 8004568:	1af2      	subs	r2, r6, r3
 800456a:	d0b6      	beq.n	80044da <_malloc_r+0x22>
 800456c:	1b9b      	subs	r3, r3, r6
 800456e:	50a3      	str	r3, [r4, r2]
 8004570:	e7b3      	b.n	80044da <_malloc_r+0x22>
 8004572:	6862      	ldr	r2, [r4, #4]
 8004574:	42a3      	cmp	r3, r4
 8004576:	bf0c      	ite	eq
 8004578:	6032      	streq	r2, [r6, #0]
 800457a:	605a      	strne	r2, [r3, #4]
 800457c:	e7ec      	b.n	8004558 <_malloc_r+0xa0>
 800457e:	4623      	mov	r3, r4
 8004580:	6864      	ldr	r4, [r4, #4]
 8004582:	e7b2      	b.n	80044ea <_malloc_r+0x32>
 8004584:	4634      	mov	r4, r6
 8004586:	6876      	ldr	r6, [r6, #4]
 8004588:	e7b9      	b.n	80044fe <_malloc_r+0x46>
 800458a:	230c      	movs	r3, #12
 800458c:	4638      	mov	r0, r7
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	f001 fb36 	bl	8005c00 <__malloc_unlock>
 8004594:	e7a1      	b.n	80044da <_malloc_r+0x22>
 8004596:	6025      	str	r5, [r4, #0]
 8004598:	e7de      	b.n	8004558 <_malloc_r+0xa0>
 800459a:	bf00      	nop
 800459c:	20000468 	.word	0x20000468

080045a0 <__cvt>:
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a6:	461f      	mov	r7, r3
 80045a8:	bfbb      	ittet	lt
 80045aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80045ae:	461f      	movlt	r7, r3
 80045b0:	2300      	movge	r3, #0
 80045b2:	232d      	movlt	r3, #45	; 0x2d
 80045b4:	b088      	sub	sp, #32
 80045b6:	4614      	mov	r4, r2
 80045b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80045ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80045bc:	7013      	strb	r3, [r2, #0]
 80045be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80045c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80045c4:	f023 0820 	bic.w	r8, r3, #32
 80045c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045cc:	d005      	beq.n	80045da <__cvt+0x3a>
 80045ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045d2:	d100      	bne.n	80045d6 <__cvt+0x36>
 80045d4:	3501      	adds	r5, #1
 80045d6:	2302      	movs	r3, #2
 80045d8:	e000      	b.n	80045dc <__cvt+0x3c>
 80045da:	2303      	movs	r3, #3
 80045dc:	aa07      	add	r2, sp, #28
 80045de:	9204      	str	r2, [sp, #16]
 80045e0:	aa06      	add	r2, sp, #24
 80045e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045e6:	e9cd 3500 	strd	r3, r5, [sp]
 80045ea:	4622      	mov	r2, r4
 80045ec:	463b      	mov	r3, r7
 80045ee:	f000 fcf3 	bl	8004fd8 <_dtoa_r>
 80045f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045f6:	4606      	mov	r6, r0
 80045f8:	d102      	bne.n	8004600 <__cvt+0x60>
 80045fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045fc:	07db      	lsls	r3, r3, #31
 80045fe:	d522      	bpl.n	8004646 <__cvt+0xa6>
 8004600:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004604:	eb06 0905 	add.w	r9, r6, r5
 8004608:	d110      	bne.n	800462c <__cvt+0x8c>
 800460a:	7833      	ldrb	r3, [r6, #0]
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d10a      	bne.n	8004626 <__cvt+0x86>
 8004610:	2200      	movs	r2, #0
 8004612:	2300      	movs	r3, #0
 8004614:	4620      	mov	r0, r4
 8004616:	4639      	mov	r1, r7
 8004618:	f7fc f9c6 	bl	80009a8 <__aeabi_dcmpeq>
 800461c:	b918      	cbnz	r0, 8004626 <__cvt+0x86>
 800461e:	f1c5 0501 	rsb	r5, r5, #1
 8004622:	f8ca 5000 	str.w	r5, [sl]
 8004626:	f8da 3000 	ldr.w	r3, [sl]
 800462a:	4499      	add	r9, r3
 800462c:	2200      	movs	r2, #0
 800462e:	2300      	movs	r3, #0
 8004630:	4620      	mov	r0, r4
 8004632:	4639      	mov	r1, r7
 8004634:	f7fc f9b8 	bl	80009a8 <__aeabi_dcmpeq>
 8004638:	b108      	cbz	r0, 800463e <__cvt+0x9e>
 800463a:	f8cd 901c 	str.w	r9, [sp, #28]
 800463e:	2230      	movs	r2, #48	; 0x30
 8004640:	9b07      	ldr	r3, [sp, #28]
 8004642:	454b      	cmp	r3, r9
 8004644:	d307      	bcc.n	8004656 <__cvt+0xb6>
 8004646:	4630      	mov	r0, r6
 8004648:	9b07      	ldr	r3, [sp, #28]
 800464a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800464c:	1b9b      	subs	r3, r3, r6
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	b008      	add	sp, #32
 8004652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004656:	1c59      	adds	r1, r3, #1
 8004658:	9107      	str	r1, [sp, #28]
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e7f0      	b.n	8004640 <__cvt+0xa0>

0800465e <__exponent>:
 800465e:	4603      	mov	r3, r0
 8004660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004662:	2900      	cmp	r1, #0
 8004664:	f803 2b02 	strb.w	r2, [r3], #2
 8004668:	bfb6      	itet	lt
 800466a:	222d      	movlt	r2, #45	; 0x2d
 800466c:	222b      	movge	r2, #43	; 0x2b
 800466e:	4249      	neglt	r1, r1
 8004670:	2909      	cmp	r1, #9
 8004672:	7042      	strb	r2, [r0, #1]
 8004674:	dd2b      	ble.n	80046ce <__exponent+0x70>
 8004676:	f10d 0407 	add.w	r4, sp, #7
 800467a:	46a4      	mov	ip, r4
 800467c:	270a      	movs	r7, #10
 800467e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004682:	460a      	mov	r2, r1
 8004684:	46a6      	mov	lr, r4
 8004686:	fb07 1516 	mls	r5, r7, r6, r1
 800468a:	2a63      	cmp	r2, #99	; 0x63
 800468c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004690:	4631      	mov	r1, r6
 8004692:	f104 34ff 	add.w	r4, r4, #4294967295
 8004696:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800469a:	dcf0      	bgt.n	800467e <__exponent+0x20>
 800469c:	3130      	adds	r1, #48	; 0x30
 800469e:	f1ae 0502 	sub.w	r5, lr, #2
 80046a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046a6:	4629      	mov	r1, r5
 80046a8:	1c44      	adds	r4, r0, #1
 80046aa:	4561      	cmp	r1, ip
 80046ac:	d30a      	bcc.n	80046c4 <__exponent+0x66>
 80046ae:	f10d 0209 	add.w	r2, sp, #9
 80046b2:	eba2 020e 	sub.w	r2, r2, lr
 80046b6:	4565      	cmp	r5, ip
 80046b8:	bf88      	it	hi
 80046ba:	2200      	movhi	r2, #0
 80046bc:	4413      	add	r3, r2
 80046be:	1a18      	subs	r0, r3, r0
 80046c0:	b003      	add	sp, #12
 80046c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046cc:	e7ed      	b.n	80046aa <__exponent+0x4c>
 80046ce:	2330      	movs	r3, #48	; 0x30
 80046d0:	3130      	adds	r1, #48	; 0x30
 80046d2:	7083      	strb	r3, [r0, #2]
 80046d4:	70c1      	strb	r1, [r0, #3]
 80046d6:	1d03      	adds	r3, r0, #4
 80046d8:	e7f1      	b.n	80046be <__exponent+0x60>
	...

080046dc <_printf_float>:
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	b091      	sub	sp, #68	; 0x44
 80046e2:	460c      	mov	r4, r1
 80046e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80046e8:	4616      	mov	r6, r2
 80046ea:	461f      	mov	r7, r3
 80046ec:	4605      	mov	r5, r0
 80046ee:	f001 fa61 	bl	8005bb4 <_localeconv_r>
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	9309      	str	r3, [sp, #36]	; 0x24
 80046f8:	f7fb fd2a 	bl	8000150 <strlen>
 80046fc:	2300      	movs	r3, #0
 80046fe:	930e      	str	r3, [sp, #56]	; 0x38
 8004700:	f8d8 3000 	ldr.w	r3, [r8]
 8004704:	900a      	str	r0, [sp, #40]	; 0x28
 8004706:	3307      	adds	r3, #7
 8004708:	f023 0307 	bic.w	r3, r3, #7
 800470c:	f103 0208 	add.w	r2, r3, #8
 8004710:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004714:	f8d4 b000 	ldr.w	fp, [r4]
 8004718:	f8c8 2000 	str.w	r2, [r8]
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004724:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004728:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800472c:	930b      	str	r3, [sp, #44]	; 0x2c
 800472e:	f04f 32ff 	mov.w	r2, #4294967295
 8004732:	4640      	mov	r0, r8
 8004734:	4b9c      	ldr	r3, [pc, #624]	; (80049a8 <_printf_float+0x2cc>)
 8004736:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004738:	f7fc f968 	bl	8000a0c <__aeabi_dcmpun>
 800473c:	bb70      	cbnz	r0, 800479c <_printf_float+0xc0>
 800473e:	f04f 32ff 	mov.w	r2, #4294967295
 8004742:	4640      	mov	r0, r8
 8004744:	4b98      	ldr	r3, [pc, #608]	; (80049a8 <_printf_float+0x2cc>)
 8004746:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004748:	f7fc f942 	bl	80009d0 <__aeabi_dcmple>
 800474c:	bb30      	cbnz	r0, 800479c <_printf_float+0xc0>
 800474e:	2200      	movs	r2, #0
 8004750:	2300      	movs	r3, #0
 8004752:	4640      	mov	r0, r8
 8004754:	4651      	mov	r1, sl
 8004756:	f7fc f931 	bl	80009bc <__aeabi_dcmplt>
 800475a:	b110      	cbz	r0, 8004762 <_printf_float+0x86>
 800475c:	232d      	movs	r3, #45	; 0x2d
 800475e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004762:	4b92      	ldr	r3, [pc, #584]	; (80049ac <_printf_float+0x2d0>)
 8004764:	4892      	ldr	r0, [pc, #584]	; (80049b0 <_printf_float+0x2d4>)
 8004766:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800476a:	bf94      	ite	ls
 800476c:	4698      	movls	r8, r3
 800476e:	4680      	movhi	r8, r0
 8004770:	2303      	movs	r3, #3
 8004772:	f04f 0a00 	mov.w	sl, #0
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	f02b 0304 	bic.w	r3, fp, #4
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	4633      	mov	r3, r6
 8004780:	4621      	mov	r1, r4
 8004782:	4628      	mov	r0, r5
 8004784:	9700      	str	r7, [sp, #0]
 8004786:	aa0f      	add	r2, sp, #60	; 0x3c
 8004788:	f000 f9d4 	bl	8004b34 <_printf_common>
 800478c:	3001      	adds	r0, #1
 800478e:	f040 8090 	bne.w	80048b2 <_printf_float+0x1d6>
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	b011      	add	sp, #68	; 0x44
 8004798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479c:	4642      	mov	r2, r8
 800479e:	4653      	mov	r3, sl
 80047a0:	4640      	mov	r0, r8
 80047a2:	4651      	mov	r1, sl
 80047a4:	f7fc f932 	bl	8000a0c <__aeabi_dcmpun>
 80047a8:	b148      	cbz	r0, 80047be <_printf_float+0xe2>
 80047aa:	f1ba 0f00 	cmp.w	sl, #0
 80047ae:	bfb8      	it	lt
 80047b0:	232d      	movlt	r3, #45	; 0x2d
 80047b2:	4880      	ldr	r0, [pc, #512]	; (80049b4 <_printf_float+0x2d8>)
 80047b4:	bfb8      	it	lt
 80047b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047ba:	4b7f      	ldr	r3, [pc, #508]	; (80049b8 <_printf_float+0x2dc>)
 80047bc:	e7d3      	b.n	8004766 <_printf_float+0x8a>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	d142      	bne.n	800484e <_printf_float+0x172>
 80047c8:	2306      	movs	r3, #6
 80047ca:	6063      	str	r3, [r4, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	9206      	str	r2, [sp, #24]
 80047d0:	aa0e      	add	r2, sp, #56	; 0x38
 80047d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80047d6:	aa0d      	add	r2, sp, #52	; 0x34
 80047d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80047dc:	9203      	str	r2, [sp, #12]
 80047de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80047e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	6863      	ldr	r3, [r4, #4]
 80047ea:	4642      	mov	r2, r8
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	4628      	mov	r0, r5
 80047f0:	4653      	mov	r3, sl
 80047f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80047f4:	f7ff fed4 	bl	80045a0 <__cvt>
 80047f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047fa:	4680      	mov	r8, r0
 80047fc:	2947      	cmp	r1, #71	; 0x47
 80047fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004800:	d108      	bne.n	8004814 <_printf_float+0x138>
 8004802:	1cc8      	adds	r0, r1, #3
 8004804:	db02      	blt.n	800480c <_printf_float+0x130>
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	4299      	cmp	r1, r3
 800480a:	dd40      	ble.n	800488e <_printf_float+0x1b2>
 800480c:	f1a9 0902 	sub.w	r9, r9, #2
 8004810:	fa5f f989 	uxtb.w	r9, r9
 8004814:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004818:	d81f      	bhi.n	800485a <_printf_float+0x17e>
 800481a:	464a      	mov	r2, r9
 800481c:	3901      	subs	r1, #1
 800481e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004822:	910d      	str	r1, [sp, #52]	; 0x34
 8004824:	f7ff ff1b 	bl	800465e <__exponent>
 8004828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800482a:	4682      	mov	sl, r0
 800482c:	1813      	adds	r3, r2, r0
 800482e:	2a01      	cmp	r2, #1
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	dc02      	bgt.n	800483a <_printf_float+0x15e>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	07d2      	lsls	r2, r2, #31
 8004838:	d501      	bpl.n	800483e <_printf_float+0x162>
 800483a:	3301      	adds	r3, #1
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004842:	2b00      	cmp	r3, #0
 8004844:	d09b      	beq.n	800477e <_printf_float+0xa2>
 8004846:	232d      	movs	r3, #45	; 0x2d
 8004848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484c:	e797      	b.n	800477e <_printf_float+0xa2>
 800484e:	2947      	cmp	r1, #71	; 0x47
 8004850:	d1bc      	bne.n	80047cc <_printf_float+0xf0>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ba      	bne.n	80047cc <_printf_float+0xf0>
 8004856:	2301      	movs	r3, #1
 8004858:	e7b7      	b.n	80047ca <_printf_float+0xee>
 800485a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800485e:	d118      	bne.n	8004892 <_printf_float+0x1b6>
 8004860:	2900      	cmp	r1, #0
 8004862:	6863      	ldr	r3, [r4, #4]
 8004864:	dd0b      	ble.n	800487e <_printf_float+0x1a2>
 8004866:	6121      	str	r1, [r4, #16]
 8004868:	b913      	cbnz	r3, 8004870 <_printf_float+0x194>
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	07d0      	lsls	r0, r2, #31
 800486e:	d502      	bpl.n	8004876 <_printf_float+0x19a>
 8004870:	3301      	adds	r3, #1
 8004872:	440b      	add	r3, r1
 8004874:	6123      	str	r3, [r4, #16]
 8004876:	f04f 0a00 	mov.w	sl, #0
 800487a:	65a1      	str	r1, [r4, #88]	; 0x58
 800487c:	e7df      	b.n	800483e <_printf_float+0x162>
 800487e:	b913      	cbnz	r3, 8004886 <_printf_float+0x1aa>
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	07d2      	lsls	r2, r2, #31
 8004884:	d501      	bpl.n	800488a <_printf_float+0x1ae>
 8004886:	3302      	adds	r3, #2
 8004888:	e7f4      	b.n	8004874 <_printf_float+0x198>
 800488a:	2301      	movs	r3, #1
 800488c:	e7f2      	b.n	8004874 <_printf_float+0x198>
 800488e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004894:	4299      	cmp	r1, r3
 8004896:	db05      	blt.n	80048a4 <_printf_float+0x1c8>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	6121      	str	r1, [r4, #16]
 800489c:	07d8      	lsls	r0, r3, #31
 800489e:	d5ea      	bpl.n	8004876 <_printf_float+0x19a>
 80048a0:	1c4b      	adds	r3, r1, #1
 80048a2:	e7e7      	b.n	8004874 <_printf_float+0x198>
 80048a4:	2900      	cmp	r1, #0
 80048a6:	bfcc      	ite	gt
 80048a8:	2201      	movgt	r2, #1
 80048aa:	f1c1 0202 	rsble	r2, r1, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	e7e0      	b.n	8004874 <_printf_float+0x198>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	055a      	lsls	r2, r3, #21
 80048b6:	d407      	bmi.n	80048c8 <_printf_float+0x1ec>
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	4642      	mov	r2, r8
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	d12b      	bne.n	800491e <_printf_float+0x242>
 80048c6:	e764      	b.n	8004792 <_printf_float+0xb6>
 80048c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048cc:	f240 80dd 	bls.w	8004a8a <_printf_float+0x3ae>
 80048d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048d4:	2200      	movs	r2, #0
 80048d6:	2300      	movs	r3, #0
 80048d8:	f7fc f866 	bl	80009a8 <__aeabi_dcmpeq>
 80048dc:	2800      	cmp	r0, #0
 80048de:	d033      	beq.n	8004948 <_printf_float+0x26c>
 80048e0:	2301      	movs	r3, #1
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	4a35      	ldr	r2, [pc, #212]	; (80049bc <_printf_float+0x2e0>)
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	f43f af51 	beq.w	8004792 <_printf_float+0xb6>
 80048f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048f4:	429a      	cmp	r2, r3
 80048f6:	db02      	blt.n	80048fe <_printf_float+0x222>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	07d8      	lsls	r0, r3, #31
 80048fc:	d50f      	bpl.n	800491e <_printf_float+0x242>
 80048fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004902:	4631      	mov	r1, r6
 8004904:	4628      	mov	r0, r5
 8004906:	47b8      	blx	r7
 8004908:	3001      	adds	r0, #1
 800490a:	f43f af42 	beq.w	8004792 <_printf_float+0xb6>
 800490e:	f04f 0800 	mov.w	r8, #0
 8004912:	f104 091a 	add.w	r9, r4, #26
 8004916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004918:	3b01      	subs	r3, #1
 800491a:	4543      	cmp	r3, r8
 800491c:	dc09      	bgt.n	8004932 <_printf_float+0x256>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	079b      	lsls	r3, r3, #30
 8004922:	f100 8102 	bmi.w	8004b2a <_printf_float+0x44e>
 8004926:	68e0      	ldr	r0, [r4, #12]
 8004928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800492a:	4298      	cmp	r0, r3
 800492c:	bfb8      	it	lt
 800492e:	4618      	movlt	r0, r3
 8004930:	e731      	b.n	8004796 <_printf_float+0xba>
 8004932:	2301      	movs	r3, #1
 8004934:	464a      	mov	r2, r9
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	f43f af28 	beq.w	8004792 <_printf_float+0xb6>
 8004942:	f108 0801 	add.w	r8, r8, #1
 8004946:	e7e6      	b.n	8004916 <_printf_float+0x23a>
 8004948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	dc38      	bgt.n	80049c0 <_printf_float+0x2e4>
 800494e:	2301      	movs	r3, #1
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <_printf_float+0x2e0>)
 8004956:	47b8      	blx	r7
 8004958:	3001      	adds	r0, #1
 800495a:	f43f af1a 	beq.w	8004792 <_printf_float+0xb6>
 800495e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004962:	4313      	orrs	r3, r2
 8004964:	d102      	bne.n	800496c <_printf_float+0x290>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	07d9      	lsls	r1, r3, #31
 800496a:	d5d8      	bpl.n	800491e <_printf_float+0x242>
 800496c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f af0b 	beq.w	8004792 <_printf_float+0xb6>
 800497c:	f04f 0900 	mov.w	r9, #0
 8004980:	f104 0a1a 	add.w	sl, r4, #26
 8004984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004986:	425b      	negs	r3, r3
 8004988:	454b      	cmp	r3, r9
 800498a:	dc01      	bgt.n	8004990 <_printf_float+0x2b4>
 800498c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800498e:	e794      	b.n	80048ba <_printf_float+0x1de>
 8004990:	2301      	movs	r3, #1
 8004992:	4652      	mov	r2, sl
 8004994:	4631      	mov	r1, r6
 8004996:	4628      	mov	r0, r5
 8004998:	47b8      	blx	r7
 800499a:	3001      	adds	r0, #1
 800499c:	f43f aef9 	beq.w	8004792 <_printf_float+0xb6>
 80049a0:	f109 0901 	add.w	r9, r9, #1
 80049a4:	e7ee      	b.n	8004984 <_printf_float+0x2a8>
 80049a6:	bf00      	nop
 80049a8:	7fefffff 	.word	0x7fefffff
 80049ac:	08007228 	.word	0x08007228
 80049b0:	0800722c 	.word	0x0800722c
 80049b4:	08007234 	.word	0x08007234
 80049b8:	08007230 	.word	0x08007230
 80049bc:	08007238 	.word	0x08007238
 80049c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049c4:	429a      	cmp	r2, r3
 80049c6:	bfa8      	it	ge
 80049c8:	461a      	movge	r2, r3
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	4691      	mov	r9, r2
 80049ce:	dc37      	bgt.n	8004a40 <_printf_float+0x364>
 80049d0:	f04f 0b00 	mov.w	fp, #0
 80049d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049d8:	f104 021a 	add.w	r2, r4, #26
 80049dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049e0:	ebaa 0309 	sub.w	r3, sl, r9
 80049e4:	455b      	cmp	r3, fp
 80049e6:	dc33      	bgt.n	8004a50 <_printf_float+0x374>
 80049e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049ec:	429a      	cmp	r2, r3
 80049ee:	db3b      	blt.n	8004a68 <_printf_float+0x38c>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	07da      	lsls	r2, r3, #31
 80049f4:	d438      	bmi.n	8004a68 <_printf_float+0x38c>
 80049f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049fa:	eba3 020a 	sub.w	r2, r3, sl
 80049fe:	eba3 0901 	sub.w	r9, r3, r1
 8004a02:	4591      	cmp	r9, r2
 8004a04:	bfa8      	it	ge
 8004a06:	4691      	movge	r9, r2
 8004a08:	f1b9 0f00 	cmp.w	r9, #0
 8004a0c:	dc34      	bgt.n	8004a78 <_printf_float+0x39c>
 8004a0e:	f04f 0800 	mov.w	r8, #0
 8004a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a16:	f104 0a1a 	add.w	sl, r4, #26
 8004a1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	eba3 0309 	sub.w	r3, r3, r9
 8004a24:	4543      	cmp	r3, r8
 8004a26:	f77f af7a 	ble.w	800491e <_printf_float+0x242>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4652      	mov	r2, sl
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	f43f aeac 	beq.w	8004792 <_printf_float+0xb6>
 8004a3a:	f108 0801 	add.w	r8, r8, #1
 8004a3e:	e7ec      	b.n	8004a1a <_printf_float+0x33e>
 8004a40:	4613      	mov	r3, r2
 8004a42:	4631      	mov	r1, r6
 8004a44:	4642      	mov	r2, r8
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b8      	blx	r7
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d1c0      	bne.n	80049d0 <_printf_float+0x2f4>
 8004a4e:	e6a0      	b.n	8004792 <_printf_float+0xb6>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f ae99 	beq.w	8004792 <_printf_float+0xb6>
 8004a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a62:	f10b 0b01 	add.w	fp, fp, #1
 8004a66:	e7b9      	b.n	80049dc <_printf_float+0x300>
 8004a68:	4631      	mov	r1, r6
 8004a6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	d1bf      	bne.n	80049f6 <_printf_float+0x31a>
 8004a76:	e68c      	b.n	8004792 <_printf_float+0xb6>
 8004a78:	464b      	mov	r3, r9
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	eb08 020a 	add.w	r2, r8, sl
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	d1c2      	bne.n	8004a0e <_printf_float+0x332>
 8004a88:	e683      	b.n	8004792 <_printf_float+0xb6>
 8004a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a8c:	2a01      	cmp	r2, #1
 8004a8e:	dc01      	bgt.n	8004a94 <_printf_float+0x3b8>
 8004a90:	07db      	lsls	r3, r3, #31
 8004a92:	d537      	bpl.n	8004b04 <_printf_float+0x428>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4642      	mov	r2, r8
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	47b8      	blx	r7
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f43f ae77 	beq.w	8004792 <_printf_float+0xb6>
 8004aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b8      	blx	r7
 8004aae:	3001      	adds	r0, #1
 8004ab0:	f43f ae6f 	beq.w	8004792 <_printf_float+0xb6>
 8004ab4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2300      	movs	r3, #0
 8004abc:	f7fb ff74 	bl	80009a8 <__aeabi_dcmpeq>
 8004ac0:	b9d8      	cbnz	r0, 8004afa <_printf_float+0x41e>
 8004ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ac4:	f108 0201 	add.w	r2, r8, #1
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d10e      	bne.n	8004af2 <_printf_float+0x416>
 8004ad4:	e65d      	b.n	8004792 <_printf_float+0xb6>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	464a      	mov	r2, r9
 8004ada:	4631      	mov	r1, r6
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b8      	blx	r7
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	f43f ae56 	beq.w	8004792 <_printf_float+0xb6>
 8004ae6:	f108 0801 	add.w	r8, r8, #1
 8004aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aec:	3b01      	subs	r3, #1
 8004aee:	4543      	cmp	r3, r8
 8004af0:	dcf1      	bgt.n	8004ad6 <_printf_float+0x3fa>
 8004af2:	4653      	mov	r3, sl
 8004af4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004af8:	e6e0      	b.n	80048bc <_printf_float+0x1e0>
 8004afa:	f04f 0800 	mov.w	r8, #0
 8004afe:	f104 091a 	add.w	r9, r4, #26
 8004b02:	e7f2      	b.n	8004aea <_printf_float+0x40e>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4642      	mov	r2, r8
 8004b08:	e7df      	b.n	8004aca <_printf_float+0x3ee>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	464a      	mov	r2, r9
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4628      	mov	r0, r5
 8004b12:	47b8      	blx	r7
 8004b14:	3001      	adds	r0, #1
 8004b16:	f43f ae3c 	beq.w	8004792 <_printf_float+0xb6>
 8004b1a:	f108 0801 	add.w	r8, r8, #1
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b22:	1a5b      	subs	r3, r3, r1
 8004b24:	4543      	cmp	r3, r8
 8004b26:	dcf0      	bgt.n	8004b0a <_printf_float+0x42e>
 8004b28:	e6fd      	b.n	8004926 <_printf_float+0x24a>
 8004b2a:	f04f 0800 	mov.w	r8, #0
 8004b2e:	f104 0919 	add.w	r9, r4, #25
 8004b32:	e7f4      	b.n	8004b1e <_printf_float+0x442>

08004b34 <_printf_common>:
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	4616      	mov	r6, r2
 8004b3a:	4699      	mov	r9, r3
 8004b3c:	688a      	ldr	r2, [r1, #8]
 8004b3e:	690b      	ldr	r3, [r1, #16]
 8004b40:	4607      	mov	r7, r0
 8004b42:	4293      	cmp	r3, r2
 8004b44:	bfb8      	it	lt
 8004b46:	4613      	movlt	r3, r2
 8004b48:	6033      	str	r3, [r6, #0]
 8004b4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b4e:	460c      	mov	r4, r1
 8004b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b54:	b10a      	cbz	r2, 8004b5a <_printf_common+0x26>
 8004b56:	3301      	adds	r3, #1
 8004b58:	6033      	str	r3, [r6, #0]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	0699      	lsls	r1, r3, #26
 8004b5e:	bf42      	ittt	mi
 8004b60:	6833      	ldrmi	r3, [r6, #0]
 8004b62:	3302      	addmi	r3, #2
 8004b64:	6033      	strmi	r3, [r6, #0]
 8004b66:	6825      	ldr	r5, [r4, #0]
 8004b68:	f015 0506 	ands.w	r5, r5, #6
 8004b6c:	d106      	bne.n	8004b7c <_printf_common+0x48>
 8004b6e:	f104 0a19 	add.w	sl, r4, #25
 8004b72:	68e3      	ldr	r3, [r4, #12]
 8004b74:	6832      	ldr	r2, [r6, #0]
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	42ab      	cmp	r3, r5
 8004b7a:	dc28      	bgt.n	8004bce <_printf_common+0x9a>
 8004b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b80:	1e13      	subs	r3, r2, #0
 8004b82:	6822      	ldr	r2, [r4, #0]
 8004b84:	bf18      	it	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	0692      	lsls	r2, r2, #26
 8004b8a:	d42d      	bmi.n	8004be8 <_printf_common+0xb4>
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d020      	beq.n	8004bdc <_printf_common+0xa8>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	68e5      	ldr	r5, [r4, #12]
 8004b9e:	f003 0306 	and.w	r3, r3, #6
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	bf18      	it	ne
 8004ba6:	2500      	movne	r5, #0
 8004ba8:	6832      	ldr	r2, [r6, #0]
 8004baa:	f04f 0600 	mov.w	r6, #0
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	bf08      	it	eq
 8004bb2:	1aad      	subeq	r5, r5, r2
 8004bb4:	6922      	ldr	r2, [r4, #16]
 8004bb6:	bf08      	it	eq
 8004bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bfc4      	itt	gt
 8004bc0:	1a9b      	subgt	r3, r3, r2
 8004bc2:	18ed      	addgt	r5, r5, r3
 8004bc4:	341a      	adds	r4, #26
 8004bc6:	42b5      	cmp	r5, r6
 8004bc8:	d11a      	bne.n	8004c00 <_printf_common+0xcc>
 8004bca:	2000      	movs	r0, #0
 8004bcc:	e008      	b.n	8004be0 <_printf_common+0xac>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4652      	mov	r2, sl
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	47c0      	blx	r8
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d103      	bne.n	8004be4 <_printf_common+0xb0>
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be4:	3501      	adds	r5, #1
 8004be6:	e7c4      	b.n	8004b72 <_printf_common+0x3e>
 8004be8:	2030      	movs	r0, #48	; 0x30
 8004bea:	18e1      	adds	r1, r4, r3
 8004bec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bf6:	4422      	add	r2, r4
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bfe:	e7c5      	b.n	8004b8c <_printf_common+0x58>
 8004c00:	2301      	movs	r3, #1
 8004c02:	4622      	mov	r2, r4
 8004c04:	4649      	mov	r1, r9
 8004c06:	4638      	mov	r0, r7
 8004c08:	47c0      	blx	r8
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d0e6      	beq.n	8004bdc <_printf_common+0xa8>
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7d9      	b.n	8004bc6 <_printf_common+0x92>
	...

08004c14 <_printf_i>:
 8004c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	7e0f      	ldrb	r7, [r1, #24]
 8004c1a:	4691      	mov	r9, r2
 8004c1c:	2f78      	cmp	r7, #120	; 0x78
 8004c1e:	4680      	mov	r8, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	469a      	mov	sl, r3
 8004c24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c2a:	d807      	bhi.n	8004c3c <_printf_i+0x28>
 8004c2c:	2f62      	cmp	r7, #98	; 0x62
 8004c2e:	d80a      	bhi.n	8004c46 <_printf_i+0x32>
 8004c30:	2f00      	cmp	r7, #0
 8004c32:	f000 80d9 	beq.w	8004de8 <_printf_i+0x1d4>
 8004c36:	2f58      	cmp	r7, #88	; 0x58
 8004c38:	f000 80a4 	beq.w	8004d84 <_printf_i+0x170>
 8004c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c44:	e03a      	b.n	8004cbc <_printf_i+0xa8>
 8004c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c4a:	2b15      	cmp	r3, #21
 8004c4c:	d8f6      	bhi.n	8004c3c <_printf_i+0x28>
 8004c4e:	a101      	add	r1, pc, #4	; (adr r1, 8004c54 <_printf_i+0x40>)
 8004c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c54:	08004cad 	.word	0x08004cad
 8004c58:	08004cc1 	.word	0x08004cc1
 8004c5c:	08004c3d 	.word	0x08004c3d
 8004c60:	08004c3d 	.word	0x08004c3d
 8004c64:	08004c3d 	.word	0x08004c3d
 8004c68:	08004c3d 	.word	0x08004c3d
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004c3d 	.word	0x08004c3d
 8004c74:	08004c3d 	.word	0x08004c3d
 8004c78:	08004c3d 	.word	0x08004c3d
 8004c7c:	08004c3d 	.word	0x08004c3d
 8004c80:	08004dcf 	.word	0x08004dcf
 8004c84:	08004cf1 	.word	0x08004cf1
 8004c88:	08004db1 	.word	0x08004db1
 8004c8c:	08004c3d 	.word	0x08004c3d
 8004c90:	08004c3d 	.word	0x08004c3d
 8004c94:	08004df1 	.word	0x08004df1
 8004c98:	08004c3d 	.word	0x08004c3d
 8004c9c:	08004cf1 	.word	0x08004cf1
 8004ca0:	08004c3d 	.word	0x08004c3d
 8004ca4:	08004c3d 	.word	0x08004c3d
 8004ca8:	08004db9 	.word	0x08004db9
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	1d1a      	adds	r2, r3, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	602a      	str	r2, [r5, #0]
 8004cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0a4      	b.n	8004e0a <_printf_i+0x1f6>
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	6829      	ldr	r1, [r5, #0]
 8004cc4:	0606      	lsls	r6, r0, #24
 8004cc6:	f101 0304 	add.w	r3, r1, #4
 8004cca:	d50a      	bpl.n	8004ce2 <_printf_i+0xce>
 8004ccc:	680e      	ldr	r6, [r1, #0]
 8004cce:	602b      	str	r3, [r5, #0]
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	da03      	bge.n	8004cdc <_printf_i+0xc8>
 8004cd4:	232d      	movs	r3, #45	; 0x2d
 8004cd6:	4276      	negs	r6, r6
 8004cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cdc:	230a      	movs	r3, #10
 8004cde:	485e      	ldr	r0, [pc, #376]	; (8004e58 <_printf_i+0x244>)
 8004ce0:	e019      	b.n	8004d16 <_printf_i+0x102>
 8004ce2:	680e      	ldr	r6, [r1, #0]
 8004ce4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	bf18      	it	ne
 8004cec:	b236      	sxthne	r6, r6
 8004cee:	e7ef      	b.n	8004cd0 <_printf_i+0xbc>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1d19      	adds	r1, r3, #4
 8004cf6:	6029      	str	r1, [r5, #0]
 8004cf8:	0601      	lsls	r1, r0, #24
 8004cfa:	d501      	bpl.n	8004d00 <_printf_i+0xec>
 8004cfc:	681e      	ldr	r6, [r3, #0]
 8004cfe:	e002      	b.n	8004d06 <_printf_i+0xf2>
 8004d00:	0646      	lsls	r6, r0, #25
 8004d02:	d5fb      	bpl.n	8004cfc <_printf_i+0xe8>
 8004d04:	881e      	ldrh	r6, [r3, #0]
 8004d06:	2f6f      	cmp	r7, #111	; 0x6f
 8004d08:	bf0c      	ite	eq
 8004d0a:	2308      	moveq	r3, #8
 8004d0c:	230a      	movne	r3, #10
 8004d0e:	4852      	ldr	r0, [pc, #328]	; (8004e58 <_printf_i+0x244>)
 8004d10:	2100      	movs	r1, #0
 8004d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d16:	6865      	ldr	r5, [r4, #4]
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	bfa8      	it	ge
 8004d1c:	6821      	ldrge	r1, [r4, #0]
 8004d1e:	60a5      	str	r5, [r4, #8]
 8004d20:	bfa4      	itt	ge
 8004d22:	f021 0104 	bicge.w	r1, r1, #4
 8004d26:	6021      	strge	r1, [r4, #0]
 8004d28:	b90e      	cbnz	r6, 8004d2e <_printf_i+0x11a>
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	d04d      	beq.n	8004dca <_printf_i+0x1b6>
 8004d2e:	4615      	mov	r5, r2
 8004d30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d34:	fb03 6711 	mls	r7, r3, r1, r6
 8004d38:	5dc7      	ldrb	r7, [r0, r7]
 8004d3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d3e:	4637      	mov	r7, r6
 8004d40:	42bb      	cmp	r3, r7
 8004d42:	460e      	mov	r6, r1
 8004d44:	d9f4      	bls.n	8004d30 <_printf_i+0x11c>
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d10b      	bne.n	8004d62 <_printf_i+0x14e>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	07de      	lsls	r6, r3, #31
 8004d4e:	d508      	bpl.n	8004d62 <_printf_i+0x14e>
 8004d50:	6923      	ldr	r3, [r4, #16]
 8004d52:	6861      	ldr	r1, [r4, #4]
 8004d54:	4299      	cmp	r1, r3
 8004d56:	bfde      	ittt	le
 8004d58:	2330      	movle	r3, #48	; 0x30
 8004d5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d62:	1b52      	subs	r2, r2, r5
 8004d64:	6122      	str	r2, [r4, #16]
 8004d66:	464b      	mov	r3, r9
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f8cd a000 	str.w	sl, [sp]
 8004d70:	aa03      	add	r2, sp, #12
 8004d72:	f7ff fedf 	bl	8004b34 <_printf_common>
 8004d76:	3001      	adds	r0, #1
 8004d78:	d14c      	bne.n	8004e14 <_printf_i+0x200>
 8004d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7e:	b004      	add	sp, #16
 8004d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d84:	4834      	ldr	r0, [pc, #208]	; (8004e58 <_printf_i+0x244>)
 8004d86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d8a:	6829      	ldr	r1, [r5, #0]
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d92:	6029      	str	r1, [r5, #0]
 8004d94:	061d      	lsls	r5, r3, #24
 8004d96:	d514      	bpl.n	8004dc2 <_printf_i+0x1ae>
 8004d98:	07df      	lsls	r7, r3, #31
 8004d9a:	bf44      	itt	mi
 8004d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004da0:	6023      	strmi	r3, [r4, #0]
 8004da2:	b91e      	cbnz	r6, 8004dac <_printf_i+0x198>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	2310      	movs	r3, #16
 8004dae:	e7af      	b.n	8004d10 <_printf_i+0xfc>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	f043 0320 	orr.w	r3, r3, #32
 8004db6:	6023      	str	r3, [r4, #0]
 8004db8:	2378      	movs	r3, #120	; 0x78
 8004dba:	4828      	ldr	r0, [pc, #160]	; (8004e5c <_printf_i+0x248>)
 8004dbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dc0:	e7e3      	b.n	8004d8a <_printf_i+0x176>
 8004dc2:	0659      	lsls	r1, r3, #25
 8004dc4:	bf48      	it	mi
 8004dc6:	b2b6      	uxthmi	r6, r6
 8004dc8:	e7e6      	b.n	8004d98 <_printf_i+0x184>
 8004dca:	4615      	mov	r5, r2
 8004dcc:	e7bb      	b.n	8004d46 <_printf_i+0x132>
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	6826      	ldr	r6, [r4, #0]
 8004dd2:	1d18      	adds	r0, r3, #4
 8004dd4:	6961      	ldr	r1, [r4, #20]
 8004dd6:	6028      	str	r0, [r5, #0]
 8004dd8:	0635      	lsls	r5, r6, #24
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	d501      	bpl.n	8004de2 <_printf_i+0x1ce>
 8004dde:	6019      	str	r1, [r3, #0]
 8004de0:	e002      	b.n	8004de8 <_printf_i+0x1d4>
 8004de2:	0670      	lsls	r0, r6, #25
 8004de4:	d5fb      	bpl.n	8004dde <_printf_i+0x1ca>
 8004de6:	8019      	strh	r1, [r3, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	4615      	mov	r5, r2
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	e7ba      	b.n	8004d66 <_printf_i+0x152>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	2100      	movs	r1, #0
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	602a      	str	r2, [r5, #0]
 8004df8:	681d      	ldr	r5, [r3, #0]
 8004dfa:	6862      	ldr	r2, [r4, #4]
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f000 fedd 	bl	8005bbc <memchr>
 8004e02:	b108      	cbz	r0, 8004e08 <_printf_i+0x1f4>
 8004e04:	1b40      	subs	r0, r0, r5
 8004e06:	6060      	str	r0, [r4, #4]
 8004e08:	6863      	ldr	r3, [r4, #4]
 8004e0a:	6123      	str	r3, [r4, #16]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e12:	e7a8      	b.n	8004d66 <_printf_i+0x152>
 8004e14:	462a      	mov	r2, r5
 8004e16:	4649      	mov	r1, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	47d0      	blx	sl
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d0ab      	beq.n	8004d7a <_printf_i+0x166>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	079b      	lsls	r3, r3, #30
 8004e26:	d413      	bmi.n	8004e50 <_printf_i+0x23c>
 8004e28:	68e0      	ldr	r0, [r4, #12]
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	4298      	cmp	r0, r3
 8004e2e:	bfb8      	it	lt
 8004e30:	4618      	movlt	r0, r3
 8004e32:	e7a4      	b.n	8004d7e <_printf_i+0x16a>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4632      	mov	r2, r6
 8004e38:	4649      	mov	r1, r9
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	47d0      	blx	sl
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d09b      	beq.n	8004d7a <_printf_i+0x166>
 8004e42:	3501      	adds	r5, #1
 8004e44:	68e3      	ldr	r3, [r4, #12]
 8004e46:	9903      	ldr	r1, [sp, #12]
 8004e48:	1a5b      	subs	r3, r3, r1
 8004e4a:	42ab      	cmp	r3, r5
 8004e4c:	dcf2      	bgt.n	8004e34 <_printf_i+0x220>
 8004e4e:	e7eb      	b.n	8004e28 <_printf_i+0x214>
 8004e50:	2500      	movs	r5, #0
 8004e52:	f104 0619 	add.w	r6, r4, #25
 8004e56:	e7f5      	b.n	8004e44 <_printf_i+0x230>
 8004e58:	0800723a 	.word	0x0800723a
 8004e5c:	0800724b 	.word	0x0800724b

08004e60 <_sbrk_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	2300      	movs	r3, #0
 8004e64:	4d05      	ldr	r5, [pc, #20]	; (8004e7c <_sbrk_r+0x1c>)
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	602b      	str	r3, [r5, #0]
 8004e6c:	f7fc ff32 	bl	8001cd4 <_sbrk>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_sbrk_r+0x1a>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_sbrk_r+0x1a>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	20000470 	.word	0x20000470

08004e80 <siprintf>:
 8004e80:	b40e      	push	{r1, r2, r3}
 8004e82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e86:	b500      	push	{lr}
 8004e88:	b09c      	sub	sp, #112	; 0x70
 8004e8a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e8c:	9002      	str	r0, [sp, #8]
 8004e8e:	9006      	str	r0, [sp, #24]
 8004e90:	9107      	str	r1, [sp, #28]
 8004e92:	9104      	str	r1, [sp, #16]
 8004e94:	4808      	ldr	r0, [pc, #32]	; (8004eb8 <siprintf+0x38>)
 8004e96:	4909      	ldr	r1, [pc, #36]	; (8004ebc <siprintf+0x3c>)
 8004e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e9c:	9105      	str	r1, [sp, #20]
 8004e9e:	6800      	ldr	r0, [r0, #0]
 8004ea0:	a902      	add	r1, sp, #8
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	f001 faa4 	bl	80063f0 <_svfiprintf_r>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	9b02      	ldr	r3, [sp, #8]
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	b01c      	add	sp, #112	; 0x70
 8004eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb4:	b003      	add	sp, #12
 8004eb6:	4770      	bx	lr
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	ffff0208 	.word	0xffff0208

08004ec0 <quorem>:
 8004ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	6903      	ldr	r3, [r0, #16]
 8004ec6:	690c      	ldr	r4, [r1, #16]
 8004ec8:	4607      	mov	r7, r0
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	f2c0 8082 	blt.w	8004fd4 <quorem+0x114>
 8004ed0:	3c01      	subs	r4, #1
 8004ed2:	f100 0514 	add.w	r5, r0, #20
 8004ed6:	f101 0814 	add.w	r8, r1, #20
 8004eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	429a      	cmp	r2, r3
 8004eec:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ef8:	d331      	bcc.n	8004f5e <quorem+0x9e>
 8004efa:	f04f 0e00 	mov.w	lr, #0
 8004efe:	4640      	mov	r0, r8
 8004f00:	46ac      	mov	ip, r5
 8004f02:	46f2      	mov	sl, lr
 8004f04:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f08:	b293      	uxth	r3, r2
 8004f0a:	fb06 e303 	mla	r3, r6, r3, lr
 8004f0e:	0c12      	lsrs	r2, r2, #16
 8004f10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	fb06 e202 	mla	r2, r6, r2, lr
 8004f1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004f1e:	f8dc a000 	ldr.w	sl, [ip]
 8004f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f26:	fa1f fa8a 	uxth.w	sl, sl
 8004f2a:	4453      	add	r3, sl
 8004f2c:	f8dc a000 	ldr.w	sl, [ip]
 8004f30:	b292      	uxth	r2, r2
 8004f32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f40:	4581      	cmp	r9, r0
 8004f42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f46:	f84c 3b04 	str.w	r3, [ip], #4
 8004f4a:	d2db      	bcs.n	8004f04 <quorem+0x44>
 8004f4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f50:	b92b      	cbnz	r3, 8004f5e <quorem+0x9e>
 8004f52:	9b01      	ldr	r3, [sp, #4]
 8004f54:	3b04      	subs	r3, #4
 8004f56:	429d      	cmp	r5, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	d32f      	bcc.n	8004fbc <quorem+0xfc>
 8004f5c:	613c      	str	r4, [r7, #16]
 8004f5e:	4638      	mov	r0, r7
 8004f60:	f001 f8d2 	bl	8006108 <__mcmp>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	db25      	blt.n	8004fb4 <quorem+0xf4>
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f04f 0c00 	mov.w	ip, #0
 8004f6e:	3601      	adds	r6, #1
 8004f70:	f858 1b04 	ldr.w	r1, [r8], #4
 8004f74:	f8d0 e000 	ldr.w	lr, [r0]
 8004f78:	b28b      	uxth	r3, r1
 8004f7a:	ebac 0303 	sub.w	r3, ip, r3
 8004f7e:	fa1f f28e 	uxth.w	r2, lr
 8004f82:	4413      	add	r3, r2
 8004f84:	0c0a      	lsrs	r2, r1, #16
 8004f86:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f94:	45c1      	cmp	r9, r8
 8004f96:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f9a:	f840 3b04 	str.w	r3, [r0], #4
 8004f9e:	d2e7      	bcs.n	8004f70 <quorem+0xb0>
 8004fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa8:	b922      	cbnz	r2, 8004fb4 <quorem+0xf4>
 8004faa:	3b04      	subs	r3, #4
 8004fac:	429d      	cmp	r5, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	d30a      	bcc.n	8004fc8 <quorem+0x108>
 8004fb2:	613c      	str	r4, [r7, #16]
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	b003      	add	sp, #12
 8004fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	3b04      	subs	r3, #4
 8004fc0:	2a00      	cmp	r2, #0
 8004fc2:	d1cb      	bne.n	8004f5c <quorem+0x9c>
 8004fc4:	3c01      	subs	r4, #1
 8004fc6:	e7c6      	b.n	8004f56 <quorem+0x96>
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d1f0      	bne.n	8004fb2 <quorem+0xf2>
 8004fd0:	3c01      	subs	r4, #1
 8004fd2:	e7eb      	b.n	8004fac <quorem+0xec>
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	e7ee      	b.n	8004fb6 <quorem+0xf6>

08004fd8 <_dtoa_r>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	4616      	mov	r6, r2
 8004fde:	461f      	mov	r7, r3
 8004fe0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004fe2:	b099      	sub	sp, #100	; 0x64
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004fea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004fee:	b974      	cbnz	r4, 800500e <_dtoa_r+0x36>
 8004ff0:	2010      	movs	r0, #16
 8004ff2:	f7ff f9e9 	bl	80043c8 <malloc>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6268      	str	r0, [r5, #36]	; 0x24
 8004ffa:	b920      	cbnz	r0, 8005006 <_dtoa_r+0x2e>
 8004ffc:	21ea      	movs	r1, #234	; 0xea
 8004ffe:	4ba8      	ldr	r3, [pc, #672]	; (80052a0 <_dtoa_r+0x2c8>)
 8005000:	48a8      	ldr	r0, [pc, #672]	; (80052a4 <_dtoa_r+0x2cc>)
 8005002:	f001 faf5 	bl	80065f0 <__assert_func>
 8005006:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800500a:	6004      	str	r4, [r0, #0]
 800500c:	60c4      	str	r4, [r0, #12]
 800500e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005010:	6819      	ldr	r1, [r3, #0]
 8005012:	b151      	cbz	r1, 800502a <_dtoa_r+0x52>
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	2301      	movs	r3, #1
 8005018:	4093      	lsls	r3, r2
 800501a:	604a      	str	r2, [r1, #4]
 800501c:	608b      	str	r3, [r1, #8]
 800501e:	4628      	mov	r0, r5
 8005020:	f000 fe34 	bl	8005c8c <_Bfree>
 8005024:	2200      	movs	r2, #0
 8005026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	1e3b      	subs	r3, r7, #0
 800502c:	bfaf      	iteee	ge
 800502e:	2300      	movge	r3, #0
 8005030:	2201      	movlt	r2, #1
 8005032:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005036:	9305      	strlt	r3, [sp, #20]
 8005038:	bfa8      	it	ge
 800503a:	f8c8 3000 	strge.w	r3, [r8]
 800503e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005042:	4b99      	ldr	r3, [pc, #612]	; (80052a8 <_dtoa_r+0x2d0>)
 8005044:	bfb8      	it	lt
 8005046:	f8c8 2000 	strlt.w	r2, [r8]
 800504a:	ea33 0309 	bics.w	r3, r3, r9
 800504e:	d119      	bne.n	8005084 <_dtoa_r+0xac>
 8005050:	f242 730f 	movw	r3, #9999	; 0x270f
 8005054:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800505c:	4333      	orrs	r3, r6
 800505e:	f000 857f 	beq.w	8005b60 <_dtoa_r+0xb88>
 8005062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005064:	b953      	cbnz	r3, 800507c <_dtoa_r+0xa4>
 8005066:	4b91      	ldr	r3, [pc, #580]	; (80052ac <_dtoa_r+0x2d4>)
 8005068:	e022      	b.n	80050b0 <_dtoa_r+0xd8>
 800506a:	4b91      	ldr	r3, [pc, #580]	; (80052b0 <_dtoa_r+0x2d8>)
 800506c:	9303      	str	r3, [sp, #12]
 800506e:	3308      	adds	r3, #8
 8005070:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	9803      	ldr	r0, [sp, #12]
 8005076:	b019      	add	sp, #100	; 0x64
 8005078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507c:	4b8b      	ldr	r3, [pc, #556]	; (80052ac <_dtoa_r+0x2d4>)
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	3303      	adds	r3, #3
 8005082:	e7f5      	b.n	8005070 <_dtoa_r+0x98>
 8005084:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005088:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800508c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	f7fb fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8005098:	4680      	mov	r8, r0
 800509a:	b158      	cbz	r0, 80050b4 <_dtoa_r+0xdc>
 800509c:	2301      	movs	r3, #1
 800509e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8558 	beq.w	8005b5a <_dtoa_r+0xb82>
 80050aa:	4882      	ldr	r0, [pc, #520]	; (80052b4 <_dtoa_r+0x2dc>)
 80050ac:	6018      	str	r0, [r3, #0]
 80050ae:	1e43      	subs	r3, r0, #1
 80050b0:	9303      	str	r3, [sp, #12]
 80050b2:	e7df      	b.n	8005074 <_dtoa_r+0x9c>
 80050b4:	ab16      	add	r3, sp, #88	; 0x58
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	ab17      	add	r3, sp, #92	; 0x5c
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	4628      	mov	r0, r5
 80050be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050c2:	f001 f8c9 	bl	8006258 <__d2b>
 80050c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80050ca:	4683      	mov	fp, r0
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	d07f      	beq.n	80051d0 <_dtoa_r+0x1f8>
 80050d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80050e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80050e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80050ea:	2200      	movs	r2, #0
 80050ec:	4b72      	ldr	r3, [pc, #456]	; (80052b8 <_dtoa_r+0x2e0>)
 80050ee:	f7fb f83b 	bl	8000168 <__aeabi_dsub>
 80050f2:	a365      	add	r3, pc, #404	; (adr r3, 8005288 <_dtoa_r+0x2b0>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb f9ee 	bl	80004d8 <__aeabi_dmul>
 80050fc:	a364      	add	r3, pc, #400	; (adr r3, 8005290 <_dtoa_r+0x2b8>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f7fb f833 	bl	800016c <__adddf3>
 8005106:	4606      	mov	r6, r0
 8005108:	4620      	mov	r0, r4
 800510a:	460f      	mov	r7, r1
 800510c:	f7fb f97a 	bl	8000404 <__aeabi_i2d>
 8005110:	a361      	add	r3, pc, #388	; (adr r3, 8005298 <_dtoa_r+0x2c0>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb f9df 	bl	80004d8 <__aeabi_dmul>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4630      	mov	r0, r6
 8005120:	4639      	mov	r1, r7
 8005122:	f7fb f823 	bl	800016c <__adddf3>
 8005126:	4606      	mov	r6, r0
 8005128:	460f      	mov	r7, r1
 800512a:	f7fb fc85 	bl	8000a38 <__aeabi_d2iz>
 800512e:	2200      	movs	r2, #0
 8005130:	4682      	mov	sl, r0
 8005132:	2300      	movs	r3, #0
 8005134:	4630      	mov	r0, r6
 8005136:	4639      	mov	r1, r7
 8005138:	f7fb fc40 	bl	80009bc <__aeabi_dcmplt>
 800513c:	b148      	cbz	r0, 8005152 <_dtoa_r+0x17a>
 800513e:	4650      	mov	r0, sl
 8005140:	f7fb f960 	bl	8000404 <__aeabi_i2d>
 8005144:	4632      	mov	r2, r6
 8005146:	463b      	mov	r3, r7
 8005148:	f7fb fc2e 	bl	80009a8 <__aeabi_dcmpeq>
 800514c:	b908      	cbnz	r0, 8005152 <_dtoa_r+0x17a>
 800514e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005152:	f1ba 0f16 	cmp.w	sl, #22
 8005156:	d858      	bhi.n	800520a <_dtoa_r+0x232>
 8005158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800515c:	4b57      	ldr	r3, [pc, #348]	; (80052bc <_dtoa_r+0x2e4>)
 800515e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb fc29 	bl	80009bc <__aeabi_dcmplt>
 800516a:	2800      	cmp	r0, #0
 800516c:	d04f      	beq.n	800520e <_dtoa_r+0x236>
 800516e:	2300      	movs	r3, #0
 8005170:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005174:	930f      	str	r3, [sp, #60]	; 0x3c
 8005176:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005178:	1b1c      	subs	r4, r3, r4
 800517a:	1e63      	subs	r3, r4, #1
 800517c:	9309      	str	r3, [sp, #36]	; 0x24
 800517e:	bf49      	itett	mi
 8005180:	f1c4 0301 	rsbmi	r3, r4, #1
 8005184:	2300      	movpl	r3, #0
 8005186:	9306      	strmi	r3, [sp, #24]
 8005188:	2300      	movmi	r3, #0
 800518a:	bf54      	ite	pl
 800518c:	9306      	strpl	r3, [sp, #24]
 800518e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005190:	f1ba 0f00 	cmp.w	sl, #0
 8005194:	db3d      	blt.n	8005212 <_dtoa_r+0x23a>
 8005196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005198:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800519c:	4453      	add	r3, sl
 800519e:	9309      	str	r3, [sp, #36]	; 0x24
 80051a0:	2300      	movs	r3, #0
 80051a2:	930a      	str	r3, [sp, #40]	; 0x28
 80051a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051a6:	2b09      	cmp	r3, #9
 80051a8:	f200 808c 	bhi.w	80052c4 <_dtoa_r+0x2ec>
 80051ac:	2b05      	cmp	r3, #5
 80051ae:	bfc4      	itt	gt
 80051b0:	3b04      	subgt	r3, #4
 80051b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80051b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051b6:	bfc8      	it	gt
 80051b8:	2400      	movgt	r4, #0
 80051ba:	f1a3 0302 	sub.w	r3, r3, #2
 80051be:	bfd8      	it	le
 80051c0:	2401      	movle	r4, #1
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	f200 808a 	bhi.w	80052dc <_dtoa_r+0x304>
 80051c8:	e8df f003 	tbb	[pc, r3]
 80051cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80051d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80051d4:	441c      	add	r4, r3
 80051d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80051da:	2b20      	cmp	r3, #32
 80051dc:	bfc3      	ittte	gt
 80051de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80051e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80051ea:	f1c3 0320 	rsble	r3, r3, #32
 80051ee:	bfc6      	itte	gt
 80051f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051f4:	4318      	orrgt	r0, r3
 80051f6:	fa06 f003 	lslle.w	r0, r6, r3
 80051fa:	f7fb f8f3 	bl	80003e4 <__aeabi_ui2d>
 80051fe:	2301      	movs	r3, #1
 8005200:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005204:	3c01      	subs	r4, #1
 8005206:	9313      	str	r3, [sp, #76]	; 0x4c
 8005208:	e76f      	b.n	80050ea <_dtoa_r+0x112>
 800520a:	2301      	movs	r3, #1
 800520c:	e7b2      	b.n	8005174 <_dtoa_r+0x19c>
 800520e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005210:	e7b1      	b.n	8005176 <_dtoa_r+0x19e>
 8005212:	9b06      	ldr	r3, [sp, #24]
 8005214:	eba3 030a 	sub.w	r3, r3, sl
 8005218:	9306      	str	r3, [sp, #24]
 800521a:	f1ca 0300 	rsb	r3, sl, #0
 800521e:	930a      	str	r3, [sp, #40]	; 0x28
 8005220:	2300      	movs	r3, #0
 8005222:	930e      	str	r3, [sp, #56]	; 0x38
 8005224:	e7be      	b.n	80051a4 <_dtoa_r+0x1cc>
 8005226:	2300      	movs	r3, #0
 8005228:	930b      	str	r3, [sp, #44]	; 0x2c
 800522a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800522c:	2b00      	cmp	r3, #0
 800522e:	dc58      	bgt.n	80052e2 <_dtoa_r+0x30a>
 8005230:	f04f 0901 	mov.w	r9, #1
 8005234:	464b      	mov	r3, r9
 8005236:	f8cd 9020 	str.w	r9, [sp, #32]
 800523a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800523e:	2200      	movs	r2, #0
 8005240:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005242:	6042      	str	r2, [r0, #4]
 8005244:	2204      	movs	r2, #4
 8005246:	f102 0614 	add.w	r6, r2, #20
 800524a:	429e      	cmp	r6, r3
 800524c:	6841      	ldr	r1, [r0, #4]
 800524e:	d94e      	bls.n	80052ee <_dtoa_r+0x316>
 8005250:	4628      	mov	r0, r5
 8005252:	f000 fcdb 	bl	8005c0c <_Balloc>
 8005256:	9003      	str	r0, [sp, #12]
 8005258:	2800      	cmp	r0, #0
 800525a:	d14c      	bne.n	80052f6 <_dtoa_r+0x31e>
 800525c:	4602      	mov	r2, r0
 800525e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005262:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <_dtoa_r+0x2e8>)
 8005264:	e6cc      	b.n	8005000 <_dtoa_r+0x28>
 8005266:	2301      	movs	r3, #1
 8005268:	e7de      	b.n	8005228 <_dtoa_r+0x250>
 800526a:	2300      	movs	r3, #0
 800526c:	930b      	str	r3, [sp, #44]	; 0x2c
 800526e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005270:	eb0a 0903 	add.w	r9, sl, r3
 8005274:	f109 0301 	add.w	r3, r9, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	9308      	str	r3, [sp, #32]
 800527c:	bfb8      	it	lt
 800527e:	2301      	movlt	r3, #1
 8005280:	e7dd      	b.n	800523e <_dtoa_r+0x266>
 8005282:	2301      	movs	r3, #1
 8005284:	e7f2      	b.n	800526c <_dtoa_r+0x294>
 8005286:	bf00      	nop
 8005288:	636f4361 	.word	0x636f4361
 800528c:	3fd287a7 	.word	0x3fd287a7
 8005290:	8b60c8b3 	.word	0x8b60c8b3
 8005294:	3fc68a28 	.word	0x3fc68a28
 8005298:	509f79fb 	.word	0x509f79fb
 800529c:	3fd34413 	.word	0x3fd34413
 80052a0:	08007269 	.word	0x08007269
 80052a4:	08007280 	.word	0x08007280
 80052a8:	7ff00000 	.word	0x7ff00000
 80052ac:	08007265 	.word	0x08007265
 80052b0:	0800725c 	.word	0x0800725c
 80052b4:	08007239 	.word	0x08007239
 80052b8:	3ff80000 	.word	0x3ff80000
 80052bc:	08007370 	.word	0x08007370
 80052c0:	080072db 	.word	0x080072db
 80052c4:	2401      	movs	r4, #1
 80052c6:	2300      	movs	r3, #0
 80052c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80052ca:	9322      	str	r3, [sp, #136]	; 0x88
 80052cc:	f04f 39ff 	mov.w	r9, #4294967295
 80052d0:	2200      	movs	r2, #0
 80052d2:	2312      	movs	r3, #18
 80052d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80052d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80052da:	e7b0      	b.n	800523e <_dtoa_r+0x266>
 80052dc:	2301      	movs	r3, #1
 80052de:	930b      	str	r3, [sp, #44]	; 0x2c
 80052e0:	e7f4      	b.n	80052cc <_dtoa_r+0x2f4>
 80052e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80052e6:	464b      	mov	r3, r9
 80052e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80052ec:	e7a7      	b.n	800523e <_dtoa_r+0x266>
 80052ee:	3101      	adds	r1, #1
 80052f0:	6041      	str	r1, [r0, #4]
 80052f2:	0052      	lsls	r2, r2, #1
 80052f4:	e7a7      	b.n	8005246 <_dtoa_r+0x26e>
 80052f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052f8:	9a03      	ldr	r2, [sp, #12]
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	9b08      	ldr	r3, [sp, #32]
 80052fe:	2b0e      	cmp	r3, #14
 8005300:	f200 80a8 	bhi.w	8005454 <_dtoa_r+0x47c>
 8005304:	2c00      	cmp	r4, #0
 8005306:	f000 80a5 	beq.w	8005454 <_dtoa_r+0x47c>
 800530a:	f1ba 0f00 	cmp.w	sl, #0
 800530e:	dd34      	ble.n	800537a <_dtoa_r+0x3a2>
 8005310:	4a9a      	ldr	r2, [pc, #616]	; (800557c <_dtoa_r+0x5a4>)
 8005312:	f00a 030f 	and.w	r3, sl, #15
 8005316:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800531a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800531e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005322:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005326:	ea4f 142a 	mov.w	r4, sl, asr #4
 800532a:	d016      	beq.n	800535a <_dtoa_r+0x382>
 800532c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005330:	4b93      	ldr	r3, [pc, #588]	; (8005580 <_dtoa_r+0x5a8>)
 8005332:	2703      	movs	r7, #3
 8005334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005338:	f7fb f9f8 	bl	800072c <__aeabi_ddiv>
 800533c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005340:	f004 040f 	and.w	r4, r4, #15
 8005344:	4e8e      	ldr	r6, [pc, #568]	; (8005580 <_dtoa_r+0x5a8>)
 8005346:	b954      	cbnz	r4, 800535e <_dtoa_r+0x386>
 8005348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800534c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005350:	f7fb f9ec 	bl	800072c <__aeabi_ddiv>
 8005354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005358:	e029      	b.n	80053ae <_dtoa_r+0x3d6>
 800535a:	2702      	movs	r7, #2
 800535c:	e7f2      	b.n	8005344 <_dtoa_r+0x36c>
 800535e:	07e1      	lsls	r1, r4, #31
 8005360:	d508      	bpl.n	8005374 <_dtoa_r+0x39c>
 8005362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005366:	e9d6 2300 	ldrd	r2, r3, [r6]
 800536a:	f7fb f8b5 	bl	80004d8 <__aeabi_dmul>
 800536e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005372:	3701      	adds	r7, #1
 8005374:	1064      	asrs	r4, r4, #1
 8005376:	3608      	adds	r6, #8
 8005378:	e7e5      	b.n	8005346 <_dtoa_r+0x36e>
 800537a:	f000 80a5 	beq.w	80054c8 <_dtoa_r+0x4f0>
 800537e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005382:	f1ca 0400 	rsb	r4, sl, #0
 8005386:	4b7d      	ldr	r3, [pc, #500]	; (800557c <_dtoa_r+0x5a4>)
 8005388:	f004 020f 	and.w	r2, r4, #15
 800538c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb f8a0 	bl	80004d8 <__aeabi_dmul>
 8005398:	2702      	movs	r7, #2
 800539a:	2300      	movs	r3, #0
 800539c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053a0:	4e77      	ldr	r6, [pc, #476]	; (8005580 <_dtoa_r+0x5a8>)
 80053a2:	1124      	asrs	r4, r4, #4
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	f040 8084 	bne.w	80054b2 <_dtoa_r+0x4da>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d2      	bne.n	8005354 <_dtoa_r+0x37c>
 80053ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 808b 	beq.w	80054cc <_dtoa_r+0x4f4>
 80053b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053c2:	2200      	movs	r2, #0
 80053c4:	4b6f      	ldr	r3, [pc, #444]	; (8005584 <_dtoa_r+0x5ac>)
 80053c6:	f7fb faf9 	bl	80009bc <__aeabi_dcmplt>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d07e      	beq.n	80054cc <_dtoa_r+0x4f4>
 80053ce:	9b08      	ldr	r3, [sp, #32]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d07b      	beq.n	80054cc <_dtoa_r+0x4f4>
 80053d4:	f1b9 0f00 	cmp.w	r9, #0
 80053d8:	dd38      	ble.n	800544c <_dtoa_r+0x474>
 80053da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053de:	2200      	movs	r2, #0
 80053e0:	4b69      	ldr	r3, [pc, #420]	; (8005588 <_dtoa_r+0x5b0>)
 80053e2:	f7fb f879 	bl	80004d8 <__aeabi_dmul>
 80053e6:	464c      	mov	r4, r9
 80053e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 80053f0:	3701      	adds	r7, #1
 80053f2:	4638      	mov	r0, r7
 80053f4:	f7fb f806 	bl	8000404 <__aeabi_i2d>
 80053f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053fc:	f7fb f86c 	bl	80004d8 <__aeabi_dmul>
 8005400:	2200      	movs	r2, #0
 8005402:	4b62      	ldr	r3, [pc, #392]	; (800558c <_dtoa_r+0x5b4>)
 8005404:	f7fa feb2 	bl	800016c <__adddf3>
 8005408:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800540c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005410:	9611      	str	r6, [sp, #68]	; 0x44
 8005412:	2c00      	cmp	r4, #0
 8005414:	d15d      	bne.n	80054d2 <_dtoa_r+0x4fa>
 8005416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800541a:	2200      	movs	r2, #0
 800541c:	4b5c      	ldr	r3, [pc, #368]	; (8005590 <_dtoa_r+0x5b8>)
 800541e:	f7fa fea3 	bl	8000168 <__aeabi_dsub>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800542a:	4633      	mov	r3, r6
 800542c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800542e:	f7fb fae3 	bl	80009f8 <__aeabi_dcmpgt>
 8005432:	2800      	cmp	r0, #0
 8005434:	f040 829c 	bne.w	8005970 <_dtoa_r+0x998>
 8005438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800543c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800543e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005442:	f7fb fabb 	bl	80009bc <__aeabi_dcmplt>
 8005446:	2800      	cmp	r0, #0
 8005448:	f040 8290 	bne.w	800596c <_dtoa_r+0x994>
 800544c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005450:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005456:	2b00      	cmp	r3, #0
 8005458:	f2c0 8152 	blt.w	8005700 <_dtoa_r+0x728>
 800545c:	f1ba 0f0e 	cmp.w	sl, #14
 8005460:	f300 814e 	bgt.w	8005700 <_dtoa_r+0x728>
 8005464:	4b45      	ldr	r3, [pc, #276]	; (800557c <_dtoa_r+0x5a4>)
 8005466:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800546a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800546e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005472:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005474:	2b00      	cmp	r3, #0
 8005476:	f280 80db 	bge.w	8005630 <_dtoa_r+0x658>
 800547a:	9b08      	ldr	r3, [sp, #32]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f300 80d7 	bgt.w	8005630 <_dtoa_r+0x658>
 8005482:	f040 8272 	bne.w	800596a <_dtoa_r+0x992>
 8005486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800548a:	2200      	movs	r2, #0
 800548c:	4b40      	ldr	r3, [pc, #256]	; (8005590 <_dtoa_r+0x5b8>)
 800548e:	f7fb f823 	bl	80004d8 <__aeabi_dmul>
 8005492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005496:	f7fb faa5 	bl	80009e4 <__aeabi_dcmpge>
 800549a:	9c08      	ldr	r4, [sp, #32]
 800549c:	4626      	mov	r6, r4
 800549e:	2800      	cmp	r0, #0
 80054a0:	f040 8248 	bne.w	8005934 <_dtoa_r+0x95c>
 80054a4:	2331      	movs	r3, #49	; 0x31
 80054a6:	9f03      	ldr	r7, [sp, #12]
 80054a8:	f10a 0a01 	add.w	sl, sl, #1
 80054ac:	f807 3b01 	strb.w	r3, [r7], #1
 80054b0:	e244      	b.n	800593c <_dtoa_r+0x964>
 80054b2:	07e2      	lsls	r2, r4, #31
 80054b4:	d505      	bpl.n	80054c2 <_dtoa_r+0x4ea>
 80054b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ba:	f7fb f80d 	bl	80004d8 <__aeabi_dmul>
 80054be:	2301      	movs	r3, #1
 80054c0:	3701      	adds	r7, #1
 80054c2:	1064      	asrs	r4, r4, #1
 80054c4:	3608      	adds	r6, #8
 80054c6:	e76d      	b.n	80053a4 <_dtoa_r+0x3cc>
 80054c8:	2702      	movs	r7, #2
 80054ca:	e770      	b.n	80053ae <_dtoa_r+0x3d6>
 80054cc:	46d0      	mov	r8, sl
 80054ce:	9c08      	ldr	r4, [sp, #32]
 80054d0:	e78f      	b.n	80053f2 <_dtoa_r+0x41a>
 80054d2:	9903      	ldr	r1, [sp, #12]
 80054d4:	4b29      	ldr	r3, [pc, #164]	; (800557c <_dtoa_r+0x5a4>)
 80054d6:	4421      	add	r1, r4
 80054d8:	9112      	str	r1, [sp, #72]	; 0x48
 80054da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80054e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054e8:	2900      	cmp	r1, #0
 80054ea:	d055      	beq.n	8005598 <_dtoa_r+0x5c0>
 80054ec:	2000      	movs	r0, #0
 80054ee:	4929      	ldr	r1, [pc, #164]	; (8005594 <_dtoa_r+0x5bc>)
 80054f0:	f7fb f91c 	bl	800072c <__aeabi_ddiv>
 80054f4:	463b      	mov	r3, r7
 80054f6:	4632      	mov	r2, r6
 80054f8:	f7fa fe36 	bl	8000168 <__aeabi_dsub>
 80054fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005500:	9f03      	ldr	r7, [sp, #12]
 8005502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005506:	f7fb fa97 	bl	8000a38 <__aeabi_d2iz>
 800550a:	4604      	mov	r4, r0
 800550c:	f7fa ff7a 	bl	8000404 <__aeabi_i2d>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005518:	f7fa fe26 	bl	8000168 <__aeabi_dsub>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	3430      	adds	r4, #48	; 0x30
 8005522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800552a:	f807 4b01 	strb.w	r4, [r7], #1
 800552e:	f7fb fa45 	bl	80009bc <__aeabi_dcmplt>
 8005532:	2800      	cmp	r0, #0
 8005534:	d174      	bne.n	8005620 <_dtoa_r+0x648>
 8005536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800553a:	2000      	movs	r0, #0
 800553c:	4911      	ldr	r1, [pc, #68]	; (8005584 <_dtoa_r+0x5ac>)
 800553e:	f7fa fe13 	bl	8000168 <__aeabi_dsub>
 8005542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005546:	f7fb fa39 	bl	80009bc <__aeabi_dcmplt>
 800554a:	2800      	cmp	r0, #0
 800554c:	f040 80b7 	bne.w	80056be <_dtoa_r+0x6e6>
 8005550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005552:	429f      	cmp	r7, r3
 8005554:	f43f af7a 	beq.w	800544c <_dtoa_r+0x474>
 8005558:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800555c:	2200      	movs	r2, #0
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <_dtoa_r+0x5b0>)
 8005560:	f7fa ffba 	bl	80004d8 <__aeabi_dmul>
 8005564:	2200      	movs	r2, #0
 8005566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800556a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <_dtoa_r+0x5b0>)
 8005570:	f7fa ffb2 	bl	80004d8 <__aeabi_dmul>
 8005574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005578:	e7c3      	b.n	8005502 <_dtoa_r+0x52a>
 800557a:	bf00      	nop
 800557c:	08007370 	.word	0x08007370
 8005580:	08007348 	.word	0x08007348
 8005584:	3ff00000 	.word	0x3ff00000
 8005588:	40240000 	.word	0x40240000
 800558c:	401c0000 	.word	0x401c0000
 8005590:	40140000 	.word	0x40140000
 8005594:	3fe00000 	.word	0x3fe00000
 8005598:	4630      	mov	r0, r6
 800559a:	4639      	mov	r1, r7
 800559c:	f7fa ff9c 	bl	80004d8 <__aeabi_dmul>
 80055a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055a6:	9c03      	ldr	r4, [sp, #12]
 80055a8:	9314      	str	r3, [sp, #80]	; 0x50
 80055aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055ae:	f7fb fa43 	bl	8000a38 <__aeabi_d2iz>
 80055b2:	9015      	str	r0, [sp, #84]	; 0x54
 80055b4:	f7fa ff26 	bl	8000404 <__aeabi_i2d>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055c0:	f7fa fdd2 	bl	8000168 <__aeabi_dsub>
 80055c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055c6:	4606      	mov	r6, r0
 80055c8:	3330      	adds	r3, #48	; 0x30
 80055ca:	f804 3b01 	strb.w	r3, [r4], #1
 80055ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055d0:	460f      	mov	r7, r1
 80055d2:	429c      	cmp	r4, r3
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	d124      	bne.n	8005624 <_dtoa_r+0x64c>
 80055da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055de:	4bb0      	ldr	r3, [pc, #704]	; (80058a0 <_dtoa_r+0x8c8>)
 80055e0:	f7fa fdc4 	bl	800016c <__adddf3>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4630      	mov	r0, r6
 80055ea:	4639      	mov	r1, r7
 80055ec:	f7fb fa04 	bl	80009f8 <__aeabi_dcmpgt>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d163      	bne.n	80056bc <_dtoa_r+0x6e4>
 80055f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055f8:	2000      	movs	r0, #0
 80055fa:	49a9      	ldr	r1, [pc, #676]	; (80058a0 <_dtoa_r+0x8c8>)
 80055fc:	f7fa fdb4 	bl	8000168 <__aeabi_dsub>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4630      	mov	r0, r6
 8005606:	4639      	mov	r1, r7
 8005608:	f7fb f9d8 	bl	80009bc <__aeabi_dcmplt>
 800560c:	2800      	cmp	r0, #0
 800560e:	f43f af1d 	beq.w	800544c <_dtoa_r+0x474>
 8005612:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005614:	1e7b      	subs	r3, r7, #1
 8005616:	9314      	str	r3, [sp, #80]	; 0x50
 8005618:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800561c:	2b30      	cmp	r3, #48	; 0x30
 800561e:	d0f8      	beq.n	8005612 <_dtoa_r+0x63a>
 8005620:	46c2      	mov	sl, r8
 8005622:	e03b      	b.n	800569c <_dtoa_r+0x6c4>
 8005624:	4b9f      	ldr	r3, [pc, #636]	; (80058a4 <_dtoa_r+0x8cc>)
 8005626:	f7fa ff57 	bl	80004d8 <__aeabi_dmul>
 800562a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800562e:	e7bc      	b.n	80055aa <_dtoa_r+0x5d2>
 8005630:	9f03      	ldr	r7, [sp, #12]
 8005632:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800563a:	4640      	mov	r0, r8
 800563c:	4649      	mov	r1, r9
 800563e:	f7fb f875 	bl	800072c <__aeabi_ddiv>
 8005642:	f7fb f9f9 	bl	8000a38 <__aeabi_d2iz>
 8005646:	4604      	mov	r4, r0
 8005648:	f7fa fedc 	bl	8000404 <__aeabi_i2d>
 800564c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005650:	f7fa ff42 	bl	80004d8 <__aeabi_dmul>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4640      	mov	r0, r8
 800565a:	4649      	mov	r1, r9
 800565c:	f7fa fd84 	bl	8000168 <__aeabi_dsub>
 8005660:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005664:	f807 6b01 	strb.w	r6, [r7], #1
 8005668:	9e03      	ldr	r6, [sp, #12]
 800566a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800566e:	1bbe      	subs	r6, r7, r6
 8005670:	45b4      	cmp	ip, r6
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	d136      	bne.n	80056e6 <_dtoa_r+0x70e>
 8005678:	f7fa fd78 	bl	800016c <__adddf3>
 800567c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005680:	4680      	mov	r8, r0
 8005682:	4689      	mov	r9, r1
 8005684:	f7fb f9b8 	bl	80009f8 <__aeabi_dcmpgt>
 8005688:	bb58      	cbnz	r0, 80056e2 <_dtoa_r+0x70a>
 800568a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800568e:	4640      	mov	r0, r8
 8005690:	4649      	mov	r1, r9
 8005692:	f7fb f989 	bl	80009a8 <__aeabi_dcmpeq>
 8005696:	b108      	cbz	r0, 800569c <_dtoa_r+0x6c4>
 8005698:	07e1      	lsls	r1, r4, #31
 800569a:	d422      	bmi.n	80056e2 <_dtoa_r+0x70a>
 800569c:	4628      	mov	r0, r5
 800569e:	4659      	mov	r1, fp
 80056a0:	f000 faf4 	bl	8005c8c <_Bfree>
 80056a4:	2300      	movs	r3, #0
 80056a6:	703b      	strb	r3, [r7, #0]
 80056a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056aa:	f10a 0001 	add.w	r0, sl, #1
 80056ae:	6018      	str	r0, [r3, #0]
 80056b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f43f acde 	beq.w	8005074 <_dtoa_r+0x9c>
 80056b8:	601f      	str	r7, [r3, #0]
 80056ba:	e4db      	b.n	8005074 <_dtoa_r+0x9c>
 80056bc:	4627      	mov	r7, r4
 80056be:	463b      	mov	r3, r7
 80056c0:	461f      	mov	r7, r3
 80056c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056c6:	2a39      	cmp	r2, #57	; 0x39
 80056c8:	d107      	bne.n	80056da <_dtoa_r+0x702>
 80056ca:	9a03      	ldr	r2, [sp, #12]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d1f7      	bne.n	80056c0 <_dtoa_r+0x6e8>
 80056d0:	2230      	movs	r2, #48	; 0x30
 80056d2:	9903      	ldr	r1, [sp, #12]
 80056d4:	f108 0801 	add.w	r8, r8, #1
 80056d8:	700a      	strb	r2, [r1, #0]
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	3201      	adds	r2, #1
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	e79e      	b.n	8005620 <_dtoa_r+0x648>
 80056e2:	46d0      	mov	r8, sl
 80056e4:	e7eb      	b.n	80056be <_dtoa_r+0x6e6>
 80056e6:	2200      	movs	r2, #0
 80056e8:	4b6e      	ldr	r3, [pc, #440]	; (80058a4 <_dtoa_r+0x8cc>)
 80056ea:	f7fa fef5 	bl	80004d8 <__aeabi_dmul>
 80056ee:	2200      	movs	r2, #0
 80056f0:	2300      	movs	r3, #0
 80056f2:	4680      	mov	r8, r0
 80056f4:	4689      	mov	r9, r1
 80056f6:	f7fb f957 	bl	80009a8 <__aeabi_dcmpeq>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d09b      	beq.n	8005636 <_dtoa_r+0x65e>
 80056fe:	e7cd      	b.n	800569c <_dtoa_r+0x6c4>
 8005700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005702:	2a00      	cmp	r2, #0
 8005704:	f000 80d0 	beq.w	80058a8 <_dtoa_r+0x8d0>
 8005708:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800570a:	2a01      	cmp	r2, #1
 800570c:	f300 80ae 	bgt.w	800586c <_dtoa_r+0x894>
 8005710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005712:	2a00      	cmp	r2, #0
 8005714:	f000 80a6 	beq.w	8005864 <_dtoa_r+0x88c>
 8005718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800571c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800571e:	9f06      	ldr	r7, [sp, #24]
 8005720:	9a06      	ldr	r2, [sp, #24]
 8005722:	2101      	movs	r1, #1
 8005724:	441a      	add	r2, r3
 8005726:	9206      	str	r2, [sp, #24]
 8005728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572a:	4628      	mov	r0, r5
 800572c:	441a      	add	r2, r3
 800572e:	9209      	str	r2, [sp, #36]	; 0x24
 8005730:	f000 fb62 	bl	8005df8 <__i2b>
 8005734:	4606      	mov	r6, r0
 8005736:	2f00      	cmp	r7, #0
 8005738:	dd0c      	ble.n	8005754 <_dtoa_r+0x77c>
 800573a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	dd09      	ble.n	8005754 <_dtoa_r+0x77c>
 8005740:	42bb      	cmp	r3, r7
 8005742:	bfa8      	it	ge
 8005744:	463b      	movge	r3, r7
 8005746:	9a06      	ldr	r2, [sp, #24]
 8005748:	1aff      	subs	r7, r7, r3
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	9206      	str	r2, [sp, #24]
 800574e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	9309      	str	r3, [sp, #36]	; 0x24
 8005754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005756:	b1f3      	cbz	r3, 8005796 <_dtoa_r+0x7be>
 8005758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80a8 	beq.w	80058b0 <_dtoa_r+0x8d8>
 8005760:	2c00      	cmp	r4, #0
 8005762:	dd10      	ble.n	8005786 <_dtoa_r+0x7ae>
 8005764:	4631      	mov	r1, r6
 8005766:	4622      	mov	r2, r4
 8005768:	4628      	mov	r0, r5
 800576a:	f000 fc03 	bl	8005f74 <__pow5mult>
 800576e:	465a      	mov	r2, fp
 8005770:	4601      	mov	r1, r0
 8005772:	4606      	mov	r6, r0
 8005774:	4628      	mov	r0, r5
 8005776:	f000 fb55 	bl	8005e24 <__multiply>
 800577a:	4680      	mov	r8, r0
 800577c:	4659      	mov	r1, fp
 800577e:	4628      	mov	r0, r5
 8005780:	f000 fa84 	bl	8005c8c <_Bfree>
 8005784:	46c3      	mov	fp, r8
 8005786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005788:	1b1a      	subs	r2, r3, r4
 800578a:	d004      	beq.n	8005796 <_dtoa_r+0x7be>
 800578c:	4659      	mov	r1, fp
 800578e:	4628      	mov	r0, r5
 8005790:	f000 fbf0 	bl	8005f74 <__pow5mult>
 8005794:	4683      	mov	fp, r0
 8005796:	2101      	movs	r1, #1
 8005798:	4628      	mov	r0, r5
 800579a:	f000 fb2d 	bl	8005df8 <__i2b>
 800579e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a0:	4604      	mov	r4, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f340 8086 	ble.w	80058b4 <_dtoa_r+0x8dc>
 80057a8:	461a      	mov	r2, r3
 80057aa:	4601      	mov	r1, r0
 80057ac:	4628      	mov	r0, r5
 80057ae:	f000 fbe1 	bl	8005f74 <__pow5mult>
 80057b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057b4:	4604      	mov	r4, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	dd7f      	ble.n	80058ba <_dtoa_r+0x8e2>
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057c4:	6918      	ldr	r0, [r3, #16]
 80057c6:	f000 fac9 	bl	8005d5c <__hi0bits>
 80057ca:	f1c0 0020 	rsb	r0, r0, #32
 80057ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d0:	4418      	add	r0, r3
 80057d2:	f010 001f 	ands.w	r0, r0, #31
 80057d6:	f000 8092 	beq.w	80058fe <_dtoa_r+0x926>
 80057da:	f1c0 0320 	rsb	r3, r0, #32
 80057de:	2b04      	cmp	r3, #4
 80057e0:	f340 808a 	ble.w	80058f8 <_dtoa_r+0x920>
 80057e4:	f1c0 001c 	rsb	r0, r0, #28
 80057e8:	9b06      	ldr	r3, [sp, #24]
 80057ea:	4407      	add	r7, r0
 80057ec:	4403      	add	r3, r0
 80057ee:	9306      	str	r3, [sp, #24]
 80057f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f2:	4403      	add	r3, r0
 80057f4:	9309      	str	r3, [sp, #36]	; 0x24
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	dd05      	ble.n	8005808 <_dtoa_r+0x830>
 80057fc:	4659      	mov	r1, fp
 80057fe:	461a      	mov	r2, r3
 8005800:	4628      	mov	r0, r5
 8005802:	f000 fc11 	bl	8006028 <__lshift>
 8005806:	4683      	mov	fp, r0
 8005808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	dd05      	ble.n	800581a <_dtoa_r+0x842>
 800580e:	4621      	mov	r1, r4
 8005810:	461a      	mov	r2, r3
 8005812:	4628      	mov	r0, r5
 8005814:	f000 fc08 	bl	8006028 <__lshift>
 8005818:	4604      	mov	r4, r0
 800581a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d070      	beq.n	8005902 <_dtoa_r+0x92a>
 8005820:	4621      	mov	r1, r4
 8005822:	4658      	mov	r0, fp
 8005824:	f000 fc70 	bl	8006108 <__mcmp>
 8005828:	2800      	cmp	r0, #0
 800582a:	da6a      	bge.n	8005902 <_dtoa_r+0x92a>
 800582c:	2300      	movs	r3, #0
 800582e:	4659      	mov	r1, fp
 8005830:	220a      	movs	r2, #10
 8005832:	4628      	mov	r0, r5
 8005834:	f000 fa4c 	bl	8005cd0 <__multadd>
 8005838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800583a:	4683      	mov	fp, r0
 800583c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8194 	beq.w	8005b6e <_dtoa_r+0xb96>
 8005846:	4631      	mov	r1, r6
 8005848:	2300      	movs	r3, #0
 800584a:	220a      	movs	r2, #10
 800584c:	4628      	mov	r0, r5
 800584e:	f000 fa3f 	bl	8005cd0 <__multadd>
 8005852:	f1b9 0f00 	cmp.w	r9, #0
 8005856:	4606      	mov	r6, r0
 8005858:	f300 8093 	bgt.w	8005982 <_dtoa_r+0x9aa>
 800585c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800585e:	2b02      	cmp	r3, #2
 8005860:	dc57      	bgt.n	8005912 <_dtoa_r+0x93a>
 8005862:	e08e      	b.n	8005982 <_dtoa_r+0x9aa>
 8005864:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800586a:	e757      	b.n	800571c <_dtoa_r+0x744>
 800586c:	9b08      	ldr	r3, [sp, #32]
 800586e:	1e5c      	subs	r4, r3, #1
 8005870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005872:	42a3      	cmp	r3, r4
 8005874:	bfb7      	itett	lt
 8005876:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005878:	1b1c      	subge	r4, r3, r4
 800587a:	1ae2      	sublt	r2, r4, r3
 800587c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800587e:	bfbe      	ittt	lt
 8005880:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005882:	189b      	addlt	r3, r3, r2
 8005884:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005886:	9b08      	ldr	r3, [sp, #32]
 8005888:	bfb8      	it	lt
 800588a:	2400      	movlt	r4, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	bfbb      	ittet	lt
 8005890:	9b06      	ldrlt	r3, [sp, #24]
 8005892:	9a08      	ldrlt	r2, [sp, #32]
 8005894:	9f06      	ldrge	r7, [sp, #24]
 8005896:	1a9f      	sublt	r7, r3, r2
 8005898:	bfac      	ite	ge
 800589a:	9b08      	ldrge	r3, [sp, #32]
 800589c:	2300      	movlt	r3, #0
 800589e:	e73f      	b.n	8005720 <_dtoa_r+0x748>
 80058a0:	3fe00000 	.word	0x3fe00000
 80058a4:	40240000 	.word	0x40240000
 80058a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058aa:	9f06      	ldr	r7, [sp, #24]
 80058ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058ae:	e742      	b.n	8005736 <_dtoa_r+0x75e>
 80058b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058b2:	e76b      	b.n	800578c <_dtoa_r+0x7b4>
 80058b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	dc19      	bgt.n	80058ee <_dtoa_r+0x916>
 80058ba:	9b04      	ldr	r3, [sp, #16]
 80058bc:	b9bb      	cbnz	r3, 80058ee <_dtoa_r+0x916>
 80058be:	9b05      	ldr	r3, [sp, #20]
 80058c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c4:	b99b      	cbnz	r3, 80058ee <_dtoa_r+0x916>
 80058c6:	9b05      	ldr	r3, [sp, #20]
 80058c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058cc:	0d1b      	lsrs	r3, r3, #20
 80058ce:	051b      	lsls	r3, r3, #20
 80058d0:	b183      	cbz	r3, 80058f4 <_dtoa_r+0x91c>
 80058d2:	f04f 0801 	mov.w	r8, #1
 80058d6:	9b06      	ldr	r3, [sp, #24]
 80058d8:	3301      	adds	r3, #1
 80058da:	9306      	str	r3, [sp, #24]
 80058dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058de:	3301      	adds	r3, #1
 80058e0:	9309      	str	r3, [sp, #36]	; 0x24
 80058e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f47f af6a 	bne.w	80057be <_dtoa_r+0x7e6>
 80058ea:	2001      	movs	r0, #1
 80058ec:	e76f      	b.n	80057ce <_dtoa_r+0x7f6>
 80058ee:	f04f 0800 	mov.w	r8, #0
 80058f2:	e7f6      	b.n	80058e2 <_dtoa_r+0x90a>
 80058f4:	4698      	mov	r8, r3
 80058f6:	e7f4      	b.n	80058e2 <_dtoa_r+0x90a>
 80058f8:	f43f af7d 	beq.w	80057f6 <_dtoa_r+0x81e>
 80058fc:	4618      	mov	r0, r3
 80058fe:	301c      	adds	r0, #28
 8005900:	e772      	b.n	80057e8 <_dtoa_r+0x810>
 8005902:	9b08      	ldr	r3, [sp, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dc36      	bgt.n	8005976 <_dtoa_r+0x99e>
 8005908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800590a:	2b02      	cmp	r3, #2
 800590c:	dd33      	ble.n	8005976 <_dtoa_r+0x99e>
 800590e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005912:	f1b9 0f00 	cmp.w	r9, #0
 8005916:	d10d      	bne.n	8005934 <_dtoa_r+0x95c>
 8005918:	4621      	mov	r1, r4
 800591a:	464b      	mov	r3, r9
 800591c:	2205      	movs	r2, #5
 800591e:	4628      	mov	r0, r5
 8005920:	f000 f9d6 	bl	8005cd0 <__multadd>
 8005924:	4601      	mov	r1, r0
 8005926:	4604      	mov	r4, r0
 8005928:	4658      	mov	r0, fp
 800592a:	f000 fbed 	bl	8006108 <__mcmp>
 800592e:	2800      	cmp	r0, #0
 8005930:	f73f adb8 	bgt.w	80054a4 <_dtoa_r+0x4cc>
 8005934:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005936:	9f03      	ldr	r7, [sp, #12]
 8005938:	ea6f 0a03 	mvn.w	sl, r3
 800593c:	f04f 0800 	mov.w	r8, #0
 8005940:	4621      	mov	r1, r4
 8005942:	4628      	mov	r0, r5
 8005944:	f000 f9a2 	bl	8005c8c <_Bfree>
 8005948:	2e00      	cmp	r6, #0
 800594a:	f43f aea7 	beq.w	800569c <_dtoa_r+0x6c4>
 800594e:	f1b8 0f00 	cmp.w	r8, #0
 8005952:	d005      	beq.n	8005960 <_dtoa_r+0x988>
 8005954:	45b0      	cmp	r8, r6
 8005956:	d003      	beq.n	8005960 <_dtoa_r+0x988>
 8005958:	4641      	mov	r1, r8
 800595a:	4628      	mov	r0, r5
 800595c:	f000 f996 	bl	8005c8c <_Bfree>
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	f000 f992 	bl	8005c8c <_Bfree>
 8005968:	e698      	b.n	800569c <_dtoa_r+0x6c4>
 800596a:	2400      	movs	r4, #0
 800596c:	4626      	mov	r6, r4
 800596e:	e7e1      	b.n	8005934 <_dtoa_r+0x95c>
 8005970:	46c2      	mov	sl, r8
 8005972:	4626      	mov	r6, r4
 8005974:	e596      	b.n	80054a4 <_dtoa_r+0x4cc>
 8005976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80fd 	beq.w	8005b7c <_dtoa_r+0xba4>
 8005982:	2f00      	cmp	r7, #0
 8005984:	dd05      	ble.n	8005992 <_dtoa_r+0x9ba>
 8005986:	4631      	mov	r1, r6
 8005988:	463a      	mov	r2, r7
 800598a:	4628      	mov	r0, r5
 800598c:	f000 fb4c 	bl	8006028 <__lshift>
 8005990:	4606      	mov	r6, r0
 8005992:	f1b8 0f00 	cmp.w	r8, #0
 8005996:	d05c      	beq.n	8005a52 <_dtoa_r+0xa7a>
 8005998:	4628      	mov	r0, r5
 800599a:	6871      	ldr	r1, [r6, #4]
 800599c:	f000 f936 	bl	8005c0c <_Balloc>
 80059a0:	4607      	mov	r7, r0
 80059a2:	b928      	cbnz	r0, 80059b0 <_dtoa_r+0x9d8>
 80059a4:	4602      	mov	r2, r0
 80059a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059aa:	4b7f      	ldr	r3, [pc, #508]	; (8005ba8 <_dtoa_r+0xbd0>)
 80059ac:	f7ff bb28 	b.w	8005000 <_dtoa_r+0x28>
 80059b0:	6932      	ldr	r2, [r6, #16]
 80059b2:	f106 010c 	add.w	r1, r6, #12
 80059b6:	3202      	adds	r2, #2
 80059b8:	0092      	lsls	r2, r2, #2
 80059ba:	300c      	adds	r0, #12
 80059bc:	f000 f90c 	bl	8005bd8 <memcpy>
 80059c0:	2201      	movs	r2, #1
 80059c2:	4639      	mov	r1, r7
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 fb2f 	bl	8006028 <__lshift>
 80059ca:	46b0      	mov	r8, r6
 80059cc:	4606      	mov	r6, r0
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	9308      	str	r3, [sp, #32]
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	444b      	add	r3, r9
 80059d8:	930a      	str	r3, [sp, #40]	; 0x28
 80059da:	9b04      	ldr	r3, [sp, #16]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	9309      	str	r3, [sp, #36]	; 0x24
 80059e2:	9b08      	ldr	r3, [sp, #32]
 80059e4:	4621      	mov	r1, r4
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4658      	mov	r0, fp
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	f7ff fa68 	bl	8004ec0 <quorem>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4641      	mov	r1, r8
 80059f4:	3330      	adds	r3, #48	; 0x30
 80059f6:	9006      	str	r0, [sp, #24]
 80059f8:	4658      	mov	r0, fp
 80059fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80059fc:	f000 fb84 	bl	8006108 <__mcmp>
 8005a00:	4632      	mov	r2, r6
 8005a02:	4681      	mov	r9, r0
 8005a04:	4621      	mov	r1, r4
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 fb9a 	bl	8006140 <__mdiff>
 8005a0c:	68c2      	ldr	r2, [r0, #12]
 8005a0e:	4607      	mov	r7, r0
 8005a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a12:	bb02      	cbnz	r2, 8005a56 <_dtoa_r+0xa7e>
 8005a14:	4601      	mov	r1, r0
 8005a16:	4658      	mov	r0, fp
 8005a18:	f000 fb76 	bl	8006108 <__mcmp>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a20:	4639      	mov	r1, r7
 8005a22:	4628      	mov	r0, r5
 8005a24:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005a28:	f000 f930 	bl	8005c8c <_Bfree>
 8005a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a30:	9f08      	ldr	r7, [sp, #32]
 8005a32:	ea43 0102 	orr.w	r1, r3, r2
 8005a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a3c:	d10d      	bne.n	8005a5a <_dtoa_r+0xa82>
 8005a3e:	2b39      	cmp	r3, #57	; 0x39
 8005a40:	d029      	beq.n	8005a96 <_dtoa_r+0xabe>
 8005a42:	f1b9 0f00 	cmp.w	r9, #0
 8005a46:	dd01      	ble.n	8005a4c <_dtoa_r+0xa74>
 8005a48:	9b06      	ldr	r3, [sp, #24]
 8005a4a:	3331      	adds	r3, #49	; 0x31
 8005a4c:	9a04      	ldr	r2, [sp, #16]
 8005a4e:	7013      	strb	r3, [r2, #0]
 8005a50:	e776      	b.n	8005940 <_dtoa_r+0x968>
 8005a52:	4630      	mov	r0, r6
 8005a54:	e7b9      	b.n	80059ca <_dtoa_r+0x9f2>
 8005a56:	2201      	movs	r2, #1
 8005a58:	e7e2      	b.n	8005a20 <_dtoa_r+0xa48>
 8005a5a:	f1b9 0f00 	cmp.w	r9, #0
 8005a5e:	db06      	blt.n	8005a6e <_dtoa_r+0xa96>
 8005a60:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005a62:	ea41 0909 	orr.w	r9, r1, r9
 8005a66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a68:	ea59 0101 	orrs.w	r1, r9, r1
 8005a6c:	d120      	bne.n	8005ab0 <_dtoa_r+0xad8>
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	ddec      	ble.n	8005a4c <_dtoa_r+0xa74>
 8005a72:	4659      	mov	r1, fp
 8005a74:	2201      	movs	r2, #1
 8005a76:	4628      	mov	r0, r5
 8005a78:	9308      	str	r3, [sp, #32]
 8005a7a:	f000 fad5 	bl	8006028 <__lshift>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4683      	mov	fp, r0
 8005a82:	f000 fb41 	bl	8006108 <__mcmp>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	9b08      	ldr	r3, [sp, #32]
 8005a8a:	dc02      	bgt.n	8005a92 <_dtoa_r+0xaba>
 8005a8c:	d1de      	bne.n	8005a4c <_dtoa_r+0xa74>
 8005a8e:	07da      	lsls	r2, r3, #31
 8005a90:	d5dc      	bpl.n	8005a4c <_dtoa_r+0xa74>
 8005a92:	2b39      	cmp	r3, #57	; 0x39
 8005a94:	d1d8      	bne.n	8005a48 <_dtoa_r+0xa70>
 8005a96:	2339      	movs	r3, #57	; 0x39
 8005a98:	9a04      	ldr	r2, [sp, #16]
 8005a9a:	7013      	strb	r3, [r2, #0]
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	2a39      	cmp	r2, #57	; 0x39
 8005aa8:	d050      	beq.n	8005b4c <_dtoa_r+0xb74>
 8005aaa:	3201      	adds	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e747      	b.n	8005940 <_dtoa_r+0x968>
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	dd03      	ble.n	8005abc <_dtoa_r+0xae4>
 8005ab4:	2b39      	cmp	r3, #57	; 0x39
 8005ab6:	d0ee      	beq.n	8005a96 <_dtoa_r+0xabe>
 8005ab8:	3301      	adds	r3, #1
 8005aba:	e7c7      	b.n	8005a4c <_dtoa_r+0xa74>
 8005abc:	9a08      	ldr	r2, [sp, #32]
 8005abe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ac0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	d02a      	beq.n	8005b1e <_dtoa_r+0xb46>
 8005ac8:	4659      	mov	r1, fp
 8005aca:	2300      	movs	r3, #0
 8005acc:	220a      	movs	r2, #10
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 f8fe 	bl	8005cd0 <__multadd>
 8005ad4:	45b0      	cmp	r8, r6
 8005ad6:	4683      	mov	fp, r0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	f04f 020a 	mov.w	r2, #10
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	d107      	bne.n	8005af6 <_dtoa_r+0xb1e>
 8005ae6:	f000 f8f3 	bl	8005cd0 <__multadd>
 8005aea:	4680      	mov	r8, r0
 8005aec:	4606      	mov	r6, r0
 8005aee:	9b08      	ldr	r3, [sp, #32]
 8005af0:	3301      	adds	r3, #1
 8005af2:	9308      	str	r3, [sp, #32]
 8005af4:	e775      	b.n	80059e2 <_dtoa_r+0xa0a>
 8005af6:	f000 f8eb 	bl	8005cd0 <__multadd>
 8005afa:	4631      	mov	r1, r6
 8005afc:	4680      	mov	r8, r0
 8005afe:	2300      	movs	r3, #0
 8005b00:	220a      	movs	r2, #10
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 f8e4 	bl	8005cd0 <__multadd>
 8005b08:	4606      	mov	r6, r0
 8005b0a:	e7f0      	b.n	8005aee <_dtoa_r+0xb16>
 8005b0c:	f1b9 0f00 	cmp.w	r9, #0
 8005b10:	bfcc      	ite	gt
 8005b12:	464f      	movgt	r7, r9
 8005b14:	2701      	movle	r7, #1
 8005b16:	f04f 0800 	mov.w	r8, #0
 8005b1a:	9a03      	ldr	r2, [sp, #12]
 8005b1c:	4417      	add	r7, r2
 8005b1e:	4659      	mov	r1, fp
 8005b20:	2201      	movs	r2, #1
 8005b22:	4628      	mov	r0, r5
 8005b24:	9308      	str	r3, [sp, #32]
 8005b26:	f000 fa7f 	bl	8006028 <__lshift>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4683      	mov	fp, r0
 8005b2e:	f000 faeb 	bl	8006108 <__mcmp>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	dcb2      	bgt.n	8005a9c <_dtoa_r+0xac4>
 8005b36:	d102      	bne.n	8005b3e <_dtoa_r+0xb66>
 8005b38:	9b08      	ldr	r3, [sp, #32]
 8005b3a:	07db      	lsls	r3, r3, #31
 8005b3c:	d4ae      	bmi.n	8005a9c <_dtoa_r+0xac4>
 8005b3e:	463b      	mov	r3, r7
 8005b40:	461f      	mov	r7, r3
 8005b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b46:	2a30      	cmp	r2, #48	; 0x30
 8005b48:	d0fa      	beq.n	8005b40 <_dtoa_r+0xb68>
 8005b4a:	e6f9      	b.n	8005940 <_dtoa_r+0x968>
 8005b4c:	9a03      	ldr	r2, [sp, #12]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d1a5      	bne.n	8005a9e <_dtoa_r+0xac6>
 8005b52:	2331      	movs	r3, #49	; 0x31
 8005b54:	f10a 0a01 	add.w	sl, sl, #1
 8005b58:	e779      	b.n	8005a4e <_dtoa_r+0xa76>
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <_dtoa_r+0xbd4>)
 8005b5c:	f7ff baa8 	b.w	80050b0 <_dtoa_r+0xd8>
 8005b60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f47f aa81 	bne.w	800506a <_dtoa_r+0x92>
 8005b68:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <_dtoa_r+0xbd8>)
 8005b6a:	f7ff baa1 	b.w	80050b0 <_dtoa_r+0xd8>
 8005b6e:	f1b9 0f00 	cmp.w	r9, #0
 8005b72:	dc03      	bgt.n	8005b7c <_dtoa_r+0xba4>
 8005b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	f73f aecb 	bgt.w	8005912 <_dtoa_r+0x93a>
 8005b7c:	9f03      	ldr	r7, [sp, #12]
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4658      	mov	r0, fp
 8005b82:	f7ff f99d 	bl	8004ec0 <quorem>
 8005b86:	9a03      	ldr	r2, [sp, #12]
 8005b88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b8c:	f807 3b01 	strb.w	r3, [r7], #1
 8005b90:	1aba      	subs	r2, r7, r2
 8005b92:	4591      	cmp	r9, r2
 8005b94:	ddba      	ble.n	8005b0c <_dtoa_r+0xb34>
 8005b96:	4659      	mov	r1, fp
 8005b98:	2300      	movs	r3, #0
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f000 f897 	bl	8005cd0 <__multadd>
 8005ba2:	4683      	mov	fp, r0
 8005ba4:	e7eb      	b.n	8005b7e <_dtoa_r+0xba6>
 8005ba6:	bf00      	nop
 8005ba8:	080072db 	.word	0x080072db
 8005bac:	08007238 	.word	0x08007238
 8005bb0:	0800725c 	.word	0x0800725c

08005bb4 <_localeconv_r>:
 8005bb4:	4800      	ldr	r0, [pc, #0]	; (8005bb8 <_localeconv_r+0x4>)
 8005bb6:	4770      	bx	lr
 8005bb8:	20000160 	.word	0x20000160

08005bbc <memchr>:
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	b2c9      	uxtb	r1, r1
 8005bc2:	4402      	add	r2, r0
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	d101      	bne.n	8005bce <memchr+0x12>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e003      	b.n	8005bd6 <memchr+0x1a>
 8005bce:	7804      	ldrb	r4, [r0, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	428c      	cmp	r4, r1
 8005bd4:	d1f6      	bne.n	8005bc4 <memchr+0x8>
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <memcpy>:
 8005bd8:	440a      	add	r2, r1
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be0:	d100      	bne.n	8005be4 <memcpy+0xc>
 8005be2:	4770      	bx	lr
 8005be4:	b510      	push	{r4, lr}
 8005be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bea:	4291      	cmp	r1, r2
 8005bec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bf0:	d1f9      	bne.n	8005be6 <memcpy+0xe>
 8005bf2:	bd10      	pop	{r4, pc}

08005bf4 <__malloc_lock>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__malloc_lock+0x8>)
 8005bf6:	f000 bd2c 	b.w	8006652 <__retarget_lock_acquire_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	20000474 	.word	0x20000474

08005c00 <__malloc_unlock>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__malloc_unlock+0x8>)
 8005c02:	f000 bd27 	b.w	8006654 <__retarget_lock_release_recursive>
 8005c06:	bf00      	nop
 8005c08:	20000474 	.word	0x20000474

08005c0c <_Balloc>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c10:	4604      	mov	r4, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	b976      	cbnz	r6, 8005c34 <_Balloc+0x28>
 8005c16:	2010      	movs	r0, #16
 8005c18:	f7fe fbd6 	bl	80043c8 <malloc>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6260      	str	r0, [r4, #36]	; 0x24
 8005c20:	b920      	cbnz	r0, 8005c2c <_Balloc+0x20>
 8005c22:	2166      	movs	r1, #102	; 0x66
 8005c24:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <_Balloc+0x78>)
 8005c26:	4818      	ldr	r0, [pc, #96]	; (8005c88 <_Balloc+0x7c>)
 8005c28:	f000 fce2 	bl	80065f0 <__assert_func>
 8005c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c30:	6006      	str	r6, [r0, #0]
 8005c32:	60c6      	str	r6, [r0, #12]
 8005c34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c36:	68f3      	ldr	r3, [r6, #12]
 8005c38:	b183      	cbz	r3, 8005c5c <_Balloc+0x50>
 8005c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c42:	b9b8      	cbnz	r0, 8005c74 <_Balloc+0x68>
 8005c44:	2101      	movs	r1, #1
 8005c46:	fa01 f605 	lsl.w	r6, r1, r5
 8005c4a:	1d72      	adds	r2, r6, #5
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	0092      	lsls	r2, r2, #2
 8005c50:	f000 fb5e 	bl	8006310 <_calloc_r>
 8005c54:	b160      	cbz	r0, 8005c70 <_Balloc+0x64>
 8005c56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c5a:	e00e      	b.n	8005c7a <_Balloc+0x6e>
 8005c5c:	2221      	movs	r2, #33	; 0x21
 8005c5e:	2104      	movs	r1, #4
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 fb55 	bl	8006310 <_calloc_r>
 8005c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c68:	60f0      	str	r0, [r6, #12]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e4      	bne.n	8005c3a <_Balloc+0x2e>
 8005c70:	2000      	movs	r0, #0
 8005c72:	bd70      	pop	{r4, r5, r6, pc}
 8005c74:	6802      	ldr	r2, [r0, #0]
 8005c76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c80:	e7f7      	b.n	8005c72 <_Balloc+0x66>
 8005c82:	bf00      	nop
 8005c84:	08007269 	.word	0x08007269
 8005c88:	080072ec 	.word	0x080072ec

08005c8c <_Bfree>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c90:	4605      	mov	r5, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	b976      	cbnz	r6, 8005cb4 <_Bfree+0x28>
 8005c96:	2010      	movs	r0, #16
 8005c98:	f7fe fb96 	bl	80043c8 <malloc>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6268      	str	r0, [r5, #36]	; 0x24
 8005ca0:	b920      	cbnz	r0, 8005cac <_Bfree+0x20>
 8005ca2:	218a      	movs	r1, #138	; 0x8a
 8005ca4:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <_Bfree+0x3c>)
 8005ca6:	4809      	ldr	r0, [pc, #36]	; (8005ccc <_Bfree+0x40>)
 8005ca8:	f000 fca2 	bl	80065f0 <__assert_func>
 8005cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cb0:	6006      	str	r6, [r0, #0]
 8005cb2:	60c6      	str	r6, [r0, #12]
 8005cb4:	b13c      	cbz	r4, 8005cc6 <_Bfree+0x3a>
 8005cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cb8:	6862      	ldr	r2, [r4, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cc0:	6021      	str	r1, [r4, #0]
 8005cc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	08007269 	.word	0x08007269
 8005ccc:	080072ec 	.word	0x080072ec

08005cd0 <__multadd>:
 8005cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	461e      	mov	r6, r3
 8005cda:	2000      	movs	r0, #0
 8005cdc:	690d      	ldr	r5, [r1, #16]
 8005cde:	f101 0c14 	add.w	ip, r1, #20
 8005ce2:	f8dc 3000 	ldr.w	r3, [ip]
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	b299      	uxth	r1, r3
 8005cea:	fb02 6101 	mla	r1, r2, r1, r6
 8005cee:	0c1e      	lsrs	r6, r3, #16
 8005cf0:	0c0b      	lsrs	r3, r1, #16
 8005cf2:	fb02 3306 	mla	r3, r2, r6, r3
 8005cf6:	b289      	uxth	r1, r1
 8005cf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cfc:	4285      	cmp	r5, r0
 8005cfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d02:	f84c 1b04 	str.w	r1, [ip], #4
 8005d06:	dcec      	bgt.n	8005ce2 <__multadd+0x12>
 8005d08:	b30e      	cbz	r6, 8005d4e <__multadd+0x7e>
 8005d0a:	68a3      	ldr	r3, [r4, #8]
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	dc19      	bgt.n	8005d44 <__multadd+0x74>
 8005d10:	6861      	ldr	r1, [r4, #4]
 8005d12:	4638      	mov	r0, r7
 8005d14:	3101      	adds	r1, #1
 8005d16:	f7ff ff79 	bl	8005c0c <_Balloc>
 8005d1a:	4680      	mov	r8, r0
 8005d1c:	b928      	cbnz	r0, 8005d2a <__multadd+0x5a>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	21b5      	movs	r1, #181	; 0xb5
 8005d22:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <__multadd+0x84>)
 8005d24:	480c      	ldr	r0, [pc, #48]	; (8005d58 <__multadd+0x88>)
 8005d26:	f000 fc63 	bl	80065f0 <__assert_func>
 8005d2a:	6922      	ldr	r2, [r4, #16]
 8005d2c:	f104 010c 	add.w	r1, r4, #12
 8005d30:	3202      	adds	r2, #2
 8005d32:	0092      	lsls	r2, r2, #2
 8005d34:	300c      	adds	r0, #12
 8005d36:	f7ff ff4f 	bl	8005bd8 <memcpy>
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f7ff ffa5 	bl	8005c8c <_Bfree>
 8005d42:	4644      	mov	r4, r8
 8005d44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d48:	3501      	adds	r5, #1
 8005d4a:	615e      	str	r6, [r3, #20]
 8005d4c:	6125      	str	r5, [r4, #16]
 8005d4e:	4620      	mov	r0, r4
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	080072db 	.word	0x080072db
 8005d58:	080072ec 	.word	0x080072ec

08005d5c <__hi0bits>:
 8005d5c:	0c02      	lsrs	r2, r0, #16
 8005d5e:	0412      	lsls	r2, r2, #16
 8005d60:	4603      	mov	r3, r0
 8005d62:	b9ca      	cbnz	r2, 8005d98 <__hi0bits+0x3c>
 8005d64:	0403      	lsls	r3, r0, #16
 8005d66:	2010      	movs	r0, #16
 8005d68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005d6c:	bf04      	itt	eq
 8005d6e:	021b      	lsleq	r3, r3, #8
 8005d70:	3008      	addeq	r0, #8
 8005d72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005d76:	bf04      	itt	eq
 8005d78:	011b      	lsleq	r3, r3, #4
 8005d7a:	3004      	addeq	r0, #4
 8005d7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005d80:	bf04      	itt	eq
 8005d82:	009b      	lsleq	r3, r3, #2
 8005d84:	3002      	addeq	r0, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	db05      	blt.n	8005d96 <__hi0bits+0x3a>
 8005d8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005d8e:	f100 0001 	add.w	r0, r0, #1
 8005d92:	bf08      	it	eq
 8005d94:	2020      	moveq	r0, #32
 8005d96:	4770      	bx	lr
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e7e5      	b.n	8005d68 <__hi0bits+0xc>

08005d9c <__lo0bits>:
 8005d9c:	6803      	ldr	r3, [r0, #0]
 8005d9e:	4602      	mov	r2, r0
 8005da0:	f013 0007 	ands.w	r0, r3, #7
 8005da4:	d00b      	beq.n	8005dbe <__lo0bits+0x22>
 8005da6:	07d9      	lsls	r1, r3, #31
 8005da8:	d421      	bmi.n	8005dee <__lo0bits+0x52>
 8005daa:	0798      	lsls	r0, r3, #30
 8005dac:	bf49      	itett	mi
 8005dae:	085b      	lsrmi	r3, r3, #1
 8005db0:	089b      	lsrpl	r3, r3, #2
 8005db2:	2001      	movmi	r0, #1
 8005db4:	6013      	strmi	r3, [r2, #0]
 8005db6:	bf5c      	itt	pl
 8005db8:	2002      	movpl	r0, #2
 8005dba:	6013      	strpl	r3, [r2, #0]
 8005dbc:	4770      	bx	lr
 8005dbe:	b299      	uxth	r1, r3
 8005dc0:	b909      	cbnz	r1, 8005dc6 <__lo0bits+0x2a>
 8005dc2:	2010      	movs	r0, #16
 8005dc4:	0c1b      	lsrs	r3, r3, #16
 8005dc6:	b2d9      	uxtb	r1, r3
 8005dc8:	b909      	cbnz	r1, 8005dce <__lo0bits+0x32>
 8005dca:	3008      	adds	r0, #8
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	0719      	lsls	r1, r3, #28
 8005dd0:	bf04      	itt	eq
 8005dd2:	091b      	lsreq	r3, r3, #4
 8005dd4:	3004      	addeq	r0, #4
 8005dd6:	0799      	lsls	r1, r3, #30
 8005dd8:	bf04      	itt	eq
 8005dda:	089b      	lsreq	r3, r3, #2
 8005ddc:	3002      	addeq	r0, #2
 8005dde:	07d9      	lsls	r1, r3, #31
 8005de0:	d403      	bmi.n	8005dea <__lo0bits+0x4e>
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	f100 0001 	add.w	r0, r0, #1
 8005de8:	d003      	beq.n	8005df2 <__lo0bits+0x56>
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	4770      	bx	lr
 8005dee:	2000      	movs	r0, #0
 8005df0:	4770      	bx	lr
 8005df2:	2020      	movs	r0, #32
 8005df4:	4770      	bx	lr
	...

08005df8 <__i2b>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	f7ff ff05 	bl	8005c0c <_Balloc>
 8005e02:	4602      	mov	r2, r0
 8005e04:	b928      	cbnz	r0, 8005e12 <__i2b+0x1a>
 8005e06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e0a:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <__i2b+0x24>)
 8005e0c:	4804      	ldr	r0, [pc, #16]	; (8005e20 <__i2b+0x28>)
 8005e0e:	f000 fbef 	bl	80065f0 <__assert_func>
 8005e12:	2301      	movs	r3, #1
 8005e14:	6144      	str	r4, [r0, #20]
 8005e16:	6103      	str	r3, [r0, #16]
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	bf00      	nop
 8005e1c:	080072db 	.word	0x080072db
 8005e20:	080072ec 	.word	0x080072ec

08005e24 <__multiply>:
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	4691      	mov	r9, r2
 8005e2a:	690a      	ldr	r2, [r1, #16]
 8005e2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e30:	460c      	mov	r4, r1
 8005e32:	429a      	cmp	r2, r3
 8005e34:	bfbe      	ittt	lt
 8005e36:	460b      	movlt	r3, r1
 8005e38:	464c      	movlt	r4, r9
 8005e3a:	4699      	movlt	r9, r3
 8005e3c:	6927      	ldr	r7, [r4, #16]
 8005e3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	6861      	ldr	r1, [r4, #4]
 8005e46:	eb07 060a 	add.w	r6, r7, sl
 8005e4a:	42b3      	cmp	r3, r6
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	bfb8      	it	lt
 8005e50:	3101      	addlt	r1, #1
 8005e52:	f7ff fedb 	bl	8005c0c <_Balloc>
 8005e56:	b930      	cbnz	r0, 8005e66 <__multiply+0x42>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	f240 115d 	movw	r1, #349	; 0x15d
 8005e5e:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <__multiply+0x148>)
 8005e60:	4843      	ldr	r0, [pc, #268]	; (8005f70 <__multiply+0x14c>)
 8005e62:	f000 fbc5 	bl	80065f0 <__assert_func>
 8005e66:	f100 0514 	add.w	r5, r0, #20
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e72:	4543      	cmp	r3, r8
 8005e74:	d321      	bcc.n	8005eba <__multiply+0x96>
 8005e76:	f104 0314 	add.w	r3, r4, #20
 8005e7a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e7e:	f109 0314 	add.w	r3, r9, #20
 8005e82:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e86:	9202      	str	r2, [sp, #8]
 8005e88:	1b3a      	subs	r2, r7, r4
 8005e8a:	3a15      	subs	r2, #21
 8005e8c:	f022 0203 	bic.w	r2, r2, #3
 8005e90:	3204      	adds	r2, #4
 8005e92:	f104 0115 	add.w	r1, r4, #21
 8005e96:	428f      	cmp	r7, r1
 8005e98:	bf38      	it	cc
 8005e9a:	2204      	movcc	r2, #4
 8005e9c:	9201      	str	r2, [sp, #4]
 8005e9e:	9a02      	ldr	r2, [sp, #8]
 8005ea0:	9303      	str	r3, [sp, #12]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d80c      	bhi.n	8005ec0 <__multiply+0x9c>
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	dd03      	ble.n	8005eb2 <__multiply+0x8e>
 8005eaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d059      	beq.n	8005f66 <__multiply+0x142>
 8005eb2:	6106      	str	r6, [r0, #16]
 8005eb4:	b005      	add	sp, #20
 8005eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eba:	f843 2b04 	str.w	r2, [r3], #4
 8005ebe:	e7d8      	b.n	8005e72 <__multiply+0x4e>
 8005ec0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ec4:	f1ba 0f00 	cmp.w	sl, #0
 8005ec8:	d023      	beq.n	8005f12 <__multiply+0xee>
 8005eca:	46a9      	mov	r9, r5
 8005ecc:	f04f 0c00 	mov.w	ip, #0
 8005ed0:	f104 0e14 	add.w	lr, r4, #20
 8005ed4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ed8:	f8d9 1000 	ldr.w	r1, [r9]
 8005edc:	fa1f fb82 	uxth.w	fp, r2
 8005ee0:	b289      	uxth	r1, r1
 8005ee2:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ee6:	4461      	add	r1, ip
 8005ee8:	f8d9 c000 	ldr.w	ip, [r9]
 8005eec:	0c12      	lsrs	r2, r2, #16
 8005eee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005ef2:	fb0a c202 	mla	r2, sl, r2, ip
 8005ef6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005efa:	b289      	uxth	r1, r1
 8005efc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f00:	4577      	cmp	r7, lr
 8005f02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f06:	f849 1b04 	str.w	r1, [r9], #4
 8005f0a:	d8e3      	bhi.n	8005ed4 <__multiply+0xb0>
 8005f0c:	9a01      	ldr	r2, [sp, #4]
 8005f0e:	f845 c002 	str.w	ip, [r5, r2]
 8005f12:	9a03      	ldr	r2, [sp, #12]
 8005f14:	3304      	adds	r3, #4
 8005f16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f1a:	f1b9 0f00 	cmp.w	r9, #0
 8005f1e:	d020      	beq.n	8005f62 <__multiply+0x13e>
 8005f20:	46ae      	mov	lr, r5
 8005f22:	f04f 0a00 	mov.w	sl, #0
 8005f26:	6829      	ldr	r1, [r5, #0]
 8005f28:	f104 0c14 	add.w	ip, r4, #20
 8005f2c:	f8bc b000 	ldrh.w	fp, [ip]
 8005f30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f34:	b289      	uxth	r1, r1
 8005f36:	fb09 220b 	mla	r2, r9, fp, r2
 8005f3a:	4492      	add	sl, r2
 8005f3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f40:	f84e 1b04 	str.w	r1, [lr], #4
 8005f44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f48:	f8be 1000 	ldrh.w	r1, [lr]
 8005f4c:	0c12      	lsrs	r2, r2, #16
 8005f4e:	fb09 1102 	mla	r1, r9, r2, r1
 8005f52:	4567      	cmp	r7, ip
 8005f54:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f5c:	d8e6      	bhi.n	8005f2c <__multiply+0x108>
 8005f5e:	9a01      	ldr	r2, [sp, #4]
 8005f60:	50a9      	str	r1, [r5, r2]
 8005f62:	3504      	adds	r5, #4
 8005f64:	e79b      	b.n	8005e9e <__multiply+0x7a>
 8005f66:	3e01      	subs	r6, #1
 8005f68:	e79d      	b.n	8005ea6 <__multiply+0x82>
 8005f6a:	bf00      	nop
 8005f6c:	080072db 	.word	0x080072db
 8005f70:	080072ec 	.word	0x080072ec

08005f74 <__pow5mult>:
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f78:	4615      	mov	r5, r2
 8005f7a:	f012 0203 	ands.w	r2, r2, #3
 8005f7e:	4606      	mov	r6, r0
 8005f80:	460f      	mov	r7, r1
 8005f82:	d007      	beq.n	8005f94 <__pow5mult+0x20>
 8005f84:	4c25      	ldr	r4, [pc, #148]	; (800601c <__pow5mult+0xa8>)
 8005f86:	3a01      	subs	r2, #1
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f8e:	f7ff fe9f 	bl	8005cd0 <__multadd>
 8005f92:	4607      	mov	r7, r0
 8005f94:	10ad      	asrs	r5, r5, #2
 8005f96:	d03d      	beq.n	8006014 <__pow5mult+0xa0>
 8005f98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f9a:	b97c      	cbnz	r4, 8005fbc <__pow5mult+0x48>
 8005f9c:	2010      	movs	r0, #16
 8005f9e:	f7fe fa13 	bl	80043c8 <malloc>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6270      	str	r0, [r6, #36]	; 0x24
 8005fa6:	b928      	cbnz	r0, 8005fb4 <__pow5mult+0x40>
 8005fa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fac:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <__pow5mult+0xac>)
 8005fae:	481d      	ldr	r0, [pc, #116]	; (8006024 <__pow5mult+0xb0>)
 8005fb0:	f000 fb1e 	bl	80065f0 <__assert_func>
 8005fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fb8:	6004      	str	r4, [r0, #0]
 8005fba:	60c4      	str	r4, [r0, #12]
 8005fbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fc4:	b94c      	cbnz	r4, 8005fda <__pow5mult+0x66>
 8005fc6:	f240 2171 	movw	r1, #625	; 0x271
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ff14 	bl	8005df8 <__i2b>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fd8:	6003      	str	r3, [r0, #0]
 8005fda:	f04f 0900 	mov.w	r9, #0
 8005fde:	07eb      	lsls	r3, r5, #31
 8005fe0:	d50a      	bpl.n	8005ff8 <__pow5mult+0x84>
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff ff1c 	bl	8005e24 <__multiply>
 8005fec:	4680      	mov	r8, r0
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7ff fe4b 	bl	8005c8c <_Bfree>
 8005ff6:	4647      	mov	r7, r8
 8005ff8:	106d      	asrs	r5, r5, #1
 8005ffa:	d00b      	beq.n	8006014 <__pow5mult+0xa0>
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	b938      	cbnz	r0, 8006010 <__pow5mult+0x9c>
 8006000:	4622      	mov	r2, r4
 8006002:	4621      	mov	r1, r4
 8006004:	4630      	mov	r0, r6
 8006006:	f7ff ff0d 	bl	8005e24 <__multiply>
 800600a:	6020      	str	r0, [r4, #0]
 800600c:	f8c0 9000 	str.w	r9, [r0]
 8006010:	4604      	mov	r4, r0
 8006012:	e7e4      	b.n	8005fde <__pow5mult+0x6a>
 8006014:	4638      	mov	r0, r7
 8006016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601a:	bf00      	nop
 800601c:	08007438 	.word	0x08007438
 8006020:	08007269 	.word	0x08007269
 8006024:	080072ec 	.word	0x080072ec

08006028 <__lshift>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	460c      	mov	r4, r1
 800602e:	4607      	mov	r7, r0
 8006030:	4691      	mov	r9, r2
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	6849      	ldr	r1, [r1, #4]
 8006036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800603a:	68a3      	ldr	r3, [r4, #8]
 800603c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006040:	f108 0601 	add.w	r6, r8, #1
 8006044:	42b3      	cmp	r3, r6
 8006046:	db0b      	blt.n	8006060 <__lshift+0x38>
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff fddf 	bl	8005c0c <_Balloc>
 800604e:	4605      	mov	r5, r0
 8006050:	b948      	cbnz	r0, 8006066 <__lshift+0x3e>
 8006052:	4602      	mov	r2, r0
 8006054:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006058:	4b29      	ldr	r3, [pc, #164]	; (8006100 <__lshift+0xd8>)
 800605a:	482a      	ldr	r0, [pc, #168]	; (8006104 <__lshift+0xdc>)
 800605c:	f000 fac8 	bl	80065f0 <__assert_func>
 8006060:	3101      	adds	r1, #1
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	e7ee      	b.n	8006044 <__lshift+0x1c>
 8006066:	2300      	movs	r3, #0
 8006068:	f100 0114 	add.w	r1, r0, #20
 800606c:	f100 0210 	add.w	r2, r0, #16
 8006070:	4618      	mov	r0, r3
 8006072:	4553      	cmp	r3, sl
 8006074:	db37      	blt.n	80060e6 <__lshift+0xbe>
 8006076:	6920      	ldr	r0, [r4, #16]
 8006078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800607c:	f104 0314 	add.w	r3, r4, #20
 8006080:	f019 091f 	ands.w	r9, r9, #31
 8006084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006088:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800608c:	d02f      	beq.n	80060ee <__lshift+0xc6>
 800608e:	468a      	mov	sl, r1
 8006090:	f04f 0c00 	mov.w	ip, #0
 8006094:	f1c9 0e20 	rsb	lr, r9, #32
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	fa02 f209 	lsl.w	r2, r2, r9
 800609e:	ea42 020c 	orr.w	r2, r2, ip
 80060a2:	f84a 2b04 	str.w	r2, [sl], #4
 80060a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060aa:	4298      	cmp	r0, r3
 80060ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80060b0:	d8f2      	bhi.n	8006098 <__lshift+0x70>
 80060b2:	1b03      	subs	r3, r0, r4
 80060b4:	3b15      	subs	r3, #21
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	3304      	adds	r3, #4
 80060bc:	f104 0215 	add.w	r2, r4, #21
 80060c0:	4290      	cmp	r0, r2
 80060c2:	bf38      	it	cc
 80060c4:	2304      	movcc	r3, #4
 80060c6:	f841 c003 	str.w	ip, [r1, r3]
 80060ca:	f1bc 0f00 	cmp.w	ip, #0
 80060ce:	d001      	beq.n	80060d4 <__lshift+0xac>
 80060d0:	f108 0602 	add.w	r6, r8, #2
 80060d4:	3e01      	subs	r6, #1
 80060d6:	4638      	mov	r0, r7
 80060d8:	4621      	mov	r1, r4
 80060da:	612e      	str	r6, [r5, #16]
 80060dc:	f7ff fdd6 	bl	8005c8c <_Bfree>
 80060e0:	4628      	mov	r0, r5
 80060e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80060ea:	3301      	adds	r3, #1
 80060ec:	e7c1      	b.n	8006072 <__lshift+0x4a>
 80060ee:	3904      	subs	r1, #4
 80060f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f4:	4298      	cmp	r0, r3
 80060f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80060fa:	d8f9      	bhi.n	80060f0 <__lshift+0xc8>
 80060fc:	e7ea      	b.n	80060d4 <__lshift+0xac>
 80060fe:	bf00      	nop
 8006100:	080072db 	.word	0x080072db
 8006104:	080072ec 	.word	0x080072ec

08006108 <__mcmp>:
 8006108:	4603      	mov	r3, r0
 800610a:	690a      	ldr	r2, [r1, #16]
 800610c:	6900      	ldr	r0, [r0, #16]
 800610e:	b530      	push	{r4, r5, lr}
 8006110:	1a80      	subs	r0, r0, r2
 8006112:	d10d      	bne.n	8006130 <__mcmp+0x28>
 8006114:	3314      	adds	r3, #20
 8006116:	3114      	adds	r1, #20
 8006118:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800611c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006120:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006124:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006128:	4295      	cmp	r5, r2
 800612a:	d002      	beq.n	8006132 <__mcmp+0x2a>
 800612c:	d304      	bcc.n	8006138 <__mcmp+0x30>
 800612e:	2001      	movs	r0, #1
 8006130:	bd30      	pop	{r4, r5, pc}
 8006132:	42a3      	cmp	r3, r4
 8006134:	d3f4      	bcc.n	8006120 <__mcmp+0x18>
 8006136:	e7fb      	b.n	8006130 <__mcmp+0x28>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	e7f8      	b.n	8006130 <__mcmp+0x28>
	...

08006140 <__mdiff>:
 8006140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	460d      	mov	r5, r1
 8006146:	4607      	mov	r7, r0
 8006148:	4611      	mov	r1, r2
 800614a:	4628      	mov	r0, r5
 800614c:	4614      	mov	r4, r2
 800614e:	f7ff ffdb 	bl	8006108 <__mcmp>
 8006152:	1e06      	subs	r6, r0, #0
 8006154:	d111      	bne.n	800617a <__mdiff+0x3a>
 8006156:	4631      	mov	r1, r6
 8006158:	4638      	mov	r0, r7
 800615a:	f7ff fd57 	bl	8005c0c <_Balloc>
 800615e:	4602      	mov	r2, r0
 8006160:	b928      	cbnz	r0, 800616e <__mdiff+0x2e>
 8006162:	f240 2132 	movw	r1, #562	; 0x232
 8006166:	4b3a      	ldr	r3, [pc, #232]	; (8006250 <__mdiff+0x110>)
 8006168:	483a      	ldr	r0, [pc, #232]	; (8006254 <__mdiff+0x114>)
 800616a:	f000 fa41 	bl	80065f0 <__assert_func>
 800616e:	2301      	movs	r3, #1
 8006170:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006174:	4610      	mov	r0, r2
 8006176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	bfa4      	itt	ge
 800617c:	4623      	movge	r3, r4
 800617e:	462c      	movge	r4, r5
 8006180:	4638      	mov	r0, r7
 8006182:	6861      	ldr	r1, [r4, #4]
 8006184:	bfa6      	itte	ge
 8006186:	461d      	movge	r5, r3
 8006188:	2600      	movge	r6, #0
 800618a:	2601      	movlt	r6, #1
 800618c:	f7ff fd3e 	bl	8005c0c <_Balloc>
 8006190:	4602      	mov	r2, r0
 8006192:	b918      	cbnz	r0, 800619c <__mdiff+0x5c>
 8006194:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <__mdiff+0x110>)
 800619a:	e7e5      	b.n	8006168 <__mdiff+0x28>
 800619c:	f102 0814 	add.w	r8, r2, #20
 80061a0:	46c2      	mov	sl, r8
 80061a2:	f04f 0c00 	mov.w	ip, #0
 80061a6:	6927      	ldr	r7, [r4, #16]
 80061a8:	60c6      	str	r6, [r0, #12]
 80061aa:	692e      	ldr	r6, [r5, #16]
 80061ac:	f104 0014 	add.w	r0, r4, #20
 80061b0:	f105 0914 	add.w	r9, r5, #20
 80061b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80061b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061bc:	3410      	adds	r4, #16
 80061be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80061c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80061c6:	fa1f f18b 	uxth.w	r1, fp
 80061ca:	448c      	add	ip, r1
 80061cc:	b299      	uxth	r1, r3
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	ebac 0101 	sub.w	r1, ip, r1
 80061d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80061dc:	b289      	uxth	r1, r1
 80061de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80061e2:	454e      	cmp	r6, r9
 80061e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80061e8:	f84a 3b04 	str.w	r3, [sl], #4
 80061ec:	d8e7      	bhi.n	80061be <__mdiff+0x7e>
 80061ee:	1b73      	subs	r3, r6, r5
 80061f0:	3b15      	subs	r3, #21
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	3515      	adds	r5, #21
 80061f8:	3304      	adds	r3, #4
 80061fa:	42ae      	cmp	r6, r5
 80061fc:	bf38      	it	cc
 80061fe:	2304      	movcc	r3, #4
 8006200:	4418      	add	r0, r3
 8006202:	4443      	add	r3, r8
 8006204:	461e      	mov	r6, r3
 8006206:	4605      	mov	r5, r0
 8006208:	4575      	cmp	r5, lr
 800620a:	d30e      	bcc.n	800622a <__mdiff+0xea>
 800620c:	f10e 0103 	add.w	r1, lr, #3
 8006210:	1a09      	subs	r1, r1, r0
 8006212:	f021 0103 	bic.w	r1, r1, #3
 8006216:	3803      	subs	r0, #3
 8006218:	4586      	cmp	lr, r0
 800621a:	bf38      	it	cc
 800621c:	2100      	movcc	r1, #0
 800621e:	4419      	add	r1, r3
 8006220:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006224:	b18b      	cbz	r3, 800624a <__mdiff+0x10a>
 8006226:	6117      	str	r7, [r2, #16]
 8006228:	e7a4      	b.n	8006174 <__mdiff+0x34>
 800622a:	f855 8b04 	ldr.w	r8, [r5], #4
 800622e:	fa1f f188 	uxth.w	r1, r8
 8006232:	4461      	add	r1, ip
 8006234:	140c      	asrs	r4, r1, #16
 8006236:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800623a:	b289      	uxth	r1, r1
 800623c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006240:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006244:	f846 1b04 	str.w	r1, [r6], #4
 8006248:	e7de      	b.n	8006208 <__mdiff+0xc8>
 800624a:	3f01      	subs	r7, #1
 800624c:	e7e8      	b.n	8006220 <__mdiff+0xe0>
 800624e:	bf00      	nop
 8006250:	080072db 	.word	0x080072db
 8006254:	080072ec 	.word	0x080072ec

08006258 <__d2b>:
 8006258:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800625c:	2101      	movs	r1, #1
 800625e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006262:	4690      	mov	r8, r2
 8006264:	461d      	mov	r5, r3
 8006266:	f7ff fcd1 	bl	8005c0c <_Balloc>
 800626a:	4604      	mov	r4, r0
 800626c:	b930      	cbnz	r0, 800627c <__d2b+0x24>
 800626e:	4602      	mov	r2, r0
 8006270:	f240 310a 	movw	r1, #778	; 0x30a
 8006274:	4b24      	ldr	r3, [pc, #144]	; (8006308 <__d2b+0xb0>)
 8006276:	4825      	ldr	r0, [pc, #148]	; (800630c <__d2b+0xb4>)
 8006278:	f000 f9ba 	bl	80065f0 <__assert_func>
 800627c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006280:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006284:	bb2d      	cbnz	r5, 80062d2 <__d2b+0x7a>
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	f1b8 0300 	subs.w	r3, r8, #0
 800628c:	d026      	beq.n	80062dc <__d2b+0x84>
 800628e:	4668      	mov	r0, sp
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	f7ff fd83 	bl	8005d9c <__lo0bits>
 8006296:	9900      	ldr	r1, [sp, #0]
 8006298:	b1f0      	cbz	r0, 80062d8 <__d2b+0x80>
 800629a:	9a01      	ldr	r2, [sp, #4]
 800629c:	f1c0 0320 	rsb	r3, r0, #32
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	430b      	orrs	r3, r1
 80062a6:	40c2      	lsrs	r2, r0
 80062a8:	6163      	str	r3, [r4, #20]
 80062aa:	9201      	str	r2, [sp, #4]
 80062ac:	9b01      	ldr	r3, [sp, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bf14      	ite	ne
 80062b2:	2102      	movne	r1, #2
 80062b4:	2101      	moveq	r1, #1
 80062b6:	61a3      	str	r3, [r4, #24]
 80062b8:	6121      	str	r1, [r4, #16]
 80062ba:	b1c5      	cbz	r5, 80062ee <__d2b+0x96>
 80062bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062c0:	4405      	add	r5, r0
 80062c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062c6:	603d      	str	r5, [r7, #0]
 80062c8:	6030      	str	r0, [r6, #0]
 80062ca:	4620      	mov	r0, r4
 80062cc:	b002      	add	sp, #8
 80062ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d6:	e7d6      	b.n	8006286 <__d2b+0x2e>
 80062d8:	6161      	str	r1, [r4, #20]
 80062da:	e7e7      	b.n	80062ac <__d2b+0x54>
 80062dc:	a801      	add	r0, sp, #4
 80062de:	f7ff fd5d 	bl	8005d9c <__lo0bits>
 80062e2:	2101      	movs	r1, #1
 80062e4:	9b01      	ldr	r3, [sp, #4]
 80062e6:	6121      	str	r1, [r4, #16]
 80062e8:	6163      	str	r3, [r4, #20]
 80062ea:	3020      	adds	r0, #32
 80062ec:	e7e5      	b.n	80062ba <__d2b+0x62>
 80062ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80062f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062f6:	6038      	str	r0, [r7, #0]
 80062f8:	6918      	ldr	r0, [r3, #16]
 80062fa:	f7ff fd2f 	bl	8005d5c <__hi0bits>
 80062fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006302:	6031      	str	r1, [r6, #0]
 8006304:	e7e1      	b.n	80062ca <__d2b+0x72>
 8006306:	bf00      	nop
 8006308:	080072db 	.word	0x080072db
 800630c:	080072ec 	.word	0x080072ec

08006310 <_calloc_r>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	fba1 5402 	umull	r5, r4, r1, r2
 8006316:	b934      	cbnz	r4, 8006326 <_calloc_r+0x16>
 8006318:	4629      	mov	r1, r5
 800631a:	f7fe f8cd 	bl	80044b8 <_malloc_r>
 800631e:	4606      	mov	r6, r0
 8006320:	b928      	cbnz	r0, 800632e <_calloc_r+0x1e>
 8006322:	4630      	mov	r0, r6
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	220c      	movs	r2, #12
 8006328:	2600      	movs	r6, #0
 800632a:	6002      	str	r2, [r0, #0]
 800632c:	e7f9      	b.n	8006322 <_calloc_r+0x12>
 800632e:	462a      	mov	r2, r5
 8006330:	4621      	mov	r1, r4
 8006332:	f7fe f851 	bl	80043d8 <memset>
 8006336:	e7f4      	b.n	8006322 <_calloc_r+0x12>

08006338 <__ssputs_r>:
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	688e      	ldr	r6, [r1, #8]
 800633e:	4682      	mov	sl, r0
 8006340:	429e      	cmp	r6, r3
 8006342:	460c      	mov	r4, r1
 8006344:	4690      	mov	r8, r2
 8006346:	461f      	mov	r7, r3
 8006348:	d838      	bhi.n	80063bc <__ssputs_r+0x84>
 800634a:	898a      	ldrh	r2, [r1, #12]
 800634c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006350:	d032      	beq.n	80063b8 <__ssputs_r+0x80>
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	6909      	ldr	r1, [r1, #16]
 8006356:	3301      	adds	r3, #1
 8006358:	eba5 0901 	sub.w	r9, r5, r1
 800635c:	6965      	ldr	r5, [r4, #20]
 800635e:	444b      	add	r3, r9
 8006360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006368:	106d      	asrs	r5, r5, #1
 800636a:	429d      	cmp	r5, r3
 800636c:	bf38      	it	cc
 800636e:	461d      	movcc	r5, r3
 8006370:	0553      	lsls	r3, r2, #21
 8006372:	d531      	bpl.n	80063d8 <__ssputs_r+0xa0>
 8006374:	4629      	mov	r1, r5
 8006376:	f7fe f89f 	bl	80044b8 <_malloc_r>
 800637a:	4606      	mov	r6, r0
 800637c:	b950      	cbnz	r0, 8006394 <__ssputs_r+0x5c>
 800637e:	230c      	movs	r3, #12
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	f8ca 3000 	str.w	r3, [sl]
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006394:	464a      	mov	r2, r9
 8006396:	6921      	ldr	r1, [r4, #16]
 8006398:	f7ff fc1e 	bl	8005bd8 <memcpy>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	6126      	str	r6, [r4, #16]
 80063aa:	444e      	add	r6, r9
 80063ac:	6026      	str	r6, [r4, #0]
 80063ae:	463e      	mov	r6, r7
 80063b0:	6165      	str	r5, [r4, #20]
 80063b2:	eba5 0509 	sub.w	r5, r5, r9
 80063b6:	60a5      	str	r5, [r4, #8]
 80063b8:	42be      	cmp	r6, r7
 80063ba:	d900      	bls.n	80063be <__ssputs_r+0x86>
 80063bc:	463e      	mov	r6, r7
 80063be:	4632      	mov	r2, r6
 80063c0:	4641      	mov	r1, r8
 80063c2:	6820      	ldr	r0, [r4, #0]
 80063c4:	f000 f959 	bl	800667a <memmove>
 80063c8:	68a3      	ldr	r3, [r4, #8]
 80063ca:	2000      	movs	r0, #0
 80063cc:	1b9b      	subs	r3, r3, r6
 80063ce:	60a3      	str	r3, [r4, #8]
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	4433      	add	r3, r6
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	e7db      	b.n	8006390 <__ssputs_r+0x58>
 80063d8:	462a      	mov	r2, r5
 80063da:	f000 f968 	bl	80066ae <_realloc_r>
 80063de:	4606      	mov	r6, r0
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d1e1      	bne.n	80063a8 <__ssputs_r+0x70>
 80063e4:	4650      	mov	r0, sl
 80063e6:	6921      	ldr	r1, [r4, #16]
 80063e8:	f7fd fffe 	bl	80043e8 <_free_r>
 80063ec:	e7c7      	b.n	800637e <__ssputs_r+0x46>
	...

080063f0 <_svfiprintf_r>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	4698      	mov	r8, r3
 80063f6:	898b      	ldrh	r3, [r1, #12]
 80063f8:	4607      	mov	r7, r0
 80063fa:	061b      	lsls	r3, r3, #24
 80063fc:	460d      	mov	r5, r1
 80063fe:	4614      	mov	r4, r2
 8006400:	b09d      	sub	sp, #116	; 0x74
 8006402:	d50e      	bpl.n	8006422 <_svfiprintf_r+0x32>
 8006404:	690b      	ldr	r3, [r1, #16]
 8006406:	b963      	cbnz	r3, 8006422 <_svfiprintf_r+0x32>
 8006408:	2140      	movs	r1, #64	; 0x40
 800640a:	f7fe f855 	bl	80044b8 <_malloc_r>
 800640e:	6028      	str	r0, [r5, #0]
 8006410:	6128      	str	r0, [r5, #16]
 8006412:	b920      	cbnz	r0, 800641e <_svfiprintf_r+0x2e>
 8006414:	230c      	movs	r3, #12
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	e0d1      	b.n	80065c2 <_svfiprintf_r+0x1d2>
 800641e:	2340      	movs	r3, #64	; 0x40
 8006420:	616b      	str	r3, [r5, #20]
 8006422:	2300      	movs	r3, #0
 8006424:	9309      	str	r3, [sp, #36]	; 0x24
 8006426:	2320      	movs	r3, #32
 8006428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800642c:	2330      	movs	r3, #48	; 0x30
 800642e:	f04f 0901 	mov.w	r9, #1
 8006432:	f8cd 800c 	str.w	r8, [sp, #12]
 8006436:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065dc <_svfiprintf_r+0x1ec>
 800643a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800643e:	4623      	mov	r3, r4
 8006440:	469a      	mov	sl, r3
 8006442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006446:	b10a      	cbz	r2, 800644c <_svfiprintf_r+0x5c>
 8006448:	2a25      	cmp	r2, #37	; 0x25
 800644a:	d1f9      	bne.n	8006440 <_svfiprintf_r+0x50>
 800644c:	ebba 0b04 	subs.w	fp, sl, r4
 8006450:	d00b      	beq.n	800646a <_svfiprintf_r+0x7a>
 8006452:	465b      	mov	r3, fp
 8006454:	4622      	mov	r2, r4
 8006456:	4629      	mov	r1, r5
 8006458:	4638      	mov	r0, r7
 800645a:	f7ff ff6d 	bl	8006338 <__ssputs_r>
 800645e:	3001      	adds	r0, #1
 8006460:	f000 80aa 	beq.w	80065b8 <_svfiprintf_r+0x1c8>
 8006464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006466:	445a      	add	r2, fp
 8006468:	9209      	str	r2, [sp, #36]	; 0x24
 800646a:	f89a 3000 	ldrb.w	r3, [sl]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80a2 	beq.w	80065b8 <_svfiprintf_r+0x1c8>
 8006474:	2300      	movs	r3, #0
 8006476:	f04f 32ff 	mov.w	r2, #4294967295
 800647a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800647e:	f10a 0a01 	add.w	sl, sl, #1
 8006482:	9304      	str	r3, [sp, #16]
 8006484:	9307      	str	r3, [sp, #28]
 8006486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800648a:	931a      	str	r3, [sp, #104]	; 0x68
 800648c:	4654      	mov	r4, sl
 800648e:	2205      	movs	r2, #5
 8006490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006494:	4851      	ldr	r0, [pc, #324]	; (80065dc <_svfiprintf_r+0x1ec>)
 8006496:	f7ff fb91 	bl	8005bbc <memchr>
 800649a:	9a04      	ldr	r2, [sp, #16]
 800649c:	b9d8      	cbnz	r0, 80064d6 <_svfiprintf_r+0xe6>
 800649e:	06d0      	lsls	r0, r2, #27
 80064a0:	bf44      	itt	mi
 80064a2:	2320      	movmi	r3, #32
 80064a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064a8:	0711      	lsls	r1, r2, #28
 80064aa:	bf44      	itt	mi
 80064ac:	232b      	movmi	r3, #43	; 0x2b
 80064ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064b2:	f89a 3000 	ldrb.w	r3, [sl]
 80064b6:	2b2a      	cmp	r3, #42	; 0x2a
 80064b8:	d015      	beq.n	80064e6 <_svfiprintf_r+0xf6>
 80064ba:	4654      	mov	r4, sl
 80064bc:	2000      	movs	r0, #0
 80064be:	f04f 0c0a 	mov.w	ip, #10
 80064c2:	9a07      	ldr	r2, [sp, #28]
 80064c4:	4621      	mov	r1, r4
 80064c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ca:	3b30      	subs	r3, #48	; 0x30
 80064cc:	2b09      	cmp	r3, #9
 80064ce:	d94e      	bls.n	800656e <_svfiprintf_r+0x17e>
 80064d0:	b1b0      	cbz	r0, 8006500 <_svfiprintf_r+0x110>
 80064d2:	9207      	str	r2, [sp, #28]
 80064d4:	e014      	b.n	8006500 <_svfiprintf_r+0x110>
 80064d6:	eba0 0308 	sub.w	r3, r0, r8
 80064da:	fa09 f303 	lsl.w	r3, r9, r3
 80064de:	4313      	orrs	r3, r2
 80064e0:	46a2      	mov	sl, r4
 80064e2:	9304      	str	r3, [sp, #16]
 80064e4:	e7d2      	b.n	800648c <_svfiprintf_r+0x9c>
 80064e6:	9b03      	ldr	r3, [sp, #12]
 80064e8:	1d19      	adds	r1, r3, #4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	9103      	str	r1, [sp, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bfbb      	ittet	lt
 80064f2:	425b      	neglt	r3, r3
 80064f4:	f042 0202 	orrlt.w	r2, r2, #2
 80064f8:	9307      	strge	r3, [sp, #28]
 80064fa:	9307      	strlt	r3, [sp, #28]
 80064fc:	bfb8      	it	lt
 80064fe:	9204      	strlt	r2, [sp, #16]
 8006500:	7823      	ldrb	r3, [r4, #0]
 8006502:	2b2e      	cmp	r3, #46	; 0x2e
 8006504:	d10c      	bne.n	8006520 <_svfiprintf_r+0x130>
 8006506:	7863      	ldrb	r3, [r4, #1]
 8006508:	2b2a      	cmp	r3, #42	; 0x2a
 800650a:	d135      	bne.n	8006578 <_svfiprintf_r+0x188>
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	3402      	adds	r4, #2
 8006510:	1d1a      	adds	r2, r3, #4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	9203      	str	r2, [sp, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	bfb8      	it	lt
 800651a:	f04f 33ff 	movlt.w	r3, #4294967295
 800651e:	9305      	str	r3, [sp, #20]
 8006520:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80065e0 <_svfiprintf_r+0x1f0>
 8006524:	2203      	movs	r2, #3
 8006526:	4650      	mov	r0, sl
 8006528:	7821      	ldrb	r1, [r4, #0]
 800652a:	f7ff fb47 	bl	8005bbc <memchr>
 800652e:	b140      	cbz	r0, 8006542 <_svfiprintf_r+0x152>
 8006530:	2340      	movs	r3, #64	; 0x40
 8006532:	eba0 000a 	sub.w	r0, r0, sl
 8006536:	fa03 f000 	lsl.w	r0, r3, r0
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	3401      	adds	r4, #1
 800653e:	4303      	orrs	r3, r0
 8006540:	9304      	str	r3, [sp, #16]
 8006542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006546:	2206      	movs	r2, #6
 8006548:	4826      	ldr	r0, [pc, #152]	; (80065e4 <_svfiprintf_r+0x1f4>)
 800654a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800654e:	f7ff fb35 	bl	8005bbc <memchr>
 8006552:	2800      	cmp	r0, #0
 8006554:	d038      	beq.n	80065c8 <_svfiprintf_r+0x1d8>
 8006556:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <_svfiprintf_r+0x1f8>)
 8006558:	bb1b      	cbnz	r3, 80065a2 <_svfiprintf_r+0x1b2>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	3307      	adds	r3, #7
 800655e:	f023 0307 	bic.w	r3, r3, #7
 8006562:	3308      	adds	r3, #8
 8006564:	9303      	str	r3, [sp, #12]
 8006566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006568:	4433      	add	r3, r6
 800656a:	9309      	str	r3, [sp, #36]	; 0x24
 800656c:	e767      	b.n	800643e <_svfiprintf_r+0x4e>
 800656e:	460c      	mov	r4, r1
 8006570:	2001      	movs	r0, #1
 8006572:	fb0c 3202 	mla	r2, ip, r2, r3
 8006576:	e7a5      	b.n	80064c4 <_svfiprintf_r+0xd4>
 8006578:	2300      	movs	r3, #0
 800657a:	f04f 0c0a 	mov.w	ip, #10
 800657e:	4619      	mov	r1, r3
 8006580:	3401      	adds	r4, #1
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	4620      	mov	r0, r4
 8006586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800658a:	3a30      	subs	r2, #48	; 0x30
 800658c:	2a09      	cmp	r2, #9
 800658e:	d903      	bls.n	8006598 <_svfiprintf_r+0x1a8>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0c5      	beq.n	8006520 <_svfiprintf_r+0x130>
 8006594:	9105      	str	r1, [sp, #20]
 8006596:	e7c3      	b.n	8006520 <_svfiprintf_r+0x130>
 8006598:	4604      	mov	r4, r0
 800659a:	2301      	movs	r3, #1
 800659c:	fb0c 2101 	mla	r1, ip, r1, r2
 80065a0:	e7f0      	b.n	8006584 <_svfiprintf_r+0x194>
 80065a2:	ab03      	add	r3, sp, #12
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	462a      	mov	r2, r5
 80065a8:	4638      	mov	r0, r7
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <_svfiprintf_r+0x1fc>)
 80065ac:	a904      	add	r1, sp, #16
 80065ae:	f7fe f895 	bl	80046dc <_printf_float>
 80065b2:	1c42      	adds	r2, r0, #1
 80065b4:	4606      	mov	r6, r0
 80065b6:	d1d6      	bne.n	8006566 <_svfiprintf_r+0x176>
 80065b8:	89ab      	ldrh	r3, [r5, #12]
 80065ba:	065b      	lsls	r3, r3, #25
 80065bc:	f53f af2c 	bmi.w	8006418 <_svfiprintf_r+0x28>
 80065c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065c2:	b01d      	add	sp, #116	; 0x74
 80065c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c8:	ab03      	add	r3, sp, #12
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	462a      	mov	r2, r5
 80065ce:	4638      	mov	r0, r7
 80065d0:	4b06      	ldr	r3, [pc, #24]	; (80065ec <_svfiprintf_r+0x1fc>)
 80065d2:	a904      	add	r1, sp, #16
 80065d4:	f7fe fb1e 	bl	8004c14 <_printf_i>
 80065d8:	e7eb      	b.n	80065b2 <_svfiprintf_r+0x1c2>
 80065da:	bf00      	nop
 80065dc:	08007444 	.word	0x08007444
 80065e0:	0800744a 	.word	0x0800744a
 80065e4:	0800744e 	.word	0x0800744e
 80065e8:	080046dd 	.word	0x080046dd
 80065ec:	08006339 	.word	0x08006339

080065f0 <__assert_func>:
 80065f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065f2:	4614      	mov	r4, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <__assert_func+0x2c>)
 80065f8:	4605      	mov	r5, r0
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68d8      	ldr	r0, [r3, #12]
 80065fe:	b14c      	cbz	r4, 8006614 <__assert_func+0x24>
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <__assert_func+0x30>)
 8006602:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006606:	9100      	str	r1, [sp, #0]
 8006608:	462b      	mov	r3, r5
 800660a:	4906      	ldr	r1, [pc, #24]	; (8006624 <__assert_func+0x34>)
 800660c:	f000 f80e 	bl	800662c <fiprintf>
 8006610:	f000 faa2 	bl	8006b58 <abort>
 8006614:	4b04      	ldr	r3, [pc, #16]	; (8006628 <__assert_func+0x38>)
 8006616:	461c      	mov	r4, r3
 8006618:	e7f3      	b.n	8006602 <__assert_func+0x12>
 800661a:	bf00      	nop
 800661c:	2000000c 	.word	0x2000000c
 8006620:	08007455 	.word	0x08007455
 8006624:	08007462 	.word	0x08007462
 8006628:	08007490 	.word	0x08007490

0800662c <fiprintf>:
 800662c:	b40e      	push	{r1, r2, r3}
 800662e:	b503      	push	{r0, r1, lr}
 8006630:	4601      	mov	r1, r0
 8006632:	ab03      	add	r3, sp, #12
 8006634:	4805      	ldr	r0, [pc, #20]	; (800664c <fiprintf+0x20>)
 8006636:	f853 2b04 	ldr.w	r2, [r3], #4
 800663a:	6800      	ldr	r0, [r0, #0]
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	f000 f88d 	bl	800675c <_vfiprintf_r>
 8006642:	b002      	add	sp, #8
 8006644:	f85d eb04 	ldr.w	lr, [sp], #4
 8006648:	b003      	add	sp, #12
 800664a:	4770      	bx	lr
 800664c:	2000000c 	.word	0x2000000c

08006650 <__retarget_lock_init_recursive>:
 8006650:	4770      	bx	lr

08006652 <__retarget_lock_acquire_recursive>:
 8006652:	4770      	bx	lr

08006654 <__retarget_lock_release_recursive>:
 8006654:	4770      	bx	lr

08006656 <__ascii_mbtowc>:
 8006656:	b082      	sub	sp, #8
 8006658:	b901      	cbnz	r1, 800665c <__ascii_mbtowc+0x6>
 800665a:	a901      	add	r1, sp, #4
 800665c:	b142      	cbz	r2, 8006670 <__ascii_mbtowc+0x1a>
 800665e:	b14b      	cbz	r3, 8006674 <__ascii_mbtowc+0x1e>
 8006660:	7813      	ldrb	r3, [r2, #0]
 8006662:	600b      	str	r3, [r1, #0]
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	1e10      	subs	r0, r2, #0
 8006668:	bf18      	it	ne
 800666a:	2001      	movne	r0, #1
 800666c:	b002      	add	sp, #8
 800666e:	4770      	bx	lr
 8006670:	4610      	mov	r0, r2
 8006672:	e7fb      	b.n	800666c <__ascii_mbtowc+0x16>
 8006674:	f06f 0001 	mvn.w	r0, #1
 8006678:	e7f8      	b.n	800666c <__ascii_mbtowc+0x16>

0800667a <memmove>:
 800667a:	4288      	cmp	r0, r1
 800667c:	b510      	push	{r4, lr}
 800667e:	eb01 0402 	add.w	r4, r1, r2
 8006682:	d902      	bls.n	800668a <memmove+0x10>
 8006684:	4284      	cmp	r4, r0
 8006686:	4623      	mov	r3, r4
 8006688:	d807      	bhi.n	800669a <memmove+0x20>
 800668a:	1e43      	subs	r3, r0, #1
 800668c:	42a1      	cmp	r1, r4
 800668e:	d008      	beq.n	80066a2 <memmove+0x28>
 8006690:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006694:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006698:	e7f8      	b.n	800668c <memmove+0x12>
 800669a:	4601      	mov	r1, r0
 800669c:	4402      	add	r2, r0
 800669e:	428a      	cmp	r2, r1
 80066a0:	d100      	bne.n	80066a4 <memmove+0x2a>
 80066a2:	bd10      	pop	{r4, pc}
 80066a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ac:	e7f7      	b.n	800669e <memmove+0x24>

080066ae <_realloc_r>:
 80066ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b2:	4680      	mov	r8, r0
 80066b4:	4614      	mov	r4, r2
 80066b6:	460e      	mov	r6, r1
 80066b8:	b921      	cbnz	r1, 80066c4 <_realloc_r+0x16>
 80066ba:	4611      	mov	r1, r2
 80066bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c0:	f7fd befa 	b.w	80044b8 <_malloc_r>
 80066c4:	b92a      	cbnz	r2, 80066d2 <_realloc_r+0x24>
 80066c6:	f7fd fe8f 	bl	80043e8 <_free_r>
 80066ca:	4625      	mov	r5, r4
 80066cc:	4628      	mov	r0, r5
 80066ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066d2:	f000 fc61 	bl	8006f98 <_malloc_usable_size_r>
 80066d6:	4284      	cmp	r4, r0
 80066d8:	4607      	mov	r7, r0
 80066da:	d802      	bhi.n	80066e2 <_realloc_r+0x34>
 80066dc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066e0:	d812      	bhi.n	8006708 <_realloc_r+0x5a>
 80066e2:	4621      	mov	r1, r4
 80066e4:	4640      	mov	r0, r8
 80066e6:	f7fd fee7 	bl	80044b8 <_malloc_r>
 80066ea:	4605      	mov	r5, r0
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d0ed      	beq.n	80066cc <_realloc_r+0x1e>
 80066f0:	42bc      	cmp	r4, r7
 80066f2:	4622      	mov	r2, r4
 80066f4:	4631      	mov	r1, r6
 80066f6:	bf28      	it	cs
 80066f8:	463a      	movcs	r2, r7
 80066fa:	f7ff fa6d 	bl	8005bd8 <memcpy>
 80066fe:	4631      	mov	r1, r6
 8006700:	4640      	mov	r0, r8
 8006702:	f7fd fe71 	bl	80043e8 <_free_r>
 8006706:	e7e1      	b.n	80066cc <_realloc_r+0x1e>
 8006708:	4635      	mov	r5, r6
 800670a:	e7df      	b.n	80066cc <_realloc_r+0x1e>

0800670c <__sfputc_r>:
 800670c:	6893      	ldr	r3, [r2, #8]
 800670e:	b410      	push	{r4}
 8006710:	3b01      	subs	r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	6093      	str	r3, [r2, #8]
 8006716:	da07      	bge.n	8006728 <__sfputc_r+0x1c>
 8006718:	6994      	ldr	r4, [r2, #24]
 800671a:	42a3      	cmp	r3, r4
 800671c:	db01      	blt.n	8006722 <__sfputc_r+0x16>
 800671e:	290a      	cmp	r1, #10
 8006720:	d102      	bne.n	8006728 <__sfputc_r+0x1c>
 8006722:	bc10      	pop	{r4}
 8006724:	f000 b94a 	b.w	80069bc <__swbuf_r>
 8006728:	6813      	ldr	r3, [r2, #0]
 800672a:	1c58      	adds	r0, r3, #1
 800672c:	6010      	str	r0, [r2, #0]
 800672e:	7019      	strb	r1, [r3, #0]
 8006730:	4608      	mov	r0, r1
 8006732:	bc10      	pop	{r4}
 8006734:	4770      	bx	lr

08006736 <__sfputs_r>:
 8006736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006738:	4606      	mov	r6, r0
 800673a:	460f      	mov	r7, r1
 800673c:	4614      	mov	r4, r2
 800673e:	18d5      	adds	r5, r2, r3
 8006740:	42ac      	cmp	r4, r5
 8006742:	d101      	bne.n	8006748 <__sfputs_r+0x12>
 8006744:	2000      	movs	r0, #0
 8006746:	e007      	b.n	8006758 <__sfputs_r+0x22>
 8006748:	463a      	mov	r2, r7
 800674a:	4630      	mov	r0, r6
 800674c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006750:	f7ff ffdc 	bl	800670c <__sfputc_r>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d1f3      	bne.n	8006740 <__sfputs_r+0xa>
 8006758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800675c <_vfiprintf_r>:
 800675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	460d      	mov	r5, r1
 8006762:	4614      	mov	r4, r2
 8006764:	4698      	mov	r8, r3
 8006766:	4606      	mov	r6, r0
 8006768:	b09d      	sub	sp, #116	; 0x74
 800676a:	b118      	cbz	r0, 8006774 <_vfiprintf_r+0x18>
 800676c:	6983      	ldr	r3, [r0, #24]
 800676e:	b90b      	cbnz	r3, 8006774 <_vfiprintf_r+0x18>
 8006770:	f000 fb10 	bl	8006d94 <__sinit>
 8006774:	4b89      	ldr	r3, [pc, #548]	; (800699c <_vfiprintf_r+0x240>)
 8006776:	429d      	cmp	r5, r3
 8006778:	d11b      	bne.n	80067b2 <_vfiprintf_r+0x56>
 800677a:	6875      	ldr	r5, [r6, #4]
 800677c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800677e:	07d9      	lsls	r1, r3, #31
 8006780:	d405      	bmi.n	800678e <_vfiprintf_r+0x32>
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	059a      	lsls	r2, r3, #22
 8006786:	d402      	bmi.n	800678e <_vfiprintf_r+0x32>
 8006788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800678a:	f7ff ff62 	bl	8006652 <__retarget_lock_acquire_recursive>
 800678e:	89ab      	ldrh	r3, [r5, #12]
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	d501      	bpl.n	8006798 <_vfiprintf_r+0x3c>
 8006794:	692b      	ldr	r3, [r5, #16]
 8006796:	b9eb      	cbnz	r3, 80067d4 <_vfiprintf_r+0x78>
 8006798:	4629      	mov	r1, r5
 800679a:	4630      	mov	r0, r6
 800679c:	f000 f96e 	bl	8006a7c <__swsetup_r>
 80067a0:	b1c0      	cbz	r0, 80067d4 <_vfiprintf_r+0x78>
 80067a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067a4:	07dc      	lsls	r4, r3, #31
 80067a6:	d50e      	bpl.n	80067c6 <_vfiprintf_r+0x6a>
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	b01d      	add	sp, #116	; 0x74
 80067ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b2:	4b7b      	ldr	r3, [pc, #492]	; (80069a0 <_vfiprintf_r+0x244>)
 80067b4:	429d      	cmp	r5, r3
 80067b6:	d101      	bne.n	80067bc <_vfiprintf_r+0x60>
 80067b8:	68b5      	ldr	r5, [r6, #8]
 80067ba:	e7df      	b.n	800677c <_vfiprintf_r+0x20>
 80067bc:	4b79      	ldr	r3, [pc, #484]	; (80069a4 <_vfiprintf_r+0x248>)
 80067be:	429d      	cmp	r5, r3
 80067c0:	bf08      	it	eq
 80067c2:	68f5      	ldreq	r5, [r6, #12]
 80067c4:	e7da      	b.n	800677c <_vfiprintf_r+0x20>
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	0598      	lsls	r0, r3, #22
 80067ca:	d4ed      	bmi.n	80067a8 <_vfiprintf_r+0x4c>
 80067cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ce:	f7ff ff41 	bl	8006654 <__retarget_lock_release_recursive>
 80067d2:	e7e9      	b.n	80067a8 <_vfiprintf_r+0x4c>
 80067d4:	2300      	movs	r3, #0
 80067d6:	9309      	str	r3, [sp, #36]	; 0x24
 80067d8:	2320      	movs	r3, #32
 80067da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067de:	2330      	movs	r3, #48	; 0x30
 80067e0:	f04f 0901 	mov.w	r9, #1
 80067e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80067e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80069a8 <_vfiprintf_r+0x24c>
 80067ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067f0:	4623      	mov	r3, r4
 80067f2:	469a      	mov	sl, r3
 80067f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f8:	b10a      	cbz	r2, 80067fe <_vfiprintf_r+0xa2>
 80067fa:	2a25      	cmp	r2, #37	; 0x25
 80067fc:	d1f9      	bne.n	80067f2 <_vfiprintf_r+0x96>
 80067fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006802:	d00b      	beq.n	800681c <_vfiprintf_r+0xc0>
 8006804:	465b      	mov	r3, fp
 8006806:	4622      	mov	r2, r4
 8006808:	4629      	mov	r1, r5
 800680a:	4630      	mov	r0, r6
 800680c:	f7ff ff93 	bl	8006736 <__sfputs_r>
 8006810:	3001      	adds	r0, #1
 8006812:	f000 80aa 	beq.w	800696a <_vfiprintf_r+0x20e>
 8006816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006818:	445a      	add	r2, fp
 800681a:	9209      	str	r2, [sp, #36]	; 0x24
 800681c:	f89a 3000 	ldrb.w	r3, [sl]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80a2 	beq.w	800696a <_vfiprintf_r+0x20e>
 8006826:	2300      	movs	r3, #0
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006830:	f10a 0a01 	add.w	sl, sl, #1
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	9307      	str	r3, [sp, #28]
 8006838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800683c:	931a      	str	r3, [sp, #104]	; 0x68
 800683e:	4654      	mov	r4, sl
 8006840:	2205      	movs	r2, #5
 8006842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006846:	4858      	ldr	r0, [pc, #352]	; (80069a8 <_vfiprintf_r+0x24c>)
 8006848:	f7ff f9b8 	bl	8005bbc <memchr>
 800684c:	9a04      	ldr	r2, [sp, #16]
 800684e:	b9d8      	cbnz	r0, 8006888 <_vfiprintf_r+0x12c>
 8006850:	06d1      	lsls	r1, r2, #27
 8006852:	bf44      	itt	mi
 8006854:	2320      	movmi	r3, #32
 8006856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685a:	0713      	lsls	r3, r2, #28
 800685c:	bf44      	itt	mi
 800685e:	232b      	movmi	r3, #43	; 0x2b
 8006860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006864:	f89a 3000 	ldrb.w	r3, [sl]
 8006868:	2b2a      	cmp	r3, #42	; 0x2a
 800686a:	d015      	beq.n	8006898 <_vfiprintf_r+0x13c>
 800686c:	4654      	mov	r4, sl
 800686e:	2000      	movs	r0, #0
 8006870:	f04f 0c0a 	mov.w	ip, #10
 8006874:	9a07      	ldr	r2, [sp, #28]
 8006876:	4621      	mov	r1, r4
 8006878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800687c:	3b30      	subs	r3, #48	; 0x30
 800687e:	2b09      	cmp	r3, #9
 8006880:	d94e      	bls.n	8006920 <_vfiprintf_r+0x1c4>
 8006882:	b1b0      	cbz	r0, 80068b2 <_vfiprintf_r+0x156>
 8006884:	9207      	str	r2, [sp, #28]
 8006886:	e014      	b.n	80068b2 <_vfiprintf_r+0x156>
 8006888:	eba0 0308 	sub.w	r3, r0, r8
 800688c:	fa09 f303 	lsl.w	r3, r9, r3
 8006890:	4313      	orrs	r3, r2
 8006892:	46a2      	mov	sl, r4
 8006894:	9304      	str	r3, [sp, #16]
 8006896:	e7d2      	b.n	800683e <_vfiprintf_r+0xe2>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	1d19      	adds	r1, r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	9103      	str	r1, [sp, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfbb      	ittet	lt
 80068a4:	425b      	neglt	r3, r3
 80068a6:	f042 0202 	orrlt.w	r2, r2, #2
 80068aa:	9307      	strge	r3, [sp, #28]
 80068ac:	9307      	strlt	r3, [sp, #28]
 80068ae:	bfb8      	it	lt
 80068b0:	9204      	strlt	r2, [sp, #16]
 80068b2:	7823      	ldrb	r3, [r4, #0]
 80068b4:	2b2e      	cmp	r3, #46	; 0x2e
 80068b6:	d10c      	bne.n	80068d2 <_vfiprintf_r+0x176>
 80068b8:	7863      	ldrb	r3, [r4, #1]
 80068ba:	2b2a      	cmp	r3, #42	; 0x2a
 80068bc:	d135      	bne.n	800692a <_vfiprintf_r+0x1ce>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	3402      	adds	r4, #2
 80068c2:	1d1a      	adds	r2, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	9203      	str	r2, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfb8      	it	lt
 80068cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80068d0:	9305      	str	r3, [sp, #20]
 80068d2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80069ac <_vfiprintf_r+0x250>
 80068d6:	2203      	movs	r2, #3
 80068d8:	4650      	mov	r0, sl
 80068da:	7821      	ldrb	r1, [r4, #0]
 80068dc:	f7ff f96e 	bl	8005bbc <memchr>
 80068e0:	b140      	cbz	r0, 80068f4 <_vfiprintf_r+0x198>
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	eba0 000a 	sub.w	r0, r0, sl
 80068e8:	fa03 f000 	lsl.w	r0, r3, r0
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	3401      	adds	r4, #1
 80068f0:	4303      	orrs	r3, r0
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f8:	2206      	movs	r2, #6
 80068fa:	482d      	ldr	r0, [pc, #180]	; (80069b0 <_vfiprintf_r+0x254>)
 80068fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006900:	f7ff f95c 	bl	8005bbc <memchr>
 8006904:	2800      	cmp	r0, #0
 8006906:	d03f      	beq.n	8006988 <_vfiprintf_r+0x22c>
 8006908:	4b2a      	ldr	r3, [pc, #168]	; (80069b4 <_vfiprintf_r+0x258>)
 800690a:	bb1b      	cbnz	r3, 8006954 <_vfiprintf_r+0x1f8>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	3307      	adds	r3, #7
 8006910:	f023 0307 	bic.w	r3, r3, #7
 8006914:	3308      	adds	r3, #8
 8006916:	9303      	str	r3, [sp, #12]
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	443b      	add	r3, r7
 800691c:	9309      	str	r3, [sp, #36]	; 0x24
 800691e:	e767      	b.n	80067f0 <_vfiprintf_r+0x94>
 8006920:	460c      	mov	r4, r1
 8006922:	2001      	movs	r0, #1
 8006924:	fb0c 3202 	mla	r2, ip, r2, r3
 8006928:	e7a5      	b.n	8006876 <_vfiprintf_r+0x11a>
 800692a:	2300      	movs	r3, #0
 800692c:	f04f 0c0a 	mov.w	ip, #10
 8006930:	4619      	mov	r1, r3
 8006932:	3401      	adds	r4, #1
 8006934:	9305      	str	r3, [sp, #20]
 8006936:	4620      	mov	r0, r4
 8006938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800693c:	3a30      	subs	r2, #48	; 0x30
 800693e:	2a09      	cmp	r2, #9
 8006940:	d903      	bls.n	800694a <_vfiprintf_r+0x1ee>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0c5      	beq.n	80068d2 <_vfiprintf_r+0x176>
 8006946:	9105      	str	r1, [sp, #20]
 8006948:	e7c3      	b.n	80068d2 <_vfiprintf_r+0x176>
 800694a:	4604      	mov	r4, r0
 800694c:	2301      	movs	r3, #1
 800694e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006952:	e7f0      	b.n	8006936 <_vfiprintf_r+0x1da>
 8006954:	ab03      	add	r3, sp, #12
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	462a      	mov	r2, r5
 800695a:	4630      	mov	r0, r6
 800695c:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <_vfiprintf_r+0x25c>)
 800695e:	a904      	add	r1, sp, #16
 8006960:	f7fd febc 	bl	80046dc <_printf_float>
 8006964:	4607      	mov	r7, r0
 8006966:	1c78      	adds	r0, r7, #1
 8006968:	d1d6      	bne.n	8006918 <_vfiprintf_r+0x1bc>
 800696a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800696c:	07d9      	lsls	r1, r3, #31
 800696e:	d405      	bmi.n	800697c <_vfiprintf_r+0x220>
 8006970:	89ab      	ldrh	r3, [r5, #12]
 8006972:	059a      	lsls	r2, r3, #22
 8006974:	d402      	bmi.n	800697c <_vfiprintf_r+0x220>
 8006976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006978:	f7ff fe6c 	bl	8006654 <__retarget_lock_release_recursive>
 800697c:	89ab      	ldrh	r3, [r5, #12]
 800697e:	065b      	lsls	r3, r3, #25
 8006980:	f53f af12 	bmi.w	80067a8 <_vfiprintf_r+0x4c>
 8006984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006986:	e711      	b.n	80067ac <_vfiprintf_r+0x50>
 8006988:	ab03      	add	r3, sp, #12
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	462a      	mov	r2, r5
 800698e:	4630      	mov	r0, r6
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <_vfiprintf_r+0x25c>)
 8006992:	a904      	add	r1, sp, #16
 8006994:	f7fe f93e 	bl	8004c14 <_printf_i>
 8006998:	e7e4      	b.n	8006964 <_vfiprintf_r+0x208>
 800699a:	bf00      	nop
 800699c:	080075bc 	.word	0x080075bc
 80069a0:	080075dc 	.word	0x080075dc
 80069a4:	0800759c 	.word	0x0800759c
 80069a8:	08007444 	.word	0x08007444
 80069ac:	0800744a 	.word	0x0800744a
 80069b0:	0800744e 	.word	0x0800744e
 80069b4:	080046dd 	.word	0x080046dd
 80069b8:	08006737 	.word	0x08006737

080069bc <__swbuf_r>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	460e      	mov	r6, r1
 80069c0:	4614      	mov	r4, r2
 80069c2:	4605      	mov	r5, r0
 80069c4:	b118      	cbz	r0, 80069ce <__swbuf_r+0x12>
 80069c6:	6983      	ldr	r3, [r0, #24]
 80069c8:	b90b      	cbnz	r3, 80069ce <__swbuf_r+0x12>
 80069ca:	f000 f9e3 	bl	8006d94 <__sinit>
 80069ce:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <__swbuf_r+0x98>)
 80069d0:	429c      	cmp	r4, r3
 80069d2:	d12b      	bne.n	8006a2c <__swbuf_r+0x70>
 80069d4:	686c      	ldr	r4, [r5, #4]
 80069d6:	69a3      	ldr	r3, [r4, #24]
 80069d8:	60a3      	str	r3, [r4, #8]
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	071a      	lsls	r2, r3, #28
 80069de:	d52f      	bpl.n	8006a40 <__swbuf_r+0x84>
 80069e0:	6923      	ldr	r3, [r4, #16]
 80069e2:	b36b      	cbz	r3, 8006a40 <__swbuf_r+0x84>
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	6820      	ldr	r0, [r4, #0]
 80069e8:	b2f6      	uxtb	r6, r6
 80069ea:	1ac0      	subs	r0, r0, r3
 80069ec:	6963      	ldr	r3, [r4, #20]
 80069ee:	4637      	mov	r7, r6
 80069f0:	4283      	cmp	r3, r0
 80069f2:	dc04      	bgt.n	80069fe <__swbuf_r+0x42>
 80069f4:	4621      	mov	r1, r4
 80069f6:	4628      	mov	r0, r5
 80069f8:	f000 f938 	bl	8006c6c <_fflush_r>
 80069fc:	bb30      	cbnz	r0, 8006a4c <__swbuf_r+0x90>
 80069fe:	68a3      	ldr	r3, [r4, #8]
 8006a00:	3001      	adds	r0, #1
 8006a02:	3b01      	subs	r3, #1
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	6022      	str	r2, [r4, #0]
 8006a0c:	701e      	strb	r6, [r3, #0]
 8006a0e:	6963      	ldr	r3, [r4, #20]
 8006a10:	4283      	cmp	r3, r0
 8006a12:	d004      	beq.n	8006a1e <__swbuf_r+0x62>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	07db      	lsls	r3, r3, #31
 8006a18:	d506      	bpl.n	8006a28 <__swbuf_r+0x6c>
 8006a1a:	2e0a      	cmp	r6, #10
 8006a1c:	d104      	bne.n	8006a28 <__swbuf_r+0x6c>
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4628      	mov	r0, r5
 8006a22:	f000 f923 	bl	8006c6c <_fflush_r>
 8006a26:	b988      	cbnz	r0, 8006a4c <__swbuf_r+0x90>
 8006a28:	4638      	mov	r0, r7
 8006a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <__swbuf_r+0x9c>)
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d101      	bne.n	8006a36 <__swbuf_r+0x7a>
 8006a32:	68ac      	ldr	r4, [r5, #8]
 8006a34:	e7cf      	b.n	80069d6 <__swbuf_r+0x1a>
 8006a36:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <__swbuf_r+0xa0>)
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	bf08      	it	eq
 8006a3c:	68ec      	ldreq	r4, [r5, #12]
 8006a3e:	e7ca      	b.n	80069d6 <__swbuf_r+0x1a>
 8006a40:	4621      	mov	r1, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 f81a 	bl	8006a7c <__swsetup_r>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d0cb      	beq.n	80069e4 <__swbuf_r+0x28>
 8006a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a50:	e7ea      	b.n	8006a28 <__swbuf_r+0x6c>
 8006a52:	bf00      	nop
 8006a54:	080075bc 	.word	0x080075bc
 8006a58:	080075dc 	.word	0x080075dc
 8006a5c:	0800759c 	.word	0x0800759c

08006a60 <__ascii_wctomb>:
 8006a60:	4603      	mov	r3, r0
 8006a62:	4608      	mov	r0, r1
 8006a64:	b141      	cbz	r1, 8006a78 <__ascii_wctomb+0x18>
 8006a66:	2aff      	cmp	r2, #255	; 0xff
 8006a68:	d904      	bls.n	8006a74 <__ascii_wctomb+0x14>
 8006a6a:	228a      	movs	r2, #138	; 0x8a
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	4770      	bx	lr
 8006a74:	2001      	movs	r0, #1
 8006a76:	700a      	strb	r2, [r1, #0]
 8006a78:	4770      	bx	lr
	...

08006a7c <__swsetup_r>:
 8006a7c:	4b32      	ldr	r3, [pc, #200]	; (8006b48 <__swsetup_r+0xcc>)
 8006a7e:	b570      	push	{r4, r5, r6, lr}
 8006a80:	681d      	ldr	r5, [r3, #0]
 8006a82:	4606      	mov	r6, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	b125      	cbz	r5, 8006a92 <__swsetup_r+0x16>
 8006a88:	69ab      	ldr	r3, [r5, #24]
 8006a8a:	b913      	cbnz	r3, 8006a92 <__swsetup_r+0x16>
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f000 f981 	bl	8006d94 <__sinit>
 8006a92:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <__swsetup_r+0xd0>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	d10f      	bne.n	8006ab8 <__swsetup_r+0x3c>
 8006a98:	686c      	ldr	r4, [r5, #4]
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aa0:	0719      	lsls	r1, r3, #28
 8006aa2:	d42c      	bmi.n	8006afe <__swsetup_r+0x82>
 8006aa4:	06dd      	lsls	r5, r3, #27
 8006aa6:	d411      	bmi.n	8006acc <__swsetup_r+0x50>
 8006aa8:	2309      	movs	r3, #9
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	e03e      	b.n	8006b36 <__swsetup_r+0xba>
 8006ab8:	4b25      	ldr	r3, [pc, #148]	; (8006b50 <__swsetup_r+0xd4>)
 8006aba:	429c      	cmp	r4, r3
 8006abc:	d101      	bne.n	8006ac2 <__swsetup_r+0x46>
 8006abe:	68ac      	ldr	r4, [r5, #8]
 8006ac0:	e7eb      	b.n	8006a9a <__swsetup_r+0x1e>
 8006ac2:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <__swsetup_r+0xd8>)
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	bf08      	it	eq
 8006ac8:	68ec      	ldreq	r4, [r5, #12]
 8006aca:	e7e6      	b.n	8006a9a <__swsetup_r+0x1e>
 8006acc:	0758      	lsls	r0, r3, #29
 8006ace:	d512      	bpl.n	8006af6 <__swsetup_r+0x7a>
 8006ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ad2:	b141      	cbz	r1, 8006ae6 <__swsetup_r+0x6a>
 8006ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	d002      	beq.n	8006ae2 <__swsetup_r+0x66>
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7fd fc83 	bl	80043e8 <_free_r>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	2300      	movs	r3, #0
 8006af0:	6063      	str	r3, [r4, #4]
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f043 0308 	orr.w	r3, r3, #8
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	b94b      	cbnz	r3, 8006b16 <__swsetup_r+0x9a>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0c:	d003      	beq.n	8006b16 <__swsetup_r+0x9a>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4630      	mov	r0, r6
 8006b12:	f000 fa01 	bl	8006f18 <__smakebuf_r>
 8006b16:	89a0      	ldrh	r0, [r4, #12]
 8006b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b1c:	f010 0301 	ands.w	r3, r0, #1
 8006b20:	d00a      	beq.n	8006b38 <__swsetup_r+0xbc>
 8006b22:	2300      	movs	r3, #0
 8006b24:	60a3      	str	r3, [r4, #8]
 8006b26:	6963      	ldr	r3, [r4, #20]
 8006b28:	425b      	negs	r3, r3
 8006b2a:	61a3      	str	r3, [r4, #24]
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	b943      	cbnz	r3, 8006b42 <__swsetup_r+0xc6>
 8006b30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b34:	d1ba      	bne.n	8006aac <__swsetup_r+0x30>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	0781      	lsls	r1, r0, #30
 8006b3a:	bf58      	it	pl
 8006b3c:	6963      	ldrpl	r3, [r4, #20]
 8006b3e:	60a3      	str	r3, [r4, #8]
 8006b40:	e7f4      	b.n	8006b2c <__swsetup_r+0xb0>
 8006b42:	2000      	movs	r0, #0
 8006b44:	e7f7      	b.n	8006b36 <__swsetup_r+0xba>
 8006b46:	bf00      	nop
 8006b48:	2000000c 	.word	0x2000000c
 8006b4c:	080075bc 	.word	0x080075bc
 8006b50:	080075dc 	.word	0x080075dc
 8006b54:	0800759c 	.word	0x0800759c

08006b58 <abort>:
 8006b58:	2006      	movs	r0, #6
 8006b5a:	b508      	push	{r3, lr}
 8006b5c:	f000 fa4c 	bl	8006ff8 <raise>
 8006b60:	2001      	movs	r0, #1
 8006b62:	f7fb f843 	bl	8001bec <_exit>
	...

08006b68 <__sflush_r>:
 8006b68:	898a      	ldrh	r2, [r1, #12]
 8006b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	0710      	lsls	r0, r2, #28
 8006b70:	460c      	mov	r4, r1
 8006b72:	d457      	bmi.n	8006c24 <__sflush_r+0xbc>
 8006b74:	684b      	ldr	r3, [r1, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dc04      	bgt.n	8006b84 <__sflush_r+0x1c>
 8006b7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc01      	bgt.n	8006b84 <__sflush_r+0x1c>
 8006b80:	2000      	movs	r0, #0
 8006b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	d0fa      	beq.n	8006b80 <__sflush_r+0x18>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b90:	682f      	ldr	r7, [r5, #0]
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	d032      	beq.n	8006bfc <__sflush_r+0x94>
 8006b96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	075a      	lsls	r2, r3, #29
 8006b9c:	d505      	bpl.n	8006baa <__sflush_r+0x42>
 8006b9e:	6863      	ldr	r3, [r4, #4]
 8006ba0:	1ac0      	subs	r0, r0, r3
 8006ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ba4:	b10b      	cbz	r3, 8006baa <__sflush_r+0x42>
 8006ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ba8:	1ac0      	subs	r0, r0, r3
 8006baa:	2300      	movs	r3, #0
 8006bac:	4602      	mov	r2, r0
 8006bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	6a21      	ldr	r1, [r4, #32]
 8006bb4:	47b0      	blx	r6
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	d106      	bne.n	8006bca <__sflush_r+0x62>
 8006bbc:	6829      	ldr	r1, [r5, #0]
 8006bbe:	291d      	cmp	r1, #29
 8006bc0:	d82c      	bhi.n	8006c1c <__sflush_r+0xb4>
 8006bc2:	4a29      	ldr	r2, [pc, #164]	; (8006c68 <__sflush_r+0x100>)
 8006bc4:	40ca      	lsrs	r2, r1
 8006bc6:	07d6      	lsls	r6, r2, #31
 8006bc8:	d528      	bpl.n	8006c1c <__sflush_r+0xb4>
 8006bca:	2200      	movs	r2, #0
 8006bcc:	6062      	str	r2, [r4, #4]
 8006bce:	6922      	ldr	r2, [r4, #16]
 8006bd0:	04d9      	lsls	r1, r3, #19
 8006bd2:	6022      	str	r2, [r4, #0]
 8006bd4:	d504      	bpl.n	8006be0 <__sflush_r+0x78>
 8006bd6:	1c42      	adds	r2, r0, #1
 8006bd8:	d101      	bne.n	8006bde <__sflush_r+0x76>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	b903      	cbnz	r3, 8006be0 <__sflush_r+0x78>
 8006bde:	6560      	str	r0, [r4, #84]	; 0x54
 8006be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006be2:	602f      	str	r7, [r5, #0]
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d0cb      	beq.n	8006b80 <__sflush_r+0x18>
 8006be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bec:	4299      	cmp	r1, r3
 8006bee:	d002      	beq.n	8006bf6 <__sflush_r+0x8e>
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f7fd fbf9 	bl	80043e8 <_free_r>
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8006bfa:	e7c2      	b.n	8006b82 <__sflush_r+0x1a>
 8006bfc:	6a21      	ldr	r1, [r4, #32]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b0      	blx	r6
 8006c04:	1c41      	adds	r1, r0, #1
 8006c06:	d1c7      	bne.n	8006b98 <__sflush_r+0x30>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0c4      	beq.n	8006b98 <__sflush_r+0x30>
 8006c0e:	2b1d      	cmp	r3, #29
 8006c10:	d001      	beq.n	8006c16 <__sflush_r+0xae>
 8006c12:	2b16      	cmp	r3, #22
 8006c14:	d101      	bne.n	8006c1a <__sflush_r+0xb2>
 8006c16:	602f      	str	r7, [r5, #0]
 8006c18:	e7b2      	b.n	8006b80 <__sflush_r+0x18>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	e7ae      	b.n	8006b82 <__sflush_r+0x1a>
 8006c24:	690f      	ldr	r7, [r1, #16]
 8006c26:	2f00      	cmp	r7, #0
 8006c28:	d0aa      	beq.n	8006b80 <__sflush_r+0x18>
 8006c2a:	0793      	lsls	r3, r2, #30
 8006c2c:	bf18      	it	ne
 8006c2e:	2300      	movne	r3, #0
 8006c30:	680e      	ldr	r6, [r1, #0]
 8006c32:	bf08      	it	eq
 8006c34:	694b      	ldreq	r3, [r1, #20]
 8006c36:	1bf6      	subs	r6, r6, r7
 8006c38:	600f      	str	r7, [r1, #0]
 8006c3a:	608b      	str	r3, [r1, #8]
 8006c3c:	2e00      	cmp	r6, #0
 8006c3e:	dd9f      	ble.n	8006b80 <__sflush_r+0x18>
 8006c40:	4633      	mov	r3, r6
 8006c42:	463a      	mov	r2, r7
 8006c44:	4628      	mov	r0, r5
 8006c46:	6a21      	ldr	r1, [r4, #32]
 8006c48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c4c:	47e0      	blx	ip
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	dc06      	bgt.n	8006c60 <__sflush_r+0xf8>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	e790      	b.n	8006b82 <__sflush_r+0x1a>
 8006c60:	4407      	add	r7, r0
 8006c62:	1a36      	subs	r6, r6, r0
 8006c64:	e7ea      	b.n	8006c3c <__sflush_r+0xd4>
 8006c66:	bf00      	nop
 8006c68:	20400001 	.word	0x20400001

08006c6c <_fflush_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	690b      	ldr	r3, [r1, #16]
 8006c70:	4605      	mov	r5, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	b913      	cbnz	r3, 8006c7c <_fflush_r+0x10>
 8006c76:	2500      	movs	r5, #0
 8006c78:	4628      	mov	r0, r5
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	b118      	cbz	r0, 8006c86 <_fflush_r+0x1a>
 8006c7e:	6983      	ldr	r3, [r0, #24]
 8006c80:	b90b      	cbnz	r3, 8006c86 <_fflush_r+0x1a>
 8006c82:	f000 f887 	bl	8006d94 <__sinit>
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <_fflush_r+0x6c>)
 8006c88:	429c      	cmp	r4, r3
 8006c8a:	d11b      	bne.n	8006cc4 <_fflush_r+0x58>
 8006c8c:	686c      	ldr	r4, [r5, #4]
 8006c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0ef      	beq.n	8006c76 <_fflush_r+0xa>
 8006c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c98:	07d0      	lsls	r0, r2, #31
 8006c9a:	d404      	bmi.n	8006ca6 <_fflush_r+0x3a>
 8006c9c:	0599      	lsls	r1, r3, #22
 8006c9e:	d402      	bmi.n	8006ca6 <_fflush_r+0x3a>
 8006ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ca2:	f7ff fcd6 	bl	8006652 <__retarget_lock_acquire_recursive>
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	4621      	mov	r1, r4
 8006caa:	f7ff ff5d 	bl	8006b68 <__sflush_r>
 8006cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	07da      	lsls	r2, r3, #31
 8006cb4:	d4e0      	bmi.n	8006c78 <_fflush_r+0xc>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	059b      	lsls	r3, r3, #22
 8006cba:	d4dd      	bmi.n	8006c78 <_fflush_r+0xc>
 8006cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cbe:	f7ff fcc9 	bl	8006654 <__retarget_lock_release_recursive>
 8006cc2:	e7d9      	b.n	8006c78 <_fflush_r+0xc>
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <_fflush_r+0x70>)
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d101      	bne.n	8006cce <_fflush_r+0x62>
 8006cca:	68ac      	ldr	r4, [r5, #8]
 8006ccc:	e7df      	b.n	8006c8e <_fflush_r+0x22>
 8006cce:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <_fflush_r+0x74>)
 8006cd0:	429c      	cmp	r4, r3
 8006cd2:	bf08      	it	eq
 8006cd4:	68ec      	ldreq	r4, [r5, #12]
 8006cd6:	e7da      	b.n	8006c8e <_fflush_r+0x22>
 8006cd8:	080075bc 	.word	0x080075bc
 8006cdc:	080075dc 	.word	0x080075dc
 8006ce0:	0800759c 	.word	0x0800759c

08006ce4 <std>:
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	4604      	mov	r4, r0
 8006cea:	e9c0 3300 	strd	r3, r3, [r0]
 8006cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cf2:	6083      	str	r3, [r0, #8]
 8006cf4:	8181      	strh	r1, [r0, #12]
 8006cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8006cf8:	81c2      	strh	r2, [r0, #14]
 8006cfa:	6183      	str	r3, [r0, #24]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	2208      	movs	r2, #8
 8006d00:	305c      	adds	r0, #92	; 0x5c
 8006d02:	f7fd fb69 	bl	80043d8 <memset>
 8006d06:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <std+0x38>)
 8006d08:	6224      	str	r4, [r4, #32]
 8006d0a:	6263      	str	r3, [r4, #36]	; 0x24
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <std+0x3c>)
 8006d0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <std+0x40>)
 8006d12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d14:	4b04      	ldr	r3, [pc, #16]	; (8006d28 <std+0x44>)
 8006d16:	6323      	str	r3, [r4, #48]	; 0x30
 8006d18:	bd10      	pop	{r4, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08007031 	.word	0x08007031
 8006d20:	08007053 	.word	0x08007053
 8006d24:	0800708b 	.word	0x0800708b
 8006d28:	080070af 	.word	0x080070af

08006d2c <_cleanup_r>:
 8006d2c:	4901      	ldr	r1, [pc, #4]	; (8006d34 <_cleanup_r+0x8>)
 8006d2e:	f000 b8af 	b.w	8006e90 <_fwalk_reent>
 8006d32:	bf00      	nop
 8006d34:	08006c6d 	.word	0x08006c6d

08006d38 <__sfmoreglue>:
 8006d38:	2268      	movs	r2, #104	; 0x68
 8006d3a:	b570      	push	{r4, r5, r6, lr}
 8006d3c:	1e4d      	subs	r5, r1, #1
 8006d3e:	4355      	muls	r5, r2
 8006d40:	460e      	mov	r6, r1
 8006d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d46:	f7fd fbb7 	bl	80044b8 <_malloc_r>
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	b140      	cbz	r0, 8006d60 <__sfmoreglue+0x28>
 8006d4e:	2100      	movs	r1, #0
 8006d50:	e9c0 1600 	strd	r1, r6, [r0]
 8006d54:	300c      	adds	r0, #12
 8006d56:	60a0      	str	r0, [r4, #8]
 8006d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d5c:	f7fd fb3c 	bl	80043d8 <memset>
 8006d60:	4620      	mov	r0, r4
 8006d62:	bd70      	pop	{r4, r5, r6, pc}

08006d64 <__sfp_lock_acquire>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__sfp_lock_acquire+0x8>)
 8006d66:	f7ff bc74 	b.w	8006652 <__retarget_lock_acquire_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20000475 	.word	0x20000475

08006d70 <__sfp_lock_release>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__sfp_lock_release+0x8>)
 8006d72:	f7ff bc6f 	b.w	8006654 <__retarget_lock_release_recursive>
 8006d76:	bf00      	nop
 8006d78:	20000475 	.word	0x20000475

08006d7c <__sinit_lock_acquire>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <__sinit_lock_acquire+0x8>)
 8006d7e:	f7ff bc68 	b.w	8006652 <__retarget_lock_acquire_recursive>
 8006d82:	bf00      	nop
 8006d84:	20000476 	.word	0x20000476

08006d88 <__sinit_lock_release>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__sinit_lock_release+0x8>)
 8006d8a:	f7ff bc63 	b.w	8006654 <__retarget_lock_release_recursive>
 8006d8e:	bf00      	nop
 8006d90:	20000476 	.word	0x20000476

08006d94 <__sinit>:
 8006d94:	b510      	push	{r4, lr}
 8006d96:	4604      	mov	r4, r0
 8006d98:	f7ff fff0 	bl	8006d7c <__sinit_lock_acquire>
 8006d9c:	69a3      	ldr	r3, [r4, #24]
 8006d9e:	b11b      	cbz	r3, 8006da8 <__sinit+0x14>
 8006da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da4:	f7ff bff0 	b.w	8006d88 <__sinit_lock_release>
 8006da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dac:	6523      	str	r3, [r4, #80]	; 0x50
 8006dae:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <__sinit+0x68>)
 8006db0:	4a13      	ldr	r2, [pc, #76]	; (8006e00 <__sinit+0x6c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006db6:	42a3      	cmp	r3, r4
 8006db8:	bf08      	it	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	bf08      	it	eq
 8006dc0:	61a3      	streq	r3, [r4, #24]
 8006dc2:	f000 f81f 	bl	8006e04 <__sfp>
 8006dc6:	6060      	str	r0, [r4, #4]
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 f81b 	bl	8006e04 <__sfp>
 8006dce:	60a0      	str	r0, [r4, #8]
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 f817 	bl	8006e04 <__sfp>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2104      	movs	r1, #4
 8006dda:	60e0      	str	r0, [r4, #12]
 8006ddc:	6860      	ldr	r0, [r4, #4]
 8006dde:	f7ff ff81 	bl	8006ce4 <std>
 8006de2:	2201      	movs	r2, #1
 8006de4:	2109      	movs	r1, #9
 8006de6:	68a0      	ldr	r0, [r4, #8]
 8006de8:	f7ff ff7c 	bl	8006ce4 <std>
 8006dec:	2202      	movs	r2, #2
 8006dee:	2112      	movs	r1, #18
 8006df0:	68e0      	ldr	r0, [r4, #12]
 8006df2:	f7ff ff77 	bl	8006ce4 <std>
 8006df6:	2301      	movs	r3, #1
 8006df8:	61a3      	str	r3, [r4, #24]
 8006dfa:	e7d1      	b.n	8006da0 <__sinit+0xc>
 8006dfc:	08007224 	.word	0x08007224
 8006e00:	08006d2d 	.word	0x08006d2d

08006e04 <__sfp>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	4607      	mov	r7, r0
 8006e08:	f7ff ffac 	bl	8006d64 <__sfp_lock_acquire>
 8006e0c:	4b1e      	ldr	r3, [pc, #120]	; (8006e88 <__sfp+0x84>)
 8006e0e:	681e      	ldr	r6, [r3, #0]
 8006e10:	69b3      	ldr	r3, [r6, #24]
 8006e12:	b913      	cbnz	r3, 8006e1a <__sfp+0x16>
 8006e14:	4630      	mov	r0, r6
 8006e16:	f7ff ffbd 	bl	8006d94 <__sinit>
 8006e1a:	3648      	adds	r6, #72	; 0x48
 8006e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	d503      	bpl.n	8006e2c <__sfp+0x28>
 8006e24:	6833      	ldr	r3, [r6, #0]
 8006e26:	b30b      	cbz	r3, 8006e6c <__sfp+0x68>
 8006e28:	6836      	ldr	r6, [r6, #0]
 8006e2a:	e7f7      	b.n	8006e1c <__sfp+0x18>
 8006e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e30:	b9d5      	cbnz	r5, 8006e68 <__sfp+0x64>
 8006e32:	4b16      	ldr	r3, [pc, #88]	; (8006e8c <__sfp+0x88>)
 8006e34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e38:	60e3      	str	r3, [r4, #12]
 8006e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e3c:	f7ff fc08 	bl	8006650 <__retarget_lock_init_recursive>
 8006e40:	f7ff ff96 	bl	8006d70 <__sfp_lock_release>
 8006e44:	2208      	movs	r2, #8
 8006e46:	4629      	mov	r1, r5
 8006e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e50:	6025      	str	r5, [r4, #0]
 8006e52:	61a5      	str	r5, [r4, #24]
 8006e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e58:	f7fd fabe 	bl	80043d8 <memset>
 8006e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e64:	4620      	mov	r0, r4
 8006e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e68:	3468      	adds	r4, #104	; 0x68
 8006e6a:	e7d9      	b.n	8006e20 <__sfp+0x1c>
 8006e6c:	2104      	movs	r1, #4
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f7ff ff62 	bl	8006d38 <__sfmoreglue>
 8006e74:	4604      	mov	r4, r0
 8006e76:	6030      	str	r0, [r6, #0]
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d1d5      	bne.n	8006e28 <__sfp+0x24>
 8006e7c:	f7ff ff78 	bl	8006d70 <__sfp_lock_release>
 8006e80:	230c      	movs	r3, #12
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	e7ee      	b.n	8006e64 <__sfp+0x60>
 8006e86:	bf00      	nop
 8006e88:	08007224 	.word	0x08007224
 8006e8c:	ffff0001 	.word	0xffff0001

08006e90 <_fwalk_reent>:
 8006e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e94:	4606      	mov	r6, r0
 8006e96:	4688      	mov	r8, r1
 8006e98:	2700      	movs	r7, #0
 8006e9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ea6:	d505      	bpl.n	8006eb4 <_fwalk_reent+0x24>
 8006ea8:	6824      	ldr	r4, [r4, #0]
 8006eaa:	2c00      	cmp	r4, #0
 8006eac:	d1f7      	bne.n	8006e9e <_fwalk_reent+0xe>
 8006eae:	4638      	mov	r0, r7
 8006eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb4:	89ab      	ldrh	r3, [r5, #12]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d907      	bls.n	8006eca <_fwalk_reent+0x3a>
 8006eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	d003      	beq.n	8006eca <_fwalk_reent+0x3a>
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	47c0      	blx	r8
 8006ec8:	4307      	orrs	r7, r0
 8006eca:	3568      	adds	r5, #104	; 0x68
 8006ecc:	e7e9      	b.n	8006ea2 <_fwalk_reent+0x12>

08006ece <__swhatbuf_r>:
 8006ece:	b570      	push	{r4, r5, r6, lr}
 8006ed0:	460e      	mov	r6, r1
 8006ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed6:	4614      	mov	r4, r2
 8006ed8:	2900      	cmp	r1, #0
 8006eda:	461d      	mov	r5, r3
 8006edc:	b096      	sub	sp, #88	; 0x58
 8006ede:	da08      	bge.n	8006ef2 <__swhatbuf_r+0x24>
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ee6:	602a      	str	r2, [r5, #0]
 8006ee8:	061a      	lsls	r2, r3, #24
 8006eea:	d410      	bmi.n	8006f0e <__swhatbuf_r+0x40>
 8006eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ef0:	e00e      	b.n	8006f10 <__swhatbuf_r+0x42>
 8006ef2:	466a      	mov	r2, sp
 8006ef4:	f000 f902 	bl	80070fc <_fstat_r>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	dbf1      	blt.n	8006ee0 <__swhatbuf_r+0x12>
 8006efc:	9a01      	ldr	r2, [sp, #4]
 8006efe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f06:	425a      	negs	r2, r3
 8006f08:	415a      	adcs	r2, r3
 8006f0a:	602a      	str	r2, [r5, #0]
 8006f0c:	e7ee      	b.n	8006eec <__swhatbuf_r+0x1e>
 8006f0e:	2340      	movs	r3, #64	; 0x40
 8006f10:	2000      	movs	r0, #0
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	b016      	add	sp, #88	; 0x58
 8006f16:	bd70      	pop	{r4, r5, r6, pc}

08006f18 <__smakebuf_r>:
 8006f18:	898b      	ldrh	r3, [r1, #12]
 8006f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f1c:	079d      	lsls	r5, r3, #30
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	d507      	bpl.n	8006f34 <__smakebuf_r+0x1c>
 8006f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	6163      	str	r3, [r4, #20]
 8006f30:	b002      	add	sp, #8
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	466a      	mov	r2, sp
 8006f36:	ab01      	add	r3, sp, #4
 8006f38:	f7ff ffc9 	bl	8006ece <__swhatbuf_r>
 8006f3c:	9900      	ldr	r1, [sp, #0]
 8006f3e:	4605      	mov	r5, r0
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7fd fab9 	bl	80044b8 <_malloc_r>
 8006f46:	b948      	cbnz	r0, 8006f5c <__smakebuf_r+0x44>
 8006f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4c:	059a      	lsls	r2, r3, #22
 8006f4e:	d4ef      	bmi.n	8006f30 <__smakebuf_r+0x18>
 8006f50:	f023 0303 	bic.w	r3, r3, #3
 8006f54:	f043 0302 	orr.w	r3, r3, #2
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	e7e3      	b.n	8006f24 <__smakebuf_r+0xc>
 8006f5c:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <__smakebuf_r+0x7c>)
 8006f5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	6020      	str	r0, [r4, #0]
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	9b00      	ldr	r3, [sp, #0]
 8006f6c:	6120      	str	r0, [r4, #16]
 8006f6e:	6163      	str	r3, [r4, #20]
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	b15b      	cbz	r3, 8006f8c <__smakebuf_r+0x74>
 8006f74:	4630      	mov	r0, r6
 8006f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f7a:	f000 f8d1 	bl	8007120 <_isatty_r>
 8006f7e:	b128      	cbz	r0, 8006f8c <__smakebuf_r+0x74>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f023 0303 	bic.w	r3, r3, #3
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	89a0      	ldrh	r0, [r4, #12]
 8006f8e:	4305      	orrs	r5, r0
 8006f90:	81a5      	strh	r5, [r4, #12]
 8006f92:	e7cd      	b.n	8006f30 <__smakebuf_r+0x18>
 8006f94:	08006d2d 	.word	0x08006d2d

08006f98 <_malloc_usable_size_r>:
 8006f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9c:	1f18      	subs	r0, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bfbc      	itt	lt
 8006fa2:	580b      	ldrlt	r3, [r1, r0]
 8006fa4:	18c0      	addlt	r0, r0, r3
 8006fa6:	4770      	bx	lr

08006fa8 <_raise_r>:
 8006fa8:	291f      	cmp	r1, #31
 8006faa:	b538      	push	{r3, r4, r5, lr}
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	d904      	bls.n	8006fbc <_raise_r+0x14>
 8006fb2:	2316      	movs	r3, #22
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006fbe:	b112      	cbz	r2, 8006fc6 <_raise_r+0x1e>
 8006fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fc4:	b94b      	cbnz	r3, 8006fda <_raise_r+0x32>
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f830 	bl	800702c <_getpid_r>
 8006fcc:	462a      	mov	r2, r5
 8006fce:	4601      	mov	r1, r0
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fd6:	f000 b817 	b.w	8007008 <_kill_r>
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d00a      	beq.n	8006ff4 <_raise_r+0x4c>
 8006fde:	1c59      	adds	r1, r3, #1
 8006fe0:	d103      	bne.n	8006fea <_raise_r+0x42>
 8006fe2:	2316      	movs	r3, #22
 8006fe4:	6003      	str	r3, [r0, #0]
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	e7e7      	b.n	8006fba <_raise_r+0x12>
 8006fea:	2400      	movs	r4, #0
 8006fec:	4628      	mov	r0, r5
 8006fee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ff2:	4798      	blx	r3
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	e7e0      	b.n	8006fba <_raise_r+0x12>

08006ff8 <raise>:
 8006ff8:	4b02      	ldr	r3, [pc, #8]	; (8007004 <raise+0xc>)
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	f7ff bfd3 	b.w	8006fa8 <_raise_r>
 8007002:	bf00      	nop
 8007004:	2000000c 	.word	0x2000000c

08007008 <_kill_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	2300      	movs	r3, #0
 800700c:	4d06      	ldr	r5, [pc, #24]	; (8007028 <_kill_r+0x20>)
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	4611      	mov	r1, r2
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	f7fa fdd9 	bl	8001bcc <_kill>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d102      	bne.n	8007024 <_kill_r+0x1c>
 800701e:	682b      	ldr	r3, [r5, #0]
 8007020:	b103      	cbz	r3, 8007024 <_kill_r+0x1c>
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	bd38      	pop	{r3, r4, r5, pc}
 8007026:	bf00      	nop
 8007028:	20000470 	.word	0x20000470

0800702c <_getpid_r>:
 800702c:	f7fa bdc7 	b.w	8001bbe <_getpid>

08007030 <__sread>:
 8007030:	b510      	push	{r4, lr}
 8007032:	460c      	mov	r4, r1
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	f000 f894 	bl	8007164 <_read_r>
 800703c:	2800      	cmp	r0, #0
 800703e:	bfab      	itete	ge
 8007040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007042:	89a3      	ldrhlt	r3, [r4, #12]
 8007044:	181b      	addge	r3, r3, r0
 8007046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800704a:	bfac      	ite	ge
 800704c:	6563      	strge	r3, [r4, #84]	; 0x54
 800704e:	81a3      	strhlt	r3, [r4, #12]
 8007050:	bd10      	pop	{r4, pc}

08007052 <__swrite>:
 8007052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	461f      	mov	r7, r3
 8007058:	898b      	ldrh	r3, [r1, #12]
 800705a:	4605      	mov	r5, r0
 800705c:	05db      	lsls	r3, r3, #23
 800705e:	460c      	mov	r4, r1
 8007060:	4616      	mov	r6, r2
 8007062:	d505      	bpl.n	8007070 <__swrite+0x1e>
 8007064:	2302      	movs	r3, #2
 8007066:	2200      	movs	r2, #0
 8007068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706c:	f000 f868 	bl	8007140 <_lseek_r>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	4632      	mov	r2, r6
 8007074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	4628      	mov	r0, r5
 800707c:	463b      	mov	r3, r7
 800707e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007086:	f000 b817 	b.w	80070b8 <_write_r>

0800708a <__sseek>:
 800708a:	b510      	push	{r4, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 f855 	bl	8007140 <_lseek_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	bf15      	itete	ne
 800709c:	6560      	strne	r0, [r4, #84]	; 0x54
 800709e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070a6:	81a3      	strheq	r3, [r4, #12]
 80070a8:	bf18      	it	ne
 80070aa:	81a3      	strhne	r3, [r4, #12]
 80070ac:	bd10      	pop	{r4, pc}

080070ae <__sclose>:
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 b813 	b.w	80070dc <_close_r>
	...

080070b8 <_write_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	2200      	movs	r2, #0
 80070c2:	4d05      	ldr	r5, [pc, #20]	; (80070d8 <_write_r+0x20>)
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fa fdb7 	bl	8001c3a <_write>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_write_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_write_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000470 	.word	0x20000470

080070dc <_close_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	2300      	movs	r3, #0
 80070e0:	4d05      	ldr	r5, [pc, #20]	; (80070f8 <_close_r+0x1c>)
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7fa fdc3 	bl	8001c72 <_close>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_close_r+0x1a>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_close_r+0x1a>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20000470 	.word	0x20000470

080070fc <_fstat_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	2300      	movs	r3, #0
 8007100:	4d06      	ldr	r5, [pc, #24]	; (800711c <_fstat_r+0x20>)
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	4611      	mov	r1, r2
 8007108:	602b      	str	r3, [r5, #0]
 800710a:	f7fa fdbd 	bl	8001c88 <_fstat>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	d102      	bne.n	8007118 <_fstat_r+0x1c>
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	b103      	cbz	r3, 8007118 <_fstat_r+0x1c>
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	bd38      	pop	{r3, r4, r5, pc}
 800711a:	bf00      	nop
 800711c:	20000470 	.word	0x20000470

08007120 <_isatty_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	2300      	movs	r3, #0
 8007124:	4d05      	ldr	r5, [pc, #20]	; (800713c <_isatty_r+0x1c>)
 8007126:	4604      	mov	r4, r0
 8007128:	4608      	mov	r0, r1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7fa fdbb 	bl	8001ca6 <_isatty>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_isatty_r+0x1a>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_isatty_r+0x1a>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20000470 	.word	0x20000470

08007140 <_lseek_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	2200      	movs	r2, #0
 800714a:	4d05      	ldr	r5, [pc, #20]	; (8007160 <_lseek_r+0x20>)
 800714c:	602a      	str	r2, [r5, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	f7fa fdb3 	bl	8001cba <_lseek>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_lseek_r+0x1e>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_lseek_r+0x1e>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20000470 	.word	0x20000470

08007164 <_read_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	2200      	movs	r2, #0
 800716e:	4d05      	ldr	r5, [pc, #20]	; (8007184 <_read_r+0x20>)
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	f7fa fd44 	bl	8001c00 <_read>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_read_r+0x1e>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_read_r+0x1e>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	20000470 	.word	0x20000470

08007188 <_init>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	bf00      	nop
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr

08007194 <_fini>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	bf00      	nop
 8007198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719a:	bc08      	pop	{r3}
 800719c:	469e      	mov	lr, r3
 800719e:	4770      	bx	lr
